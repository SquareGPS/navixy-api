openapi: 3.1.0
info:
  title: Navixy Repository API
  contact:
    name: Navixy support
    url: https://www.navixy.com/contact/
    email: support@navixy.com
  version: V0 API (MVP)
externalDocs:
  description: Find more info here
  url: https://developers.navixy.com/
servers:
- url: http://localhost:8080
  description: localhost
tags:
- name: Inventories
  description: "Inventories are collections of devices used to organize and manage\
    \ equipment more efficiently. They serve as logical groupings that help structure,\
    \ track, and operate devices"
- name: Assets
  description: "Assets represent individual real-world objects stored in the system,\
    \ such as a specific vehicle or person, and geospatial objects, such as a POI\
    \ or geofence"
- name: Inventory Items
  description: "Inventory Items are individual devices or components that belong to\
    \ an Inventory. Each item represents a physical unit, such as a tracker or accessory,\
    \ used to manage and operate an organization's equipment"
- name: Asset Links
  description: "Collections of assets used to organize and manage equipment more efficiently.\
    \ They serve as logical groupings that help structure, track, and operate assets"
- name: Asset Types
  description: Describes the structure for each asset
paths:
  /v0/inventory_item/slave/update:
    post:
      tags:
      - Inventory Items
      summary: Update an existing slave item
      description: Updates the information of an existing slave item
      operationId: updateSlave
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SlaveItemUpdateRequest"
        required: true
      responses:
        "204":
          description: Inventory item successfully updated (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory_item/slave/pair:
    post:
      tags:
      - Inventory Items
      summary: Pair a slave with an master item
      description: "Pairs a slave device with a master device within the organization's\
        \ inventory system. Used to establish logical associations between devices\
        \ (e.g., sensors with trackers). Both devices belong to the same organization\
        \ but may be located in different inventories."
      operationId: pairSlave
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SlaveItemPairRequest"
        required: true
      responses:
        "204":
          description: Inventory items successfully paired (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory_item/slave/list:
    get:
      tags:
      - Inventory Items
      summary: List slave items
      description: Returns all slave items available to the organization
      operationId: listSlave
      parameters:
      - name: q
        in: query
        description: A search query string
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: "Maximum number of items to return (default: 100, max: 1000)"
        required: false
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        description: "The index of the first item to return (default: 0)"
        required: false
        schema:
          type: integer
          format: int32
      - name: sort
        in: query
        description: "Sort expression. Supports one or more fields, optionally prefixed\
          \ with `-` to indicate descending order. For example, `title,-created_at`"
        required: false
        schema:
          type: string
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List of inventory items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventorySlaveItem"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
      - Inventory Items
      summary: List slave items with advanced filtering
      description: Returns all slave items available to the organization with advanced
        filtering options
      operationId: listSlavePost
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRequest"
        required: true
      responses:
        "200":
          description: List of inventory items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventorySlaveItem"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory_item/slave/delete:
    post:
      tags:
      - Inventory Items
      summary: Delete an slave item
      description: Deletes the specified slave item by its ID
      operationId: deleteSlave
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdRequest"
        required: true
      responses:
        "204":
          description: Inventory item successfully deleted (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory_item/slave/create:
    post:
      tags:
      - Inventory Items
      summary: Create a new slave item
      description: Adds an slave item for the organization
      operationId: createSlave
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SlaveItemCreateRequest"
        required: true
      responses:
        "200":
          description: Inventory item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory_item/master/update:
    post:
      tags:
      - Inventory Items
      summary: Update an existing master item
      description: Updates the information of an existing master item
      operationId: updateMaster
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterItemUpdateRequest"
        required: true
      responses:
        "204":
          description: Inventory item successfully updated (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory_item/master/list:
    get:
      tags:
      - Inventory Items
      summary: List master items
      description: Returns all master items available to the organization
      operationId: listMaster
      parameters:
      - name: q
        in: query
        description: A search query string
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: "Maximum number of items to return (default: 100, max: 1000)"
        required: false
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        description: "The index of the first item to return (default: 0)"
        required: false
        schema:
          type: integer
          format: int32
      - name: sort
        in: query
        description: "Sort expression. Supports one or more fields, optionally prefixed\
          \ with `-` to indicate descending order. For example, `title,-created_at`"
        required: false
        schema:
          type: string
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List of inventory items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryMasterItem"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
      - Inventory Items
      summary: List master items with advanced filtering
      description: Returns all master items available to the organization with advanced
        filtering options
      operationId: listMasterPost
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRequest"
        required: true
      responses:
        "200":
          description: List of inventory items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryMasterItem"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory_item/master/create:
    post:
      tags:
      - Inventory Items
      summary: Create a new master item
      description: Adds an master item for the organization
      operationId: createMaster
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterItemCreateRequest"
        required: true
      responses:
        "200":
          description: Inventory item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory_item/master/archive:
    post:
      tags:
      - Inventory Items
      summary: Archive an master item
      description: Marks an inventory item as deleted without permanently removing
        it from the system. This soft delete approach allows recovery of inventory
        item’s data upon request to support
      operationId: archiveMaster
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdRequest"
        required: true
      responses:
        "204":
          description: Inventory item successfully archived (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory_item/master/activate:
    post:
      tags:
      - Inventory Items
      summary: Activate an master item
      description: "Activates a created master device using a unique identifier. The\
        \ device must be preconfigured and may exist either in the organization's\
        \ inventory or in a dealer's inventory. Upon activation, the device is assigned\
        \ to the organization"
      operationId: activateMaster
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterItemActivateRequest"
        required: true
      responses:
        "204":
          description: Inventory item successfully activated (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory/update:
    post:
      tags:
      - Inventories
      summary: Update an existing inventory
      description: Updates the information of an existing inventory
      operationId: updateInventory
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryUpdateRequest"
        required: true
      responses:
        "204":
          description: Inventory successfully updated (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Inventory not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory/list:
    get:
      tags:
      - Inventories
      summary: List inventories
      description: Returns all inventories available to the organization
      operationId: listInventories
      parameters:
      - name: q
        in: query
        description: A search query string
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: "Maximum number of items to return (default: 100, max: 1000)"
        required: false
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        description: "The index of the first item to return (default: 0)"
        required: false
        schema:
          type: integer
          format: int32
      - name: sort
        in: query
        description: "Sort expression. Supports one or more fields, optionally prefixed\
          \ with `-` to indicate descending order. For example, `title,-created_at`"
        required: false
        schema:
          type: string
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List of inventories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
      - Inventories
      summary: List inventories with advanced filtering
      description: Returns all inventories available to the organization with advanced
        filtering options
      operationId: listInventoriesPost
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRequest"
        required: true
      responses:
        "200":
          description: List of inventories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory/delete:
    post:
      tags:
      - Inventories
      summary: Delete an inventory
      description: Deletes the specified inventory by its ID
      operationId: deleteInventory
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRequest"
        required: true
      responses:
        "204":
          description: Inventory successfully deleted (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Inventory not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory/create:
    post:
      tags:
      - Inventories
      summary: Create a new inventory
      description: Adds a new inventory for the organization
      operationId: createInventory
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryCreateRequest"
        required: true
      responses:
        "200":
          description: Inventory created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset_type/update:
    post:
      tags:
      - Asset Types
      summary: Update an asset type
      description: Updates the properties and structure of an existing asset type
      operationId: updateAssetType
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetTypeUpdateRequest"
        required: true
      responses:
        "204":
          description: Asset type successfully updated (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Asset type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset_type/list:
    get:
      tags:
      - Asset Types
      summary: List asset types
      description: Returns all asset types from an organization
      operationId: listAssetTypes
      parameters:
      - name: q
        in: query
        description: A search query string
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: "Maximum number of items to return (default: 100, max: 1000)"
        required: false
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        description: "The index of the first item to return (default: 0)"
        required: false
        schema:
          type: integer
          format: int32
      - name: sort
        in: query
        description: "Sort expression. Supports one or more fields, optionally prefixed\
          \ with `-` to indicate descending order. For example, `title,-created_at`"
        required: false
        schema:
          type: string
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List of asset types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetType"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
      - Asset Types
      summary: List asset types with advanced filtering
      description: Returns all asset types from an organization with advanced filtering
        options
      operationId: listAssetTypesPost
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRequest"
        required: true
      responses:
        "200":
          description: List of asset types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetType"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset_type/delete:
    post:
      tags:
      - Asset Types
      summary: Delete an asset type
      description: Deletes the specified asset type by its ID
      operationId: deleteAssetType
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRequest"
        required: true
      responses:
        "204":
          description: Asset type successfully deleted (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset_type/create:
    post:
      tags:
      - Asset Types
      summary: Create a new asset type
      description: Adds new entity type
      operationId: createAssetType
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetTypeCreateRequest"
        required: true
      responses:
        "200":
          description: Asset type created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset_link/update:
    post:
      tags:
      - Asset Links
      summary: Update an existing link
      description: Updates the information of an existing asset link
      operationId: updateAssetLink
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetLinkUpdateRequest"
        required: true
      responses:
        "204":
          description: Link successfully updated (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Link not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset_link/set:
    post:
      tags:
      - Asset Links
      operationId: setAssetLink
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetLinks2AssetRequest"
        required: true
      responses:
        "200":
          description: OK
          content: {}
  /v0/asset_link/remove:
    post:
      tags:
      - Asset Links
      operationId: removeAssetLink
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetLinks2AssetRequest"
        required: true
      responses:
        "200":
          description: OK
          content: {}
  /v0/asset_link/list:
    get:
      tags:
      - Asset Links
      summary: List links
      description: Returns all asset links available to the organization
      operationId: listAssetLinks
      parameters:
      - name: q
        in: query
        description: A search query string
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: "Maximum number of items to return (default: 100, max: 1000)"
        required: false
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        description: "The index of the first item to return (default: 0)"
        required: false
        schema:
          type: integer
          format: int32
      - name: sort
        in: query
        description: "Sort expression. Supports one or more fields, optionally prefixed\
          \ with `-` to indicate descending order. For example, `title,-created_at`"
        required: false
        schema:
          type: string
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List of links
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetLink"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
      - Asset Links
      summary: List links with advanced filtering
      description: Returns all asset links available to the organization with advanced
        filtering options
      operationId: listAssetLinksPost
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRequest"
        required: true
      responses:
        "200":
          description: List of links
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetLink"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset_link/delete:
    post:
      tags:
      - Asset Links
      summary: Delete an link
      description: Deletes the specified asset link by its ID
      operationId: deleteAssetLink
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdRequest"
        required: true
      responses:
        "204":
          description: Link successfully deleted (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Link not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset_link/create:
    post:
      tags:
      - Asset Links
      summary: Create a new link
      description: Adds a new asset link for the organization
      operationId: createAssetLink
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetLinkCreateRequest"
        required: true
      responses:
        "200":
          description: Link created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset/update:
    post:
      tags:
      - Assets
      summary: Update an existing asset
      description: Updates the information of an existing asset
      operationId: updateAsset
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetUpdateRequest"
        required: true
      responses:
        "204":
          description: Asset successfully updated (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset/list:
    get:
      tags:
      - Assets
      summary: List assets
      description: Returns all assets available to the organization
      operationId: listAssets
      parameters:
      - name: q
        in: query
        description: A search query string
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: "Maximum number of items to return (default: 100, max: 1000)"
        required: true
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        description: "The index of the first item to return (default: 0)"
        required: true
        schema:
          type: integer
          format: int32
      - name: sort
        in: query
        description: "Sort expression. Supports one or more fields, optionally prefixed\
          \ with `-` to indicate descending order. For example, `title,-created_at`"
        required: true
        schema:
          type: string
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List of assets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
      - Assets
      summary: List assets with advanced filtering
      description: Returns all assets available to the organization with advanced
        filtering options
      operationId: listAssetsPost
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRequest"
        required: true
      responses:
        "200":
          description: List of assets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset/delete:
    post:
      tags:
      - Assets
      summary: Delete an asset
      description: Deletes the specified asset by its ID
      operationId: deleteAsset
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdRequest"
        required: true
      responses:
        "204":
          description: Asset successfully deleted (No Content)
          content: {}
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset/create:
    post:
      tags:
      - Assets
      summary: Create a new asset
      description: Adds an asset for the organization
      operationId: createAsset
      parameters:
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetCreateRequest"
        required: true
      responses:
        "200":
          description: Asset created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory_item/slave/read:
    get:
      tags:
      - Inventory Items
      summary: Get slave item by ID
      description: Returns an slave item's data by ID
      operationId: readSlave
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Inventory item details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventorySlaveItem"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory_item/master/read:
    get:
      tags:
      - Inventory Items
      summary: Get master item by ID
      description: Returns an master item's data by ID
      operationId: readMaster
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Inventory item details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryMasterItem"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/inventory/read:
    get:
      tags:
      - Inventories
      summary: Get inventory by ID
      description: Returns an inventory's data by ID
      operationId: readInventory
      parameters:
      - name: id
        in: query
        description: Unique identifier for the inventory
        required: true
        schema:
          type: integer
          format: int64
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Inventory details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Inventory not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset_type/read:
    get:
      tags:
      - Asset Types
      summary: Get asset type by ID
      description: Returns an entity type by ID
      operationId: readAssetType
      parameters:
      - name: id
        in: query
        description: Unique identifier for the asset type
        required: true
        schema:
          type: integer
          format: int64
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Asset type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetType"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset_link/read:
    get:
      tags:
      - Asset Links
      summary: Get link by ID
      description: Returns an asset link's data by ID
      operationId: readAssetLink
      parameters:
      - name: id
        in: query
        description: Unique identifier for the link
        required: true
        schema:
          type: integer
          format: int64
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Link details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetLink"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Link not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v0/asset/read:
    get:
      tags:
      - Assets
      summary: Get asset by ID
      description: Returns an asset's data by ID
      operationId: readAsset
      parameters:
      - name: id
        in: query
        description: Unique identifier for the asset
        required: true
        schema:
          type: integer
          format: int64
      - name: orgId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Asset details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    ErrorResponse:
      properties:
        code:
          type: string
          description: Error code identifier
        message:
          type: string
          description: Human-readable error message
        correlation_id:
          type: string
          description: Unique identifier for correlating the error with server logs
        errors:
          type: array
          description: Detailed error information for specific parameters
          items:
            $ref: "#/components/schemas/ValidationError"
      required:
      - code
      - message
    ValidationError:
      description: Detailed error information for specific parameters
      properties:
        parameter:
          type: string
          description: The parameter that caused the error
        message:
          type: string
          description: Human-readable error message for this parameter
      required:
      - message
      - parameter
    SlaveItemUpdateRequest:
      description: Defines the request schema for `/inventory_item/slave/update`
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the slave item
          example: 321
        inventory_id:
          type: integer
          format: int64
          description: Unique identifier for the inventory
          example: 12
        label:
          type: string
          description: The inventory item label
          example: Fuel sensor TD-150
        master_id:
          type: integer
          format: int64
          description: Unique identifier for the master item
          example: 123
      required:
      - id
      - inventory_id
      - label
    SlaveItemPairRequest:
      description: Defines the request schema for `/inventory_item/slave/pair`
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the slave item
          example: 321
        master_id:
          type: integer
          format: int64
          description: Unique identifier for the master item
          example: 123
      required:
      - id
      - master_id
    InventorySlaveItem:
      description: The Inventory slave item
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the slave item
          example: 321
        inventory_id:
          type: integer
          format: int64
          description: Unique identifier for the inventory
          example: 12
        label:
          type: string
          description: The inventory item label
          example: Fuel sensor TD-150
        master_id:
          type: integer
          format: int64
          description: Unique identifier for the master item
          example: 123
      required:
      - id
      - inventory_id
      - label
    AndCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
    BetweenCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          field:
            type: string
          values:
            type: array
            items:
              type: object
            maxItems: 2
            minItems: 2
      required:
      - field
      - values
    CompoundCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          conditions:
            type: array
            items:
              oneOf:
              - $ref: "#/components/schemas/AndCondition"
              - $ref: "#/components/schemas/BetweenCondition"
              - $ref: "#/components/schemas/CompoundCondition"
              - $ref: "#/components/schemas/ContainsCondition"
              - $ref: "#/components/schemas/EqualsCondition"
              - $ref: "#/components/schemas/FieldCondition"
              - $ref: "#/components/schemas/GreaterThanCondition"
              - $ref: "#/components/schemas/GreaterThanOrEqualsCondition"
              - $ref: "#/components/schemas/InCondition"
              - $ref: "#/components/schemas/LessThanCondition"
              - $ref: "#/components/schemas/LessThanOrEqualsCondition"
              - $ref: "#/components/schemas/NotCondition"
              - $ref: "#/components/schemas/NotEqualsCondition"
              - $ref: "#/components/schemas/OrCondition"
            maxItems: 60
            minItems: 2
      required:
      - conditions
    Condition:
      description: "Represents an advanced filter condition for search queries. Supports\
        \ logical operators (AND, OR, NOT) and field-level comparisons (equality,\
        \ range, set membership, etc.). Conditions can be nested for complex expressions"
      discriminator:
        propertyName: type
      example:
        type: eq
        field: status
        value: active
      properties:
        type:
          type: string
      required:
      - type
    ContainsCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          field:
            type: string
          value:
            type: string
      required:
      - field
      - value
    EqualsCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          field:
            type: string
          value:
            type: object
      required:
      - field
      - value
    FieldCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          field:
            type: string
      required:
      - field
    GreaterThanCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          field:
            type: string
          value:
            type: object
      required:
      - field
      - value
    GreaterThanOrEqualsCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          field:
            type: string
          value:
            type: object
      required:
      - field
      - value
    InCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          field:
            type: string
          values:
            type: array
            items:
              type: object
      required:
      - field
      - values
    LessThanCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          field:
            type: string
          value:
            type: object
      required:
      - field
      - value
    LessThanOrEqualsCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          field:
            type: string
          value:
            type: object
      required:
      - field
      - value
    ListRequest:
      properties:
        q:
          type: string
          description: A search query string
        conditions:
          type: array
          description: "A list of additional filter conditions to apply to the search.\
            \ Supports various logical and comparison operators such as AND, OR, NOT,\
            \ equality, range, and set membership. Each condition specifies either\
            \ a field-level comparison or a combination of multiple conditions for\
            \ advanced filtering"
          items:
            oneOf:
            - $ref: "#/components/schemas/AndCondition"
            - $ref: "#/components/schemas/BetweenCondition"
            - $ref: "#/components/schemas/CompoundCondition"
            - $ref: "#/components/schemas/ContainsCondition"
            - $ref: "#/components/schemas/EqualsCondition"
            - $ref: "#/components/schemas/FieldCondition"
            - $ref: "#/components/schemas/GreaterThanCondition"
            - $ref: "#/components/schemas/GreaterThanOrEqualsCondition"
            - $ref: "#/components/schemas/InCondition"
            - $ref: "#/components/schemas/LessThanCondition"
            - $ref: "#/components/schemas/LessThanOrEqualsCondition"
            - $ref: "#/components/schemas/NotCondition"
            - $ref: "#/components/schemas/NotEqualsCondition"
            - $ref: "#/components/schemas/OrCondition"
        limit:
          type: integer
          format: int32
          description: "Maximum number of items to return (default: 100, max: 1000)"
        offset:
          type: integer
          format: int32
          description: "The index of the first item to return (default: 0)"
        sort:
          type: string
          description: "Sort expression. Supports one or more fields, optionally prefixed\
            \ with `-` to indicate descending order. For example, `title,-created_at`"
    NotCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          condition:
            $ref: "#/components/schemas/Condition"
      required:
      - condition
    NotEqualsCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
      - type: object
        properties:
          field:
            type: string
          value:
            type: object
      required:
      - field
      - value
    OrCondition:
      allOf:
      - $ref: "#/components/schemas/Condition"
    IdRequest:
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the recourse
      required:
      - id
    IdResponse:
      description: Response containing the unique identifier of the created resource
      example:
        id: 123
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the created resource
      required:
      - id
    SlaveItemCreateRequest:
      description: Defines the request schema for `/inventory_item/slave/create`
      properties:
        inventory_id:
          type: integer
          format: int64
          description: Unique identifier for the inventory
          example: 12
        label:
          type: string
          description: The inventory item label
          example: Fuel sensor TD-150
        master_id:
          type: integer
          format: int64
          description: Unique identifier for the master item
          example: 123
      required:
      - inventory_id
      - label
    MasterItemUpdateRequest:
      description: Defines the request schema for `/inventory_item/master/update`
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the master item
          example: 123
        inventory_id:
          type: integer
          format: int64
          description: Unique identifier for the inventory
          example: 12
        label:
          type: string
          description: The inventory item label
          example: GPS tracker FMC130-001
        asset_id:
          type: integer
          format: int64
          description: Unique asset identifier for linking
          example: 21
      required:
      - id
      - inventory_id
      - label
    InventoryMasterItem:
      description: The Inventory master item
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the master item
          example: 123
        inventory_id:
          type: integer
          format: int64
          description: Unique identifier for the inventory
          example: 12
        device_id:
          type: string
          description: The server uses a unique identifier assigned to the device
            to authenticate and distinguish incoming data from different devices
          example: "123456789012345"
        phone:
          type: string
          description: "The mobile phone number of the device’s SIM card, used to\
            \ send or receive SMS commands and data. Must be in E.164 format"
          example: "+12345678901"
        label:
          type: string
          description: The inventory item label
          example: GPS tracker FMC130-001
        model:
          type: string
          description: A code of one of the supported models. See inventory_item/models/list
          example: navixy_ngp
        asset_id:
          type: integer
          format: int64
          description: Unique asset identifier for linking
          example: 21
        created_at:
          type: string
          format: date-time
          description: Date and time at which the item was created
          example: 2025-06-30T06:46:10Z
      required:
      - created_at
      - device_id
      - id
      - inventory_id
      - label
      - model
    MasterItemCreateRequest:
      description: Defines the request schema for `/inventory_item/master/create`
      properties:
        inventory_id:
          type: integer
          format: int64
          description: Unique identifier for the inventory
          example: 12
        device_id:
          type: string
          description: The server uses a unique identifier assigned to the device
            to authenticate and distinguish incoming data from different devices
          example: "123456789012345"
        phone:
          type: string
          description: "The mobile phone number of the device’s SIM card, used to\
            \ send or receive SMS commands and data. Must be in E.164 format"
          example: "+12345678901"
        label:
          type: string
          description: The inventory item label
          example: GPS tracker FMC130-001
        model:
          type: string
          description: A code of one of the supported models. See inventory_item/models/list
          example: navixy_ngp
        asset_id:
          type: integer
          format: int64
          description: Unique asset identifier for linking
          example: 21
      required:
      - device_id
      - inventory_id
      - label
      - model
    MasterItemActivateRequest:
      description: Defines the request schema for `/inventory_item/master/activate`
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the master item
          example: 123
        device_id:
          type: string
          description: The server uses a unique identifier assigned to the device
            to authenticate and distinguish incoming data from different devices
          example: "123456789012345"
        model:
          type: string
          description: A code of one of the supported models. See inventory_item/models/list
          example: navixy_ngp
      required:
      - device_id
      - id
      - model
    InventoryUpdateRequest:
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the inventory
          example: 12
        label:
          type: string
          description: The inventory's label
          example: Dutch
        description:
          type: string
          description: The detailed inventory description
          example: Dutch branch office
      required:
      - description
      - id
      - label
    Inventory:
      description: The Inventory object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the inventory
          example: 12
        label:
          type: string
          description: The inventory's label
          example: Dutch
        description:
          type: string
          description: The detailed inventory description
          example: Dutch branch office
        created_at:
          type: string
          format: date-time
          description: Date and time at which the inventory was created
          example: 2025-06-30T06:46:10Z
      required:
      - created_at
      - id
      - label
    DeleteRequest:
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the resource to delete
          example: 42
        force:
          type: boolean
          description: "If true, forces deletion even if the resource has related\
            \ objects or dependencies"
      required:
      - force
      - id
    InventoryCreateRequest:
      properties:
        label:
          type: string
          description: The inventory's label
          example: Dutch
        description:
          type: string
          description: The detailed inventory description
          example: Dutch branch office
      required:
      - description
      - label
    AssetSettings:
      description: Describes the layout of sections and fields for the entity type
      properties:
        layout:
          $ref: "#/components/schemas/Layout"
    AssetTypeUpdateRequest:
      description: Defines the request schema for `/asset_type/update`
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the asset type
          example: 12
        label:
          type: string
          description: The asset type label
          example: Boats
        category:
          type: string
          description: The category of asset type
          enum:
          - business
          - geo
        settings:
          $ref: "#/components/schemas/AssetSettings"
        fields:
          type: array
          description: A list of custom fields of the asset type
          example:
          - type: text
            label: Text field
            required: true
          - type: decimal
            label: Number field
            required: false
          items:
            $ref: "#/components/schemas/CustomField"
      required:
      - category
      - fields
      - id
      - label
      - settings
    CustomField:
      description: "Used to add custom information to assets, allowing for enhanced\
        \ customization and data management"
      discriminator:
        propertyName: type
      example:
        type: text
        label: Text field
        required: true
      oneOf:
      - $ref: "#/components/schemas/TextField"
      - $ref: "#/components/schemas/DecimalField"
      - $ref: "#/components/schemas/GeoJsonField"
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        required:
          type: boolean
        description:
          type: string
        type:
          type: string
          enum:
          - text
          - decimal
          - geojson
      required:
      - label
      - required
      - type
    DecimalField:
      allOf:
      - $ref: "#/components/schemas/CustomField"
      required:
      - label
      - required
      - type
    GeoJsonField:
      allOf:
      - $ref: "#/components/schemas/CustomField"
      required:
      - label
      - required
      - type
    Layout:
      description: "Defines how the asset form is split into logical sections, and\
        \ the order of fields within each section"
      properties:
        sections:
          type: array
          items:
            $ref: "#/components/schemas/Section"
          maxItems: 64
          minItems: 0
      required:
      - sections
    Section:
      description: "Describes a logical section in the asset form, including its label\
        \ and the list of fields to display in order"
      properties:
        label:
          type: string
          description: Section title as shown in the form UI
          example: "Section #1"
        fields:
          type: array
          description: List of field keys to be displayed in the specified order within
            this section
          example:
          - label
          - Text field
          - "131212"
          - description
          items:
            type: string
            description: List of field keys to be displayed in the specified order
              within this section
            example: "[\"label\",\"Text field\",\"131212\",\"description\"]"
          maxItems: 64
          minItems: 0
      required:
      - fields
      - label
    TextField:
      allOf:
      - $ref: "#/components/schemas/CustomField"
      required:
      - label
      - required
      - type
    AssetType:
      description: The Asset type
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the asset type
          example: 12
        label:
          type: string
          description: The asset type label
          example: Boats
        category:
          type: string
          description: The category of asset type
          enum:
          - business
          - geo
        settings:
          $ref: "#/components/schemas/AssetSettings"
        fields:
          type: array
          description: A list of custom fields of the asset type
          example:
          - type: text
            label: Text field
            required: true
          - type: decimal
            label: Number field
            required: false
          items:
            $ref: "#/components/schemas/CustomField"
        created_at:
          type: string
          format: date-time
          description: Date and time at which the asset type was created
          example: 2025-06-30T06:46:10Z
      required:
      - category
      - created_at
      - fields
      - id
      - label
    AssetTypeCreateRequest:
      description: Defines the request schema for `/asset_type/create`
      properties:
        label:
          type: string
          description: The asset type label
          example: Boats
        category:
          type: string
          description: The category of asset type
          enum:
          - business
          - geo
        settings:
          $ref: "#/components/schemas/AssetSettings"
        fields:
          type: array
          description: A list of custom fields of the asset type
          example:
          - type: text
            label: Text field
            required: true
          - type: decimal
            label: Number field
            required: false
          items:
            $ref: "#/components/schemas/CustomField"
      required:
      - category
      - fields
      - label
      - settings
    AssetLinkUpdateRequest:
      description: Defines the request schema for `/asset_link/update`
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the asset link
          example: 12
        label:
          type: string
          description: The asset link label
          example: Boston boats
        asset_ids:
          type: array
          description: The assets of this link
          items:
            type: integer
            format: int64
            description: The assets of this link
      required:
      - id
      - label
    AssetLinks2AssetRequest:
      description: Defines the request schema for `/asset_link/set` and `/asset_link/remove`
      properties:
        link_id:
          type: integer
          format: int64
          description: Unique identifier for the asset link
          example: 12
        asset_id:
          type: integer
          format: int64
          description: Unique identifier for the asset
          example: 21
      required:
      - asset_id
      - link_id
    AssetLink:
      description: The Asset link
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the asset link
          example: 12
        label:
          type: string
          description: The asset link label
          example: Boston boats
        asset_ids:
          type: array
          description: The assets of this link
          items:
            type: integer
            format: int64
            description: The assets of this link
        created_at:
          type: string
          format: date-time
          description: Date and time at which the asset link was created
          example: 2025-06-30T06:46:10Z
      required:
      - asset_ids
      - created_at
      - id
      - label
    AssetLinkCreateRequest:
      description: Defines the request schema for `/asset_link/create`
      properties:
        label:
          type: string
          description: The asset link label
          example: Boston boats
        asset_ids:
          type: array
          description: The assets of this link
          items:
            type: integer
            format: int64
            description: The assets of this link
      required:
      - asset_ids
      - label
    AssetUpdateRequest:
      description: Defines the request schema for `/asset/update`
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the asset
          example: 21
        label:
          type: string
          description: The asset’s title/name
          example: Aspen V6 GTX
        fields:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CustomFieldValue"
          default: {}
          description: "A map, each key of which is a custom field ID as a string"
          example:
            "131312":
              type: text
              value: I love text!
      required:
      - fields
      - id
      - label
    CustomFieldValue:
      description: "Base type for custom field values. Implements different field\
        \ types: text, numeric (decimal), GeoJSON. Each object contains a 'type' field\
        \ that defines the specific value format. "
      discriminator:
        propertyName: type
      example:
        type: text
        value: Example text
      oneOf:
      - $ref: "#/components/schemas/TextFieldValue"
      - $ref: "#/components/schemas/DecimalFieldValue"
      - $ref: "#/components/schemas/GeoJsonFieldValue"
      properties:
        type:
          type: string
          enum:
          - text
          - decimal
          - geojson
      required:
      - type
    DecimalFieldValue:
      allOf:
      - $ref: "#/components/schemas/CustomFieldValue"
      - type: object
        properties:
          value:
            type: number
            format: double
      required:
      - type
      - value
    GeoJsonFieldValue:
      allOf:
      - $ref: "#/components/schemas/CustomFieldValue"
      - type: object
        properties:
          value:
            type: string
      required:
      - type
      - value
    TextFieldValue:
      allOf:
      - $ref: "#/components/schemas/CustomFieldValue"
      - type: object
        properties:
          value:
            type: string
      required:
      - type
      - value
    Asset:
      description: The Asset object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the asset
          example: 21
        type_id:
          type: integer
          format: int64
          description: Unique identifier for the asset's type
          example: 12
        label:
          type: string
          description: The asset’s title/name
          example: Aspen V6 GTX
        fields:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CustomFieldValue"
          description: "A map, each key of which is a custom field ID as a string"
          example:
            "131312":
              type: text
              value: I love text!
        created_at:
          type: string
          format: date-time
          description: Date and time at which the asset was created
          example: 2025-06-30T06:46:10Z
      required:
      - created_at
      - fields
      - id
      - label
      - type_id
    AssetCreateRequest:
      description: Defines the request schema for `/asset/create`
      properties:
        type_id:
          type: integer
          format: int64
          description: Unique identifier for the asset's type
          example: 12
        label:
          type: string
          description: The asset’s title/name
          example: Aspen V6 GTX
        fields:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CustomFieldValue"
          default: {}
          description: "A map, each key of which is a custom field ID as a string"
          example:
            "131312":
              type: text
              value: I love text!
      required:
      - fields
      - label
      - type_id
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: http://localhost:8180/realms/users/protocol/openid-connect/token
          scopes: {}
        authorizationCode:
          authorizationUrl: http://localhost:8180/realms/users/protocol/openid-connect/auth
          tokenUrl: http://localhost:8180/realms/users/protocol/openid-connect/token
          refreshUrl: http://localhost:8180/realms/users/protocol/openid-connect/token
          scopes: {}
