{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\.]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"backend-api/getting-started/authentication/","text":"To interact with the Navixy API, you need an API key hash, which is essential for authenticating your requests. Follow these steps to obtain the hash. Steps to Obtain an API Key Hash \u00b6 Obtaining an API Key from User Interface \u00b6 Login to the Web Interface : Access the Navixy user interface via the web Use your credentials to log in Navigate to the API Key Section : Once logged in, go to the Settings menu. Find the API Keys section, typically located under Account Settings or Security . Generate a New API Key : Click on the Generate New API Key button. Provide a name for the API key to easily identify it later. Select the permissions and scope for the key based on your needs. Click Generate . Copy the API Key Hash : Once the key is generated, you will see the API key hash. Copy this hash and store it securely. You will use this hash in your API requests. Obtaining User Key via Authentication Call \u00b6 To authenticate and obtain a user key through the Navixy API, use the user/auth call. This section provides a detailed guide on how to make this API call, including example requests and expected responses. Endpoint \u00b6 POST /user/auth Parameters \u00b6 login (string, required): The user's login name. password (string, required): The user's password. app_key (string, optional): The application key for additional security. Request Example \u00b6 HTTP POST Example with JSON $ curl -X POST 'https://api.navixy.com/v2/user/auth' \\ -H 'Content-Type: application/json' \\ -d '{ \"login\": \"user@example.com\", \"password\": \"user_password\" }' HTTP POST Example with Form Data $ curl -X POST 'https://api.navixy.com/v2/user/auth' \\ -d 'login=user@example.com' \\ -d 'password=user_password' Response \u00b6 Successful Response { \"success\" : true , \"hash\" : \"a6aa75587e5c59c32d347da438505fc3\" , \"user\" : { \"id\" : 12345 , \"login\" : \"user@example.com\" , \"name\" : \"John Doe\" } } success (boolean): Indicates if the authentication was successful hash (string): The API key hash to be used in subsequent API calls user (object): Contains user details id (integer): The user ID login (string): The user's login name name (string): The user's full name Error Response { \"success\" : false , \"status\" : { \"code\" : 2 , \"description\" : \"Service Auth error\" } } success (boolean): Indicates if the authentication failed status (object): Contains error details code (integer): The error code description (string): A description of the error Using the API Key Hash \u00b6 Including the API Key Hash in Requests \u00b6 To authenticate your requests to the Navixy API, include the API key hash in one of the following ways: As a Query Parameter : Append the hash to your API request URL https://api.navixy.com/v2/resource/action?hash = your_api_key_hash As a Request Header : Include the hash in the Authorization header Authorization: NVX your_api_key_hash In the Request Body : Include the hash in the JSON body of your request { \"hash\" : \"your_api_key_hash\" , \"param1\" : \"value1\" } Example Requests \u00b6 HTTP GET Example \u00b6 $ curl 'https://api.navixy.com/v2/resource/action?hash=your_api_key_hash' HTTP POST Example with JSON \u00b6 $ curl -X POST 'https://api.navixy.com/v2/resource/action' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"your_api_key_hash\", \"param1\": \"value1\" }' Best Practices for API Key Security \u00b6 Store securely : Always store your API keys securely and do not expose them in your codebase or version control. Restrict permissions : Limit the permissions of the API key to only what is necessary for your application. Rotate keys : Regularly rotate your API keys and update your application accordingly.","title":"Authentication"},{"location":"backend-api/getting-started/authentication/#steps-to-obtain-an-api-key-hash","text":"","title":"Steps to Obtain an API Key Hash"},{"location":"backend-api/getting-started/authentication/#obtaining-an-api-key-from-user-interface","text":"Login to the Web Interface : Access the Navixy user interface via the web Use your credentials to log in Navigate to the API Key Section : Once logged in, go to the Settings menu. Find the API Keys section, typically located under Account Settings or Security . Generate a New API Key : Click on the Generate New API Key button. Provide a name for the API key to easily identify it later. Select the permissions and scope for the key based on your needs. Click Generate . Copy the API Key Hash : Once the key is generated, you will see the API key hash. Copy this hash and store it securely. You will use this hash in your API requests.","title":"Obtaining an API Key from User Interface"},{"location":"backend-api/getting-started/authentication/#obtaining-user-key-via-authentication-call","text":"To authenticate and obtain a user key through the Navixy API, use the user/auth call. This section provides a detailed guide on how to make this API call, including example requests and expected responses.","title":"Obtaining User Key via Authentication Call"},{"location":"backend-api/getting-started/authentication/#using-the-api-key-hash","text":"","title":"Using the API Key Hash"},{"location":"backend-api/getting-started/authentication/#including-the-api-key-hash-in-requests","text":"To authenticate your requests to the Navixy API, include the API key hash in one of the following ways: As a Query Parameter : Append the hash to your API request URL https://api.navixy.com/v2/resource/action?hash = your_api_key_hash As a Request Header : Include the hash in the Authorization header Authorization: NVX your_api_key_hash In the Request Body : Include the hash in the JSON body of your request { \"hash\" : \"your_api_key_hash\" , \"param1\" : \"value1\" }","title":"Including the API Key Hash in Requests"},{"location":"backend-api/getting-started/authentication/#example-requests","text":"","title":"Example Requests"},{"location":"backend-api/getting-started/authentication/#best-practices-for-api-key-security","text":"Store securely : Always store your API keys securely and do not expose them in your codebase or version control. Restrict permissions : Limit the permissions of the API key to only what is necessary for your application. Rotate keys : Regularly rotate your API keys and update your application accordingly.","title":"Best Practices for API Key Security"},{"location":"backend-api/getting-started/errors/","text":"Errors \u00b6 This section provides detailed information on error handling in the Navixy API, including example error responses and descriptions of error codes. Error Handling \u00b6 If an error occurs, the API returns a special error response. You can detect an error by checking the HTTP response code. If it is not 200 OK , you should parse and handle the response body as an error response. Example Error Response \u00b6 When an error occurs, the response will be in the following format: { \"success\" : false , \"status\" : { \"code\" : 1 , \"description\" : \"Database error\" } } success (boolean): Indicates if the request was successful. status (object): Contains details about the error. code (integer): The error code. description (string): A description of the error. Error Codes \u00b6 Default HTTP code is 400 . Common error codes (should be handled for all API calls) are 1-100 , and resource or action-specific errors are 101-300 . Common Error Codes \u00b6 Code Description HTTP Code 1 Database error 500 2 Service Auth error 403 3 Wrong hash 4 User or API key not found or session ended 5 Wrong request format 6 Unexpected error 500 7 Invalid parameters 8 Queue service error, try again later 503 9 Too large request 412 11 Access denied 403 12 Dealer not found 13 Operation not permitted 403 14 Database unavailable 503 15 Too many requests (rate limit exceeded) 429 101 In demo mode this function is disabled 403 102 Wrong login or password 103 User not activated 111 Wrong handler 112 Wrong method 201 Not found in database 202 Too many points in zone 203 Delete entity associated with 204 Entity not found 404 206 Login already in use 207 Invalid captcha 208 Device blocked 403 209 Failed sending email 210 Geocoding failed 211 Requested time span is too big 212 Requested limit is too big 213 Cannot perform action: the device is offline 214 Requested operation or parameters are not supported by the device 215 External service error 217 List contains nonexistent entities 218 Malformed external service parameters 219 Not allowed for clones of the device 403 220 Unknown device model 221 Device limit exceeded 403 222 Plugin not found 223 Phone number already in use 224 Device ID already in use 225 Not allowed for this legal type 403 226 Wrong ICCID 227 Wrong activation code 228 Not supported by sensor 229 Requested data is not ready yet 404 230 Not supported for this entity type 231 Entity type mismatch 409 232 Input already in use 233 No data file 234 Invalid data format 235 Missing calibration data 236 Feature unavailable due to tariff restrictions 402 237 Invalid tariff 238 Changing tariff is not allowed 403 239 New tariff does not exist 404 240 Not allowed to change tariff too frequently 403 241 Cannot change phone to bundled sim. Contact tech support. 242 There were errors during content validation 243 Device already connected. 244 Duplicate entity label. 245 New password must be different 246 Invalid user ID 247 Entity already exists 409 248 Wrong password 249 Operation available for clones only 403 250 Not allowed for deleted devices 403 251 Insufficient funds 403 252 Device already corrupted 253 Device has clones 254 Cannot save file 500 255 Invalid task state 256 Location already actual 257 Registration forbidden 403 258 Bundle not found 404 259 Payments count not comply with summary 260 Payments sum not comply with summary 261 Entity has external links 403 262 Entries list is missing some entries or contains nonexistent entries 263 No change needed, old and new values are the same 264 Timeout not reached 403 265 Already done 403 266 Cannot perform action for the device in current status 403 267 Too many entities 268 Over quota 402 269 Invalid file state 270 Too many sensors of same type already exist 271 File over max size 413 Best Practices for Error Handling \u00b6 Check HTTP Status Codes : Always check the HTTP status code of the response to determine if the request was successful. Parse the Error Response : If the status code indicates an error, parse the response body to obtain the error details. Handle Specific Error Codes : Implement handling for common error codes and resource-specific error codes to provide meaningful feedback to the user. Retry Logic : For transient errors (e.g., service unavailable, rate limits), implement retry logic with exponential backoff. Logging : Log error responses for debugging and monitoring purposes. By following these guidelines, you can effectively handle errors in your application and provide a better experience for your users.","title":"Errors"},{"location":"backend-api/getting-started/errors/#errors","text":"This section provides detailed information on error handling in the Navixy API, including example error responses and descriptions of error codes.","title":"Errors"},{"location":"backend-api/getting-started/errors/#error-handling","text":"If an error occurs, the API returns a special error response. You can detect an error by checking the HTTP response code. If it is not 200 OK , you should parse and handle the response body as an error response.","title":"Error Handling"},{"location":"backend-api/getting-started/errors/#example-error-response","text":"When an error occurs, the response will be in the following format: { \"success\" : false , \"status\" : { \"code\" : 1 , \"description\" : \"Database error\" } } success (boolean): Indicates if the request was successful. status (object): Contains details about the error. code (integer): The error code. description (string): A description of the error.","title":"Example Error Response"},{"location":"backend-api/getting-started/errors/#error-codes","text":"Default HTTP code is 400 . Common error codes (should be handled for all API calls) are 1-100 , and resource or action-specific errors are 101-300 .","title":"Error Codes"},{"location":"backend-api/getting-started/errors/#common-error-codes","text":"Code Description HTTP Code 1 Database error 500 2 Service Auth error 403 3 Wrong hash 4 User or API key not found or session ended 5 Wrong request format 6 Unexpected error 500 7 Invalid parameters 8 Queue service error, try again later 503 9 Too large request 412 11 Access denied 403 12 Dealer not found 13 Operation not permitted 403 14 Database unavailable 503 15 Too many requests (rate limit exceeded) 429 101 In demo mode this function is disabled 403 102 Wrong login or password 103 User not activated 111 Wrong handler 112 Wrong method 201 Not found in database 202 Too many points in zone 203 Delete entity associated with 204 Entity not found 404 206 Login already in use 207 Invalid captcha 208 Device blocked 403 209 Failed sending email 210 Geocoding failed 211 Requested time span is too big 212 Requested limit is too big 213 Cannot perform action: the device is offline 214 Requested operation or parameters are not supported by the device 215 External service error 217 List contains nonexistent entities 218 Malformed external service parameters 219 Not allowed for clones of the device 403 220 Unknown device model 221 Device limit exceeded 403 222 Plugin not found 223 Phone number already in use 224 Device ID already in use 225 Not allowed for this legal type 403 226 Wrong ICCID 227 Wrong activation code 228 Not supported by sensor 229 Requested data is not ready yet 404 230 Not supported for this entity type 231 Entity type mismatch 409 232 Input already in use 233 No data file 234 Invalid data format 235 Missing calibration data 236 Feature unavailable due to tariff restrictions 402 237 Invalid tariff 238 Changing tariff is not allowed 403 239 New tariff does not exist 404 240 Not allowed to change tariff too frequently 403 241 Cannot change phone to bundled sim. Contact tech support. 242 There were errors during content validation 243 Device already connected. 244 Duplicate entity label. 245 New password must be different 246 Invalid user ID 247 Entity already exists 409 248 Wrong password 249 Operation available for clones only 403 250 Not allowed for deleted devices 403 251 Insufficient funds 403 252 Device already corrupted 253 Device has clones 254 Cannot save file 500 255 Invalid task state 256 Location already actual 257 Registration forbidden 403 258 Bundle not found 404 259 Payments count not comply with summary 260 Payments sum not comply with summary 261 Entity has external links 403 262 Entries list is missing some entries or contains nonexistent entries 263 No change needed, old and new values are the same 264 Timeout not reached 403 265 Already done 403 266 Cannot perform action for the device in current status 403 267 Too many entities 268 Over quota 402 269 Invalid file state 270 Too many sensors of same type already exist 271 File over max size 413","title":"Common Error Codes"},{"location":"backend-api/getting-started/errors/#best-practices-for-error-handling","text":"Check HTTP Status Codes : Always check the HTTP status code of the response to determine if the request was successful. Parse the Error Response : If the status code indicates an error, parse the response body to obtain the error details. Handle Specific Error Codes : Implement handling for common error codes and resource-specific error codes to provide meaningful feedback to the user. Retry Logic : For transient errors (e.g., service unavailable, rate limits), implement retry logic with exponential backoff. Logging : Log error responses for debugging and monitoring purposes. By following these guidelines, you can effectively handle errors in your application and provide a better experience for your users.","title":"Best Practices for Error Handling"},{"location":"backend-api/getting-started/introduction/","text":"Welcome to the Navixy Backend API documentation. This guide is designed to help developers integrate third-party solutions with the Navixy platform. Here, you will find comprehensive information on API calls, workflows, and best practices. Overview \u00b6 The Navixy API provides a set of RESTful endpoints that allow you to interact with various entities such as geofences, rules, objects, and more. The API calls for CRUD and other operations with these entities follow a consistent naming convention, making it easier to understand and use. Standard Workflow \u00b6 To give you a clear idea of how to work with the Navixy API, let's go through a standard workflow using a common example \u2013 requesting track points data. Determine the URL to API calls : Depending on the physical location of the platform, the base URL will be: https://api.eu.navixy.com/v2 for European Navixy platform; https://api.us.navixy.com/v2 for North American Navixy Splatform; https://api.your_domain for self-hosted (On-Premise) installations. Obtain hash of an API key : Authenticate and obtain a user key via the authentication call. Get objects lists with tracker/list : Example API call: $ curl -X POST 'https://api.navixy.com/v2/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"your_api_key_hash\" }' Get track lists with track/list : Example API call: $ curl -X POST 'https://api.navixy.com/v2/track/list' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"your_api_key_hash\", \"tracker_id\": 12345 }' Get the track itself with track/read : Example API call: $ curl -X POST 'https://api.navixy.com/v2/track/read' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"your_api_key_hash\", \"track_id\": 67890 }' API Base URL \u00b6 Depending on the physical location of the platform, use one of the following base URLs: European Navixy platform : https://api.eu.navixy.com/v2 North American Navixy platform : https://api.us.navixy.com/v2 Self-hosted (On-Premise) installations : https://api.your_domain For example, to make a user/auth API call on the European Navixy ServerMate platform, you should use the URL: https://api.eu.navixy.com/v2/user/auth API Calls Format \u00b6 API calls follow a consistent notation: /resource/sub_resource/action(parameter1, parameter2, [parameter3]) Parameters can be passed in different ways: - HTTP POST application/json : Recommended - HTTP POST application/x-www-form-urlencoded : Parameters in the request body - HTTP GET : Not recommended, should be used only for idempotent requests with small parameter size Examples \u00b6 HTTP POST application/json \u00b6 $ curl -X POST '[api_base_url]/resource/sub_resource/action' \\ -H 'Content-Type: application/json' \\ -d '{\"param1\": \"value1\", \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP POST application/x-www-form-urlencoded \u00b6 $ curl -X POST '[api_base_url]/resource/sub_resource/action' \\ -d 'param1=value' \\ -d 'hash=a6aa75587e5c59c32d347da438505fc3' HTTP GET \u00b6 $ curl '[api_base_url]/resource/sub_resource/action?param1=value1&hash=a6aa75587e5c59c32d347da438505fc3' Request and Response Format \u00b6 To make an API call, send a POST request to: [api_base_url]/resource/action/ The response will be given with application/json content type, even for errors. Response fields and object structure are specific to the API call. Ensuring Compatibility \u00b6 Our API evolves over time, and new methods and JSON object fields are added. We strive to maintain backward compatibility with legacy API clients. However, you must ensure that any unsupported JSON object fields by your app are ignored , and that your application can handle new JSON fields without breaking. Also, to reduce response size, JSON fields that are NULL are omitted. Your JSON parser should handle missing JSON fields as if they were NULL. Authorization and Access Levels \u00b6 Unless otherwise noted, every API call requires a valid API Key hash. This hash can be passed in one of the following ways: As a hash parameter of the request body (root-level property for application/json ). As a hash parameter of the HTTP query string . As a value of the HTTP header Authorization in the following form: Authorization: NVX SessionHashValue Data Types \u00b6 Type Description bool Boolean: logical type ( true or false ). byte Signed 8 bits integer in range [-128 .. 128] . short Signed 16 bits integer in range [-32,768 .. 32,767] . int Signed 32 bits integer in range [-2,147,483,648 .. 2,147,483,647] . long Signed 64 bits integer in range [-9,223,372,036,854,775,808 .. 9,223,372,036,854,775,807] . float Signed 32 bits float number [3.40282347 x 10^38, 1.40239846 x 10^-45] . double Signed 64 bits float number [1.7976931348623157 x 10^308, 4.9406564584124654 x 10^-324] . string String literals. enum String literals from a predefined set. date/time String containing date/time in defined formats. local_time String containing local time in HH:mm:ss format. location JSON object containing geographical coordinates, e.g., {\"lat\": 34.178868, \"lng\": -118.599672} . locale String in format language[_country] , where language is an [ISO 639 alpha-2] language code, and country is an ISO 3166 alpha-2 country code, e.g., en_US or de . Date/Time Formats \u00b6 Date/time type can be represented with the following formats: - yyyy-MM-dd HH:mm:ss format (in user's timezone), default - [ISO 8601] yyyy-MM-dd'T'HH:mm:ssZZ To use ISO 8601 date/time format, pass true to: iso_datetime parameter of the request body (root-level property for application/json ). iso_datetime parameter of the HTTP query string. HTTP header NVX-ISO-DateTime . Example \u00b6 JSON request body parameter \u00b6 $ curl -X POST '[api_base_url]/resource/sub_resource/action' \\ -H 'Content-Type: application/json' \\ -d '{\"iso_datetime\": true, \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' Form request parameter \u00b6 $ curl -X POST '[api_base_url]/resource/sub_resource/action' \\ -d 'iso_datetime=true' \\ -d 'hash=a6aa75587e5c59c32d347da438505fc3' HTTP Header \u00b6 $ curl -X POST '[api_base_url]/resource/sub_resource/action' \\ -H 'Content-Type: application/json' \\ -H 'NVX-ISO-DateTime: true' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' Response Example with Fixed Offset Date/Time \u00b6 { \"success\" : true , \"user_time\" : \"2014-07-09T07:50:58+05:00\" , \"list\" : [ { \"type\" : \"odometer\" , \"value\" : 100500.1 , \"update_time\" : \"2014-03-06T13:57:00+05:00\" } ] } Response Example with UTC Date/Time \u00b6 { \"success\" : true , \"user_time\" : \"2014-07-09T02:50:58Z\" , \"list\" : [ { \"type\" : \"odometer\" , \"value\" : 100500.1 , \"update_time\" : \"2014-03-06T17:57:00Z\" } ] } Next Steps \u00b6 Authentication : Learn how to authenticate and obtain a user key errors : Understand how to handle errors in the Navixy API","title":"Introduction"},{"location":"backend-api/getting-started/introduction/#overview","text":"The Navixy API provides a set of RESTful endpoints that allow you to interact with various entities such as geofences, rules, objects, and more. The API calls for CRUD and other operations with these entities follow a consistent naming convention, making it easier to understand and use.","title":"Overview"},{"location":"backend-api/getting-started/introduction/#standard-workflow","text":"To give you a clear idea of how to work with the Navixy API, let's go through a standard workflow using a common example \u2013 requesting track points data. Determine the URL to API calls : Depending on the physical location of the platform, the base URL will be: https://api.eu.navixy.com/v2 for European Navixy platform; https://api.us.navixy.com/v2 for North American Navixy Splatform; https://api.your_domain for self-hosted (On-Premise) installations. Obtain hash of an API key : Authenticate and obtain a user key via the authentication call. Get objects lists with tracker/list : Example API call: $ curl -X POST 'https://api.navixy.com/v2/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"your_api_key_hash\" }' Get track lists with track/list : Example API call: $ curl -X POST 'https://api.navixy.com/v2/track/list' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"your_api_key_hash\", \"tracker_id\": 12345 }' Get the track itself with track/read : Example API call: $ curl -X POST 'https://api.navixy.com/v2/track/read' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"your_api_key_hash\", \"track_id\": 67890 }'","title":"Standard Workflow"},{"location":"backend-api/getting-started/introduction/#api-base-url","text":"Depending on the physical location of the platform, use one of the following base URLs: European Navixy platform : https://api.eu.navixy.com/v2 North American Navixy platform : https://api.us.navixy.com/v2 Self-hosted (On-Premise) installations : https://api.your_domain For example, to make a user/auth API call on the European Navixy ServerMate platform, you should use the URL: https://api.eu.navixy.com/v2/user/auth","title":"API Base URL"},{"location":"backend-api/getting-started/introduction/#api-calls-format","text":"API calls follow a consistent notation: /resource/sub_resource/action(parameter1, parameter2, [parameter3]) Parameters can be passed in different ways: - HTTP POST application/json : Recommended - HTTP POST application/x-www-form-urlencoded : Parameters in the request body - HTTP GET : Not recommended, should be used only for idempotent requests with small parameter size","title":"API Calls Format"},{"location":"backend-api/getting-started/introduction/#examples","text":"","title":"Examples"},{"location":"backend-api/getting-started/introduction/#request-and-response-format","text":"To make an API call, send a POST request to: [api_base_url]/resource/action/ The response will be given with application/json content type, even for errors. Response fields and object structure are specific to the API call.","title":"Request and Response Format"},{"location":"backend-api/getting-started/introduction/#ensuring-compatibility","text":"Our API evolves over time, and new methods and JSON object fields are added. We strive to maintain backward compatibility with legacy API clients. However, you must ensure that any unsupported JSON object fields by your app are ignored , and that your application can handle new JSON fields without breaking. Also, to reduce response size, JSON fields that are NULL are omitted. Your JSON parser should handle missing JSON fields as if they were NULL.","title":"Ensuring Compatibility"},{"location":"backend-api/getting-started/introduction/#authorization-and-access-levels","text":"Unless otherwise noted, every API call requires a valid API Key hash. This hash can be passed in one of the following ways: As a hash parameter of the request body (root-level property for application/json ). As a hash parameter of the HTTP query string . As a value of the HTTP header Authorization in the following form: Authorization: NVX SessionHashValue","title":"Authorization and Access Levels"},{"location":"backend-api/getting-started/introduction/#data-types","text":"Type Description bool Boolean: logical type ( true or false ). byte Signed 8 bits integer in range [-128 .. 128] . short Signed 16 bits integer in range [-32,768 .. 32,767] . int Signed 32 bits integer in range [-2,147,483,648 .. 2,147,483,647] . long Signed 64 bits integer in range [-9,223,372,036,854,775,808 .. 9,223,372,036,854,775,807] . float Signed 32 bits float number [3.40282347 x 10^38, 1.40239846 x 10^-45] . double Signed 64 bits float number [1.7976931348623157 x 10^308, 4.9406564584124654 x 10^-324] . string String literals. enum String literals from a predefined set. date/time String containing date/time in defined formats. local_time String containing local time in HH:mm:ss format. location JSON object containing geographical coordinates, e.g., {\"lat\": 34.178868, \"lng\": -118.599672} . locale String in format language[_country] , where language is an [ISO 639 alpha-2] language code, and country is an ISO 3166 alpha-2 country code, e.g., en_US or de .","title":"Data Types"},{"location":"backend-api/getting-started/introduction/#datetime-formats","text":"Date/time type can be represented with the following formats: - yyyy-MM-dd HH:mm:ss format (in user's timezone), default - [ISO 8601] yyyy-MM-dd'T'HH:mm:ssZZ To use ISO 8601 date/time format, pass true to: iso_datetime parameter of the request body (root-level property for application/json ). iso_datetime parameter of the HTTP query string. HTTP header NVX-ISO-DateTime .","title":"Date/Time Formats"},{"location":"backend-api/getting-started/introduction/#example","text":"","title":"Example"},{"location":"backend-api/getting-started/introduction/#response-example-with-fixed-offset-datetime","text":"{ \"success\" : true , \"user_time\" : \"2014-07-09T07:50:58+05:00\" , \"list\" : [ { \"type\" : \"odometer\" , \"value\" : 100500.1 , \"update_time\" : \"2014-03-06T13:57:00+05:00\" } ] }","title":"Response Example with Fixed Offset Date/Time"},{"location":"backend-api/getting-started/introduction/#response-example-with-utc-datetime","text":"{ \"success\" : true , \"user_time\" : \"2014-07-09T02:50:58Z\" , \"list\" : [ { \"type\" : \"odometer\" , \"value\" : 100500.1 , \"update_time\" : \"2014-03-06T17:57:00Z\" } ] }","title":"Response Example with UTC Date/Time"},{"location":"backend-api/getting-started/introduction/#next-steps","text":"Authentication : Learn how to authenticate and obtain a user key errors : Understand how to handle errors in the Navixy API","title":"Next Steps"},{"location":"backend-api/guides/","text":"Guides and Examples \u00b6 The \"Guides and Examples\" section of the Navixy API documentation is designed to provide you with practical, step-by-step instructions for common tasks you can perform with the Navixy API. Whether you're managing devices, tracking data, setting up geofences, or handling notifications, these guides will help you make the most of the Navixy platform. Device Management \u00b6 Activating a Device Learn how to activate a device on the Navixy platform to start tracking and monitoring. Sending Commands to a Device Find out how to send GPRS commands to devices for remote control and management. Using BLE Beacons with Trackers Discover how to monitor semi-stationary equipment with BLE beacons. Tracking and Data Retrieval \u00b6 Getting Tracker List Retrieve a list of all trackers associated with your account for easy management. Retrieving Track Points Learn how to get detailed track points data for comprehensive movement analysis. Fetching Sensors and Counters Data Access data from various sensors and counters installed on your tracking devices. Obtaining Report Information Generate and retrieve detailed reports for insights into fleet performance. Geofences and Points of Interest \u00b6 Managing Geofences Set up geofences to define virtual boundaries for tracking and alerts. Managing Points of Interest (POIs) Create and manage points of interest with custom fields for better location tracking. Notifications and Rules \u00b6 Working with Notifications Configure and manage notifications to stay informed about important events. Receiving Push Notifications Set up push notifications to receive real-time alerts on your mobile devices. Implementing Rules Define and use rules to automate actions based on specific conditions. Fleet Management \u00b6 Using Tags for Organization Organize your devices and data using tags for easier management and filtering. Handling Maintenance Service Works Manage maintenance schedules and service works to keep your fleet in top condition. Utilizing Driver Journals Track driver activities and maintain detailed logs using driver journals. Field Service Management \u00b6 Creating and Assigning Tasks Create tasks and assign them to field workers to streamline your operations. Optimizing Routes Optimize routes for your field service teams to improve efficiency and reduce costs. Creating Forms for Tasks Design and implement custom forms for tasks to capture all necessary information. Managing Task Statuses Monitor and update task statuses to keep track of progress and completion.","title":"Overview"},{"location":"backend-api/guides/#guides-and-examples","text":"The \"Guides and Examples\" section of the Navixy API documentation is designed to provide you with practical, step-by-step instructions for common tasks you can perform with the Navixy API. Whether you're managing devices, tracking data, setting up geofences, or handling notifications, these guides will help you make the most of the Navixy platform.","title":"Guides and Examples"},{"location":"backend-api/guides/#device-management","text":"Activating a Device Learn how to activate a device on the Navixy platform to start tracking and monitoring. Sending Commands to a Device Find out how to send GPRS commands to devices for remote control and management. Using BLE Beacons with Trackers Discover how to monitor semi-stationary equipment with BLE beacons.","title":"Device Management"},{"location":"backend-api/guides/#tracking-and-data-retrieval","text":"Getting Tracker List Retrieve a list of all trackers associated with your account for easy management. Retrieving Track Points Learn how to get detailed track points data for comprehensive movement analysis. Fetching Sensors and Counters Data Access data from various sensors and counters installed on your tracking devices. Obtaining Report Information Generate and retrieve detailed reports for insights into fleet performance.","title":"Tracking and Data Retrieval"},{"location":"backend-api/guides/#geofences-and-points-of-interest","text":"Managing Geofences Set up geofences to define virtual boundaries for tracking and alerts. Managing Points of Interest (POIs) Create and manage points of interest with custom fields for better location tracking.","title":"Geofences and Points of Interest"},{"location":"backend-api/guides/#notifications-and-rules","text":"Working with Notifications Configure and manage notifications to stay informed about important events. Receiving Push Notifications Set up push notifications to receive real-time alerts on your mobile devices. Implementing Rules Define and use rules to automate actions based on specific conditions.","title":"Notifications and Rules"},{"location":"backend-api/guides/#fleet-management","text":"Using Tags for Organization Organize your devices and data using tags for easier management and filtering. Handling Maintenance Service Works Manage maintenance schedules and service works to keep your fleet in top condition. Utilizing Driver Journals Track driver activities and maintain detailed logs using driver journals.","title":"Fleet Management"},{"location":"backend-api/guides/#field-service-management","text":"Creating and Assigning Tasks Create tasks and assign them to field workers to streamline your operations. Optimizing Routes Optimize routes for your field service teams to improve efficiency and reduce costs. Creating Forms for Tasks Design and implement custom forms for tasks to capture all necessary information. Managing Task Statuses Monitor and update task statuses to keep track of progress and completion.","title":"Field Service Management"},{"location":"backend-api/guides/data-retrieval/get-track-points/","text":"Getting Track Points \u00b6 In many scenarios, it becomes essential to retrieve all location points of a track to gain comprehensive insights into the movements of an object equipped with a GPS tracker. This guide will demonstrate how to accomplish this using the Navixy API. Prerequisites \u00b6 Obtain API Key Hash \u00b6 First, you need to obtain the hash of an API key . Get Tracker ID \u00b6 Next, retrieve your tracker_id . This ID is essential as the platform needs to know which device's points to return. Retrieve Track Points \u00b6 With the API key hash and tracker ID in hand, you can now get all points for a specified period using the /track/read API method. Required Parameters \u00b6 tracker_id - Obtained from the tracker/list call. Only one tracker_id per call. It should be an integer. from - A string containing the start date/time . to - A string containing the end date/time . For a full description of the parameters, see the /track/read API method. Example Response \u00b6 The platform will respond with the following data: { \"success\" : true , \"limit_exceeded\" : true , \"list\" : [ { \"lat\" : 53.445181 , \"lng\" : -2.276432 , \"alt\" : 10 , \"satellites\" : 8 , \"get_time\" : \"2011-06-18 03:39:44\" , \"address\" : \"4B Albany Road, Manchester, Great Britain\" , \"heading\" : 298 , \"speed\" : 70 , \"precision\" : 100 , \"gsm_lbs\" : true , \"parking\" : true } ] } Response Fields \u00b6 limit_exceeded - boolean. true if the requested time period exceeds the limit specified in the tracker's tariff. lat - float. Latitude. lng - float. Longitude. alt - int. Altitude in meters. satellites - int. Number of satellites used for this point. get_time - date/time. GPS timestamp of the point, in the user's timezone. address - string. Point address. Will be \"\" if no address is recorded. heading - int. Bearing in degrees (0..360). speed - int. Speed in km/h. precision - optional int. Precision in meters. gsm_lbs - optional boolean. true if the location is detected by GSM LBS. parking - optional boolean. true if the point does not belong to the track. Download Track Points as KML File \u00b6 You can also download a KML file. This file can be used with map services to visualize all points on a map. Example Request \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/track/download' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"from\": \"2020-09-23 03:24:00\", \"to\": \"2020-09-23 06:24:00\", \"format\": \"kml\", \"split\": false}' Additional Parameters \u00b6 All parameters are the same as in track/read plus two new optional parameters: format \u2013 string. File format, either \"kml\" or \"kmz\". Default is \"kml\". split \u2013 boolean. If true , splits tracks by folders with start/end placemarks and track line. Default is false . By following these steps, you can effectively retrieve and utilize track points for detailed analysis of device movements.","title":"Track points"},{"location":"backend-api/guides/data-retrieval/get-track-points/#getting-track-points","text":"In many scenarios, it becomes essential to retrieve all location points of a track to gain comprehensive insights into the movements of an object equipped with a GPS tracker. This guide will demonstrate how to accomplish this using the Navixy API.","title":"Getting Track Points"},{"location":"backend-api/guides/data-retrieval/get-track-points/#prerequisites","text":"","title":"Prerequisites"},{"location":"backend-api/guides/data-retrieval/get-track-points/#obtain-api-key-hash","text":"First, you need to obtain the hash of an API key .","title":"Obtain API Key Hash"},{"location":"backend-api/guides/data-retrieval/get-track-points/#get-tracker-id","text":"Next, retrieve your tracker_id . This ID is essential as the platform needs to know which device's points to return.","title":"Get Tracker ID"},{"location":"backend-api/guides/data-retrieval/get-track-points/#retrieve-track-points","text":"With the API key hash and tracker ID in hand, you can now get all points for a specified period using the /track/read API method.","title":"Retrieve Track Points"},{"location":"backend-api/guides/data-retrieval/get-track-points/#required-parameters","text":"tracker_id - Obtained from the tracker/list call. Only one tracker_id per call. It should be an integer. from - A string containing the start date/time . to - A string containing the end date/time . For a full description of the parameters, see the /track/read API method.","title":"Required Parameters"},{"location":"backend-api/guides/data-retrieval/get-track-points/#example-response","text":"The platform will respond with the following data: { \"success\" : true , \"limit_exceeded\" : true , \"list\" : [ { \"lat\" : 53.445181 , \"lng\" : -2.276432 , \"alt\" : 10 , \"satellites\" : 8 , \"get_time\" : \"2011-06-18 03:39:44\" , \"address\" : \"4B Albany Road, Manchester, Great Britain\" , \"heading\" : 298 , \"speed\" : 70 , \"precision\" : 100 , \"gsm_lbs\" : true , \"parking\" : true } ] }","title":"Example Response"},{"location":"backend-api/guides/data-retrieval/get-track-points/#response-fields","text":"limit_exceeded - boolean. true if the requested time period exceeds the limit specified in the tracker's tariff. lat - float. Latitude. lng - float. Longitude. alt - int. Altitude in meters. satellites - int. Number of satellites used for this point. get_time - date/time. GPS timestamp of the point, in the user's timezone. address - string. Point address. Will be \"\" if no address is recorded. heading - int. Bearing in degrees (0..360). speed - int. Speed in km/h. precision - optional int. Precision in meters. gsm_lbs - optional boolean. true if the location is detected by GSM LBS. parking - optional boolean. true if the point does not belong to the track.","title":"Response Fields"},{"location":"backend-api/guides/data-retrieval/get-track-points/#download-track-points-as-kml-file","text":"You can also download a KML file. This file can be used with map services to visualize all points on a map.","title":"Download Track Points as KML File"},{"location":"backend-api/guides/data-retrieval/get-track-points/#example-request","text":"cURL curl -X POST 'https://api.navixy.com/v2/track/download' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"from\": \"2020-09-23 03:24:00\", \"to\": \"2020-09-23 06:24:00\", \"format\": \"kml\", \"split\": false}'","title":"Example Request"},{"location":"backend-api/guides/data-retrieval/get-track-points/#additional-parameters","text":"All parameters are the same as in track/read plus two new optional parameters: format \u2013 string. File format, either \"kml\" or \"kmz\". Default is \"kml\". split \u2013 boolean. If true , splits tracks by folders with start/end placemarks and track line. Default is false . By following these steps, you can effectively retrieve and utilize track points for detailed analysis of device movements.","title":"Additional Parameters"},{"location":"backend-api/guides/data-retrieval/get-tracker-list/","text":"Getting List of GPS Trackers \u00b6 This guide explains how to retrieve a list of GPS trackers associated with a user account using the Navixy API. This is essential for managing and monitoring multiple devices within the Navixy platform. Prerequisites \u00b6 Before you begin, ensure you have an active Navixy account and an API key for authentication . Make the API request \u00b6 To get the list of trackers, you need to make a POST request to the /tracker/list endpoint. Below are the details and examples of how to do this. API endpoint \u00b6 https://api.navixy.com/v2/tracker/list API request \u00b6 cURL \u00b6 curl -X POST 'https://api.navixy.com/v2/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"your_api_key_hash\"}' HTTP GET \u00b6 https://api.navixy.com/v2/tracker/list?hash=your_api_key_hash Response \u00b6 If the request is successful, the response will contain a list of trackers associated with your account. { \"success\" : true , \"list\" : [ { \"id\" : 123 , \"label\" : \"Vehicle A\" , \"imei\" : \"123456789012345\" , \"model\" : \"Model X\" , \"status\" : { \"online\" : true , \"last_update\" : \"2023-05-01T12:00:00Z\" } }, { \"id\" : 124 , \"label\" : \"Vehicle B\" , \"imei\" : \"987654321098765\" , \"model\" : \"Model Y\" , \"status\" : { \"online\" : false , \"last_update\" : \"2023-04-30T08:30:00Z\" } } ] } If an account has a large number of trackers, and you only need specific ones, you can add an optional filter parameter to the request to return only matching records. This parameter has the following constraints: Labels array size: minimum 1, maximum 1024. No null items. No duplicate items. Item length: minimum 1, maximum 60 characters. To get a list of trackers with labels matching the filter, use this API call: curl -X POST 'https://api.navixy.com/v2/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"your_api_key_hash\", \"labels\": [\"aa\", \"b\"]}' Usage notes Ensure your API key hash is valid and has the necessary permissions. The list may include both online and offline trackers, along with their last known status. Use this method to manage and display multiple tracking devices on your application interface.","title":"Tracker list"},{"location":"backend-api/guides/data-retrieval/get-tracker-list/#getting-list-of-gps-trackers","text":"This guide explains how to retrieve a list of GPS trackers associated with a user account using the Navixy API. This is essential for managing and monitoring multiple devices within the Navixy platform.","title":"Getting List of GPS Trackers"},{"location":"backend-api/guides/data-retrieval/get-tracker-list/#prerequisites","text":"Before you begin, ensure you have an active Navixy account and an API key for authentication .","title":"Prerequisites"},{"location":"backend-api/guides/data-retrieval/get-tracker-list/#make-the-api-request","text":"To get the list of trackers, you need to make a POST request to the /tracker/list endpoint. Below are the details and examples of how to do this.","title":"Make the API request"},{"location":"backend-api/guides/data-retrieval/get-tracker-list/#api-endpoint","text":"https://api.navixy.com/v2/tracker/list","title":"API endpoint"},{"location":"backend-api/guides/data-retrieval/get-tracker-list/#api-request","text":"","title":"API request"},{"location":"backend-api/guides/data-retrieval/obtain-reports/","text":"Reports offer essential insights to effectively manage your fleet or mobile workforce. At times, you may need to extract report data for use in external applications or to generate custom business reports, such as those detailing trip information alongside fuel consumption, drains, and refills. Follow these steps to obtain report information using the Navixy API. Generate Report \u00b6 To receive data for processing, you first need to generate the report. This can be done using the report/tracker/generate call. Necessary parameters for this call: from - A string containing date/time . Data in the report will be from this moment. to - A string containing date/time . The specified date must be after the from date. Data in the report will be up to this moment. title - Report title. If null, the default title will be used. trackers - List of tracker IDs to be included in the report (if the report is by trackers). employees - List of employee IDs to be included in the report (if the report is by employees). time_filter - An object containing daily time and weekday limits for processed data, e.g., {\"to\":\"18:00\", \"from\":\"12:00\", \"weekdays\":[1,2,3,4,5]} . plugin - A plugin object. See the list of all report plugins . API request: cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/generate' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Trip report\", \"trackers\": [669673], \"from\": \"2020-10-05 00:00:00\", \"to\": \"2020-10-06 23:59:59\", \"time_filter\": {\"from\": \"00:00:00\", \"to\": \"23:59:59\", \"weekdays\": [1,2,3,4,5,6,7]}, \"plugin\": {\"hide_empty_tabs\": true, \"plugin_id\": 4, \"show_seconds\": false, \"include_summary_sheet_only\": false, \"split\": true, \"show_idle_duration\": false, \"show_coordinates\": false, \"filter\": true, \"group_by_driver\": false}}' The response will include the generated report ID: { \"success\" : true , \"id\" : 222 } Retrieve Report \u00b6 To obtain the generated report data in JSON format, use the report/tracker/retrieve call. Use the report_id from the previous call response. API request: cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/retrieve' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"report_id\": 1234567}' HTTP GET https://api.navixy.com/v2/report/tracker/retrieve?hash=a6aa75587e5c59c32d347da438505fc3&report_id=1234567 You will receive the report in JSON format: Response { \"success\" : true , \"report\" : { \"created\" : \"2020-10-06 16:01:46\" , \"time_filter\" : { \"from\" : \"00:00:00\" , \"to\" : \"23:59:59\" , \"weekdays\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] }, \"title\" : \"Trip report\" , \"id\" : 5602232 , \"sheets\" : [ { \"header\" : \"Samantha (Ford Focus)\" , \"sections\" : [ { \"data\" : [ { \"rows\" : [ { \"to\" : { \"v\" : \"02:39 - Downtown Los Angeles, CA, USA\" , \"raw\" : 1601941188000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 34.040713 , \"lng\" : -118.246769 } }, \"from\" : { \"v\" : \"00:47 - Santa Monica, CA, USA\" , \"raw\" : 1601934439000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 34.019454 , \"lng\" : -118.491191 } }, \"time\" : { \"v\" : \"01:52\" , \"raw\" : 6749.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"24.30\" , \"raw\" : 24.30 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"13\" , \"raw\" : 13.0 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"27\" , \"raw\" : 27.0 , \"type\" : \"value\" } }, { \"to\" : { \"v\" : \"05:10 - Hollywood, Los Angeles, CA, USA\" , \"raw\" : 1601950218000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 34.092809 , \"lng\" : -118.328661 } }, \"from\" : { \"v\" : \"03:11 - Downtown Los Angeles, CA, USA\" , \"raw\" : 1601943083000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 34.040713 , \"lng\" : -118.246769 } }, \"time\" : { \"v\" : \"01:58\" , \"raw\" : 7135.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"8.5\" , \"raw\" : 8.5 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"4.3\" , \"raw\" : 4.3 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"19\" , \"raw\" : 19.0 , \"type\" : \"value\" } } ], \"total\" : { \"text\" : \"In total:\" , \"time\" : { \"v\" : \"03:50\" , \"raw\" : 13740.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"32.8\" , \"raw\" : 32.8 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"8.5\" , \"raw\" : 8.5 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"27\" , \"raw\" : 27.0 , \"type\" : \"value\" } }, \"header\" : \"Oct 6, 2020 (Tue) : 2\" } ], \"type\" : \"table\" , \"header\" : \"Trips\" , \"columns\" : [ { \"align\" : \"left\" , \"field\" : \"from\" , \"title\" : \"Movement start\" , \"width\" : 4 , \"weight\" : 3 , \"highlight_min_max\" : false }, { \"align\" : \"left\" , \"field\" : \"to\" , \"title\" : \"Movement end\" , \"width\" : 4 , \"weight\" : 3 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"length\" , \"title\" : \"Total trips length,\\nkm\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"time\" , \"title\" : \"Travel time\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"avg_speed\" , \"title\" : \"Average speed,\\nkm/h\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"max_speed\" , \"title\" : \"Max. speed,\\nkm/h\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false } ], \"column_groups\" : [] }, { \"rows\" : [ { \"v\" : \"2\" , \"raw\" : 2.0 , \"name\" : \"Trips\" , \"highlight\" : false }, { \"v\" : \"32.8\" , \"raw\" : 32.8 , \"name\" : \"Total trips length, km\" , \"highlight\" : false }, { \"v\" : \"03:50\" , \"raw\" : 230.0 , \"name\" : \"Travel time\" , \"highlight\" : false }, { \"v\" : \"8.5\" , \"raw\" : 8.5 , \"name\" : \"Average speed, km/h\" , \"highlight\" : false }, { \"v\" : \"27\" , \"raw\" : 27.0 , \"name\" : \"Max. speed, km/h\" , \"highlight\" : false }, { \"v\" : \"515855\" , \"raw\" : 515855.0 , \"name\" : \"Odometer value *, km\" , \"highlight\" : false } ], \"type\" : \"map_table\" , \"header\" : \"Summary\" }, { \"text\" : \"Odometer value at the end of the selected period.\" , \"type\" : \"text\" , \"style\" : \"small_print\" } ], \"entity_ids\" : [ 311852 ], \"additional_field\" : \"\" } ], \"from\" : \"2020-10-06 00:00:00\" , \"to\" : \"2020-10-06 23:59:59\" } Deleting Reports \u00b6 Once you have received and processed the report information, you can delete the generated report to clean up resources. Use the report/tracker/delete call. Use the report_id from the generate call response. API request: cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"report_id\": 1234567}' HTTP GET https://api.navixy.com/v2/report/tracker/delete?hash=a6aa75587e5c59c32d347da438505fc3&report_id=1234567","title":"Reports"},{"location":"backend-api/guides/data-retrieval/obtain-reports/#generate-report","text":"To receive data for processing, you first need to generate the report. This can be done using the report/tracker/generate call. Necessary parameters for this call: from - A string containing date/time . Data in the report will be from this moment. to - A string containing date/time . The specified date must be after the from date. Data in the report will be up to this moment. title - Report title. If null, the default title will be used. trackers - List of tracker IDs to be included in the report (if the report is by trackers). employees - List of employee IDs to be included in the report (if the report is by employees). time_filter - An object containing daily time and weekday limits for processed data, e.g., {\"to\":\"18:00\", \"from\":\"12:00\", \"weekdays\":[1,2,3,4,5]} . plugin - A plugin object. See the list of all report plugins . API request: cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/generate' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Trip report\", \"trackers\": [669673], \"from\": \"2020-10-05 00:00:00\", \"to\": \"2020-10-06 23:59:59\", \"time_filter\": {\"from\": \"00:00:00\", \"to\": \"23:59:59\", \"weekdays\": [1,2,3,4,5,6,7]}, \"plugin\": {\"hide_empty_tabs\": true, \"plugin_id\": 4, \"show_seconds\": false, \"include_summary_sheet_only\": false, \"split\": true, \"show_idle_duration\": false, \"show_coordinates\": false, \"filter\": true, \"group_by_driver\": false}}' The response will include the generated report ID: { \"success\" : true , \"id\" : 222 }","title":"Generate Report"},{"location":"backend-api/guides/data-retrieval/obtain-reports/#retrieve-report","text":"To obtain the generated report data in JSON format, use the report/tracker/retrieve call. Use the report_id from the previous call response. API request: cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/retrieve' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"report_id\": 1234567}' HTTP GET https://api.navixy.com/v2/report/tracker/retrieve?hash=a6aa75587e5c59c32d347da438505fc3&report_id=1234567 You will receive the report in JSON format: Response { \"success\" : true , \"report\" : { \"created\" : \"2020-10-06 16:01:46\" , \"time_filter\" : { \"from\" : \"00:00:00\" , \"to\" : \"23:59:59\" , \"weekdays\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] }, \"title\" : \"Trip report\" , \"id\" : 5602232 , \"sheets\" : [ { \"header\" : \"Samantha (Ford Focus)\" , \"sections\" : [ { \"data\" : [ { \"rows\" : [ { \"to\" : { \"v\" : \"02:39 - Downtown Los Angeles, CA, USA\" , \"raw\" : 1601941188000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 34.040713 , \"lng\" : -118.246769 } }, \"from\" : { \"v\" : \"00:47 - Santa Monica, CA, USA\" , \"raw\" : 1601934439000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 34.019454 , \"lng\" : -118.491191 } }, \"time\" : { \"v\" : \"01:52\" , \"raw\" : 6749.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"24.30\" , \"raw\" : 24.30 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"13\" , \"raw\" : 13.0 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"27\" , \"raw\" : 27.0 , \"type\" : \"value\" } }, { \"to\" : { \"v\" : \"05:10 - Hollywood, Los Angeles, CA, USA\" , \"raw\" : 1601950218000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 34.092809 , \"lng\" : -118.328661 } }, \"from\" : { \"v\" : \"03:11 - Downtown Los Angeles, CA, USA\" , \"raw\" : 1601943083000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 34.040713 , \"lng\" : -118.246769 } }, \"time\" : { \"v\" : \"01:58\" , \"raw\" : 7135.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"8.5\" , \"raw\" : 8.5 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"4.3\" , \"raw\" : 4.3 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"19\" , \"raw\" : 19.0 , \"type\" : \"value\" } } ], \"total\" : { \"text\" : \"In total:\" , \"time\" : { \"v\" : \"03:50\" , \"raw\" : 13740.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"32.8\" , \"raw\" : 32.8 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"8.5\" , \"raw\" : 8.5 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"27\" , \"raw\" : 27.0 , \"type\" : \"value\" } }, \"header\" : \"Oct 6, 2020 (Tue) : 2\" } ], \"type\" : \"table\" , \"header\" : \"Trips\" , \"columns\" : [ { \"align\" : \"left\" , \"field\" : \"from\" , \"title\" : \"Movement start\" , \"width\" : 4 , \"weight\" : 3 , \"highlight_min_max\" : false }, { \"align\" : \"left\" , \"field\" : \"to\" , \"title\" : \"Movement end\" , \"width\" : 4 , \"weight\" : 3 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"length\" , \"title\" : \"Total trips length,\\nkm\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"time\" , \"title\" : \"Travel time\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"avg_speed\" , \"title\" : \"Average speed,\\nkm/h\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"max_speed\" , \"title\" : \"Max. speed,\\nkm/h\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false } ], \"column_groups\" : [] }, { \"rows\" : [ { \"v\" : \"2\" , \"raw\" : 2.0 , \"name\" : \"Trips\" , \"highlight\" : false }, { \"v\" : \"32.8\" , \"raw\" : 32.8 , \"name\" : \"Total trips length, km\" , \"highlight\" : false }, { \"v\" : \"03:50\" , \"raw\" : 230.0 , \"name\" : \"Travel time\" , \"highlight\" : false }, { \"v\" : \"8.5\" , \"raw\" : 8.5 , \"name\" : \"Average speed, km/h\" , \"highlight\" : false }, { \"v\" : \"27\" , \"raw\" : 27.0 , \"name\" : \"Max. speed, km/h\" , \"highlight\" : false }, { \"v\" : \"515855\" , \"raw\" : 515855.0 , \"name\" : \"Odometer value *, km\" , \"highlight\" : false } ], \"type\" : \"map_table\" , \"header\" : \"Summary\" }, { \"text\" : \"Odometer value at the end of the selected period.\" , \"type\" : \"text\" , \"style\" : \"small_print\" } ], \"entity_ids\" : [ 311852 ], \"additional_field\" : \"\" } ], \"from\" : \"2020-10-06 00:00:00\" , \"to\" : \"2020-10-06 23:59:59\" }","title":"Retrieve Report"},{"location":"backend-api/guides/data-retrieval/obtain-reports/#deleting-reports","text":"Once you have received and processed the report information, you can delete the generated report to clean up resources. Use the report/tracker/delete call. Use the report_id from the generate call response. API request: cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"report_id\": 1234567}' HTTP GET https://api.navixy.com/v2/report/tracker/delete?hash=a6aa75587e5c59c32d347da438505fc3&report_id=1234567","title":"Deleting Reports"},{"location":"backend-api/guides/data-retrieval/sensor-data/","text":"Retrieving Sensor and Counter Data \u00b6 This guide provides comprehensive instructions on retrieving and manipulating sensor data and counter information using the Navixy API. It includes detailed steps on working with various sensors, generating reports, and setting up rules based on sensor data. Sensor types \u00b6 In the Navixy software, the concept of a sensor represents an abstraction used to monitor and collect data from various IoT sensing devices. This abstraction seamlessly integrates both the software and hardware perspectives. From a hardware standpoint, a sensor can range from a simple thermometer that measures temperature to a sophisticated dash cam that analyzes in-vehicle video footage. In the software, these sensors are treated as data sources that provide valuable information for monitoring and analysis. Navixy supports both Physical sensors and Virtual sensors . Physical sensors include measurement sensors (e.g., temperature, voltage), discrete sensors (e.g., ignition on/off, door open/closed), and counters (e.g., odometer, engine hours). Virtual sensors, on the other hand, help to further transform and interpret the values from physical sensors, enabling advanced data processing and custom metrics creation. Physical sensors \u00b6 Within the category of Physical sensors, Navixy differentiates three categories of sensors: Measurement sensors : These sensors measure and report continuous data points such as temperature, voltage, or fuel level. For example, a coolant temperature sensor that monitors the engine coolant temperature. Discrete sensors : These sensors detect and report binary states such as on/off or open/close. For instance, an ignition sensor that indicates whether the vehicle ignition is on or off, or a door sensor that shows if a door is open or closed. Counters : These sensors track cumulative data over time, such as distance traveled or operating hours. Examples include an odometer that measures the total distance a vehicle has traveled, or an engine hours counter that logs the total operating time of an engine. For a comprehensive list of supported sensors, refer to the input_name documentation . Managing physical sensors \u00b6 There are two primary methods for creating physical sensors on the Navixy platform: automatic sensor creation and manual sensor creation. Automatic sensor creation \u00b6 Some sensors are automatically created by the platform when a new device is activated. The list of such sensors depends on the model capabilities. These automatically created sensors provide immediate and valuable data without requiring additional setup, enabling a seamless and efficient monitoring experience for IoT and telematics applications. Example: When an OBDII tracker is activated, the platform can automatically create a variety of sensors depending on the device's model and capabilities. These sensors can include: - Ignition sensor - Fuel level sensor - Coolant temperature sensor - Engine RPM sensor - etc. Manual sensor creation \u00b6 For sensors that require manual creation, follow these steps: Configure Data Sending: Ensure that the sensor is configured to send data from the device side. Verify Data Reception: Use AirConsole to verify that the platform is receiving the data correctly. Calibrate the Sensor: If necessary, calibrate the sensor (for analog sensors or those sending uncalibrated values) to ensure accurate data readings. By using these methods, you can effectively manage both automatically and manually created physical sensors, ensuring comprehensive and reliable data collection for your IoT and telematics applications. Retrieving physical sensor data \u00b6 Current sensor values \u00b6 To retrieve current sensor values, use the following API calls: Input states: get_inputs CAN and OBD sensor data: get_diagnostics Fuel sensor data: get_fuel Other metering sensor readings: get_readings Comprehensive sensor data \u00b6 To retrieve data from all sensors, states, and counters of a device, use the tracker/readings API call. Example response: { \"success\" : true , \"inputs\" : [ { \"label\" : \"Board voltage\" , \"units\" : \"V\" , \"name\" : \"board_voltage\" , \"type\" : \"power\" , \"value\" : 26.13 , \"units_type\" : \"custom\" , \"converted_units_type\" : null , \"converted_value\" : null , \"update_time\" : \"2021-06-01 15:23:03\" }, { \"label\" : \"Analog sensor #1\" , \"units\" : \"\" , \"name\" : \"analog_1\" , \"type\" : \"fuel\" , \"min_value\" : 0.0 , \"max_value\" : 450.0 , \"value\" : 269.82 , \"units_type\" : \"litre\" , \"converted_units_type\" : null , \"converted_value\" : null , \"update_time\" : \"2021-06-01 15:23:03\" } ], \"states\" : [ { \"field\" : \"battery_level\" , \"value\" : 4.01 , \"update_time\" : \"2021-06-01 15:23:03\" }, { \"field\" : \"input_status\" , \"value\" : 0 , \"update_time\" : \"2021-06-01 15:23:03\" }, { \"field\" : \"output_status\" , \"value\" : 3 , \"update_time\" : \"2021-06-01 15:23:03\" } ] } Note: The input_status and output_status fields provide binary information in decimal form. For example, an output_status of 3 (binary 11) indicates that both output 1 and output 2 are ON. Batch retrieval for multiple devices \u00b6 To optimize requests for multiple devices, use the tracker/readings/batch_list API call. Historical sensor data \u00b6 To retrieve historical data from measurement sensors (up to 30 days), use the tracker/sensor/data/read API call. Specify the sensor ID, which can be obtained using the sensor/list request. Using counters \u00b6 Counters are tools for monitoring specific metrics, such as odometer (mileage) and engine hours. Counter creation \u00b6 To create a counter, use the value/set API call. Example for creating an odometer counter: curl -X POST 'https://api.navixy.com/v2/tracker/counter/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 311852, \"type\": \"odometer\", \"value\": 98342.1}' Example for creating an engine hours counter: curl -X POST 'https://api.navixy.com/v2/tracker/counter/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 311852, \"type\": \"engine_hours\", \"value\": 2368.2}' Retrieving counter values \u00b6 Get all counter values: get_counters Get specific counter type for one device: value/get Get counter values for multiple devices: value/list Historical counter data \u00b6 To retrieve counter values with timestamps for a specific period, use the data/list API call. Example response: { \"success\" : true , \"list\" : [ { \"value\" : 581321.0 , \"update_time\" : \"2021-05-30 12:16:01\" }, { \"value\" : 581322.0 , \"update_time\" : \"2021-05-30 12:36:01\" }, { \"value\" : 581323.0 , \"update_time\" : \"2021-05-30 12:56:01\" }, { \"value\" : 581324.0 , \"update_time\" : \"2021-05-30 13:16:01\" }, { \"value\" : 581325.0 , \"update_time\" : \"2021-05-30 13:36:01\" } ] } Aggregated counter data \u00b6 To retrieve counted values for a specific period: - Mileage: stats/mileage - Engine hours: stats/engine_hours Virtual sensors \u00b6 Virtual sensors provide an additional server-side layer where users can process input values to produce derived output values. They can be configured to analyze and manipulate data from other sensors, creating custom metrics or alerts. By interpreting and translating raw data from physical sensors, virtual sensors make information more comprehensible and actionable. They are particularly useful for monitoring ignition states, translating complex sensor values, and working with predefined sets of values. Virtual sensor object structure: { \"type\" : \"virtual\" , \"id\" : 1700049 , \"sensor_type\" : \"virtual_ignition\" , \"name\" : \"Virtual Ignition\" , \"input_name\" : \"board_voltage\" , \"parameters\" : { \"calc_method\" : \"in_range\" , \"range_from\" : 13.4 , \"value_titles\" : [{ \"value\" : \"0\" , \"title\" : \"Off\" }, { \"value\" : \"1\" , \"title\" : \"On\" }] } } Key parameters: Field Type Description type string Must be set as virtual for virtual sensors. id int The sensor's ID. sensor_type enum Must be \"virtual_ignition\" for virtual ignition sensor or \"state\" for others. name string Name of the sensor. May contain up to 100 characters. input_name string Source input field (identifier). Indicates which sensor provides the information to the platform. parameters object Additional parameters for the sensor. calc_method enum Method of sensor value calculation. Must be one of: in_range , identity , bit_index . range_from double Lower boundary of the range (used with \"in_range\" calculation method). range_to double Upper boundary of the range (used with \"in_range\" calculation method). bit_index int Bit index in the input field source value (used with \"bit_index\" calculation method). Range: [1..N]. value_titles array Mapping for assigning special titles to sensor values. value string Raw sensor value from the device. Max size: 64 characters. title string Custom title for the sensor value. Max size: 64 characters. Notes: - Only one virtual sensor of the type virtual_ignition is allowed per GPS device. - For the in_range calculation method, at least one of range_from or range_to must be specified. - The bit_index field is required for the bit_index calculation method, and all values within \"value_titles\" must be unique. Use cases for virtual sensors \u00b6 Monitoring parameter boundaries ( in_range ) \u00b6 One of the common uses for Virtual sensor functionality is monitoring and maintaining critical parameters within specified boundaries. This sensor type is particularly useful for: Virtual ignition monitoring Temperature control Humidity regulation Fuel level management Operational principle: A virtual sensor with the in_range type operates by evaluating whether the sensor value falls within predefined boundaries. Based on this evaluation, it outputs either A value for normal operation or B value to signal a potential issue. Condition Output Description Sensor value falls within defined boundaries Value A Indicates that the sensor is operating within the expected range, signaling safe or optimal levels. Sensor value is outside defined boundaries Value B Signals that the sensor has detected a value outside the predefined range, alerting to potential issues. Example 1. Virtual ignition (evaluated on the server side) \u00b6 A particular case of a sensor the type in_range is the virtual ignition implementation calculated on the server side. This is useful for GPS tracking devices lacking a dedicated ignition input or with all physical inputs occupied. A virtual ignition sensor can be configured to detect the ignition state by monitoring significant increases in the vehicle's onboard voltage during engine startup. Implementation details: - Typical threshold for vehicles with 12V on-board electrical system : 13.2V - When board voltage exceeds threshold: Engine operational - When board voltage falls below threshold: Engine off Example 2. Sensor value normalization \u00b6 The 'Value in Range' approach can be applied to normalize various sensor readings, transforming raw data into more comprehensible and user-friendly formats. For instance, temperature data from an uncalibrated analog sensor can be translated into a more meaningful temperature scale that users can easily understand. Let's consider an example where we have a raw temperature sensor output that needs to be normalized. The raw output from the sensor might be uncalibrated and not in a human-readable format. By configuring a virtual sensor, we can translate these raw values into comprehensible temperature readings. Raw sensor output : 1020 = -10\u00b0C, 1900 = 0\u00b0C Virtual sensor configuration : type : virtual sensor_type : state name : Normalized Temperature Sensor input_name : raw_temp_sensor parameters : { ... } (additional parameters if needed) calc_method : in_range range_from : 1020 range_to : 1900 value_titles : { \"1020\" : \"-10\u00b0C\" , \"1900\" : \"0\u00b0C\" } **Configuration: { \"type\" : \"virtual\" , \"id\" : 456 , \"sensor_type\" : \"state\" , \"name\" : \"Normalized Temperature Sensor\" , \"input_name\" : \"raw_temp_sensor\" , \"calc_method\" : \"in_range\" , \"range_from\" : 1020 , \"range_to\" : 1900 , \"value_titles\" : { \"1020\" : \"-10\u00b0C\" , \"1900\" : \"0\u00b0C\" } } Mapping nominal sensor values ( identity ) \u00b6 Virtual sensors in Navixy also allow for custom definitions of received values, making them ideal for scenarios where predefined sets of nominal values (or strings) are used. You can map nominal input values into predefined output values using the identity type of virtual sensor. Applications: Type Description Examples Binary States Easily handle simple on/off or true/false states. Ignition on/off, door open/closed Multi-State Systems Manage states that have more than two conditions. Security system armed/disarmed, window open/closed/locked Enumerated States Work with a predefined set of named states. Device states like state1/state2/state3 or key1/key2/key3 This flexibility guarantees that you can accurately capture and interpret the operational status of connected equipment, providing clear insights and actionable data for IoT and telematics applications. Operational principle: 1. Received value 1 = Defined value A 2. Received value 2 = Defined value B 3. Received value 3 = Defined value C, etc. Note: For historical data on these sensors, utilize the state field value alert with the \"Report on All Events\" feature. Example 1. PTO drive engagement sensor \u00b6 Consider a truck equipped with a Power Take-Off (PTO) drive engagement sensor outputting the following values: Raw Value Meaning 0 No PTO drive engaged 1 At least one PTO drive engaged 2 Error 3 Not available A virtual sensor can translate these raw values into meaningful status information. Example 2. Hardware driver / asset identificators readings \u00b6 Certain telematics devices can identify drivers, equipment, or trailers using: - iButtons - RFID keys - Bluetooth sensors The platform identifies the nearest entity to the device, and a Virtual Sensor can display the corresponding names. Implementation: 1. Each unit (driver/equipment/trailer) is assigned a unique tag. 2. The tag serves as a hardware key recognizable by the platform. 3. When a unit connects to the device, its key is transmitted to the platform. 4. The virtual sensor displays the associated name or identifier. This method ensures clear identification of the unit currently interacting with the telematics device. Example 3. Hardware event codes reading \u00b6 The Navixy platform can process and display the most recent event code received from a device. This feature is particularly useful for systems with predefined event codes. Example: For a dash camera, you can access and display Driver Monitoring System (DMS) events through a virtual sensor. By mapping event codes with descriptions, you can log important events in a meaningful, user-friendly format. Event Code Description DMS_001 Driver fatigue detected DMS_002 Driver distraction detected DMS_003 Smoking detected DMS_004 Phone usage detected Decoding binary data ( bit_index ) \u00b6 Virtual sensors in Navixy also allow decoding complex data packets from IoT devices in binary format, where multiple parameters are consolidated into a single value. For this purpose, you should use the bit_index sensor type. Operational principle: The virtual sensor interprets specific bits within the transmitted value, allowing for the extraction of individual parameters. This method is particularly useful for telematics applications where data efficiency and clarity are critical. Example: Given a transmitted value of 011 (interpreted in little-endian format): Bit Value Meaning 1 (rightmost) 1 Driver's seat belt: 0 = fastened, 1 = unfastened 2 1 Driver's door: 0 = closed, 1 = open 3 0 Hood: 0 = closed, 1 = open To utilize this data effectively, create a separate virtual sensor for each parameter you wish to monitor. By decoding the specific bits, you can track various states and conditions of a vehicle in a precise and efficient manner, making your telematics solution more robust and insightful. Managing virtual sensors \u00b6 Creating a virtual sensor \u00b6 To create a virtual sensor, use the tracker/sensor/create API call. This allows you to define and configure virtual sensors based on specific input parameters. Virtual sensors can be used to monitor various conditions and provide meaningful insights. Example for creating a virtual ignition sensor: curl -X POST 'https://api.navixy.com/v2/tracker/sensor/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"sensor\": {\"type\": \"virtual\", \"sensor_type\": \"virtual_ignition\", \"name\": \"Virtual Ignition\", \"input_name\": \"board_voltage\", \"parameters\": {\"calc_method\": \"in_range\", \"range_from\": 13.4, \"value_titles\": [{\"value\": \"0\", \"title\": \"Off\"}, {\"value\": \"1\", \"title\": \"On\"}]}}}' This example demonstrates how to create a virtual ignition sensor that monitors the board voltage to determine the ignition state. The sensor will output \"Off\" when the voltage is below 13.4V and \"On\" when it is above. Updating a virtual sensor \u00b6 To update an existing virtual sensor, use the tracker/sensor/update API call. This is useful for modifying the parameters or configuration of an already created sensor to reflect new thresholds or settings. Example for updating a virtual ignition sensor: curl -X POST 'https://api.navixy.com/v2/tracker/sensor/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"sensor\": {\"type\": \"virtual\", \"sensor_id\": 965837, \"sensor_type\": \"virtual_ignition\", \"name\": \"Virtual Ignition\", \"input_name\": \"board_voltage\", \"parameters\": {\"calc_method\": \"in_range\", \"range_from\": 13.7, \"value_titles\": [{\"value\": \"0\", \"title\": \"Off\"}, {\"value\": \"1\", \"title\": \"On\"}]}}}' This example shows how to update a virtual ignition sensor, changing the voltage threshold from 13.4V to 13.7V. The sensor will now use the updated threshold to determine the ignition state, ensuring that the monitoring criteria are current and accurate. Retrieving virtual sensor data \u00b6 Historical data Use the tracker/sensor/data/read API call. Example: curl -X POST 'https://api.navixy.com/v2/tracker/sensor/data/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"sensor_id\": 965837, \"from\": \"2023-07-24 00:00:00\", \"to\": \"2023-07-24 23:59:00\", \"raw_data\": false}' Current values Use the tracker/readings/batch_list API call for multiple devices. Example: curl -X POST 'https://api.navixy.com/v2/tracker/readings/batch_list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"trackers\": [10181215,10038816]}' Reports \u00b6 Various reports can be generated to analyze sensor and counter data: Equipment working time report Plugin ID: 12 Shows operational times of units linked to discrete or virtual inputs. Example: curl -X POST 'https://api.navixy.com/v2/report/tracker/generate' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Equipment working time\", \"trackers\": [642546], \"from\": \"2023-07-27 00:00:00\", \"to\": \"2023-07-27 23:59:59\", \"time_filter\": {\"from\": \"00:00:00\", \"to\": \"23:59:59\", \"weekdays\": [1,2,3,4,5,6,7]}, \"plugin\": {\"hide_empty_tabs\":true,\"plugin_id\":12,\"show_seconds\":false,\"min_working_period_duration\":60,\"show_idle_percent\":true,\"filter\":false,\"sensors\":[{\"tracker_id\":642546,\"sensor_id\":1931610}]}}' Engine hours report Plugin ID: 7 Shows working duration for ignition-based sensors. Example: curl -X POST 'https://api.navixy.com/v2/report/tracker/generate' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Engine hours report\", \"trackers\": [642546], \"from\": \"2023-07-27 00:00:00\", \"to\": \"2023-07-27 23:59:59\", \"time_filter\": {\"from\": \"00:00:00\", \"to\": \"23:59:59\", \"weekdays\": [1,2,3,4,5,6,7]}, \"plugin\": {\"hide_empty_tabs\":true,\"plugin_id\":7,\"show_seconds\":false,\"show_detailed\":true,\"include_summary_sheet\":true,\"include_summary_sheet_only\":false,\"filter\":true}}' Measuring sensors report Plugin ID: 9 Displays data from measurement sensors or virtual sensors with source value calculation method. Example: curl -X POST 'https://api.navixy.com/v2/report/tracker/generate' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Measuring sensors report\", \"trackers\": [1685505], \"from\": \"2023-07-27 00:00:00\", \"to\": \"2023-07-27 23:59:59\", \"time_filter\": {\"from\": \"00:00:00\", \"to\": \"23:59:59\", \"weekdays\": [1,2,3,4,5,6,7]}, \"plugin\": {\"hide_empty_tabs\":true,\"plugin_id\":9,\"details_interval_minutes\":5,\"graph_type\":\"time\",\"smoothing\":true,\"show_address\":false,\"filter\":true,\"sensors\":[{\"tracker_id\":1685505,\"sensor_id\":613753}]}}' Vehicle readings report Plugin ID: 22 Shows data from vehicle instruments via CAN/OBD or virtual sensors. Example: ```shell curl -X POST ' https://api.navixy.com/v2/report/tracker/generate ' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Vehicle readings report\", \"trackers\": [642546], \"from\": \"2023-07-27 00:00:00\", \"to\": \"2023-07-27 23:59:59\", \"time_filter\": {\"from\":","title":"Sensor data"},{"location":"backend-api/guides/data-retrieval/sensor-data/#retrieving-sensor-and-counter-data","text":"This guide provides comprehensive instructions on retrieving and manipulating sensor data and counter information using the Navixy API. It includes detailed steps on working with various sensors, generating reports, and setting up rules based on sensor data.","title":"Retrieving Sensor and Counter Data"},{"location":"backend-api/guides/data-retrieval/sensor-data/#sensor-types","text":"In the Navixy software, the concept of a sensor represents an abstraction used to monitor and collect data from various IoT sensing devices. This abstraction seamlessly integrates both the software and hardware perspectives. From a hardware standpoint, a sensor can range from a simple thermometer that measures temperature to a sophisticated dash cam that analyzes in-vehicle video footage. In the software, these sensors are treated as data sources that provide valuable information for monitoring and analysis. Navixy supports both Physical sensors and Virtual sensors . Physical sensors include measurement sensors (e.g., temperature, voltage), discrete sensors (e.g., ignition on/off, door open/closed), and counters (e.g., odometer, engine hours). Virtual sensors, on the other hand, help to further transform and interpret the values from physical sensors, enabling advanced data processing and custom metrics creation.","title":"Sensor types"},{"location":"backend-api/guides/data-retrieval/sensor-data/#physical-sensors","text":"Within the category of Physical sensors, Navixy differentiates three categories of sensors: Measurement sensors : These sensors measure and report continuous data points such as temperature, voltage, or fuel level. For example, a coolant temperature sensor that monitors the engine coolant temperature. Discrete sensors : These sensors detect and report binary states such as on/off or open/close. For instance, an ignition sensor that indicates whether the vehicle ignition is on or off, or a door sensor that shows if a door is open or closed. Counters : These sensors track cumulative data over time, such as distance traveled or operating hours. Examples include an odometer that measures the total distance a vehicle has traveled, or an engine hours counter that logs the total operating time of an engine. For a comprehensive list of supported sensors, refer to the input_name documentation .","title":"Physical sensors"},{"location":"backend-api/guides/data-retrieval/sensor-data/#managing-physical-sensors","text":"There are two primary methods for creating physical sensors on the Navixy platform: automatic sensor creation and manual sensor creation.","title":"Managing physical sensors"},{"location":"backend-api/guides/data-retrieval/sensor-data/#retrieving-physical-sensor-data","text":"","title":"Retrieving physical sensor data"},{"location":"backend-api/guides/data-retrieval/sensor-data/#using-counters","text":"Counters are tools for monitoring specific metrics, such as odometer (mileage) and engine hours.","title":"Using counters"},{"location":"backend-api/guides/data-retrieval/sensor-data/#virtual-sensors","text":"Virtual sensors provide an additional server-side layer where users can process input values to produce derived output values. They can be configured to analyze and manipulate data from other sensors, creating custom metrics or alerts. By interpreting and translating raw data from physical sensors, virtual sensors make information more comprehensible and actionable. They are particularly useful for monitoring ignition states, translating complex sensor values, and working with predefined sets of values. Virtual sensor object structure: { \"type\" : \"virtual\" , \"id\" : 1700049 , \"sensor_type\" : \"virtual_ignition\" , \"name\" : \"Virtual Ignition\" , \"input_name\" : \"board_voltage\" , \"parameters\" : { \"calc_method\" : \"in_range\" , \"range_from\" : 13.4 , \"value_titles\" : [{ \"value\" : \"0\" , \"title\" : \"Off\" }, { \"value\" : \"1\" , \"title\" : \"On\" }] } } Key parameters: Field Type Description type string Must be set as virtual for virtual sensors. id int The sensor's ID. sensor_type enum Must be \"virtual_ignition\" for virtual ignition sensor or \"state\" for others. name string Name of the sensor. May contain up to 100 characters. input_name string Source input field (identifier). Indicates which sensor provides the information to the platform. parameters object Additional parameters for the sensor. calc_method enum Method of sensor value calculation. Must be one of: in_range , identity , bit_index . range_from double Lower boundary of the range (used with \"in_range\" calculation method). range_to double Upper boundary of the range (used with \"in_range\" calculation method). bit_index int Bit index in the input field source value (used with \"bit_index\" calculation method). Range: [1..N]. value_titles array Mapping for assigning special titles to sensor values. value string Raw sensor value from the device. Max size: 64 characters. title string Custom title for the sensor value. Max size: 64 characters. Notes: - Only one virtual sensor of the type virtual_ignition is allowed per GPS device. - For the in_range calculation method, at least one of range_from or range_to must be specified. - The bit_index field is required for the bit_index calculation method, and all values within \"value_titles\" must be unique.","title":"Virtual sensors"},{"location":"backend-api/guides/data-retrieval/sensor-data/#use-cases-for-virtual-sensors","text":"","title":"Use cases for virtual sensors"},{"location":"backend-api/guides/data-retrieval/sensor-data/#managing-virtual-sensors","text":"","title":"Managing virtual sensors"},{"location":"backend-api/guides/data-retrieval/sensor-data/#retrieving-virtual-sensor-data","text":"Historical data Use the tracker/sensor/data/read API call. Example: curl -X POST 'https://api.navixy.com/v2/tracker/sensor/data/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"sensor_id\": 965837, \"from\": \"2023-07-24 00:00:00\", \"to\": \"2023-07-24 23:59:00\", \"raw_data\": false}' Current values Use the tracker/readings/batch_list API call for multiple devices. Example: curl -X POST 'https://api.navixy.com/v2/tracker/readings/batch_list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"trackers\": [10181215,10038816]}'","title":"Retrieving virtual sensor data"},{"location":"backend-api/guides/data-retrieval/sensor-data/#reports","text":"Various reports can be generated to analyze sensor and counter data: Equipment working time report Plugin ID: 12 Shows operational times of units linked to discrete or virtual inputs. Example: curl -X POST 'https://api.navixy.com/v2/report/tracker/generate' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Equipment working time\", \"trackers\": [642546], \"from\": \"2023-07-27 00:00:00\", \"to\": \"2023-07-27 23:59:59\", \"time_filter\": {\"from\": \"00:00:00\", \"to\": \"23:59:59\", \"weekdays\": [1,2,3,4,5,6,7]}, \"plugin\": {\"hide_empty_tabs\":true,\"plugin_id\":12,\"show_seconds\":false,\"min_working_period_duration\":60,\"show_idle_percent\":true,\"filter\":false,\"sensors\":[{\"tracker_id\":642546,\"sensor_id\":1931610}]}}' Engine hours report Plugin ID: 7 Shows working duration for ignition-based sensors. Example: curl -X POST 'https://api.navixy.com/v2/report/tracker/generate' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Engine hours report\", \"trackers\": [642546], \"from\": \"2023-07-27 00:00:00\", \"to\": \"2023-07-27 23:59:59\", \"time_filter\": {\"from\": \"00:00:00\", \"to\": \"23:59:59\", \"weekdays\": [1,2,3,4,5,6,7]}, \"plugin\": {\"hide_empty_tabs\":true,\"plugin_id\":7,\"show_seconds\":false,\"show_detailed\":true,\"include_summary_sheet\":true,\"include_summary_sheet_only\":false,\"filter\":true}}' Measuring sensors report Plugin ID: 9 Displays data from measurement sensors or virtual sensors with source value calculation method. Example: curl -X POST 'https://api.navixy.com/v2/report/tracker/generate' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Measuring sensors report\", \"trackers\": [1685505], \"from\": \"2023-07-27 00:00:00\", \"to\": \"2023-07-27 23:59:59\", \"time_filter\": {\"from\": \"00:00:00\", \"to\": \"23:59:59\", \"weekdays\": [1,2,3,4,5,6,7]}, \"plugin\": {\"hide_empty_tabs\":true,\"plugin_id\":9,\"details_interval_minutes\":5,\"graph_type\":\"time\",\"smoothing\":true,\"show_address\":false,\"filter\":true,\"sensors\":[{\"tracker_id\":1685505,\"sensor_id\":613753}]}}' Vehicle readings report Plugin ID: 22 Shows data from vehicle instruments via CAN/OBD or virtual sensors. Example: ```shell curl -X POST ' https://api.navixy.com/v2/report/tracker/generate ' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Vehicle readings report\", \"trackers\": [642546], \"from\": \"2023-07-27 00:00:00\", \"to\": \"2023-07-27 23:59:59\", \"time_filter\": {\"from\":","title":"Reports"},{"location":"backend-api/guides/device-management/activate-device/","text":"This guide offers detailed, step-by-step instructions on using the Navixy API to activate GPS tracking devices and X-GPS Mobile Apps on the platform. Within a user account, you can activate: * Any GPS tracking device listed in the supported models list * X-GPS Mobile Apps Follow these steps to successfully activate your device on the platform: Step 1: Verify device model support \u00b6 Ensure that the platform supports the device model using the list_models API call. Step 2: Check available plugins \u00b6 Check all plugins available for the user with the plugin/list request. The following plugin IDs are used for activation: 44 - Device activation with optional activation code. 37 - Device activation with mandatory activation code. 35 - Mobile app activation with optional activation code. 68 - Mobile app activation with mandatory activation code. Full information about activation codes and their purposes is available here . Step 3: Activate the device \u00b6 Activate the device using the tracker/register action. GPS tracker activation \u00b6 This section provides information about activating GPS trackers using plugins 44 and 37, and the tracker/register action. Common parameters phone - Device's phone number with country code and without the + sign. apn_name - The APN that depends on your device's SIM GSM carrier. Max length 40. apn_user - This depends on your device's SIM too. Max length 40, can be empty. apn_password - This parameter depends on the GSM carrier as the two previous parameters. Max length 40, can be empty. device_id - Device's ID. The ID type used in your device can be found with the list_models action and ID type field . model - Name of the model in the platform's code. It can be found in the list_models request too. label - Label for the device. group_id - Tracker group ID, 0 if the tracker does not belong to any group. The specified group must exist. See group/list . plugin_id - Parameter ID to use. It must be listed in the available plugins list for the user . activation_code - Optional string with activation code. Not necessary for plugin 44 and mandatory for plugin 37. Activation with optional activation code \u00b6 By using plugin 44, the activation process is simplified, as the activation code is not mandatory, making it easier to manage multiple devices without needing individual codes for each. For example, let's consider a Teltonika FMB 140 device with IMEI 986575154632586 . The device's SIM phone number is 999999999969 and its APN settings are internet , user , and passwd . This device is supported on the platform, and the user has plugin 44, which allows for device activation with an optional activation code. In this case, we don't need to assign the device to a specific group, so group_id will be set to 0 . For convenience, the device label can be set to a descriptive name, such as a car's plate number, e.g., T571TO . cURL curl -X POST 'https://api.navixy.com/v2/tracker/register' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"label\": \"T571TO\", \"group_id\": 0, \"plugin_id\": 44, \"model\": \"telfmb140\", \"phone\": \"999999999969\", \"device_id\": \"986575154632586\", \"apn_name\": \"internet\", \"apn_user\": \"user\", \"apn_password\": \"passwd\" }' HTTP GET https://api.navixy.com/v2/tracker/register?hash=a6aa75587e5c59c32d347da438505fc3&label=T571TO&group_id=0&plugin_id=44&model=telfmb140&phone=999999999969&device_id=986575154632586&apn_name=internet&apn_user=user&apn_password=passwd After sending the platform will respond with the following information: { \"success\" : true , \"value\" :{ \"id\" : 833389 , \"label\" : \"T571TO\" , \"group_id\" : 0 , \"source\" :{ \"id\" : 526383 , \"device_id\" : \"986575154632586\" , \"model\" : \"telfmb140\" , \"blocked\" : false , \"tariff_id\" : 12163 , \"phone\" : \"999999999969\" , \"status_listing_id\" : null , \"creation_date\" : \"2021-06-03\" , \"tariff_end_date\" : \"2021-06-17\" }, \"clone\" : false } } Tracker object fields are described here . Activation with mandatory activation code \u00b6 When activation codes are required for device activation, use plugin 37. For example, we have a Teltonika FMB 140 device with IMEI 986575154632586 . The device's SIM phone number is 999999999969 , and its APN settings are internet , with apn_user and apn_password left empty. This device is supported on the platform, and the user has plugin 37, which mandates the use of an activation code. The API call will be as follows: cURL curl -X POST 'https://api.navixy.com/v2/tracker/register' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"label\": \"T571TO\", \"group_id\": 0, \"plugin_id\": 37, \"activation_code\": \"6045325592\", \"model\": \"telfmb140\", \"phone\": \"999999999969\", \"device_id\": \"986575154632586\", \"apn_name\": \"internet\" }' HTTP GET https://api.navixy.com/v2/tracker/register?hash=a6aa75587e5c59c32d347da438505fc3&label=T571TO&group_id=0&plugin_id=37&activation_code=6045325592&model=telfmb140&phone=999999999969&device_id=986575154632586&apn_name=internet The platform will confirm with the same information as for plugin 44. Activation without sending activation commands \u00b6 The register_quick API endpoint allows for the rapid registration of a new tracker using only its IMEI. This method is designed for situations where the device is already preconfigured and does not require automatic SMS commands to be sent for activation. It is particularly useful for managing bundles of devices efficiently. Why use register_quick \u00b6 Using the register_quick method streamlines the activation process by minimizing the parameters required for registration. This is ideal for scenarios where a large number of preconfigured GPS devices need to be activated quickly, without the need for additional configuration or SMS commands. How to use register_quick \u00b6 To use the register_quick API call, ensure that you have the necessary sub-user rights ( tracker_register ). The following parameters are required: label : A user-defined label for the tracker. It must consist of printable characters and have a length between 1 and 60. group_id : The ID of the tracker group. Use 0 if the tracker does not belong to any group. The specified group must exist (see group/list ). imei : The IMEI of the tracker. Example Request: cURL curl -X POST 'https://api.navixy.com/v2/tracker/register_quick' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"label\": \"Courier\", \"group_id\": 0, \"imei\": \"35645587458999\" }' Example Response: { \"success\" : true , \"value\" : { \"id\" : 123456 , \"label\" : \"tracker label\" , \"clone\" : false , \"group_id\" : 167 , \"avatar_file_name\" : \"file name\" , \"source\" : { \"id\" : 234567 , \"device_id\" : 9999999988888 , \"model\" : \"telfmb920\" , \"blocked\" : false , \"tariff_id\" : 345678 , \"status_listing_id\" : null , \"creation_date\" : \"2011-09-21\" , \"tariff_end_date\" : \"2016-03-24\" , \"phone\" : \"71234567890\" }, \"tag_bindings\" : [{ \"tag_id\" : 456789 , \"ordinal\" : 4 }] } } For more details on the tracker object structure, see tracker . Using the register_quick endpoint can significantly speed up the process of activating multiple preconfigured devices, making it an essential tool for managing device bundles efficiently. Troubleshooting GPS tracker activation \u00b6 There could be several reasons why a device doesn't activate. If we exclude SMS gateway issues, and it is functioning correctly, all other potential issues are listed here . After eliminating all possible issues and ensuring everything is working properly, you can send the tracker/register_retry request to avoid creating the same unit again for the user. Additionally, it is not possible to activate two devices with the same ID on the platform. Mobile app activation \u00b6 X-GPS Tracker mobile app allow for real-time monitoring of employees with smartphones and tablets. This section provides information about adding mobile devices with X-GPS Tracker mobile apps to a user account using the tracker/register action. Common parameters notification_email - Optional parameter. A notification with an invitation to install the app will be sent to the specified email. notification_phone - Optional parameter. An invitation to install the app will be sent to the specified phone. The phone should be specified in international format without the + sign. model - Enum with model always set to mobile_unknown_xgps . label - String with the name of your device. group_id - Tracker group ID, 0 if the tracker does not belong to any group. The specified group must exist. See group/list . plugin_id - Parameter ID to use. It must be listed in the available plugins list for the user . activation_code - Optional string with an activation code. Not necessary for plugin 35 and mandatory for plugin 68. Activation with optional activation code \u00b6 For example, we need to activate the app for our employee Andrew. To make it convenient, we can name the mobile device after him. Additionally, we will send an invitation via SMS using his phone number. cURL curl -X POST 'https://api.navixy.com/v2/tracker/register' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"label\": \"Andrew\", \"group_id\": 0, \"plugin_id\": 35, \"model\": \"mobile_unknown_xgps\", \"notification_phone\": \"999877459965\"}' HTTP GET https://api.navixy.com/v2/tracker/register?hash=a6aa75587e5c59c32d347da438505fc3&label=Andrew&group_id=0&plugin_id=35&model=mobile_unknown_xgps&notification_phone=999877459965 The platform will notify us about success and with information about this device. The platform will automatically assign device_id to the app. { \"success\" : true , \"value\" : { \"id\" : 833997 , \"label\" : \"Andrew\" , \"group_id\" : 0 , \"source\" : { \"id\" : 526785 , \"device_id\" : \"186196632419\" , \"model\" : \"mobile_unknown_xgps\" , \"blocked\" : false , \"tariff_id\" : 12163 , \"phone\" : null , \"status_listing_id\" : null , \"creation_date\" : \"2021-06-04\" , \"tariff_end_date\" : \"2021-06-18\" }, \"clone\" : false } } Activation with mandatory activation code \u00b6 If a user is required to use activation codes (plugin 68), we should use this parameter when activating a new device. cURL curl -X POST 'https://api.navixy.com/v2/tracker/register' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"label\": \"Andrew\", \"group_id\": 0, \"plugin_id\": 68, \"activation_code\": \"6045325592\", \"model\": \"mobile_unknown_xgps\", \"notification_phone\": \"999877459965\"}' HTTP GET https://api.navixy.com/v2/tracker/register?hash=a6aa75587e5c59c32d347da438505fc3&label=Andrew&group_id=0&plugin_id=68&activation_code=6045325592&model=mobile_unknown_xgps&notification_phone=999877459965 The platform will respond with the same information as for plugin 35.","title":"Activate a device"},{"location":"backend-api/guides/device-management/activate-device/#gps-tracker-activation","text":"This section provides information about activating GPS trackers using plugins 44 and 37, and the tracker/register action. Common parameters phone - Device's phone number with country code and without the + sign. apn_name - The APN that depends on your device's SIM GSM carrier. Max length 40. apn_user - This depends on your device's SIM too. Max length 40, can be empty. apn_password - This parameter depends on the GSM carrier as the two previous parameters. Max length 40, can be empty. device_id - Device's ID. The ID type used in your device can be found with the list_models action and ID type field . model - Name of the model in the platform's code. It can be found in the list_models request too. label - Label for the device. group_id - Tracker group ID, 0 if the tracker does not belong to any group. The specified group must exist. See group/list . plugin_id - Parameter ID to use. It must be listed in the available plugins list for the user . activation_code - Optional string with activation code. Not necessary for plugin 44 and mandatory for plugin 37.","title":"GPS tracker activation"},{"location":"backend-api/guides/device-management/activate-device/#activation-with-optional-activation-code","text":"By using plugin 44, the activation process is simplified, as the activation code is not mandatory, making it easier to manage multiple devices without needing individual codes for each. For example, let's consider a Teltonika FMB 140 device with IMEI 986575154632586 . The device's SIM phone number is 999999999969 and its APN settings are internet , user , and passwd . This device is supported on the platform, and the user has plugin 44, which allows for device activation with an optional activation code. In this case, we don't need to assign the device to a specific group, so group_id will be set to 0 . For convenience, the device label can be set to a descriptive name, such as a car's plate number, e.g., T571TO . cURL curl -X POST 'https://api.navixy.com/v2/tracker/register' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"label\": \"T571TO\", \"group_id\": 0, \"plugin_id\": 44, \"model\": \"telfmb140\", \"phone\": \"999999999969\", \"device_id\": \"986575154632586\", \"apn_name\": \"internet\", \"apn_user\": \"user\", \"apn_password\": \"passwd\" }' HTTP GET https://api.navixy.com/v2/tracker/register?hash=a6aa75587e5c59c32d347da438505fc3&label=T571TO&group_id=0&plugin_id=44&model=telfmb140&phone=999999999969&device_id=986575154632586&apn_name=internet&apn_user=user&apn_password=passwd After sending the platform will respond with the following information: { \"success\" : true , \"value\" :{ \"id\" : 833389 , \"label\" : \"T571TO\" , \"group_id\" : 0 , \"source\" :{ \"id\" : 526383 , \"device_id\" : \"986575154632586\" , \"model\" : \"telfmb140\" , \"blocked\" : false , \"tariff_id\" : 12163 , \"phone\" : \"999999999969\" , \"status_listing_id\" : null , \"creation_date\" : \"2021-06-03\" , \"tariff_end_date\" : \"2021-06-17\" }, \"clone\" : false } } Tracker object fields are described here .","title":"Activation with optional activation code"},{"location":"backend-api/guides/device-management/activate-device/#activation-with-mandatory-activation-code","text":"When activation codes are required for device activation, use plugin 37. For example, we have a Teltonika FMB 140 device with IMEI 986575154632586 . The device's SIM phone number is 999999999969 , and its APN settings are internet , with apn_user and apn_password left empty. This device is supported on the platform, and the user has plugin 37, which mandates the use of an activation code. The API call will be as follows: cURL curl -X POST 'https://api.navixy.com/v2/tracker/register' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"label\": \"T571TO\", \"group_id\": 0, \"plugin_id\": 37, \"activation_code\": \"6045325592\", \"model\": \"telfmb140\", \"phone\": \"999999999969\", \"device_id\": \"986575154632586\", \"apn_name\": \"internet\" }' HTTP GET https://api.navixy.com/v2/tracker/register?hash=a6aa75587e5c59c32d347da438505fc3&label=T571TO&group_id=0&plugin_id=37&activation_code=6045325592&model=telfmb140&phone=999999999969&device_id=986575154632586&apn_name=internet The platform will confirm with the same information as for plugin 44.","title":"Activation with mandatory activation code"},{"location":"backend-api/guides/device-management/activate-device/#activation-without-sending-activation-commands","text":"The register_quick API endpoint allows for the rapid registration of a new tracker using only its IMEI. This method is designed for situations where the device is already preconfigured and does not require automatic SMS commands to be sent for activation. It is particularly useful for managing bundles of devices efficiently.","title":"Activation without sending activation commands"},{"location":"backend-api/guides/device-management/activate-device/#troubleshooting-gps-tracker-activation","text":"There could be several reasons why a device doesn't activate. If we exclude SMS gateway issues, and it is functioning correctly, all other potential issues are listed here . After eliminating all possible issues and ensuring everything is working properly, you can send the tracker/register_retry request to avoid creating the same unit again for the user. Additionally, it is not possible to activate two devices with the same ID on the platform.","title":"Troubleshooting GPS tracker activation"},{"location":"backend-api/guides/device-management/activate-device/#mobile-app-activation","text":"X-GPS Tracker mobile app allow for real-time monitoring of employees with smartphones and tablets. This section provides information about adding mobile devices with X-GPS Tracker mobile apps to a user account using the tracker/register action. Common parameters notification_email - Optional parameter. A notification with an invitation to install the app will be sent to the specified email. notification_phone - Optional parameter. An invitation to install the app will be sent to the specified phone. The phone should be specified in international format without the + sign. model - Enum with model always set to mobile_unknown_xgps . label - String with the name of your device. group_id - Tracker group ID, 0 if the tracker does not belong to any group. The specified group must exist. See group/list . plugin_id - Parameter ID to use. It must be listed in the available plugins list for the user . activation_code - Optional string with an activation code. Not necessary for plugin 35 and mandatory for plugin 68.","title":"Mobile app activation"},{"location":"backend-api/guides/device-management/activate-device/#activation-with-optional-activation-code_1","text":"For example, we need to activate the app for our employee Andrew. To make it convenient, we can name the mobile device after him. Additionally, we will send an invitation via SMS using his phone number. cURL curl -X POST 'https://api.navixy.com/v2/tracker/register' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"label\": \"Andrew\", \"group_id\": 0, \"plugin_id\": 35, \"model\": \"mobile_unknown_xgps\", \"notification_phone\": \"999877459965\"}' HTTP GET https://api.navixy.com/v2/tracker/register?hash=a6aa75587e5c59c32d347da438505fc3&label=Andrew&group_id=0&plugin_id=35&model=mobile_unknown_xgps&notification_phone=999877459965 The platform will notify us about success and with information about this device. The platform will automatically assign device_id to the app. { \"success\" : true , \"value\" : { \"id\" : 833997 , \"label\" : \"Andrew\" , \"group_id\" : 0 , \"source\" : { \"id\" : 526785 , \"device_id\" : \"186196632419\" , \"model\" : \"mobile_unknown_xgps\" , \"blocked\" : false , \"tariff_id\" : 12163 , \"phone\" : null , \"status_listing_id\" : null , \"creation_date\" : \"2021-06-04\" , \"tariff_end_date\" : \"2021-06-18\" }, \"clone\" : false } }","title":"Activation with optional activation code"},{"location":"backend-api/guides/device-management/activate-device/#activation-with-mandatory-activation-code_1","text":"If a user is required to use activation codes (plugin 68), we should use this parameter when activating a new device. cURL curl -X POST 'https://api.navixy.com/v2/tracker/register' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"label\": \"Andrew\", \"group_id\": 0, \"plugin_id\": 68, \"activation_code\": \"6045325592\", \"model\": \"mobile_unknown_xgps\", \"notification_phone\": \"999877459965\"}' HTTP GET https://api.navixy.com/v2/tracker/register?hash=a6aa75587e5c59c32d347da438505fc3&label=Andrew&group_id=0&plugin_id=68&activation_code=6045325592&model=mobile_unknown_xgps&notification_phone=999877459965 The platform will respond with the same information as for plugin 35.","title":"Activation with mandatory activation code"},{"location":"backend-api/guides/device-management/ble-beacons/","text":"Tracking Stationary Objects with BLE Tags \u00b6 Integrating objects into the Internet of Things (IoT) is simplified with the Navixy platform, which supports tracking both movable and stationary objects. Examples of stationary objects include heavy equipment, agricultural machinery, cargo, goods, and security equipment. Installing GPS devices on each of these objects can be very expensive. A more cost-effective solution is to install one device on a vehicle or site and track the rest using inexpensive Bluetooth Low Energy (BLE) tags. In this tutorial, we will guide you through the process of tracking stationary objects. We will discuss the following: How to organize tracking for stationary objects Which GPS devices and BLE tags to use for data collection Step-by-step setup instructions, using truck trailers as an example How to obtain information about trips and usage for subsequent service work The API calls needed to retrieve information about the tags Additional use cases based on real-world scenarios Additionally, you can read more about configuration examples in our Expert Center . What you need to track stationary objects \u00b6 Various devices are able to read data from BLE beacons: Galileosky, Quecklink, Ruptela, Teltonika, TopFlyTech. In this example, we will use the Teltonika FMB920 model and the BLE beacon Eye Sensor. To begin tracking stationary objects, you'll need the following: A GPS device that can read BLE tags and is supported by the platform. BLE tags that are compatible with the GPS device. Many BLE tags can transmit information about temperature, humidity, and their battery charge, enhancing their tracking capabilities. For our purposes, we will focus on stationary objects specifically. Platform APIs that provide information about which GPS device a particular tag is near. To create custom solutions for your users using these APIs, you will need developers. Clients typically hire their own developers or contract third-party teams. Now let's examine the procedure for implementing a real-world case study: tracking truck trailers for trip and usage information and subsequent service work. How to get information about BLE beacons near the GPS device \u00b6 { \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:14:42\" , \"latitude\" : 50.3487321 , \"longitude\" : 7.58238 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } } You can read information from it: - tracker_id - int. The ID of the tracker (also known as \u201cobject_id\u201d). - hardware_id - string. The ID of the beacon. - rssi - int. RSSI stands for received signal strength indicator and represents the power of the received signal on a device. This value helps determine the distance between the beacon and the tracker. - get_time - date/time. The timestamp when this data was received. - latitude - float. Latitude coordinate. - longitude - float. Longitude coordinate. - ext_data - object. Additional beacon data, such as: - voltage - float. The voltage of the beacon. - temperature - float. The temperature reading from the beacon. API calls to get information about BLE tags \u00b6 There are two API calls that allow you to get all the necessary information about BLE beacons: Historical data from BLE tags \u00b6 The first call retrieves historical data from devices . You can set the from and to parameters for obtaining data during a specific period about connected BLE beacons. Since we need the information from the BLE tags' point of view, i.e., the trailers, let's request the information using the beacons parameter. Request example: cURL curl -X POST 'https://api.navixy.com/v2/beacon/data/read' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"59be129c1855e34ea9eb272b1e26ef1d\", \"from\": \"2023-04-17 17:00:00\", \"to\": \"2023-04-17 18:00:00\", \"beacons\": [\"7cf9501df3d6924e423cabcde4c924ff\"] }' This will show which devices were in the vicinity of this BLE beacon during period { \"list\" : [ { \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:05:42\" , \"latitude\" : 50.3487321 , \"longitude\" : 7.58238 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } }, { \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:40:22\" , \"latitude\" : 55.348890 , \"longitude\" : 6.59403 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } } ], \"success\" : true } Last data from BLE tags \u00b6 The second call retrieves information about currently connected beacons to a specific device. For example, if you want to know which trailer is currently near the device, use the following request: Request example: cURL curl -X POST 'https://api.navixy.com/v2/beacon/data/last_values' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"59be129c1855e34ea9eb272b1e26ef1d\", \"trackers\": [10181654], \"skip_older_than_seconds\": 1200 }' { \"list\" : [ { \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:40:22\" , \"latitude\" : 55.348890 , \"longitude\" : 6.59403 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } } ], \"success\" : true } This will provide information that there is a trailer with the identifier 7cf9501df3d6924e423cabcde4c924ff located next to the device. Obtaining information on trip details and usage time \u00b6 We've already gathered historical data using the first of the presented API calls, which showed on which devices the trailer was displayed at a specific time. To get information about the journeys and usage time of this trailer, we simply need to use one of the two API calls: Overall trip info \u00b6 API call track/list to get trip information for the period. This will provide general information about the trips, such as where and when they started and ended, maximum speed, mileage, and more. Request example: cURL curl -X POST 'https://api.navixy.com/v2/beacon/data/last_values' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"59be129c1855e34ea9eb272b1e26ef1d\", \"trackers\": [10181654], \"skip_older_than_seconds\": 1200 }' Response: { \"id\" : 11672 , \"start_date\" : \"2023-04-17 17:05:42\" , \"start_address\" : \"10470, County Road, Town of Clarence, Erie County, New York, United States, 14031\" , \"max_speed\" : 62 , \"end_date\" : \"2023-04-17 17:40:22\" , \"end_address\" : \"Fast Teddy's, 221, Main Street, City of Tonawanda, New York, United States, 14150\" , \"length\" : 18.91 , \"points\" : 59 , \"avg_speed\" : 49 , \"event_count\" : 3 , \"norm_fuel_consumed\" : 6.32 , \"type\" : \"regular\" , \"gsm_lbs\" : false } From this data, we can see that the trip lasted nearly 35 minutes (end_date - start_date), with an average speed of 49 km/h and a maximum speed of 62 km/h. The trip length was 18.91 km. This information allows us to determine how much to pay the driver for transporting the cargo, whether the contractual speed was exceeded, and other details. Additionally, the trip length can be used in the future to calculate the number of kilometers until the next maintenance of the trailer. Detailed trip info \u00b6 If you want a detailed track record of the trailer where the beacon is installed for displaying it in a report, for example, you can use the track/read request. This will give us data on all the points received by the platform during the journey. Request example: cURL curl -X POST 'https://api.navixy.com/v2/track/read' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 10181654, \"from\": \"2023-04-17 17:00:00\", \"to\": \"2023-04-17 18:00:00\", \"filter\": true }' Response: { \"success\" : true , \"limit_exceeded\" : true , \"list\" : [ { \"address\" : \"10470, County Road, Town of Clarence, Erie County, New York, United States, 14031\" , \"satellites\" : 10 , \"mileage\" : 0 , \"heading\" : 173 , \"speed\" : 42 , \"get_time\" : \"2023-04-17 17:05:42\" , \"alt\" : 0 , \"lat\" : 43.0318683 , \"lng\" : -78.5985733 } ] } You can use these points together with your preferred maps API to display them on a map. Other examples of using BLE tags \u00b6 Here are some other examples of how to use BLE tags with a short algorithm to get the necessary results need: Child seats \u00b6 Child seats are mandatory for passengers traveling with children. If you or the user operates a passenger transportation service, knowing whether a child seat is available in a vehicle can help you quickly determine which drivers are suitable for certain passengers and avoid wasting time and fuel. You can also find out which driver currently has a child seat installed in their vehicle. Additionally, it's important to consider passengers with two or more children and identify cars equipped with more than one child seat. To address this, you'll need to install a BLE beacon on each child seat. Next, let's say your transport booking app needs to request information from all drivers who have a child seat installed. To do this, use the beacon/last_values API call to gather information about which drivers can be assigned to a particular order. You can also use the RSSI parameter to determine if the seat is located inside the vehicle or in the trunk. To accomplish this, you'll need to conduct a few tests. For example, if the RSSI value is lower in the passenger compartment than in the trunk, the seat is likely in the trunk. As a result, you can prioritize your search for vehicles \u2013 first, those with a child seat in the passenger compartment, and then those with a child seat in the trunk. This approach ensures that you efficiently match passengers with appropriate vehicles and drivers. Agricultural machinery \u00b6 Suppose your client has agricultural machinery that can be connected to various equipment. How can you track which tractor is using a seeder and which has a plow? This information will help you understand the frequency and extent of tool usage, and also determine their current location. This way, workers can spend more time working in the field rather than searching for equipment. To achieve this, install devices on tractors and combines, as well as in tool storage areas. Place one BLE beacon on each tool in a secure spot where it is difficult to remove, preventing it from getting lost during work. Next, to determine how long the tools have been in use, query the beacon/read API call. The information from the response will be helpful, just like with the trailers in our detailed example. To determine the location of a specific tool, query beacon/last_values with a search for beacons to identify where and on which device the tool is installed. This approach ensures efficient tracking and utilization of your agricultural equipment, ultimately increasing productivity. Use on construction sites \u00b6 Construction sites often have numerous tools and expensive equipment. While installing a beacon for tracking purposes is beneficial, another concern arises \u2013 how can you ensure that the equipment is tracked frequently, and that the GPS tracker doesn't run out of power? To monitor the usage and location of the equipment, BLE beacons can also come in handy. The solution for construction sites can be similar to that of agricultural machinery \u2013 install devices on the machinery as well as on storage sites. This approach allows you to effectively track your valuable equipment, ensuring that it's being used efficiently and minimizing the risk of loss or misplacement. By keeping a close eye on your tools and machinery, you can optimize productivity at the construction site. Indoor tracking \u00b6 You can effectively track items indoors using the platform and BLE tags. All you need to do is install GPS devices in different parts of the warehouse or building and tag the objects you want to track. Here are a few examples: Tracking employees in various areas of a warehouse or store: This allows you to know which area an employee is in or how many sales assistants are near the information desk. Having this information helps improve efficiency and ensures that staff members are where they need to be. Tracking goods or machinery in different areas of the warehouse: Knowing the location of goods or equipment saves time, as you don't have to search for them throughout the warehouse. This streamlines the retrieval process, making your operations more efficient. Tracking goods with BLE beacons \u00b6 Utilizing BLE beacons for tracking can greatly benefit transport companies by allowing them to determine which truck is carrying a specific pallet of goods at any given moment. This method not only enables the tracking of goods' paths but also helps calculate transport costs more accurately. By adopting this innovative approach, transport companies can enhance their operations, making them more efficient and precise. This ultimately leads to better service for clients and more streamlined business processes.","title":"Use BLE beacons"},{"location":"backend-api/guides/device-management/ble-beacons/#tracking-stationary-objects-with-ble-tags","text":"Integrating objects into the Internet of Things (IoT) is simplified with the Navixy platform, which supports tracking both movable and stationary objects. Examples of stationary objects include heavy equipment, agricultural machinery, cargo, goods, and security equipment. Installing GPS devices on each of these objects can be very expensive. A more cost-effective solution is to install one device on a vehicle or site and track the rest using inexpensive Bluetooth Low Energy (BLE) tags. In this tutorial, we will guide you through the process of tracking stationary objects. We will discuss the following: How to organize tracking for stationary objects Which GPS devices and BLE tags to use for data collection Step-by-step setup instructions, using truck trailers as an example How to obtain information about trips and usage for subsequent service work The API calls needed to retrieve information about the tags Additional use cases based on real-world scenarios Additionally, you can read more about configuration examples in our Expert Center .","title":"Tracking Stationary Objects with BLE Tags"},{"location":"backend-api/guides/device-management/ble-beacons/#what-you-need-to-track-stationary-objects","text":"Various devices are able to read data from BLE beacons: Galileosky, Quecklink, Ruptela, Teltonika, TopFlyTech. In this example, we will use the Teltonika FMB920 model and the BLE beacon Eye Sensor. To begin tracking stationary objects, you'll need the following: A GPS device that can read BLE tags and is supported by the platform. BLE tags that are compatible with the GPS device. Many BLE tags can transmit information about temperature, humidity, and their battery charge, enhancing their tracking capabilities. For our purposes, we will focus on stationary objects specifically. Platform APIs that provide information about which GPS device a particular tag is near. To create custom solutions for your users using these APIs, you will need developers. Clients typically hire their own developers or contract third-party teams. Now let's examine the procedure for implementing a real-world case study: tracking truck trailers for trip and usage information and subsequent service work.","title":"What you need to track stationary objects"},{"location":"backend-api/guides/device-management/ble-beacons/#how-to-get-information-about-ble-beacons-near-the-gps-device","text":"{ \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:14:42\" , \"latitude\" : 50.3487321 , \"longitude\" : 7.58238 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } } You can read information from it: - tracker_id - int. The ID of the tracker (also known as \u201cobject_id\u201d). - hardware_id - string. The ID of the beacon. - rssi - int. RSSI stands for received signal strength indicator and represents the power of the received signal on a device. This value helps determine the distance between the beacon and the tracker. - get_time - date/time. The timestamp when this data was received. - latitude - float. Latitude coordinate. - longitude - float. Longitude coordinate. - ext_data - object. Additional beacon data, such as: - voltage - float. The voltage of the beacon. - temperature - float. The temperature reading from the beacon.","title":"How to get information about BLE beacons near the GPS device"},{"location":"backend-api/guides/device-management/ble-beacons/#api-calls-to-get-information-about-ble-tags","text":"There are two API calls that allow you to get all the necessary information about BLE beacons:","title":"API calls to get information about BLE tags"},{"location":"backend-api/guides/device-management/ble-beacons/#historical-data-from-ble-tags","text":"The first call retrieves historical data from devices . You can set the from and to parameters for obtaining data during a specific period about connected BLE beacons. Since we need the information from the BLE tags' point of view, i.e., the trailers, let's request the information using the beacons parameter. Request example: cURL curl -X POST 'https://api.navixy.com/v2/beacon/data/read' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"59be129c1855e34ea9eb272b1e26ef1d\", \"from\": \"2023-04-17 17:00:00\", \"to\": \"2023-04-17 18:00:00\", \"beacons\": [\"7cf9501df3d6924e423cabcde4c924ff\"] }' This will show which devices were in the vicinity of this BLE beacon during period { \"list\" : [ { \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:05:42\" , \"latitude\" : 50.3487321 , \"longitude\" : 7.58238 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } }, { \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:40:22\" , \"latitude\" : 55.348890 , \"longitude\" : 6.59403 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } } ], \"success\" : true }","title":"Historical data from BLE tags"},{"location":"backend-api/guides/device-management/ble-beacons/#last-data-from-ble-tags","text":"The second call retrieves information about currently connected beacons to a specific device. For example, if you want to know which trailer is currently near the device, use the following request: Request example: cURL curl -X POST 'https://api.navixy.com/v2/beacon/data/last_values' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"59be129c1855e34ea9eb272b1e26ef1d\", \"trackers\": [10181654], \"skip_older_than_seconds\": 1200 }' { \"list\" : [ { \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:40:22\" , \"latitude\" : 55.348890 , \"longitude\" : 6.59403 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } } ], \"success\" : true } This will provide information that there is a trailer with the identifier 7cf9501df3d6924e423cabcde4c924ff located next to the device.","title":"Last data from BLE tags"},{"location":"backend-api/guides/device-management/ble-beacons/#obtaining-information-on-trip-details-and-usage-time","text":"We've already gathered historical data using the first of the presented API calls, which showed on which devices the trailer was displayed at a specific time. To get information about the journeys and usage time of this trailer, we simply need to use one of the two API calls:","title":"Obtaining information on trip details and usage time"},{"location":"backend-api/guides/device-management/ble-beacons/#overall-trip-info","text":"API call track/list to get trip information for the period. This will provide general information about the trips, such as where and when they started and ended, maximum speed, mileage, and more. Request example: cURL curl -X POST 'https://api.navixy.com/v2/beacon/data/last_values' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"59be129c1855e34ea9eb272b1e26ef1d\", \"trackers\": [10181654], \"skip_older_than_seconds\": 1200 }' Response: { \"id\" : 11672 , \"start_date\" : \"2023-04-17 17:05:42\" , \"start_address\" : \"10470, County Road, Town of Clarence, Erie County, New York, United States, 14031\" , \"max_speed\" : 62 , \"end_date\" : \"2023-04-17 17:40:22\" , \"end_address\" : \"Fast Teddy's, 221, Main Street, City of Tonawanda, New York, United States, 14150\" , \"length\" : 18.91 , \"points\" : 59 , \"avg_speed\" : 49 , \"event_count\" : 3 , \"norm_fuel_consumed\" : 6.32 , \"type\" : \"regular\" , \"gsm_lbs\" : false } From this data, we can see that the trip lasted nearly 35 minutes (end_date - start_date), with an average speed of 49 km/h and a maximum speed of 62 km/h. The trip length was 18.91 km. This information allows us to determine how much to pay the driver for transporting the cargo, whether the contractual speed was exceeded, and other details. Additionally, the trip length can be used in the future to calculate the number of kilometers until the next maintenance of the trailer.","title":"Overall trip info"},{"location":"backend-api/guides/device-management/ble-beacons/#detailed-trip-info","text":"If you want a detailed track record of the trailer where the beacon is installed for displaying it in a report, for example, you can use the track/read request. This will give us data on all the points received by the platform during the journey. Request example: cURL curl -X POST 'https://api.navixy.com/v2/track/read' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 10181654, \"from\": \"2023-04-17 17:00:00\", \"to\": \"2023-04-17 18:00:00\", \"filter\": true }' Response: { \"success\" : true , \"limit_exceeded\" : true , \"list\" : [ { \"address\" : \"10470, County Road, Town of Clarence, Erie County, New York, United States, 14031\" , \"satellites\" : 10 , \"mileage\" : 0 , \"heading\" : 173 , \"speed\" : 42 , \"get_time\" : \"2023-04-17 17:05:42\" , \"alt\" : 0 , \"lat\" : 43.0318683 , \"lng\" : -78.5985733 } ] } You can use these points together with your preferred maps API to display them on a map.","title":"Detailed trip info"},{"location":"backend-api/guides/device-management/ble-beacons/#other-examples-of-using-ble-tags","text":"Here are some other examples of how to use BLE tags with a short algorithm to get the necessary results need:","title":"Other examples of using BLE tags"},{"location":"backend-api/guides/device-management/ble-beacons/#child-seats","text":"Child seats are mandatory for passengers traveling with children. If you or the user operates a passenger transportation service, knowing whether a child seat is available in a vehicle can help you quickly determine which drivers are suitable for certain passengers and avoid wasting time and fuel. You can also find out which driver currently has a child seat installed in their vehicle. Additionally, it's important to consider passengers with two or more children and identify cars equipped with more than one child seat. To address this, you'll need to install a BLE beacon on each child seat. Next, let's say your transport booking app needs to request information from all drivers who have a child seat installed. To do this, use the beacon/last_values API call to gather information about which drivers can be assigned to a particular order. You can also use the RSSI parameter to determine if the seat is located inside the vehicle or in the trunk. To accomplish this, you'll need to conduct a few tests. For example, if the RSSI value is lower in the passenger compartment than in the trunk, the seat is likely in the trunk. As a result, you can prioritize your search for vehicles \u2013 first, those with a child seat in the passenger compartment, and then those with a child seat in the trunk. This approach ensures that you efficiently match passengers with appropriate vehicles and drivers.","title":"Child seats"},{"location":"backend-api/guides/device-management/ble-beacons/#agricultural-machinery","text":"Suppose your client has agricultural machinery that can be connected to various equipment. How can you track which tractor is using a seeder and which has a plow? This information will help you understand the frequency and extent of tool usage, and also determine their current location. This way, workers can spend more time working in the field rather than searching for equipment. To achieve this, install devices on tractors and combines, as well as in tool storage areas. Place one BLE beacon on each tool in a secure spot where it is difficult to remove, preventing it from getting lost during work. Next, to determine how long the tools have been in use, query the beacon/read API call. The information from the response will be helpful, just like with the trailers in our detailed example. To determine the location of a specific tool, query beacon/last_values with a search for beacons to identify where and on which device the tool is installed. This approach ensures efficient tracking and utilization of your agricultural equipment, ultimately increasing productivity.","title":"Agricultural machinery"},{"location":"backend-api/guides/device-management/ble-beacons/#use-on-construction-sites","text":"Construction sites often have numerous tools and expensive equipment. While installing a beacon for tracking purposes is beneficial, another concern arises \u2013 how can you ensure that the equipment is tracked frequently, and that the GPS tracker doesn't run out of power? To monitor the usage and location of the equipment, BLE beacons can also come in handy. The solution for construction sites can be similar to that of agricultural machinery \u2013 install devices on the machinery as well as on storage sites. This approach allows you to effectively track your valuable equipment, ensuring that it's being used efficiently and minimizing the risk of loss or misplacement. By keeping a close eye on your tools and machinery, you can optimize productivity at the construction site.","title":"Use on construction sites"},{"location":"backend-api/guides/device-management/ble-beacons/#indoor-tracking","text":"You can effectively track items indoors using the platform and BLE tags. All you need to do is install GPS devices in different parts of the warehouse or building and tag the objects you want to track. Here are a few examples: Tracking employees in various areas of a warehouse or store: This allows you to know which area an employee is in or how many sales assistants are near the information desk. Having this information helps improve efficiency and ensures that staff members are where they need to be. Tracking goods or machinery in different areas of the warehouse: Knowing the location of goods or equipment saves time, as you don't have to search for them throughout the warehouse. This streamlines the retrieval process, making your operations more efficient.","title":"Indoor tracking"},{"location":"backend-api/guides/device-management/ble-beacons/#tracking-goods-with-ble-beacons","text":"Utilizing BLE beacons for tracking can greatly benefit transport companies by allowing them to determine which truck is carrying a specific pallet of goods at any given moment. This method not only enables the tracking of goods' paths but also helps calculate transport costs more accurately. By adopting this innovative approach, transport companies can enhance their operations, making them more efficient and precise. This ultimately leads to better service for clients and more streamlined business processes.","title":"Tracking goods with BLE beacons"},{"location":"backend-api/guides/device-management/send-commands/","text":"Sending Commands to a GPS Tracker via IP protocol (OTA) \u00b6 Most modern GPS tracking devices can be reconfigured remotely using IP commands sent over-the-air (OTA). With the Navixy API, you can easily change device configurations or develop applications that allow users to send commands directly from the UI. These commands can also be integrated into automation rules, status changes, or parameter triggers, offering extensive flexibility and customization for managing your telematics solutions. Sending a Command \u00b6 To send a command to a device, you only need the following parameters: tracker_id : The ID of the device to which you want to send the command. command : The text or hexadecimal representation of the command in a protocol-dependent manner. Example: Reconfiguring a Teltonika FMB140 Device \u00b6 Suppose you have a Teltonika FMB140 device with an ID of 231402 on the platform, and you want to reconfigure its IP address to 52.57.1.136 . According to the protocol, the command should be: setparam 2004:52.57.1.136 API Request \u00b6 To send this command, use the API request raw_command/send : cURL curl -X POST 'https://tracker.navixy.com/v2/tracker/raw_command/send' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 231402, \"command\": \"setparam 2004:52.57.1.136\" }' Upon successful execution, the platform will confirm that the command has been sent. This method provides a reliable and efficient way to manage and control your GPS tracking devices via IP, ensuring seamless and real-time updates to device configurations.","title":"Send commands to a device"},{"location":"backend-api/guides/device-management/send-commands/#sending-commands-to-a-gps-tracker-via-ip-protocol-ota","text":"Most modern GPS tracking devices can be reconfigured remotely using IP commands sent over-the-air (OTA). With the Navixy API, you can easily change device configurations or develop applications that allow users to send commands directly from the UI. These commands can also be integrated into automation rules, status changes, or parameter triggers, offering extensive flexibility and customization for managing your telematics solutions.","title":"Sending Commands to a GPS Tracker via IP protocol (OTA)"},{"location":"backend-api/guides/device-management/send-commands/#sending-a-command","text":"To send a command to a device, you only need the following parameters: tracker_id : The ID of the device to which you want to send the command. command : The text or hexadecimal representation of the command in a protocol-dependent manner.","title":"Sending a Command"},{"location":"backend-api/guides/device-management/send-commands/#api-request","text":"To send this command, use the API request raw_command/send : cURL curl -X POST 'https://tracker.navixy.com/v2/tracker/raw_command/send' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 231402, \"command\": \"setparam 2004:52.57.1.136\" }' Upon successful execution, the platform will confirm that the command has been sent. This method provides a reliable and efficient way to manage and control your GPS tracking devices via IP, ensuring seamless and real-time updates to device configurations.","title":"API Request"},{"location":"backend-api/guides/field-service-management/change-task-statuses/","text":"Changing Employee Statuses \u00b6 Employee statuses track the current activity of employees via their tracking devices. Examples include \"busy\" and \"not busy.\" Each tracker can have a different status list assigned. Create \u00b6 To manage employee activities effectively, create working status lists and assign them to devices. For instance, a status list for a delivery service allows drivers and supervisors to change their working status using the X-GPS app or the UI. To create a working status list, use the status/listing/create method. You need to provide the listing parameter, which is a status_listing object without the \"id\" and \"entries\" fields. Example Request to Create a Working Status List \u00b6 curl -X POST 'https://api.navixy.com/v2/status/listing/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"listing\": { \"label\": \"Delivery_service\", \"employee_controlled\": true, \"supervisor_controlled\": true } }' Example Response \u00b6 { \"success\" : true , \"id\" : 1111 } Next, add individual working statuses to the list. For example, you might have the following statuses: \"Free,\" \"Break,\" \"Pick up the goods from storage,\" and \"Deliver goods.\" Example Request to Add a Working Status \u00b6 curl -X POST 'https://api.navixy.com/v2/status/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"listing_id\": 1111, \"status\": { \"label\": \"Free\", \"color\": \"E57373\" } }' Example Response \u00b6 { \"success\" : true , \"id\" : 1 } Repeat the above request for each working status you need to add to the list. Assign \u00b6 To assign the working status list to devices, use the tracker_id and listing_id . Example Request to Assign a Status List to a Tracker \u00b6 curl -X POST 'https://api.navixy.com/v2/status/listing/tracker/assign' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 615487, \"listing_id\": 111 }' Example Response \u00b6 { \"success\" : true } Usage \u00b6 Once assigned, drivers and supervisors can change working statuses. Here are some use cases: Automated Task Assignment: Create a script to assign a new task to a driver with the working status \"Free.\" After assigning the task, the script changes the working status to \"Pick up the goods from storage.\" Task Completion: When a task is completed, a script changes the working status to \"Free\" and retrieves fields from the ERP system to create a new task and assign it to the driver. This flexible system allows for efficient management of employee activities and can be integrated with various business processes for automation.","title":"Change task statuses"},{"location":"backend-api/guides/field-service-management/change-task-statuses/#changing-employee-statuses","text":"Employee statuses track the current activity of employees via their tracking devices. Examples include \"busy\" and \"not busy.\" Each tracker can have a different status list assigned.","title":"Changing Employee Statuses"},{"location":"backend-api/guides/field-service-management/change-task-statuses/#create","text":"To manage employee activities effectively, create working status lists and assign them to devices. For instance, a status list for a delivery service allows drivers and supervisors to change their working status using the X-GPS app or the UI. To create a working status list, use the status/listing/create method. You need to provide the listing parameter, which is a status_listing object without the \"id\" and \"entries\" fields.","title":"Create"},{"location":"backend-api/guides/field-service-management/change-task-statuses/#example-request-to-create-a-working-status-list","text":"curl -X POST 'https://api.navixy.com/v2/status/listing/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"listing\": { \"label\": \"Delivery_service\", \"employee_controlled\": true, \"supervisor_controlled\": true } }'","title":"Example Request to Create a Working Status List"},{"location":"backend-api/guides/field-service-management/change-task-statuses/#example-response","text":"{ \"success\" : true , \"id\" : 1111 } Next, add individual working statuses to the list. For example, you might have the following statuses: \"Free,\" \"Break,\" \"Pick up the goods from storage,\" and \"Deliver goods.\"","title":"Example Response"},{"location":"backend-api/guides/field-service-management/change-task-statuses/#example-request-to-add-a-working-status","text":"curl -X POST 'https://api.navixy.com/v2/status/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"listing_id\": 1111, \"status\": { \"label\": \"Free\", \"color\": \"E57373\" } }'","title":"Example Request to Add a Working Status"},{"location":"backend-api/guides/field-service-management/change-task-statuses/#example-response_1","text":"{ \"success\" : true , \"id\" : 1 } Repeat the above request for each working status you need to add to the list.","title":"Example Response"},{"location":"backend-api/guides/field-service-management/change-task-statuses/#assign","text":"To assign the working status list to devices, use the tracker_id and listing_id .","title":"Assign"},{"location":"backend-api/guides/field-service-management/change-task-statuses/#example-request-to-assign-a-status-list-to-a-tracker","text":"curl -X POST 'https://api.navixy.com/v2/status/listing/tracker/assign' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 615487, \"listing_id\": 111 }'","title":"Example Request to Assign a Status List to a Tracker"},{"location":"backend-api/guides/field-service-management/change-task-statuses/#example-response_2","text":"{ \"success\" : true }","title":"Example Response"},{"location":"backend-api/guides/field-service-management/change-task-statuses/#usage","text":"Once assigned, drivers and supervisors can change working statuses. Here are some use cases: Automated Task Assignment: Create a script to assign a new task to a driver with the working status \"Free.\" After assigning the task, the script changes the working status to \"Pick up the goods from storage.\" Task Completion: When a task is completed, a script changes the working status to \"Free\" and retrieves fields from the ERP system to create a new task and assign it to the driver. This flexible system allows for efficient management of employee activities and can be integrated with various business processes for automation.","title":"Usage"},{"location":"backend-api/guides/field-service-management/check-ins/","text":"Working with Check-ins \u00b6 In Navixy, check-ins are a feature used to record and report the location and status of employees in the field. They allow employees to send real-time updates about their location, accompanied by additional data such as forms, photos, and comments. These check-ins can be used for various purposes, including verifying task completion, providing updates on job progress, and collecting field data. Check-ins are typically created using the X-GPS Tracker mobile app and can be integrated into workflows to ensure accurate and timely information from field employees. Check-ins are normally created using X-GPS Tracker mobile app. The description below is necessary only for non-standard use, such as creating your own Mobile Tracker app that works with the Navixy platform. To create check-ins in the Navixy platform, follow these steps: Step 1: Create a Form from a Template \u00b6 Use the checkin/form/create API call to create a form based on a template. In the X-GPS Tracker, the form is created when the template is selected by a user. Step 2: Create Files for Photos \u00b6 Use the checkin/image/create API call to create files for check-in photos and upload the photo data. In the X-GPS Tracker, check-in photos are created as each photo is added. Step 3: Create Form Files \u00b6 Use the checkin/form/file/create API call to create form files and upload their data. In the X-GPS Tracker, form files are created when they are added while filling out the form. Step 4: Create the Check-in \u00b6 Use the checkin/create API call to create the check-in, attaching all the necessary data. If the form includes optional fields that should be left empty for your check-in, simply refrain from adding these fields to the form submission object. File Upload Process \u00b6 Here's how to upload files to the platform. If you have multiple files to upload, add a brief delay between each upload to ensure a smooth process. Using the API calls checkin/image/create and checkin/form/file , the app requests permission to upload a file. The platform responds with the location and token for the file upload. Internal Storage Example \u00b6 The platform provides the location and token for the file upload: { \"success\" : true , \"value\" : { \"file_id\" : 111 , \"url\" : \"http://example.org/upload\" , \"expires\" : \"2020-02-03 03:04:00\" , \"file_field_name\" : \"example.png\" , \"fields\" : { \"token\" : \"a43f43ed4340b86c808ac\" } } } Upload the file using the provided URL and token: POST /upload HTTP / 1.1 Host : example.org Content-Length : 1325 Origin : http://example.org Content-Type : multipart/form-data; boundary=----WebKitFormBoundaryePkpFF7tjBAqx29L ------WebKitFormBoundaryePkpFF7tjBAqx29L Content-Disposition: form-data; name=\"token\" a43f43ed4340b86c808ac ------WebKitFormBoundaryePkpFF7tjBAqx29L Content-Disposition: form-data; name=\"example.png\"; filename=\"example.png\" Content-Type: image/png ... contents of file go here ... ------WebKitFormBoundaryePkpFF7tjBAqx29L-- Amazon S3 Example \u00b6 For the Cloud version of the platform using Amazon S3: { \"success\" : true , \"value\" : { \"file_id\" : 111 , \"url\" : \"https://example.s3.amazonaws.com/\" , \"expires\" : \"2020-02-03 03:04:00\" , \"file_field_name\" : \"file\" , \"fields\" : { \"policy\" : \"<Base64-encoded policy string>\" , \"key\" : \"user/user1/${filename}\" , \"success_action_status\" : \"200\" , \"x-amz-algorithm\" : \"AWS4-HMAC-SHA256\" , \"x-amz-credential\" : \"AKIAIOSFODNN7EXAMPLE/20151229/us-east-1/s3/aws4_request\" , \"x-amz-date\" : \"20151229T000000Z\" , \"x-amz-signature\" : \"<signature-value>\" , \"x-amz-server-side-encryption\" : \"AES256\" , \"content-type\" : \"image/png\" } } } Upload the file using the provided URL and fields: POST / HTTP / 1.1 Host : example.s3.amazonaws.com Content-Length : 1972 Origin : https://example.s3.amazonaws.com/ Content-Type : multipart/form-data; boundary=WebAppBoundary --WebAppBoundary Content-Disposition: form-data; name=\"policy\" Content-Type: text/plain <Base64-encoded policy string> --WebAppBoundary Content-Disposition: form-data; name=\"key\" Content-Type: text/plain user/user1/actual_file_name.png --WebAppBoundary Content-Disposition: form-data; name=\"success_action_status\" Content-Type: text/plain 200 --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-algorithm\" Content-Type: text/plain AWS4-HMAC-SHA256 --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-credential\" Content-Type: text/plain AKIAIOSFODNN7EXAMPLE/20151229/us-east-1/s3/aws4_request --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-date\" Content-Type: text/plain 20151229T000000Z --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-signature\" Content-Type: text/plain <signature-value> --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-server-side-encryption\" Content-Type: text/plain AES256 --WebAppBoundary Content-Disposition: form-data; name=\"file\"; filename=\"actual_file_name.png\" Content-Type: image/png ... contents of file go here ... --WebAppBoundary--","title":"Create check-ins"},{"location":"backend-api/guides/field-service-management/check-ins/#working-with-check-ins","text":"In Navixy, check-ins are a feature used to record and report the location and status of employees in the field. They allow employees to send real-time updates about their location, accompanied by additional data such as forms, photos, and comments. These check-ins can be used for various purposes, including verifying task completion, providing updates on job progress, and collecting field data. Check-ins are typically created using the X-GPS Tracker mobile app and can be integrated into workflows to ensure accurate and timely information from field employees. Check-ins are normally created using X-GPS Tracker mobile app. The description below is necessary only for non-standard use, such as creating your own Mobile Tracker app that works with the Navixy platform. To create check-ins in the Navixy platform, follow these steps:","title":"Working with Check-ins"},{"location":"backend-api/guides/field-service-management/check-ins/#step-1-create-a-form-from-a-template","text":"Use the checkin/form/create API call to create a form based on a template. In the X-GPS Tracker, the form is created when the template is selected by a user.","title":"Step 1: Create a Form from a Template"},{"location":"backend-api/guides/field-service-management/check-ins/#step-2-create-files-for-photos","text":"Use the checkin/image/create API call to create files for check-in photos and upload the photo data. In the X-GPS Tracker, check-in photos are created as each photo is added.","title":"Step 2: Create Files for Photos"},{"location":"backend-api/guides/field-service-management/check-ins/#step-3-create-form-files","text":"Use the checkin/form/file/create API call to create form files and upload their data. In the X-GPS Tracker, form files are created when they are added while filling out the form.","title":"Step 3: Create Form Files"},{"location":"backend-api/guides/field-service-management/check-ins/#step-4-create-the-check-in","text":"Use the checkin/create API call to create the check-in, attaching all the necessary data. If the form includes optional fields that should be left empty for your check-in, simply refrain from adding these fields to the form submission object.","title":"Step 4: Create the Check-in"},{"location":"backend-api/guides/field-service-management/check-ins/#file-upload-process","text":"Here's how to upload files to the platform. If you have multiple files to upload, add a brief delay between each upload to ensure a smooth process. Using the API calls checkin/image/create and checkin/form/file , the app requests permission to upload a file. The platform responds with the location and token for the file upload.","title":"File Upload Process"},{"location":"backend-api/guides/field-service-management/check-ins/#internal-storage-example","text":"The platform provides the location and token for the file upload: { \"success\" : true , \"value\" : { \"file_id\" : 111 , \"url\" : \"http://example.org/upload\" , \"expires\" : \"2020-02-03 03:04:00\" , \"file_field_name\" : \"example.png\" , \"fields\" : { \"token\" : \"a43f43ed4340b86c808ac\" } } } Upload the file using the provided URL and token: POST /upload HTTP / 1.1 Host : example.org Content-Length : 1325 Origin : http://example.org Content-Type : multipart/form-data; boundary=----WebKitFormBoundaryePkpFF7tjBAqx29L ------WebKitFormBoundaryePkpFF7tjBAqx29L Content-Disposition: form-data; name=\"token\" a43f43ed4340b86c808ac ------WebKitFormBoundaryePkpFF7tjBAqx29L Content-Disposition: form-data; name=\"example.png\"; filename=\"example.png\" Content-Type: image/png ... contents of file go here ... ------WebKitFormBoundaryePkpFF7tjBAqx29L--","title":"Internal Storage Example"},{"location":"backend-api/guides/field-service-management/check-ins/#amazon-s3-example","text":"For the Cloud version of the platform using Amazon S3: { \"success\" : true , \"value\" : { \"file_id\" : 111 , \"url\" : \"https://example.s3.amazonaws.com/\" , \"expires\" : \"2020-02-03 03:04:00\" , \"file_field_name\" : \"file\" , \"fields\" : { \"policy\" : \"<Base64-encoded policy string>\" , \"key\" : \"user/user1/${filename}\" , \"success_action_status\" : \"200\" , \"x-amz-algorithm\" : \"AWS4-HMAC-SHA256\" , \"x-amz-credential\" : \"AKIAIOSFODNN7EXAMPLE/20151229/us-east-1/s3/aws4_request\" , \"x-amz-date\" : \"20151229T000000Z\" , \"x-amz-signature\" : \"<signature-value>\" , \"x-amz-server-side-encryption\" : \"AES256\" , \"content-type\" : \"image/png\" } } } Upload the file using the provided URL and fields: POST / HTTP / 1.1 Host : example.s3.amazonaws.com Content-Length : 1972 Origin : https://example.s3.amazonaws.com/ Content-Type : multipart/form-data; boundary=WebAppBoundary --WebAppBoundary Content-Disposition: form-data; name=\"policy\" Content-Type: text/plain <Base64-encoded policy string> --WebAppBoundary Content-Disposition: form-data; name=\"key\" Content-Type: text/plain user/user1/actual_file_name.png --WebAppBoundary Content-Disposition: form-data; name=\"success_action_status\" Content-Type: text/plain 200 --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-algorithm\" Content-Type: text/plain AWS4-HMAC-SHA256 --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-credential\" Content-Type: text/plain AKIAIOSFODNN7EXAMPLE/20151229/us-east-1/s3/aws4_request --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-date\" Content-Type: text/plain 20151229T000000Z --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-signature\" Content-Type: text/plain <signature-value> --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-server-side-encryption\" Content-Type: text/plain AES256 --WebAppBoundary Content-Disposition: form-data; name=\"file\"; filename=\"actual_file_name.png\" Content-Type: image/png ... contents of file go here ... --WebAppBoundary--","title":"Amazon S3 Example"},{"location":"backend-api/guides/field-service-management/create-forms/","text":"Using Task Forms \u00b6 Task forms are versatile tools that can be utilized across various business functions such as delivery, sales, inspections, customer surveys, and field reports. The data collected through these forms can be instrumental in enhancing different aspects of your business, focusing on specific areas, or conducting market analysis. Employees can fill out these forms using the X-GPS tracker application during task completion or check-ins. Creating Forms \u00b6 To enable employees to fill out forms and for users to assign these forms to tasks, form templates must be created . Let's create a form for a delivery service, where employees deliver products like trackers and provide additional services if needed. Detailed form field types can be found here . For instance, we need a form that is submitted only within the task zone to ensure task completion is recorded only after the employee has visited the task location. All fields are required except one. Text Field 1 : Customer's and company's name. Text Field 2 : Information about delivered products. Checkbox Field : Additional services provided (minimum 1, maximum 3 options, not required). Signature Field : Customer's signature to confirm receipt of the order. API Request: \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/form/template/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"template\": { \"label\": \"Trackers Delivery\", \"description\": \"Employee, fill this form with every delivery\", \"fields\": [ { \"id\": \"Text-1\", \"type\": \"text\", \"label\": \"Customer\\' s name \", \" required \": true, \" description \": \" Specify here customer \\' s and company \\' s name \", \" max_length \": 1000, \" min_length \": 1 }, { \" id \": \" Text-2 \", \" type \": \" text \", \" label \": \" Delivered \", \" required \": true, \" description \": \" Specify here all delivered models and their amounts \", \" max_length \": 1000, \" min_length \": 1 }, { \" id \": \" Checkbox \", \" type \": \" checkbox_group \", \" label \": \" Additional options \", \" description \": \" Specify here all provided additional options \", \" group \": [ {\" label \": \" Presentation and training \"}, {\" label \": \" Additional configuration \"}, {\" label \": \" Installation \"} ], \" max_checked \": 3, \" min_checked \": 1, \" required \": false }, { \" id \": \" Signature \", \" type \": \" signature \", \" label \": \" Customer \\' s signature \", \" description \": \" Let a customer add their signature to confirm receipt of the order \", \" required \": true } ], \" submit_in_zone \": true, \" default \": true } }' Example Response: \u00b6 { \"success\" : true , \"id\" : 111 } Filling Forms \u00b6 Forms can be filled in two ways: Check-in : An employee sends their location with a filled form. Any employee can choose a created form to send with check-ins without additional assignment. Task Completion : An employee completes a task and submits a form as a progress report. The form should be assigned to the task beforehand. Assigning Forms \u00b6 A form can be assigned to an existing task with the task update call or used during task creation . create_form parameter should be false to add an already created form. Retrieving Information from Submitted Forms \u00b6 You can analyze the submitted forms in several ways: Specific Forms Submitted with Tasks \u00b6 Obtain a list of templates to get the template_id of the desired form. Retrieve the list of tasks with the specific template_id and time period. Use the task_id to download or read the form. Alternatively: - Get a list of tasks to find a specific task and obtain the form_id . - Use the form_id to read and download the forms. Specific Forms Submitted with Check-ins \u00b6 Obtain a list of check-ins to get the form_id . Use the form_id to read and download the forms. Generating Reports \u00b6 To get summarized information in a report format: - Generate a form completion report with plugin_id 70 . - Download the report.","title":"Creating forms for tasks"},{"location":"backend-api/guides/field-service-management/create-forms/#using-task-forms","text":"Task forms are versatile tools that can be utilized across various business functions such as delivery, sales, inspections, customer surveys, and field reports. The data collected through these forms can be instrumental in enhancing different aspects of your business, focusing on specific areas, or conducting market analysis. Employees can fill out these forms using the X-GPS tracker application during task completion or check-ins.","title":"Using Task Forms"},{"location":"backend-api/guides/field-service-management/create-forms/#creating-forms","text":"To enable employees to fill out forms and for users to assign these forms to tasks, form templates must be created . Let's create a form for a delivery service, where employees deliver products like trackers and provide additional services if needed. Detailed form field types can be found here . For instance, we need a form that is submitted only within the task zone to ensure task completion is recorded only after the employee has visited the task location. All fields are required except one. Text Field 1 : Customer's and company's name. Text Field 2 : Information about delivered products. Checkbox Field : Additional services provided (minimum 1, maximum 3 options, not required). Signature Field : Customer's signature to confirm receipt of the order.","title":"Creating Forms"},{"location":"backend-api/guides/field-service-management/create-forms/#filling-forms","text":"Forms can be filled in two ways: Check-in : An employee sends their location with a filled form. Any employee can choose a created form to send with check-ins without additional assignment. Task Completion : An employee completes a task and submits a form as a progress report. The form should be assigned to the task beforehand.","title":"Filling Forms"},{"location":"backend-api/guides/field-service-management/create-forms/#assigning-forms","text":"A form can be assigned to an existing task with the task update call or used during task creation . create_form parameter should be false to add an already created form.","title":"Assigning Forms"},{"location":"backend-api/guides/field-service-management/create-forms/#retrieving-information-from-submitted-forms","text":"You can analyze the submitted forms in several ways:","title":"Retrieving Information from Submitted Forms"},{"location":"backend-api/guides/field-service-management/create-forms/#specific-forms-submitted-with-tasks","text":"Obtain a list of templates to get the template_id of the desired form. Retrieve the list of tasks with the specific template_id and time period. Use the task_id to download or read the form. Alternatively: - Get a list of tasks to find a specific task and obtain the form_id . - Use the form_id to read and download the forms.","title":"Specific Forms Submitted with Tasks"},{"location":"backend-api/guides/field-service-management/create-forms/#specific-forms-submitted-with-check-ins","text":"Obtain a list of check-ins to get the form_id . Use the form_id to read and download the forms.","title":"Specific Forms Submitted with Check-ins"},{"location":"backend-api/guides/field-service-management/create-forms/#generating-reports","text":"To get summarized information in a report format: - Generate a form completion report with plugin_id 70 . - Download the report.","title":"Generating Reports"},{"location":"backend-api/guides/field-service-management/manage-tasks/","text":"How to Create and Assign Tasks \u00b6 Tasks in Navixy are a feature used to plan and monitor the activities of field workers. They help in organizing and managing various operations such as service, delivery, transportation, merchandising, and trade. Tasks provide employees with detailed information including date, time, addresses, task descriptions, and contact numbers. How Do Tasks Operate? \u00b6 Creation : Tasks are created with specific details such as the location, time, and description. They can be single-point tasks or route tasks with multiple checkpoints. Assignment : Tasks are assigned to employees, typically those equipped with tracking devices. The tasks appear on their X-GPS tracker app, providing all necessary details. Execution : Employees perform the tasks, updating their status and providing real-time information through the app. This can include check-ins, status updates, and form submissions. Monitoring : Supervisors can monitor the progress of tasks, track the location of employees, and ensure that tasks are completed within the specified parameters. Completion : Once tasks are completed, the system logs the details, allowing for reporting and analysis of field operations. Tasks can be either single-point tasks or route tasks with multiple checkpoints. This guide explains how to create and assign both types of tasks using the Navixy API. Single Task \u00b6 To create a new single task, use the task/create method. You need to provide a JSON object that contains all the necessary information about the task. Optionally, you can create a form for the task by setting the create_form parameter to true . Example \u00b6 Let's create a task for George to deliver new devices to an office on March 16th, from 12 PM to 2 PM. George's car has a tracker with ID 203190. He may be late by up to one hour due to potential traffic jams, and he needs at least 30 minutes at the office to complete the delivery and paperwork. API request: curl -X POST 'https://api.navixy.com/v2/task/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task\": { \"tracker_id\": 203190, \"location\": { \"lat\": 34.178868, \"lng\": -118.599672, \"radius\": 150 }, \"label\": \"New devices to office\", \"description\": \"16 new devices\", \"from\": \"2021-03-16 12:00:00\", \"to\": \"2021-03-16 14:00:00\", \"max_delay\": 60, \"min_stay_duration\": 30 }, \"create_form\": false }' Example Response \u00b6 { \"success\" : true , \"id\" : 111 } Route Task \u00b6 To create a new route task, use the task/route/create method. You need to provide a JSON object that contains all the necessary information about the route and its checkpoints. Example \u00b6 Let's create a route task for John to deliver products to three customers on March 18th, from 10 AM to 4 PM. John's car has a tracker with ID 669673. Each checkpoint should be completed on time, and John needs at least 10 minutes at each location to hand over the goods and complete the paperwork. API request: curl -X POST 'https://api.navixy.com/v2/task/route/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"route\": { \"tracker_id\": 669673, \"label\": \"Products delivery\", \"description\": \"12 trackers of model 1 and 37 trackers of model 2\", \"from\": \"2020-03-18 10:00:00\", \"to\": \"2020-03-18 16:00:00\" }, \"checkpoints\": [ { \"tracker_id\": 669673, \"location\": { \"lat\": 34.178868, \"lng\": -118.599672, \"radius\": 100 }, \"label\": \"Company1\", \"description\": \"5 trackers of model 1 and 15 trackers of model 2\", \"from\": \"2021-03-18 10:00:00\", \"to\": \"2021-03-18 12:00:00\", \"external_id\": \"10100\", \"max_delay\": 0, \"min_stay_duration\": 10, \"tags\": [1, 4], \"form_template_id\": 132985 }, { \"tracker_id\": 669673, \"location\": { \"lat\": 33.492830, \"lng\": -112.177673, \"radius\": 100 }, \"label\": \"Company2\", \"description\": \"4 trackers of model 1 and 12 trackers of model 2\", \"from\": \"2021-03-18 12:00:00\", \"to\": \"2021-03-18 14:00:00\", \"external_id\": \"10101\", \"max_delay\": 0, \"min_stay_duration\": 10, \"tags\": [2, 4], \"form_template_id\": 132985 }, { \"tracker_id\": 669673, \"location\": { \"lat\": 39.801066, \"lng\": -105.028685, \"radius\": 100 }, \"label\": \"Company3\", \"description\": \"3 trackers of model 1 and 10 trackers of model 2\", \"from\": \"2021-03-18 14:00:00\", \"to\": \"2021-03-18 16:00:00\", \"external_id\": \"10102\", \"max_delay\": 0, \"min_stay_duration\": 10, \"tags\": [3, 4], \"form_template_id\": 132985 } ], \"create_form\": false }' Example Response \u00b6 { \"success\" : true , \"result\" : { \"id\" : 7115375 , \"user_id\" : 184541 , \"tracker_id\" : 669673 , \"label\" : \"Products delivery\" , \"description\" : \"12 trackers of model 1 and 37 trackers of model 2\" , \"from\" : \"2021-03-18 10:00:00\" , \"to\" : \"2021-03-18 16:00:00\" , \"creation_date\" : \"2021-03-17 14:45:49\" , \"status\" : \"assigned\" , \"status_change_date\" : \"2021-03-17 14:45:49\" , \"origin\" : \"manual\" , \"checkpoint_ids\" : [ 7115376 , 7115377 , 7115378 ], \"external_id\" : null , \"type\" : \"route\" } } Route Optimization \u00b6 To optimize a route for minimizing transit time and costs, reorder the checkpoints before creating the route. Use the task/route/points/optimize method to perform this optimization. Example Request \u00b6 curl -X POST 'https://api.navixy.com/v2/task/route/points/optimize' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"start_point\": { \"lat\": 34.178868, \"lng\": -118.599672, \"departure\": \"2021-03-18 10:00:00\" }, \"route_points\": [ { \"location\": { \"lat\": 33.492830, \"lng\": -112.177673 }, \"from\": \"2021-03-18 10:00:00\", \"to\": \"2021-03-18 12:00:00\" }, { \"location\": { \"lat\": 39.801066, \"lng\": -105.028685 }, \"from\": \"2021-03-18 12:00:00\", \"to\": \"2021-03-18 14:00:00\" }, { \"location\": { \"lat\": 35.365948, \"lng\": -108.112104 }, \"from\": \"2021-03-18 14:00:00\", \"to\": \"2021-03-18 16:00:00\" } ] }' Example Response \u00b6 { \"success\" : true , \"result\" : [ 0 , 1 , 2 ] } Association with Address \u00b6 To associate a task or checkpoint with an address, include the address in the location object. Use the geocoder/search_location method to obtain an address when you have a location.","title":"Manage tasks"},{"location":"backend-api/guides/field-service-management/manage-tasks/#how-to-create-and-assign-tasks","text":"Tasks in Navixy are a feature used to plan and monitor the activities of field workers. They help in organizing and managing various operations such as service, delivery, transportation, merchandising, and trade. Tasks provide employees with detailed information including date, time, addresses, task descriptions, and contact numbers.","title":"How to Create and Assign Tasks"},{"location":"backend-api/guides/field-service-management/manage-tasks/#how-do-tasks-operate","text":"Creation : Tasks are created with specific details such as the location, time, and description. They can be single-point tasks or route tasks with multiple checkpoints. Assignment : Tasks are assigned to employees, typically those equipped with tracking devices. The tasks appear on their X-GPS tracker app, providing all necessary details. Execution : Employees perform the tasks, updating their status and providing real-time information through the app. This can include check-ins, status updates, and form submissions. Monitoring : Supervisors can monitor the progress of tasks, track the location of employees, and ensure that tasks are completed within the specified parameters. Completion : Once tasks are completed, the system logs the details, allowing for reporting and analysis of field operations. Tasks can be either single-point tasks or route tasks with multiple checkpoints. This guide explains how to create and assign both types of tasks using the Navixy API.","title":"How Do Tasks Operate?"},{"location":"backend-api/guides/field-service-management/manage-tasks/#single-task","text":"To create a new single task, use the task/create method. You need to provide a JSON object that contains all the necessary information about the task. Optionally, you can create a form for the task by setting the create_form parameter to true .","title":"Single Task"},{"location":"backend-api/guides/field-service-management/manage-tasks/#example","text":"Let's create a task for George to deliver new devices to an office on March 16th, from 12 PM to 2 PM. George's car has a tracker with ID 203190. He may be late by up to one hour due to potential traffic jams, and he needs at least 30 minutes at the office to complete the delivery and paperwork. API request: curl -X POST 'https://api.navixy.com/v2/task/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task\": { \"tracker_id\": 203190, \"location\": { \"lat\": 34.178868, \"lng\": -118.599672, \"radius\": 150 }, \"label\": \"New devices to office\", \"description\": \"16 new devices\", \"from\": \"2021-03-16 12:00:00\", \"to\": \"2021-03-16 14:00:00\", \"max_delay\": 60, \"min_stay_duration\": 30 }, \"create_form\": false }'","title":"Example"},{"location":"backend-api/guides/field-service-management/manage-tasks/#example-response","text":"{ \"success\" : true , \"id\" : 111 }","title":"Example Response"},{"location":"backend-api/guides/field-service-management/manage-tasks/#route-task","text":"To create a new route task, use the task/route/create method. You need to provide a JSON object that contains all the necessary information about the route and its checkpoints.","title":"Route Task"},{"location":"backend-api/guides/field-service-management/manage-tasks/#example_1","text":"Let's create a route task for John to deliver products to three customers on March 18th, from 10 AM to 4 PM. John's car has a tracker with ID 669673. Each checkpoint should be completed on time, and John needs at least 10 minutes at each location to hand over the goods and complete the paperwork. API request: curl -X POST 'https://api.navixy.com/v2/task/route/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"route\": { \"tracker_id\": 669673, \"label\": \"Products delivery\", \"description\": \"12 trackers of model 1 and 37 trackers of model 2\", \"from\": \"2020-03-18 10:00:00\", \"to\": \"2020-03-18 16:00:00\" }, \"checkpoints\": [ { \"tracker_id\": 669673, \"location\": { \"lat\": 34.178868, \"lng\": -118.599672, \"radius\": 100 }, \"label\": \"Company1\", \"description\": \"5 trackers of model 1 and 15 trackers of model 2\", \"from\": \"2021-03-18 10:00:00\", \"to\": \"2021-03-18 12:00:00\", \"external_id\": \"10100\", \"max_delay\": 0, \"min_stay_duration\": 10, \"tags\": [1, 4], \"form_template_id\": 132985 }, { \"tracker_id\": 669673, \"location\": { \"lat\": 33.492830, \"lng\": -112.177673, \"radius\": 100 }, \"label\": \"Company2\", \"description\": \"4 trackers of model 1 and 12 trackers of model 2\", \"from\": \"2021-03-18 12:00:00\", \"to\": \"2021-03-18 14:00:00\", \"external_id\": \"10101\", \"max_delay\": 0, \"min_stay_duration\": 10, \"tags\": [2, 4], \"form_template_id\": 132985 }, { \"tracker_id\": 669673, \"location\": { \"lat\": 39.801066, \"lng\": -105.028685, \"radius\": 100 }, \"label\": \"Company3\", \"description\": \"3 trackers of model 1 and 10 trackers of model 2\", \"from\": \"2021-03-18 14:00:00\", \"to\": \"2021-03-18 16:00:00\", \"external_id\": \"10102\", \"max_delay\": 0, \"min_stay_duration\": 10, \"tags\": [3, 4], \"form_template_id\": 132985 } ], \"create_form\": false }'","title":"Example"},{"location":"backend-api/guides/field-service-management/manage-tasks/#example-response_1","text":"{ \"success\" : true , \"result\" : { \"id\" : 7115375 , \"user_id\" : 184541 , \"tracker_id\" : 669673 , \"label\" : \"Products delivery\" , \"description\" : \"12 trackers of model 1 and 37 trackers of model 2\" , \"from\" : \"2021-03-18 10:00:00\" , \"to\" : \"2021-03-18 16:00:00\" , \"creation_date\" : \"2021-03-17 14:45:49\" , \"status\" : \"assigned\" , \"status_change_date\" : \"2021-03-17 14:45:49\" , \"origin\" : \"manual\" , \"checkpoint_ids\" : [ 7115376 , 7115377 , 7115378 ], \"external_id\" : null , \"type\" : \"route\" } }","title":"Example Response"},{"location":"backend-api/guides/field-service-management/manage-tasks/#route-optimization","text":"To optimize a route for minimizing transit time and costs, reorder the checkpoints before creating the route. Use the task/route/points/optimize method to perform this optimization.","title":"Route Optimization"},{"location":"backend-api/guides/field-service-management/manage-tasks/#example-request","text":"curl -X POST 'https://api.navixy.com/v2/task/route/points/optimize' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"start_point\": { \"lat\": 34.178868, \"lng\": -118.599672, \"departure\": \"2021-03-18 10:00:00\" }, \"route_points\": [ { \"location\": { \"lat\": 33.492830, \"lng\": -112.177673 }, \"from\": \"2021-03-18 10:00:00\", \"to\": \"2021-03-18 12:00:00\" }, { \"location\": { \"lat\": 39.801066, \"lng\": -105.028685 }, \"from\": \"2021-03-18 12:00:00\", \"to\": \"2021-03-18 14:00:00\" }, { \"location\": { \"lat\": 35.365948, \"lng\": -108.112104 }, \"from\": \"2021-03-18 14:00:00\", \"to\": \"2021-03-18 16:00:00\" } ] }'","title":"Example Request"},{"location":"backend-api/guides/field-service-management/manage-tasks/#example-response_2","text":"{ \"success\" : true , \"result\" : [ 0 , 1 , 2 ] }","title":"Example Response"},{"location":"backend-api/guides/field-service-management/manage-tasks/#association-with-address","text":"To associate a task or checkpoint with an address, include the address in the location object. Use the geocoder/search_location method to obtain an address when you have a location.","title":"Association with Address"},{"location":"backend-api/guides/field-service-management/optimize-routes/","text":"","title":"Optimizing routes"},{"location":"backend-api/guides/fleet-management/driver-journals/","text":"Using Driver Journals \u00b6 Driver Journals log all trips made by an employee within a selected period, categorizing them by status: business, private, or other. Users can view a summary of all trips, highlighting their statuses, or filter to show only specific types. This data can be exported as PDF/Excel files or printed directly. Driver Journals provide detailed trip information, including mileage, location, date, and time, enabling clients to differentiate between business and personal miles accurately. This helps in deducting business-related expenses. For ambiguous cases, trips can be marked as \"other\" and later reviewed for proper categorization. All trip data is securely stored digitally, eliminating the need for physical paperwork. However, supporting receipts for expenses like fuel should be kept for verification. For example, to generate a bill for fuel payment, you may need to categorize all trips of a device for the previous day. These records include important trip details such as driver, start/end dates, locations, trip length, and odometer readings, which can be used in your CRM. Working with Driver Journals \u00b6 Retrieving All Trips for a Period \u00b6 To generate a driver journal, first retrieve a list of possible trips using the fleet/driver_journal/proposal/list API call. API Request \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/driver/journal/proposal/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"from\": \"2021-10-26 00:00:00\", \"to\": \"2021-10-26 23:59:59\", \"tracker_id\": 311852}' Example Response \u00b6 { \"success\" : true , \"list\" : [ { \"tracker_id\" : 311852 , \"employee_id\" : 2183 , \"start_date\" : \"2021-10-26 00:00:00\" , \"end_date\" : \"2021-10-26 01:39:22\" , \"start_location\" : { \"address\" : \"123 Main St, Los Angeles, CA 90012\" , \"lat\" : 34.052235 , \"lng\" : -118.243683 }, \"end_location\" : { \"address\" : \"456 Elm St, Los Angeles, CA 90012\" , \"lat\" : 34.052235 , \"lng\" : -118.243683 }, \"length\" : 70.83 , \"start_odometer\" : 620741.0 , \"end_odometer\" : 620812.0 }, { \"tracker_id\" : 311852 , \"employee_id\" : 2183 , \"start_date\" : \"2021-10-26 01:47:22\" , \"end_date\" : \"2021-10-26 03:30:58\" , \"start_location\" : { \"address\" : \"456 Elm St, Los Angeles, CA 90012\" , \"lat\" : 34.052235 , \"lng\" : -118.243683 }, \"end_location\" : { \"address\" : \"789 Oak St, Los Angeles, CA 90012\" , \"lat\" : 34.052235 , \"lng\" : -118.243683 }, \"length\" : 45.32 , \"start_odometer\" : 620812.0 , \"end_odometer\" : 620856.0 }, { \"tracker_id\" : 311852 , \"employee_id\" : 2183 , \"start_date\" : \"2021-10-26 03:37:58\" , \"end_date\" : \"2021-10-26 04:53:18\" , \"start_location\" : { \"address\" : \"789 Oak St, Los Angeles, CA 90012\" , \"lat\" : 34.052235 , \"lng\" : -118.243683 }, \"end_location\" : { \"address\" : \"101 Pine St, Los Angeles, CA 90012\" , \"lat\" : 34.052235 , \"lng\" : -118.243683 }, \"length\" : 77.6 , \"start_odometer\" : 620856.0 , \"end_odometer\" : 620934.0 } ] } Creating Journal Entries \u00b6 Once you have a list of all trips, create driver journal entries. Specify the type of entry and optionally add a comment for each trip. API Request \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/driver/journal/entry/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"entries\": [{\"tracker_id\": 311852, \"employee_id\": 2183, \"start_date\": \"2021-10-26 00:00:00\", \"end_date\": \"2021-10-26 01:39:22\", \"start_location\": {\"address\": \"123 Main St, Los Angeles, CA 90012\", \"lat\": 34.052235, \"lng\": -118.243683}, \"end_location\": {\"address\": \"456 Elm St, Los Angeles, CA 90012\", \"lat\": 34.052235, \"lng\": -118.243683}, \"length\": 70.83, \"start_odometer\": 620741.0, \"end_odometer\": 620812.0, \"type\": \"work\", \"comment\": \"order_ID=23415\"}, {\"tracker_id\": 311852, \"employee_id\": 2183, \"start_date\": \"2021-10-26 01:47:22\", \"end_date\": \"2021-10-26 03:30:58\", \"start_location\": {\"address\": \"456 Elm St, Los Angeles, CA 90012\", \"lat\": 34.052235, \"lng\": -118.243683}, \"end_location\": {\"address\": \"789 Oak St, Los Angeles, CA 90012\", \"lat\": 34.052235, \"lng\": -118.243683}, \"length\": 45.32, \"start_odometer\": 620812.0, \"end_odometer\": 620856.0, \"type\": \"personal\", \"comment\": \"trip to a cafe\"}, {\"tracker_id\": 311852, \"employee_id\": 2183, \"start_date\": \"2021-10-26 03:37:58\", \"end_date\": \"2021-10-26 04:53:18\", \"start_location\": {\"address\": \"789 Oak St, Los Angeles, CA 90012\", \"lat\": 34.052235, \"lng\": -118.243683}, \"end_location\": {\"address\": \"101 Pine St, Los Angeles, CA 90012\", \"lat\": 34.052235, \"lng\": -118.243683}, \"length\": 77.6, \"start_odometer\": 620856.0, \"end_odometer\": 620934.0, \"type\": \"work\", \"comment\": \"order_ID=31024\"}]}' Example Response \u00b6 { \"success\" : true } Downloading the Driver Journal \u00b6 After creating the entries, you can download the driver journal in the desired format using the download API call. To display the journal in an application, use the list request. For detailed API documentation, refer to the Navixy API reference .","title":"Driver journals"},{"location":"backend-api/guides/fleet-management/driver-journals/#using-driver-journals","text":"Driver Journals log all trips made by an employee within a selected period, categorizing them by status: business, private, or other. Users can view a summary of all trips, highlighting their statuses, or filter to show only specific types. This data can be exported as PDF/Excel files or printed directly. Driver Journals provide detailed trip information, including mileage, location, date, and time, enabling clients to differentiate between business and personal miles accurately. This helps in deducting business-related expenses. For ambiguous cases, trips can be marked as \"other\" and later reviewed for proper categorization. All trip data is securely stored digitally, eliminating the need for physical paperwork. However, supporting receipts for expenses like fuel should be kept for verification. For example, to generate a bill for fuel payment, you may need to categorize all trips of a device for the previous day. These records include important trip details such as driver, start/end dates, locations, trip length, and odometer readings, which can be used in your CRM.","title":"Using Driver Journals"},{"location":"backend-api/guides/fleet-management/driver-journals/#working-with-driver-journals","text":"","title":"Working with Driver Journals"},{"location":"backend-api/guides/fleet-management/driver-journals/#retrieving-all-trips-for-a-period","text":"To generate a driver journal, first retrieve a list of possible trips using the fleet/driver_journal/proposal/list API call.","title":"Retrieving All Trips for a Period"},{"location":"backend-api/guides/fleet-management/driver-journals/#creating-journal-entries","text":"Once you have a list of all trips, create driver journal entries. Specify the type of entry and optionally add a comment for each trip.","title":"Creating Journal Entries"},{"location":"backend-api/guides/fleet-management/driver-journals/#downloading-the-driver-journal","text":"After creating the entries, you can download the driver journal in the desired format using the download API call. To display the journal in an application, use the list request. For detailed API documentation, refer to the Navixy API reference .","title":"Downloading the Driver Journal"},{"location":"backend-api/guides/fleet-management/service-works/","text":"Managing Vehicles and Service Works \u00b6 In the Navixy API, the vehicle object stores comprehensive information about a vehicle, such as its VIN, chassis number, license plate, type, dimensions, load capacity, fuel consumption, insurance details, and more. You can link a vehicle to a tracker to monitor various parameters like fuel consumption per trip and schedule timely maintenance based on mileage or engine hours. Service works are crucial for cost and risk management in vehicle maintenance. Regular maintenance helps prevent breakdowns, ensuring vehicles remain operational and safe. For example, replacing spare parts based on usage, scheduling tire replacements, and ordering necessary parts in advance can prevent delays and reduce the risk of cargo loss. Vehicle Creation \u00b6 To create a vehicle object, specify all relevant information about the vehicle. You can link the vehicle to a tracker by providing its ID in the tracker_id parameter. Example \u00b6 Creating a Ford Transit cargo van vehicle object: curl -X POST 'https://api.navixy.com/v2/vehicle/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"vehicle\": { \"additional_info\": \"January 2021\", \"avatar_file_name\": null, \"chassis_number\": \"\", \"color\": \"Blue\", \"frame_number\": \"\", \"free_insurance_policy_number\": \"\", \"free_insurance_valid_till\": null, \"fuel_cost\": 4, \"fuel_grade\": \"\", \"fuel_tank_volume\": 80, \"fuel_type\": \"diesel\", \"garage_id\": null, \"gross_weight\": null, \"icon_color\": \"1E96DC\", \"icon_id\": null, \"label\": \"Ford 53196\", \"liability_insurance_policy_number\": \"54687965555er2152\", \"liability_insurance_valid_till\": \"2022-01-12\", \"manufacture_year\": 2019, \"max_speed\": 100, \"model\": \"Transit\", \"norm_avg_fuel_consumption\": 8.3, \"passengers\": 3, \"payload_height\": 2550, \"payload_length\": 5531, \"payload_weight\": 1529, \"payload_width\": 2059, \"reg_number\": \"A53196BC\", \"subtype\": \"minivan\", \"tags\": [], \"tracker_id\": 841400, \"trailer\": null, \"type\": \"truck\", \"tyre_size\": \"R15\", \"tyres_number\": 4, \"vin\": \"XTA235KM35698512\", \"wheel_arrangement\": \"4x2\" } }' The platform will respond with: { \"success\" : true , \"id\" : 96175 } Service Work Creation \u00b6 After creating a vehicle object and assigning a device, you can create service works to manage vehicle maintenance. Each service work represents a specific maintenance task with conditions based on mileage or engine hours. Example \u00b6 Creating service works for oil change, brakes replacement, and spark plug replacement. Oil Change \u00b6 curl -X POST 'https://api.navixy.com/v2/vehicle/service_task/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"task\": { \"vehicle_id\": 96175, \"comment\": \"Oil Ford Formula F 5W30\", \"conditions\": { \"engine_hours\": { \"limit\": 328, \"notification_interval\": 18 } }, \"cost\": 28, \"description\": \"Oil Change\", \"file_ids\": [], \"notifications\": { \"sms_phones\": [\"79995699997\"], \"emails\": [\"myemail@gmail.com\"], \"push_enabled\": true }, \"repeat\": false, \"unplanned\": false } }' Brakes Replacement \u00b6 curl -X POST 'https://api.navixy.com/v2/vehicle/service_task/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"task\": { \"vehicle_id\": 96175, \"comment\": \"ATE\", \"conditions\": { \"mileage\": { \"limit\": 78000, \"notification_interval\": 75000 } }, \"cost\": 200, \"description\": \"Brakes Change\", \"file_ids\": [], \"notifications\": { \"sms_phones\": [\"79995699997\"], \"emails\": [\"myemail@gmail.com\"], \"push_enabled\": true }, \"repeat\": false, \"unplanned\": false } }' The platform will respond with the ID of the created service work: { \"success\" : true , \"id\" : 42401 }","title":"Maintenance works"},{"location":"backend-api/guides/fleet-management/service-works/#managing-vehicles-and-service-works","text":"In the Navixy API, the vehicle object stores comprehensive information about a vehicle, such as its VIN, chassis number, license plate, type, dimensions, load capacity, fuel consumption, insurance details, and more. You can link a vehicle to a tracker to monitor various parameters like fuel consumption per trip and schedule timely maintenance based on mileage or engine hours. Service works are crucial for cost and risk management in vehicle maintenance. Regular maintenance helps prevent breakdowns, ensuring vehicles remain operational and safe. For example, replacing spare parts based on usage, scheduling tire replacements, and ordering necessary parts in advance can prevent delays and reduce the risk of cargo loss.","title":"Managing Vehicles and Service Works"},{"location":"backend-api/guides/fleet-management/service-works/#vehicle-creation","text":"To create a vehicle object, specify all relevant information about the vehicle. You can link the vehicle to a tracker by providing its ID in the tracker_id parameter.","title":"Vehicle Creation"},{"location":"backend-api/guides/fleet-management/service-works/#example","text":"Creating a Ford Transit cargo van vehicle object: curl -X POST 'https://api.navixy.com/v2/vehicle/create' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"vehicle\": { \"additional_info\": \"January 2021\", \"avatar_file_name\": null, \"chassis_number\": \"\", \"color\": \"Blue\", \"frame_number\": \"\", \"free_insurance_policy_number\": \"\", \"free_insurance_valid_till\": null, \"fuel_cost\": 4, \"fuel_grade\": \"\", \"fuel_tank_volume\": 80, \"fuel_type\": \"diesel\", \"garage_id\": null, \"gross_weight\": null, \"icon_color\": \"1E96DC\", \"icon_id\": null, \"label\": \"Ford 53196\", \"liability_insurance_policy_number\": \"54687965555er2152\", \"liability_insurance_valid_till\": \"2022-01-12\", \"manufacture_year\": 2019, \"max_speed\": 100, \"model\": \"Transit\", \"norm_avg_fuel_consumption\": 8.3, \"passengers\": 3, \"payload_height\": 2550, \"payload_length\": 5531, \"payload_weight\": 1529, \"payload_width\": 2059, \"reg_number\": \"A53196BC\", \"subtype\": \"minivan\", \"tags\": [], \"tracker_id\": 841400, \"trailer\": null, \"type\": \"truck\", \"tyre_size\": \"R15\", \"tyres_number\": 4, \"vin\": \"XTA235KM35698512\", \"wheel_arrangement\": \"4x2\" } }' The platform will respond with: { \"success\" : true , \"id\" : 96175 }","title":"Example"},{"location":"backend-api/guides/fleet-management/service-works/#service-work-creation","text":"After creating a vehicle object and assigning a device, you can create service works to manage vehicle maintenance. Each service work represents a specific maintenance task with conditions based on mileage or engine hours.","title":"Service Work Creation"},{"location":"backend-api/guides/fleet-management/service-works/#example_1","text":"Creating service works for oil change, brakes replacement, and spark plug replacement.","title":"Example"},{"location":"backend-api/guides/fleet-management/use-tags/","text":"Using Tags \u00b6 Tags in the Navixy system are labels that facilitate quick and convenient searches for places, geofences, employees, tasks, trackers, and vehicles. You can create custom tags according to your needs, and each object can have multiple tags assigned. Case \u00b6 To streamline searching for objects, assign specific tags to related items. For example, if a team of employees services several places and uses specific vehicles, you can assign a unique tag to these objects. This way, you can easily find tasks assigned to these teams. Creation \u00b6 First, create the tag using the tag/create method. Let's name it \"team1.\" API request: cURL curl -X POST 'https://api.navixy.com/v2/tag/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tag\": {\"name\": \"team1\", \"color\": \"#00BFFF\"}}' HTTP GET https://api.navixy.com/v2/tag/create?hash = a6aa75587e5c59c32d347da438505fc3 & tag ={ \"name\" : \"team1\" , \"color\" : \"#00BFFF\" } The platform will reply with the created tag ID. You can find this tag using the tag/list method. Assigning \u00b6 Next, assign this tag to your objects. You can do this when updating or creating objects by adding the \"tags\" parameter: Place - update / create Task - update / create Task schedule - update / create Employee - update / create Vehicle - update / create Zone - update / create Tracker - Use the tags/set method Searching Objects with Tags \u00b6 To find all objects with a specific tag, use the tag/search method. API request: cURL curl -X POST 'https://api.navixy.com/v2/tag/search' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tag_ids\": [179227]}' HTTP GET https://api.navixy.com/v2/tag/search?hash = 22eac1c27af4be7b9d04da2ce1af111b & tag_ids =[ 179227 ] The platform will respond with objects that have the assigned tag: Response { \"success\" : true , \"result\" : { \"place\" : [ { \"id\" : 1446571 , \"location\" : { \"lat\" : 34.178868 , \"lng\" : -118.599672 , \"address\" : \"21550 W Oxnard St, Woodland Hills, CA 91367, USA\" , \"radius\" : 100 }, \"label\" : \"New place\" , \"description\" : \"\" , \"external_id\" : null , \"tags\" : [ 179227 ] } ], \"task\" : [ { \"id\" : 8280866 , \"user_id\" : 184541 , \"tracker_id\" : 669673 , \"status\" : \"assigned\" , \"status_change_date\" : \"2021-06-17 12:41:52\" , \"tags\" : [ 179227 ], \"label\" : \"New task \" , \"description\" : \"\" , \"external_id\" : null , \"creation_date\" : \"2021-06-17 12:41:37\" , \"origin\" : \"manual\" , \"location\" : { \"lat\" : 33.492830 , \"lng\" : -112.177673 , \"address\" : \"3836-3820 N 55th Ave, Phoenix, AZ 85031, USA\" , \"radius\" : 152 }, \"from\" : \"2021-06-17 00:00:00\" , \"to\" : \"2021-06-17 23:59:59\" , \"arrival_date\" : null , \"stay_duration\" : 0 , \"min_stay_duration\" : 0 , \"min_arrival_duration\" : 0 , \"max_delay\" : 0 , \"type\" : \"task\" } ], \"employee\" : [ { \"id\" : 55693 , \"tracker_id\" : 669673 , \"first_name\" : \"Andrew\" , \"middle_name\" : \"\" , \"last_name\" : \"\" , \"email\" : \"\" , \"phone\" : \"\" , \"driver_license_number\" : \"\" , \"driver_license_cats\" : \"\" , \"driver_license_issue_date\" : null , \"driver_license_valid_till\" : null , \"hardware_key\" : null , \"department_id\" : null , \"location\" : { \"lat\" : 39.801066 , \"lng\" : -105.028685 , \"address\" : \"5735 Hooker St, Denver, CO 80221, United States\" , \"radius\" : 150 }, \"personnel_number\" : \"1235341231\" , \"tags\" : [ 179227 ] } ] } }","title":"Use tags"},{"location":"backend-api/guides/fleet-management/use-tags/#using-tags","text":"Tags in the Navixy system are labels that facilitate quick and convenient searches for places, geofences, employees, tasks, trackers, and vehicles. You can create custom tags according to your needs, and each object can have multiple tags assigned.","title":"Using Tags"},{"location":"backend-api/guides/fleet-management/use-tags/#case","text":"To streamline searching for objects, assign specific tags to related items. For example, if a team of employees services several places and uses specific vehicles, you can assign a unique tag to these objects. This way, you can easily find tasks assigned to these teams.","title":"Case"},{"location":"backend-api/guides/fleet-management/use-tags/#creation","text":"First, create the tag using the tag/create method. Let's name it \"team1.\" API request: cURL curl -X POST 'https://api.navixy.com/v2/tag/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tag\": {\"name\": \"team1\", \"color\": \"#00BFFF\"}}' HTTP GET https://api.navixy.com/v2/tag/create?hash = a6aa75587e5c59c32d347da438505fc3 & tag ={ \"name\" : \"team1\" , \"color\" : \"#00BFFF\" } The platform will reply with the created tag ID. You can find this tag using the tag/list method.","title":"Creation"},{"location":"backend-api/guides/fleet-management/use-tags/#assigning","text":"Next, assign this tag to your objects. You can do this when updating or creating objects by adding the \"tags\" parameter: Place - update / create Task - update / create Task schedule - update / create Employee - update / create Vehicle - update / create Zone - update / create Tracker - Use the tags/set method","title":"Assigning"},{"location":"backend-api/guides/fleet-management/use-tags/#searching-objects-with-tags","text":"To find all objects with a specific tag, use the tag/search method. API request: cURL curl -X POST 'https://api.navixy.com/v2/tag/search' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tag_ids\": [179227]}' HTTP GET https://api.navixy.com/v2/tag/search?hash = 22eac1c27af4be7b9d04da2ce1af111b & tag_ids =[ 179227 ] The platform will respond with objects that have the assigned tag: Response { \"success\" : true , \"result\" : { \"place\" : [ { \"id\" : 1446571 , \"location\" : { \"lat\" : 34.178868 , \"lng\" : -118.599672 , \"address\" : \"21550 W Oxnard St, Woodland Hills, CA 91367, USA\" , \"radius\" : 100 }, \"label\" : \"New place\" , \"description\" : \"\" , \"external_id\" : null , \"tags\" : [ 179227 ] } ], \"task\" : [ { \"id\" : 8280866 , \"user_id\" : 184541 , \"tracker_id\" : 669673 , \"status\" : \"assigned\" , \"status_change_date\" : \"2021-06-17 12:41:52\" , \"tags\" : [ 179227 ], \"label\" : \"New task \" , \"description\" : \"\" , \"external_id\" : null , \"creation_date\" : \"2021-06-17 12:41:37\" , \"origin\" : \"manual\" , \"location\" : { \"lat\" : 33.492830 , \"lng\" : -112.177673 , \"address\" : \"3836-3820 N 55th Ave, Phoenix, AZ 85031, USA\" , \"radius\" : 152 }, \"from\" : \"2021-06-17 00:00:00\" , \"to\" : \"2021-06-17 23:59:59\" , \"arrival_date\" : null , \"stay_duration\" : 0 , \"min_stay_duration\" : 0 , \"min_arrival_duration\" : 0 , \"max_delay\" : 0 , \"type\" : \"task\" } ], \"employee\" : [ { \"id\" : 55693 , \"tracker_id\" : 669673 , \"first_name\" : \"Andrew\" , \"middle_name\" : \"\" , \"last_name\" : \"\" , \"email\" : \"\" , \"phone\" : \"\" , \"driver_license_number\" : \"\" , \"driver_license_cats\" : \"\" , \"driver_license_issue_date\" : null , \"driver_license_valid_till\" : null , \"hardware_key\" : null , \"department_id\" : null , \"location\" : { \"lat\" : 39.801066 , \"lng\" : -105.028685 , \"address\" : \"5735 Hooker St, Denver, CO 80221, United States\" , \"radius\" : 150 }, \"personnel_number\" : \"1235341231\" , \"tags\" : [ 179227 ] } ] } }","title":"Searching Objects with Tags"},{"location":"backend-api/guides/places/manage-geofences/","text":"Managing Geofences \u00b6 Geofences are virtual perimeters for real geographic areas. The Navixy platform can monitor whether an object equipped with a GPS tracker crosses a geofence border (either entering or exiting). All such events are logged, enabling users to obtain geofence reports and receive alerts. Furthermore, various rules can be assigned to events related to specific geofences. For instance, you might want to receive speeding alerts only within a certain area, such as a city or along a specific route. Geofence Creation \u00b6 To create a geofence, use the zone/create API call. There are several types of geofences, and the creation process varies between them. Circle Geofence \u00b6 The simplest geofence to create is the circle geofence, which requires only a center point and a radius. The platform will automatically calculate the borders. For example, to create a geofence with a 50-meter radius around a business park to track employees, you can use the following API request. This geofence can trigger alerts when employees arrive at or leave work. API Request: cURL curl -X POST 'https://tracker.navixy.com/v2/zone/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone\": {\"label\": \"Circle Geofence\", \"type\": \"circle\", \"center\": {\"lat\": 61.49504550221769, \"lng\": 23.775476217269897}, \"radius\": 50, \"tags\": [179227], \"color\": \"03A9F4\", \"address\":\"Address\"}}' The platform will respond with the status and the created geofence ID. This ID can be used to create a rule . Polygon Geofence \u00b6 A polygon geofence is more complex as it requires specifying multiple points where the geofence border changes direction. The maximum number of points is 100 to maintain computational efficiency. For example, to track the maximum speed of vehicles within Rome, you can create a geofence that covers the city. API Request: cURL curl -X POST 'https://tracker.navixy.com/v2/zone/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone\": {\"label\": \"Speed Limit in Rome\", \"type\": \"polygon\", \"color\": \"27A9E3\", \"address\": \"Address\"}, \"points\": [{\"lat\": 41.80970819375622, \"lng\": 12.576599121093752, \"node\": true}, {\"lat\": 41.79128073728445, \"lng\": 12.522354125976564, \"node\": true}, {\"lat\": 41.80970819375622, \"lng\": 12.38983154296875, \"node\": true}, {\"lat\": 41.86649282301996, \"lng\": 12.369232177734375, \"node\": true}, {\"lat\": 41.90943147946872, \"lng\": 12.38090515136719, \"node\": true}, {\"lat\": 41.956426414614235, \"lng\": 12.379531860351562, \"node\": true}, {\"lat\": 41.98501507352485, \"lng\": 12.435150146484375, \"node\": true}, {\"lat\": 41.98807738309159, \"lng\": 12.50724792480469, \"node\": true}, {\"lat\": 41.97531678812783, \"lng\": 12.54913330078125, \"node\": true}, {\"lat\": 41.95795827518022, \"lng\": 12.580718994140627, \"node\": true}, {\"lat\": 41.92322706102551, \"lng\": 12.61161804199219, \"node\": true}, {\"lat\": 41.902277040963696, \"lng\": 12.619171142578127, \"node\": true}, {\"lat\": 41.86904950322354, \"lng\": 12.607498168945312, \"node\": true}]}' The platform will respond with the geofence ID. Follow the next instruction to create rules. Corridor Geofence \u00b6 Corridor geofences are used for roads. They need to be accurate, and their calculated area is not as computationally intensive as polygons. Therefore, the maximum number of points is 1024. For example, to create geofences for street cleaning vehicles to ensure they follow the correct route, you can use the following API request with the sausage parameter in it: API Request: cURL curl -X POST 'https://tracker.navixy.com/v2/zone/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone\": {\"label\": \"Clean Street 1\", \"type\": \"sausage\", \"radius\": 20, \"color\": \"27A9E3\", \"address\": \"Address\"}, \"points\": [{\"lat\":21.5337018035,\"lng\":-104.8700889945,\"node\":true},{\"lat\":21.5336107362,\"lng\":-104.8691622913,\"node\":true},{\"lat\":21.5336444186,\"lng\":-104.8674470186,\"node\":true},{\"lat\":21.5336494086,\"lng\":-104.8656499386,\"node\":true},{\"lat\":21.5341084873,\"lng\":-104.8656606674,\"node\":true},{\"lat\":21.5341434171,\"lng\":-104.8661112785,\"node\":true},{\"lat\":21.534742213,\"lng\":-104.8656713963,\"node\":true},{\"lat\":21.5350266402,\"lng\":-104.8659932613,\"node\":true},{\"lat\":21.5336593886,\"lng\":-104.8669320345,\"node\":true},{\"lat\":21.5336469136,\"lng\":-104.8691529036,\"node\":true},{\"lat\":21.5337367335,\"lng\":-104.8700594902,\"node\":true},{\"lat\":21.5338427707,\"lng\":-104.8705852032,\"node\":true},{\"lat\":21.5341184672,\"lng\":-104.8718833923,\"node\":true},{\"lat\":21.5344577853,\"lng\":-104.873329103,\"node\":true},{\"lat\":21.5346199591,\"lng\":-104.8735275865,\"node\":true},{\"lat\":21.532277154,\"lng\":-104.8760032654,\"node\":true},{\"lat\":21.5312941127,\"lng\":-104.8770868778,\"node\":true},{\"lat\":21.5301214405,\"lng\":-104.8784118891,\"node\":true},{\"lat\":21.5291383846,\"lng\":-104.8793131113,\"node\":true},{\"lat\":21.5287790935,\"lng\":-104.8795759678,\"node\":true},{\"lat\":21.5284647131,\"lng\":-104.8797154427,\"node\":true},{\"lat\":21.5280804693,\"lng\":-104.8797905445,\"node\":true},{\"lat\":21.5276413324,\"lng\":-104.879822731,\"node\":true},{\"lat\":21.5273668712,\"lng\":-104.8799729347,\"node\":true}]}' The platform will provide the status and geofence ID. Corridor geofences can also be used to create special routes for vehicles carrying valuable cargo, such as cash collectors, or for patrol cars. In such cases, use the rule \"deviation from the route.\" Getting Geofence Name by a Tracker's Location \u00b6 To get the geofence name or ID where a device is located, use the zone/search_location API call. For example, to determine which geofence a device is in or to count how many devices are in a specific zone, first request the device's state and location . With the received latitude and longitude parameters, you can then check the geofences.","title":"Manage geofences"},{"location":"backend-api/guides/places/manage-geofences/#managing-geofences","text":"Geofences are virtual perimeters for real geographic areas. The Navixy platform can monitor whether an object equipped with a GPS tracker crosses a geofence border (either entering or exiting). All such events are logged, enabling users to obtain geofence reports and receive alerts. Furthermore, various rules can be assigned to events related to specific geofences. For instance, you might want to receive speeding alerts only within a certain area, such as a city or along a specific route.","title":"Managing Geofences"},{"location":"backend-api/guides/places/manage-geofences/#geofence-creation","text":"To create a geofence, use the zone/create API call. There are several types of geofences, and the creation process varies between them.","title":"Geofence Creation"},{"location":"backend-api/guides/places/manage-geofences/#circle-geofence","text":"The simplest geofence to create is the circle geofence, which requires only a center point and a radius. The platform will automatically calculate the borders. For example, to create a geofence with a 50-meter radius around a business park to track employees, you can use the following API request. This geofence can trigger alerts when employees arrive at or leave work. API Request: cURL curl -X POST 'https://tracker.navixy.com/v2/zone/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone\": {\"label\": \"Circle Geofence\", \"type\": \"circle\", \"center\": {\"lat\": 61.49504550221769, \"lng\": 23.775476217269897}, \"radius\": 50, \"tags\": [179227], \"color\": \"03A9F4\", \"address\":\"Address\"}}' The platform will respond with the status and the created geofence ID. This ID can be used to create a rule .","title":"Circle Geofence"},{"location":"backend-api/guides/places/manage-geofences/#polygon-geofence","text":"A polygon geofence is more complex as it requires specifying multiple points where the geofence border changes direction. The maximum number of points is 100 to maintain computational efficiency. For example, to track the maximum speed of vehicles within Rome, you can create a geofence that covers the city. API Request: cURL curl -X POST 'https://tracker.navixy.com/v2/zone/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone\": {\"label\": \"Speed Limit in Rome\", \"type\": \"polygon\", \"color\": \"27A9E3\", \"address\": \"Address\"}, \"points\": [{\"lat\": 41.80970819375622, \"lng\": 12.576599121093752, \"node\": true}, {\"lat\": 41.79128073728445, \"lng\": 12.522354125976564, \"node\": true}, {\"lat\": 41.80970819375622, \"lng\": 12.38983154296875, \"node\": true}, {\"lat\": 41.86649282301996, \"lng\": 12.369232177734375, \"node\": true}, {\"lat\": 41.90943147946872, \"lng\": 12.38090515136719, \"node\": true}, {\"lat\": 41.956426414614235, \"lng\": 12.379531860351562, \"node\": true}, {\"lat\": 41.98501507352485, \"lng\": 12.435150146484375, \"node\": true}, {\"lat\": 41.98807738309159, \"lng\": 12.50724792480469, \"node\": true}, {\"lat\": 41.97531678812783, \"lng\": 12.54913330078125, \"node\": true}, {\"lat\": 41.95795827518022, \"lng\": 12.580718994140627, \"node\": true}, {\"lat\": 41.92322706102551, \"lng\": 12.61161804199219, \"node\": true}, {\"lat\": 41.902277040963696, \"lng\": 12.619171142578127, \"node\": true}, {\"lat\": 41.86904950322354, \"lng\": 12.607498168945312, \"node\": true}]}' The platform will respond with the geofence ID. Follow the next instruction to create rules.","title":"Polygon Geofence"},{"location":"backend-api/guides/places/manage-geofences/#corridor-geofence","text":"Corridor geofences are used for roads. They need to be accurate, and their calculated area is not as computationally intensive as polygons. Therefore, the maximum number of points is 1024. For example, to create geofences for street cleaning vehicles to ensure they follow the correct route, you can use the following API request with the sausage parameter in it: API Request: cURL curl -X POST 'https://tracker.navixy.com/v2/zone/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone\": {\"label\": \"Clean Street 1\", \"type\": \"sausage\", \"radius\": 20, \"color\": \"27A9E3\", \"address\": \"Address\"}, \"points\": [{\"lat\":21.5337018035,\"lng\":-104.8700889945,\"node\":true},{\"lat\":21.5336107362,\"lng\":-104.8691622913,\"node\":true},{\"lat\":21.5336444186,\"lng\":-104.8674470186,\"node\":true},{\"lat\":21.5336494086,\"lng\":-104.8656499386,\"node\":true},{\"lat\":21.5341084873,\"lng\":-104.8656606674,\"node\":true},{\"lat\":21.5341434171,\"lng\":-104.8661112785,\"node\":true},{\"lat\":21.534742213,\"lng\":-104.8656713963,\"node\":true},{\"lat\":21.5350266402,\"lng\":-104.8659932613,\"node\":true},{\"lat\":21.5336593886,\"lng\":-104.8669320345,\"node\":true},{\"lat\":21.5336469136,\"lng\":-104.8691529036,\"node\":true},{\"lat\":21.5337367335,\"lng\":-104.8700594902,\"node\":true},{\"lat\":21.5338427707,\"lng\":-104.8705852032,\"node\":true},{\"lat\":21.5341184672,\"lng\":-104.8718833923,\"node\":true},{\"lat\":21.5344577853,\"lng\":-104.873329103,\"node\":true},{\"lat\":21.5346199591,\"lng\":-104.8735275865,\"node\":true},{\"lat\":21.532277154,\"lng\":-104.8760032654,\"node\":true},{\"lat\":21.5312941127,\"lng\":-104.8770868778,\"node\":true},{\"lat\":21.5301214405,\"lng\":-104.8784118891,\"node\":true},{\"lat\":21.5291383846,\"lng\":-104.8793131113,\"node\":true},{\"lat\":21.5287790935,\"lng\":-104.8795759678,\"node\":true},{\"lat\":21.5284647131,\"lng\":-104.8797154427,\"node\":true},{\"lat\":21.5280804693,\"lng\":-104.8797905445,\"node\":true},{\"lat\":21.5276413324,\"lng\":-104.879822731,\"node\":true},{\"lat\":21.5273668712,\"lng\":-104.8799729347,\"node\":true}]}' The platform will provide the status and geofence ID. Corridor geofences can also be used to create special routes for vehicles carrying valuable cargo, such as cash collectors, or for patrol cars. In such cases, use the rule \"deviation from the route.\"","title":"Corridor Geofence"},{"location":"backend-api/guides/places/manage-geofences/#getting-geofence-name-by-a-trackers-location","text":"To get the geofence name or ID where a device is located, use the zone/search_location API call. For example, to determine which geofence a device is in or to count how many devices are in a specific zone, first request the device's state and location . With the received latitude and longitude parameters, you can then check the geofences.","title":"Getting Geofence Name by a Tracker's Location"},{"location":"backend-api/guides/places/manage-pois/","text":"Managing POIs \u00b6 Points of Interest (POI), or places, can serve various purposes, such as organizing a list of frequently visited clients, simplifying task management, and analyzing business data through reports. Custom fields can be added to these places to store additional information about locations and customers, enabling the creation of custom CRM or ERP systems and easy integration with third-party systems. These fields can include phone numbers, emails, and other relevant customer data, as well as assign specific employees to customers for better management. This guide will describe how to create and use places with custom fields using the Navixy API. Creating Custom Fields and POIs \u00b6 Before using fields and POIs, we need to create them. Our goal is to create a new customer record with all necessary information and assign an employee to this customer. The employee will be able to view all information in their mobile app. The place object is described here . Example Fields for a CRM System \u00b6 For our CRM system, we need the following fields: * Label : The customer's name. * Address : The full address of the customer. * Description : Additional information about the customer, such as working hours or specific details. * Tags : Useful for searching and task management in the UI. * E-mail : The customer's email address. * Phone : The customer's phone number. * The last visit date : To track the last visit date and notify employees if the customer hasn't been visited in a while. * The last order \u2116 : To easily find the last order ID of the customer. * The last visit result : A text field for employees to specify the results of their last visit. * Responsible employee : To assign a place to a responsible employee who can see and update necessary information using their mobile app. Creating Custom Fields \u00b6 Some fields are default and cannot be changed (Label, Address, Description, and Tags). All other necessary fields should be created manually. Custom fields added here will be available for all places. First, get the entity ID to identify which entity to update and where to add fields. API Request: cURL curl -X POST 'https://api.navixy.com/v2/entity/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' The response will provide the necessary entity ID with existing fields. Add new fields to this entity. Only add fields that do not already exist. API Request: cURL curl -X POST 'https://api.navixy.com/v2/entity/fields/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"delete_missing\": true, \"entity_id\": 520, \"fields\": [{\"label\": \"E-mail\", \"required\": false, \"type\": \"email\", \"description\": \"Customer\\' s email \"}, {\" label \": \" Phone \", \" required \": false, \" type \": \" phone \", \" description \": \" Customer \\' s phone \"}, {\" label \": \" The last visit date \", \" required \": false, \" type \": \" text \", \" description \": null}, {\" label \": \" The last order \u2116 \", \" required \": false, \" type \": \" text \", \" description \": null}, {\" label \": \" The last visit result \", \" required \": false, \" type \": \" text \", \" description \": null}, {\" label \": \" Responsible employee \", \" params \": {\" responsible \": true}, \" required \": false, \" type \": \" employee \", \" description \": null}]}' The platform will confirm the update with: { \"success\" : true , \"list\" : [ { \"id\" : 2327 , \"label\" : \"E-mail\" , \"required\" : false , \"description\" : \"Customer's email\" , \"type\" : \"email\" }, { \"id\" : 2328 , \"label\" : \"Phone\" , \"required\" : false , \"description\" : \"Customer's phone\" , \"type\" : \"phone\" }, { \"id\" : 2329 , \"label\" : \"The last visit date\" , \"required\" : false , \"description\" : null , \"type\" : \"text\" }, { \"id\" : 2330 , \"label\" : \"The last order \u2116\" , \"required\" : false , \"description\" : null , \"type\" : \"text\" }, { \"id\" : 2331 , \"label\" : \"The last visit result\" , \"required\" : false , \"description\" : null , \"type\" : \"text\" }, { \"id\" : 2332 , \"label\" : \"Responsible employee\" , \"required\" : false , \"description\" : null , \"params\" : { \"responsible\" : true }, \"type\" : \"employee\" } ] } Once we have the field IDs, we can change their order in the entity. Update the entity accordingly. API Request: cURL curl -X POST 'https://api.navixy.com/v2/entity/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"entity\": {\"allowed\": true, \"id\": 520, \"type\": \"place\", \"settings\": {\"layout\": {\"sections\": [{\"label\": \"Places\", \"field_order\": [\"label\", \"location\", \"description\", \"tags\", \"2327\", \"2328\", \"2329\", \"2330\", \"2331\", \"2332\"]}]}}}}' Creating POIs \u00b6 With the fields set up, we can now create a location. The field names indicate the information we want to capture for each place. Fill in the parameters based on the client's data. API Request: cURL curl -X POST 'https://api.navixy.com/v2/place/create' \\ -H 'Content-Type: application/json' \\ -d ' { \"hash\" : \"a6aa75587e5c59c32d347da438505fc3\" , \"place\" : { \"label\" : \"Company1\" , \"description\" : \"Accepted one more deal for 7 devices next week\" , \"files\" : [] , \"fields\" : { \"2327\" : { \"value\" : \"shop1@email.com\" , \"type\" : \"email\" } , \"2328\" : { \"value\" : \"555231415221\" , \"type\" : \"phone\" } , \"2329\" : { \"value\" : \"10/10/2021\" , \"type\" : \"text\" } , \"2330\" : { \"value\" : \"87292\" , \"type\" : \"text\" } , \"2331\" : { \"value\" : \"Sold 10 devices\" , \"type\" : \"text\" } , \"2332\" : { \"value\" : 71247 , \"type\" : \"employee\" }} , \"location\" : { \"address\" : \"Lovell House, 6 Archway, Hulme, Manchester M15 5RN, UK\" , \"lat\" : 53 .46583133200717, \"lng\" : -2.2464680671691895, \"radius\" : 50 } , \"tags\" : [ 218916 ]}} The platform will confirm creation with: { \"success\" : true , \"id\" : 1521307 } id : The ID of the created place. It can be used for obtaining and updating the place object. Obtaining and Updating Information about Places \u00b6 To retrieve information about place objects (e.g., to sync this data with your CRM), use the place/list API call. To get a count of visits to places, generate a report with ID 85 . To update information about a place, use the place/update API call. Getting POI Name by a Tracker's Location \u00b6 To get the POI name or ID where a device is located, use the place/search_location API call. For example, you may want to determine which place a device is located in or count how many devices are in a particular place. To get this information, first request the device's state and location . Using the received latitude and longitude parameters, you can check the relevant places.","title":"Manage POIs"},{"location":"backend-api/guides/places/manage-pois/#managing-pois","text":"Points of Interest (POI), or places, can serve various purposes, such as organizing a list of frequently visited clients, simplifying task management, and analyzing business data through reports. Custom fields can be added to these places to store additional information about locations and customers, enabling the creation of custom CRM or ERP systems and easy integration with third-party systems. These fields can include phone numbers, emails, and other relevant customer data, as well as assign specific employees to customers for better management. This guide will describe how to create and use places with custom fields using the Navixy API.","title":"Managing POIs"},{"location":"backend-api/guides/places/manage-pois/#creating-custom-fields-and-pois","text":"Before using fields and POIs, we need to create them. Our goal is to create a new customer record with all necessary information and assign an employee to this customer. The employee will be able to view all information in their mobile app. The place object is described here .","title":"Creating Custom Fields and POIs"},{"location":"backend-api/guides/places/manage-pois/#example-fields-for-a-crm-system","text":"For our CRM system, we need the following fields: * Label : The customer's name. * Address : The full address of the customer. * Description : Additional information about the customer, such as working hours or specific details. * Tags : Useful for searching and task management in the UI. * E-mail : The customer's email address. * Phone : The customer's phone number. * The last visit date : To track the last visit date and notify employees if the customer hasn't been visited in a while. * The last order \u2116 : To easily find the last order ID of the customer. * The last visit result : A text field for employees to specify the results of their last visit. * Responsible employee : To assign a place to a responsible employee who can see and update necessary information using their mobile app.","title":"Example Fields for a CRM System"},{"location":"backend-api/guides/places/manage-pois/#creating-custom-fields","text":"Some fields are default and cannot be changed (Label, Address, Description, and Tags). All other necessary fields should be created manually. Custom fields added here will be available for all places. First, get the entity ID to identify which entity to update and where to add fields. API Request: cURL curl -X POST 'https://api.navixy.com/v2/entity/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' The response will provide the necessary entity ID with existing fields. Add new fields to this entity. Only add fields that do not already exist. API Request: cURL curl -X POST 'https://api.navixy.com/v2/entity/fields/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"delete_missing\": true, \"entity_id\": 520, \"fields\": [{\"label\": \"E-mail\", \"required\": false, \"type\": \"email\", \"description\": \"Customer\\' s email \"}, {\" label \": \" Phone \", \" required \": false, \" type \": \" phone \", \" description \": \" Customer \\' s phone \"}, {\" label \": \" The last visit date \", \" required \": false, \" type \": \" text \", \" description \": null}, {\" label \": \" The last order \u2116 \", \" required \": false, \" type \": \" text \", \" description \": null}, {\" label \": \" The last visit result \", \" required \": false, \" type \": \" text \", \" description \": null}, {\" label \": \" Responsible employee \", \" params \": {\" responsible \": true}, \" required \": false, \" type \": \" employee \", \" description \": null}]}' The platform will confirm the update with: { \"success\" : true , \"list\" : [ { \"id\" : 2327 , \"label\" : \"E-mail\" , \"required\" : false , \"description\" : \"Customer's email\" , \"type\" : \"email\" }, { \"id\" : 2328 , \"label\" : \"Phone\" , \"required\" : false , \"description\" : \"Customer's phone\" , \"type\" : \"phone\" }, { \"id\" : 2329 , \"label\" : \"The last visit date\" , \"required\" : false , \"description\" : null , \"type\" : \"text\" }, { \"id\" : 2330 , \"label\" : \"The last order \u2116\" , \"required\" : false , \"description\" : null , \"type\" : \"text\" }, { \"id\" : 2331 , \"label\" : \"The last visit result\" , \"required\" : false , \"description\" : null , \"type\" : \"text\" }, { \"id\" : 2332 , \"label\" : \"Responsible employee\" , \"required\" : false , \"description\" : null , \"params\" : { \"responsible\" : true }, \"type\" : \"employee\" } ] } Once we have the field IDs, we can change their order in the entity. Update the entity accordingly. API Request: cURL curl -X POST 'https://api.navixy.com/v2/entity/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"entity\": {\"allowed\": true, \"id\": 520, \"type\": \"place\", \"settings\": {\"layout\": {\"sections\": [{\"label\": \"Places\", \"field_order\": [\"label\", \"location\", \"description\", \"tags\", \"2327\", \"2328\", \"2329\", \"2330\", \"2331\", \"2332\"]}]}}}}'","title":"Creating Custom Fields"},{"location":"backend-api/guides/places/manage-pois/#creating-pois","text":"With the fields set up, we can now create a location. The field names indicate the information we want to capture for each place. Fill in the parameters based on the client's data. API Request: cURL curl -X POST 'https://api.navixy.com/v2/place/create' \\ -H 'Content-Type: application/json' \\ -d ' { \"hash\" : \"a6aa75587e5c59c32d347da438505fc3\" , \"place\" : { \"label\" : \"Company1\" , \"description\" : \"Accepted one more deal for 7 devices next week\" , \"files\" : [] , \"fields\" : { \"2327\" : { \"value\" : \"shop1@email.com\" , \"type\" : \"email\" } , \"2328\" : { \"value\" : \"555231415221\" , \"type\" : \"phone\" } , \"2329\" : { \"value\" : \"10/10/2021\" , \"type\" : \"text\" } , \"2330\" : { \"value\" : \"87292\" , \"type\" : \"text\" } , \"2331\" : { \"value\" : \"Sold 10 devices\" , \"type\" : \"text\" } , \"2332\" : { \"value\" : 71247 , \"type\" : \"employee\" }} , \"location\" : { \"address\" : \"Lovell House, 6 Archway, Hulme, Manchester M15 5RN, UK\" , \"lat\" : 53 .46583133200717, \"lng\" : -2.2464680671691895, \"radius\" : 50 } , \"tags\" : [ 218916 ]}} The platform will confirm creation with: { \"success\" : true , \"id\" : 1521307 } id : The ID of the created place. It can be used for obtaining and updating the place object.","title":"Creating POIs"},{"location":"backend-api/guides/places/manage-pois/#obtaining-and-updating-information-about-places","text":"To retrieve information about place objects (e.g., to sync this data with your CRM), use the place/list API call. To get a count of visits to places, generate a report with ID 85 . To update information about a place, use the place/update API call.","title":"Obtaining and Updating Information about Places"},{"location":"backend-api/guides/places/manage-pois/#getting-poi-name-by-a-trackers-location","text":"To get the POI name or ID where a device is located, use the place/search_location API call. For example, you may want to determine which place a device is located in or count how many devices are in a particular place. To get this information, first request the device's state and location . Using the received latitude and longitude parameters, you can check the relevant places.","title":"Getting POI Name by a Tracker's Location"},{"location":"backend-api/guides/rules-notifications/get-push-notifications/","text":"Receiving Push Notifications in Your App \u00b6 Push notifications enable your app to receive new events instantly without requiring continuous polling via API calls. These notifications can be leveraged to trigger actions such as updates to trackers, configurations, tasks, or even to send alerts to platforms like Telegram. Whether your app is mobile or web-based, the subscription process for push notifications varies. Below, we outline the specific steps for each case. Mobile Apps \u00b6 The Navixy platform supports Firebase Cloud Messaging (FCM). To get push notifications on mobile devices, follow these steps to obtain the app's push token: Firebase projects support Google service accounts , which you can use to call Firebase server APIs from the app server. To authenticate a service account and authorize it to access Firebase services, you must generate a private key file in JSON format . Contact our support team at support@navixy.com with the generated private key, platform (Android/iOS), and your app's name. We will provide you with the application ID for an API call to bind your app. Obtain the push token of your app from Google Play Market or App Store. Use the push_token/bind API call from your app. Substitute the push token and the application ID received from our support team. Web Apps \u00b6 To start receiving push notifications in your web application, follow these steps: When creating a subscription, you must specify the applicationServerKey . It should be in bytes, not as a base64 string. Our public key in base64 is: BKPE9clw-_CxWE-WlqSkVpLnHT-7rE637udxtfGRUfXshjfCgatSNqNtRp5HjwEukACcdhIPMwPc9Ch7UsZXXY Here is a function example: return navigator . serviceWorker . register ( '/service-worker.js' ) . then ( function ( registration ) { const subscribeOptions = { userVisibleOnly : true , applicationServerKey : urlBase64ToUint8Array ( 'BKPE9clw-_CxWE-WlqSkVpLnHT-7rE637udxtfGRUfXshjfCgatSNqNtRp5HjwEukACcdhIPMwPXc9Ch7UsZXxY' ), }; return registration . pushManager . subscribe ( subscribeOptions ); }) . then ( function ( pushSubscription ) { console . log ( 'Received PushSubscription: ' , JSON . stringify ( pushSubscription ), ); return pushSubscription ; }); Take the endpoint and keys p256dh and auth from the pushSubscription object. Example: { \"endpoint\" : \"https://some.pushservice.com/something-unique\" , \"keys\" : { \"p256dh\" : \"BIPUL12DLfytvTajnryr2PRdAgXS3HGKiLqndGcJGabyhHheJYlNGCeXl1dn18gSJ1WAkAPIxr4gK0_dQds4yiI=\" , \"auth\" : \"FPssNDTKnInHVndSTdbKFw==\" } } Use the push_token/bind API call with parameters: application=w3c_pushapi token=whole endpoint from pushSubscription, full URL like https://fcm.googleapis.com/fcm/send/f6kicrBn7S0:APA91b...... parameters=object with keys from pushSubscription {\"p256dh\": \"...\", \"auth\":\"...\"} You will receive the notification in event.data in JSON format.","title":"Get push notifications"},{"location":"backend-api/guides/rules-notifications/get-push-notifications/#receiving-push-notifications-in-your-app","text":"Push notifications enable your app to receive new events instantly without requiring continuous polling via API calls. These notifications can be leveraged to trigger actions such as updates to trackers, configurations, tasks, or even to send alerts to platforms like Telegram. Whether your app is mobile or web-based, the subscription process for push notifications varies. Below, we outline the specific steps for each case.","title":"Receiving Push Notifications in Your App"},{"location":"backend-api/guides/rules-notifications/get-push-notifications/#mobile-apps","text":"The Navixy platform supports Firebase Cloud Messaging (FCM). To get push notifications on mobile devices, follow these steps to obtain the app's push token: Firebase projects support Google service accounts , which you can use to call Firebase server APIs from the app server. To authenticate a service account and authorize it to access Firebase services, you must generate a private key file in JSON format . Contact our support team at support@navixy.com with the generated private key, platform (Android/iOS), and your app's name. We will provide you with the application ID for an API call to bind your app. Obtain the push token of your app from Google Play Market or App Store. Use the push_token/bind API call from your app. Substitute the push token and the application ID received from our support team.","title":"Mobile Apps"},{"location":"backend-api/guides/rules-notifications/get-push-notifications/#web-apps","text":"To start receiving push notifications in your web application, follow these steps: When creating a subscription, you must specify the applicationServerKey . It should be in bytes, not as a base64 string. Our public key in base64 is: BKPE9clw-_CxWE-WlqSkVpLnHT-7rE637udxtfGRUfXshjfCgatSNqNtRp5HjwEukACcdhIPMwPc9Ch7UsZXXY Here is a function example: return navigator . serviceWorker . register ( '/service-worker.js' ) . then ( function ( registration ) { const subscribeOptions = { userVisibleOnly : true , applicationServerKey : urlBase64ToUint8Array ( 'BKPE9clw-_CxWE-WlqSkVpLnHT-7rE637udxtfGRUfXshjfCgatSNqNtRp5HjwEukACcdhIPMwPXc9Ch7UsZXxY' ), }; return registration . pushManager . subscribe ( subscribeOptions ); }) . then ( function ( pushSubscription ) { console . log ( 'Received PushSubscription: ' , JSON . stringify ( pushSubscription ), ); return pushSubscription ; }); Take the endpoint and keys p256dh and auth from the pushSubscription object. Example: { \"endpoint\" : \"https://some.pushservice.com/something-unique\" , \"keys\" : { \"p256dh\" : \"BIPUL12DLfytvTajnryr2PRdAgXS3HGKiLqndGcJGabyhHheJYlNGCeXl1dn18gSJ1WAkAPIxr4gK0_dQds4yiI=\" , \"auth\" : \"FPssNDTKnInHVndSTdbKFw==\" } } Use the push_token/bind API call with parameters: application=w3c_pushapi token=whole endpoint from pushSubscription, full URL like https://fcm.googleapis.com/fcm/send/f6kicrBn7S0:APA91b...... parameters=object with keys from pushSubscription {\"p256dh\": \"...\", \"auth\":\"...\"} You will receive the notification in event.data in JSON format.","title":"Web Apps"},{"location":"backend-api/guides/rules-notifications/use-rules/","text":"Using Rules \u00b6 Rules are used to set up conditions according to which the system logs events and sends notifications to users. When a server receives new data from a device, it checks whether the set conditions are true or false for this data. If they are true, the server generates an event in history, logs it, immediately sends an SMS, push message, or email, and saves the event in history. Creating a Rule \u00b6 To start working with rules, you must first create one. This involves setting up conditions under which the platform will generate events and scheduling intervals during which the rule should be active using the rule/create API call. The user must have access to rule updates. Required Parameters \u00b6 Availability of some parameters depends on the rule type used: name : A string containing the name of the created rule. description : A string containing the rule's description. zone_ids : An array of integers. A list of zones where the rule will be active. Leave it empty if the rule should work everywhere. zone_ids is not allowed for the offline rule and is required for route and inoutzone rule types. trackers : An array of integers. A list of tracker IDs that belong to the user for which the rule will work. type : A string containing one of the predefined rule types. See rule types . primary_text : A string with the primary text of the rule notification when the condition is true . secondary_text : An optional string with the secondary text of the rule notification when the condition is false . The availability of this parameter depends on the rule type. param : An optional integer for common integer conditions. The availability of this parameter depends on the rule type. See rule types . alerts : An object with destinations for notifications. Defines who and how notifications will be received. Described in the rule object . suspended : A boolean that starts and stops the rule. true if the rule is suspended. schedule : An optional object that configures the time when the rule works. Described in the rule object . extended_params : An optional object specified for a particular rule type. See rule types . API Request \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule\": {\"description\": \"\", \"type\": \"work_status_change\", \"primary_text\": \"status changed\", \"alerts\": {\"push_enabled\": true, \"emails\": [\"example@gmail.com\"], \"emergency\": false, \"sms_phones\": [\"745494878945\"], \"phones\": []}, \"suspended\": false, \"name\": \"Status changing\", \"trackers\": [123456], \"extended_params\": {\"emergency\": false, \"zone_limit_inverted\": false, \"status_ids\": [319281,319282,319283]}, \"schedule\": [{\"from\": {\"weekday\": 1, \"time\": \"00:00:00\"}, \"to\": {\"weekday\": 7,\"time\": \"23:59:59\"}, \"type\": \"weekly\"}], \"zone_ids\": []}}' The platform will respond with the ID of the created rule. { \"success\" : true , \"id\" : 123 } Binding and Unbinding Rules \u00b6 Once a rule is created, you can bind devices to it using the rule/bind call. For instance, if a newly registered device needs to follow an existing rule, bind it to the rule without creating a new one. Similarly, use the rule/unbind call to remove devices from a rule when it is no longer needed for them. Required Parameters \u00b6 rule_id : The ID of the rule. You can get rule IDs using the rule/list call. trackers : An array of integers. List of tracker IDs. Trackers that do not exist, are owned by another user, or are deleted will be ignored without errors. API Requests \u00b6 Bind curl -X POST 'https://api.navixy.com/v2/tracker/rule/bind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule_id\": 123, \"trackers\": [265489]}' Unbind curl -X POST 'https://api.navixy.com/v2/tracker/rule/unbind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule_id\": 123, \"trackers\": [265489]}' Updating a Rule \u00b6 If a rule needs to be updated, such as adding another phone number for SMS notifications, use the rule/update call. This method is more efficient than deleting an existing rule and creating a new one. Required Parameters \u00b6 The list of necessary parameters is the same as in the rule/create call, plus the id parameter. id : An integer with the ID of the rule to be updated. You can get rule IDs using the rule/list call. API Request \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule\": {\"id\": 123, \"description\": \"\", \"type\": \"work_status_change\", \"primary_text\": \"status changed\", \"alerts\": {\"push_enabled\": true, \"emails\": [\"example@gmail.com\"], \"emergency\": false, \"sms_phones\": [\"745494878945\"], \"phones\": []}, \"suspended\": false, \"name\": \"Status changing\", \"trackers\": [123456], \"extended_params\": {\"emergency\": false, \"zone_limit_inverted\": false, \"status_ids\": [319281,319282,319283]}, \"schedule\": [{\"from\": {\"weekday\": 1, \"time\": \"00:00:00\"}, \"to\": {\"weekday\": 7, \"time\": \"23:59:59\"}, \"type\": \"weekly\"}], \"zone_ids\": []}}' Suspending a Rule \u00b6 To suspend a rule, use the rule/update call and change only the suspended parameter to true . All other parameters should remain unchanged. API Request \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule\": {\"id\": 123, \"description\": \"\", \"type\": \"work_status_change\", \"primary_text\": \"status changed\", \"alerts\": {\"push_enabled\": true, \"emails\": [\"example@gmail.com\"], \"emergency\": false, \"sms_phones\": [\"745494878945\"], \"phones\": []}, \"suspended\": true, \"name\": \"Status changing\", \"trackers\": [123456], \"extended_params\": {\"emergency\": false, \"zone_limit_inverted\": false, \"status_ids\": [319281,319282,319283]}, \"schedule\": [{\"from\": {\"weekday\": 1, \"time\": \"00:00:00\"}, \"to\": {\"weekday\": 7, \"time\": \"23:59:59\"}, \"type\": \"weekly\"}], \"zone_ids\": []}}'","title":"Use rules"},{"location":"backend-api/guides/rules-notifications/use-rules/#using-rules","text":"Rules are used to set up conditions according to which the system logs events and sends notifications to users. When a server receives new data from a device, it checks whether the set conditions are true or false for this data. If they are true, the server generates an event in history, logs it, immediately sends an SMS, push message, or email, and saves the event in history.","title":"Using Rules"},{"location":"backend-api/guides/rules-notifications/use-rules/#creating-a-rule","text":"To start working with rules, you must first create one. This involves setting up conditions under which the platform will generate events and scheduling intervals during which the rule should be active using the rule/create API call. The user must have access to rule updates.","title":"Creating a Rule"},{"location":"backend-api/guides/rules-notifications/use-rules/#required-parameters","text":"Availability of some parameters depends on the rule type used: name : A string containing the name of the created rule. description : A string containing the rule's description. zone_ids : An array of integers. A list of zones where the rule will be active. Leave it empty if the rule should work everywhere. zone_ids is not allowed for the offline rule and is required for route and inoutzone rule types. trackers : An array of integers. A list of tracker IDs that belong to the user for which the rule will work. type : A string containing one of the predefined rule types. See rule types . primary_text : A string with the primary text of the rule notification when the condition is true . secondary_text : An optional string with the secondary text of the rule notification when the condition is false . The availability of this parameter depends on the rule type. param : An optional integer for common integer conditions. The availability of this parameter depends on the rule type. See rule types . alerts : An object with destinations for notifications. Defines who and how notifications will be received. Described in the rule object . suspended : A boolean that starts and stops the rule. true if the rule is suspended. schedule : An optional object that configures the time when the rule works. Described in the rule object . extended_params : An optional object specified for a particular rule type. See rule types .","title":"Required Parameters"},{"location":"backend-api/guides/rules-notifications/use-rules/#api-request","text":"cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule\": {\"description\": \"\", \"type\": \"work_status_change\", \"primary_text\": \"status changed\", \"alerts\": {\"push_enabled\": true, \"emails\": [\"example@gmail.com\"], \"emergency\": false, \"sms_phones\": [\"745494878945\"], \"phones\": []}, \"suspended\": false, \"name\": \"Status changing\", \"trackers\": [123456], \"extended_params\": {\"emergency\": false, \"zone_limit_inverted\": false, \"status_ids\": [319281,319282,319283]}, \"schedule\": [{\"from\": {\"weekday\": 1, \"time\": \"00:00:00\"}, \"to\": {\"weekday\": 7,\"time\": \"23:59:59\"}, \"type\": \"weekly\"}], \"zone_ids\": []}}' The platform will respond with the ID of the created rule. { \"success\" : true , \"id\" : 123 }","title":"API Request"},{"location":"backend-api/guides/rules-notifications/use-rules/#binding-and-unbinding-rules","text":"Once a rule is created, you can bind devices to it using the rule/bind call. For instance, if a newly registered device needs to follow an existing rule, bind it to the rule without creating a new one. Similarly, use the rule/unbind call to remove devices from a rule when it is no longer needed for them.","title":"Binding and Unbinding Rules"},{"location":"backend-api/guides/rules-notifications/use-rules/#required-parameters_1","text":"rule_id : The ID of the rule. You can get rule IDs using the rule/list call. trackers : An array of integers. List of tracker IDs. Trackers that do not exist, are owned by another user, or are deleted will be ignored without errors.","title":"Required Parameters"},{"location":"backend-api/guides/rules-notifications/use-rules/#api-requests","text":"Bind curl -X POST 'https://api.navixy.com/v2/tracker/rule/bind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule_id\": 123, \"trackers\": [265489]}' Unbind curl -X POST 'https://api.navixy.com/v2/tracker/rule/unbind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule_id\": 123, \"trackers\": [265489]}'","title":"API Requests"},{"location":"backend-api/guides/rules-notifications/use-rules/#updating-a-rule","text":"If a rule needs to be updated, such as adding another phone number for SMS notifications, use the rule/update call. This method is more efficient than deleting an existing rule and creating a new one.","title":"Updating a Rule"},{"location":"backend-api/guides/rules-notifications/use-rules/#required-parameters_2","text":"The list of necessary parameters is the same as in the rule/create call, plus the id parameter. id : An integer with the ID of the rule to be updated. You can get rule IDs using the rule/list call.","title":"Required Parameters"},{"location":"backend-api/guides/rules-notifications/use-rules/#api-request_1","text":"cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule\": {\"id\": 123, \"description\": \"\", \"type\": \"work_status_change\", \"primary_text\": \"status changed\", \"alerts\": {\"push_enabled\": true, \"emails\": [\"example@gmail.com\"], \"emergency\": false, \"sms_phones\": [\"745494878945\"], \"phones\": []}, \"suspended\": false, \"name\": \"Status changing\", \"trackers\": [123456], \"extended_params\": {\"emergency\": false, \"zone_limit_inverted\": false, \"status_ids\": [319281,319282,319283]}, \"schedule\": [{\"from\": {\"weekday\": 1, \"time\": \"00:00:00\"}, \"to\": {\"weekday\": 7, \"time\": \"23:59:59\"}, \"type\": \"weekly\"}], \"zone_ids\": []}}'","title":"API Request"},{"location":"backend-api/guides/rules-notifications/use-rules/#suspending-a-rule","text":"To suspend a rule, use the rule/update call and change only the suspended parameter to true . All other parameters should remain unchanged.","title":"Suspending a Rule"},{"location":"backend-api/guides/rules-notifications/use-rules/#api-request_2","text":"cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule\": {\"id\": 123, \"description\": \"\", \"type\": \"work_status_change\", \"primary_text\": \"status changed\", \"alerts\": {\"push_enabled\": true, \"emails\": [\"example@gmail.com\"], \"emergency\": false, \"sms_phones\": [\"745494878945\"], \"phones\": []}, \"suspended\": true, \"name\": \"Status changing\", \"trackers\": [123456], \"extended_params\": {\"emergency\": false, \"zone_limit_inverted\": false, \"status_ids\": [319281,319282,319283]}, \"schedule\": [{\"from\": {\"weekday\": 1, \"time\": \"00:00:00\"}, \"to\": {\"weekday\": 7, \"time\": \"23:59:59\"}, \"type\": \"weekly\"}], \"zone_ids\": []}}'","title":"API Request"},{"location":"backend-api/guides/rules-notifications/work-with-notifications/","text":"Working with Notifications \u00b6 Notifications are a crucial part of tracking. A created rule tracks the triggering of specified conditions and sends events to emails and phones. Notifications alert users when a condition is triggered. Sometimes, it is necessary to store these notifications and history entries for special reports or for use in scripts built on APIs. This guide will show you how to work with them using the Navixy API. Obtain a List of History Entries \u00b6 All Unread Events of a User \u00b6 Use the history/unread/list call to get all unread events. This call contains only two optional parameters: limit : An integer specifying the maximum count of entries in the response. from : A string containing the start date/time for the search. Without this parameter, you will get all unread entries for the last 30 days. Example: To obtain no more than 100 entries for the last month (assuming today's date is 2021-01-26), the API request will be: cURL curl -X POST 'https://api.navixy.com/v2/history/unread/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"limit\": 100, \"from\": \"2020-12-26 00:00:00\"}' The response will contain a list of history entries with information that can be used for various purposes: { \"success\" : true , \"list\" : [{ \"id\" : 1 , \"type\" : \"tracker\" , \"is_read\" : false , \"message\" : \"Alarm\" , \"time\" : \"2020-12-31 00:00:00\" , \"event\" : \"offline\" , \"tracker_id\" : 2 , \"rule_id\" : 3 , \"track_id\" : 4 , \"location\" : { \"lat\" : 50.0 , \"lng\" : 60.0 , \"precision\" : 50 }, \"address\" : \"address\" , \"extra\" : { \"task_id\" : null , \"parent_task_id\" : null , \"counter_id\" : null , \"service_task_id\" : null , \"checkin_id\" : null , \"place_ids\" : null , \"last_known_location\" : false , \"tracker_label\" : \"Tracker label\" , \"emergency\" : false , \"employee_id\" : 4563 } }] } Events for Specific Trackers and Time Period \u00b6 Use the history/tracker/list call to get all events for specific trackers over a specified time period. This call can also return specific event types sorted by time if necessary. Required Parameters \u00b6 trackers : An array of integers. A list of tracker IDs for which events will be searched. from : A string containing the start date/time for the search. to : A string containing the end date/time for the search. Must be after the from date. Optional Parameters \u00b6 events : An array of strings with the necessary event types. All other events will be ignored. Default is all. To get a list of events, use the tracker/history/type call. limit : An integer specifying the maximum count of entries in the result. ascending : A boolean that sorts the results in ascending order by time when true and descending when false . Example: To obtain no more than 100 entries for December for one device, sorted in descending order by time, and to know only when the device entered and exited the geofence, the API request will be: cURL curl -X POST 'https://api.navixy.com/v2/history/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"trackers\": [123985], \"from\": \"2020-12-01 00:00:00\", \"to\": \"2020-12-31 23:59:59\", \"events\": [\"inzone\", \"outzone\"], \"limit\": 100, \"ascending\": false}' The response will contain the history entries that match the request. All Events of a User for a Specific Time Period \u00b6 To obtain a list of all tracker events for a user received between the specified \"from\" and \"to\" dates, use the history/user/list method. You can also filter the results to include only the necessary event types. Required Parameters \u00b6 from : A string containing the start date/time for the search. to : A string containing the end date/time for the search. Must be after the from date. Optional Parameters \u00b6 events : An array of strings with the necessary event types. All other events will be ignored. Default is all. To get a list of events, use the tracker/history/type call. limit : An integer specifying the maximum number of entries in the result. ascending : A boolean that sorts the results in ascending order by time when true and descending when false . Example: To get state field events for the last five minutes on all trackers of a user, use to =CURRTIME and from =CURRTIME-5 minutes. Filter by state_field_control events. cURL curl -X POST 'https://api.navixy.com/v2/history/user/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"from\": \"2023-06-13 18:42:10\", \"to\": \"2023-06-13 18:47:10\", \"events\": [\"state_field_control\"], \"limit\": 100, \"ascending\": true}' The response will contain the history entries that match the request.","title":"Work with notifications"},{"location":"backend-api/guides/rules-notifications/work-with-notifications/#working-with-notifications","text":"Notifications are a crucial part of tracking. A created rule tracks the triggering of specified conditions and sends events to emails and phones. Notifications alert users when a condition is triggered. Sometimes, it is necessary to store these notifications and history entries for special reports or for use in scripts built on APIs. This guide will show you how to work with them using the Navixy API.","title":"Working with Notifications"},{"location":"backend-api/guides/rules-notifications/work-with-notifications/#obtain-a-list-of-history-entries","text":"","title":"Obtain a List of History Entries"},{"location":"backend-api/guides/rules-notifications/work-with-notifications/#all-unread-events-of-a-user","text":"Use the history/unread/list call to get all unread events. This call contains only two optional parameters: limit : An integer specifying the maximum count of entries in the response. from : A string containing the start date/time for the search. Without this parameter, you will get all unread entries for the last 30 days. Example: To obtain no more than 100 entries for the last month (assuming today's date is 2021-01-26), the API request will be: cURL curl -X POST 'https://api.navixy.com/v2/history/unread/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"limit\": 100, \"from\": \"2020-12-26 00:00:00\"}' The response will contain a list of history entries with information that can be used for various purposes: { \"success\" : true , \"list\" : [{ \"id\" : 1 , \"type\" : \"tracker\" , \"is_read\" : false , \"message\" : \"Alarm\" , \"time\" : \"2020-12-31 00:00:00\" , \"event\" : \"offline\" , \"tracker_id\" : 2 , \"rule_id\" : 3 , \"track_id\" : 4 , \"location\" : { \"lat\" : 50.0 , \"lng\" : 60.0 , \"precision\" : 50 }, \"address\" : \"address\" , \"extra\" : { \"task_id\" : null , \"parent_task_id\" : null , \"counter_id\" : null , \"service_task_id\" : null , \"checkin_id\" : null , \"place_ids\" : null , \"last_known_location\" : false , \"tracker_label\" : \"Tracker label\" , \"emergency\" : false , \"employee_id\" : 4563 } }] }","title":"All Unread Events of a User"},{"location":"backend-api/guides/rules-notifications/work-with-notifications/#events-for-specific-trackers-and-time-period","text":"Use the history/tracker/list call to get all events for specific trackers over a specified time period. This call can also return specific event types sorted by time if necessary.","title":"Events for Specific Trackers and Time Period"},{"location":"backend-api/guides/rules-notifications/work-with-notifications/#required-parameters","text":"trackers : An array of integers. A list of tracker IDs for which events will be searched. from : A string containing the start date/time for the search. to : A string containing the end date/time for the search. Must be after the from date.","title":"Required Parameters"},{"location":"backend-api/guides/rules-notifications/work-with-notifications/#optional-parameters","text":"events : An array of strings with the necessary event types. All other events will be ignored. Default is all. To get a list of events, use the tracker/history/type call. limit : An integer specifying the maximum count of entries in the result. ascending : A boolean that sorts the results in ascending order by time when true and descending when false . Example: To obtain no more than 100 entries for December for one device, sorted in descending order by time, and to know only when the device entered and exited the geofence, the API request will be: cURL curl -X POST 'https://api.navixy.com/v2/history/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"trackers\": [123985], \"from\": \"2020-12-01 00:00:00\", \"to\": \"2020-12-31 23:59:59\", \"events\": [\"inzone\", \"outzone\"], \"limit\": 100, \"ascending\": false}' The response will contain the history entries that match the request.","title":"Optional Parameters"},{"location":"backend-api/guides/rules-notifications/work-with-notifications/#all-events-of-a-user-for-a-specific-time-period","text":"To obtain a list of all tracker events for a user received between the specified \"from\" and \"to\" dates, use the history/user/list method. You can also filter the results to include only the necessary event types.","title":"All Events of a User for a Specific Time Period"},{"location":"backend-api/guides/rules-notifications/work-with-notifications/#required-parameters_1","text":"from : A string containing the start date/time for the search. to : A string containing the end date/time for the search. Must be after the from date.","title":"Required Parameters"},{"location":"backend-api/guides/rules-notifications/work-with-notifications/#optional-parameters_1","text":"events : An array of strings with the necessary event types. All other events will be ignored. Default is all. To get a list of events, use the tracker/history/type call. limit : An integer specifying the maximum number of entries in the result. ascending : A boolean that sorts the results in ascending order by time when true and descending when false . Example: To get state field events for the last five minutes on all trackers of a user, use to =CURRTIME and from =CURRTIME-5 minutes. Filter by state_field_control events. cURL curl -X POST 'https://api.navixy.com/v2/history/user/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"from\": \"2023-06-13 18:42:10\", \"to\": \"2023-06-13 18:47:10\", \"events\": [\"state_field_control\"], \"limit\": 100, \"ascending\": true}' The response will contain the history entries that match the request.","title":"Optional Parameters"},{"location":"backend-api/resources/","text":"Resources Overview \u00b6 Welcome to the Navixy API resources section. Here you'll find detailed information about all available resources.","title":"Overview"},{"location":"backend-api/resources/#resources-overview","text":"Welcome to the Navixy API resources section. Here you'll find detailed information about all available resources.","title":"Resources Overview"},{"location":"backend-api/resources/location_link/","text":"Geo Links \u00b6 API calls for working with Geo Links. These are special sessions to share the location of mobile objects. This is a new API replacing Weblocator. API actions \u00b6 API path: /tracker/location/link . create \u00b6 Creates new Geo Link. required sub-user rights : weblocator_session_create . Parameters \u00b6 name description type restrictions lifetime Start and end of the session. JSON object Optional. description Link's description. string Only printable characters. Max length: 255. trackers List of tracker IDs with parameters for each tracker. array of JSON objects Allowed length 1 to 100. params Link parameters. JSON object lifetime object \u00b6 { \"from\" : \"2024-01-29 01:00:00\" , // optional \"to\" : \"2024-01-30 01:00:00\" // optional } tracker object \u00b6 { \"alias\" : \"John Doe\" , // optional \"tracker_id\" : 14 , \"params\" : { \"object_data\" : [ \"speed\" , \"address\" ] // speed, address, movement_status, connection_status, driver_name, driver_phone, vehicle_label, vehicle_reg_number } } params object \u00b6 { \"bounding_zone_ids\" : [ 123 ,...], // 0..100 zone IDs \"bounding_mode\" : \"inside\" , // or outside, optional when no bounding zones \"place_ids\" : [ 234 ,...], // 0..100 place IDs \"shorten_url\" : false , // optional, false by default \"display_options\" : { \"map\" : \"roadmap\" , // or satellite, hybrid, or any other available map \"autoscale\" : false , // optional, true by default \"show_icons\" : false , // optional, false by default \"show_driver_info\" : false , // optional, false by default \"show_vehicle_info\" : false , // optional, false by default \"trace_duration\" : 30 // in seconds, optional, 5 by default } } Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/tracker/location/link/create\" \\ -H \"Content-Type: application/json\" \\ --data-binary @- << EOF { \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"lifetime\": { \"from\": \"2024-01-29 01:00:00\", \"to\": \"2024-01-30 01:00:00\" }, \"description\": \"One tracker link\", \"trackers\": [ { \"alias\": \"John Doe\", \"tracker_id\": 14, \"params\": { \"object_data\": [\"speed\", \"address\"] } } ], \"params\": { \"bounding_zone_ids\": [123, 234], \"bounding_mode\": \"inside\", \"place_ids\": [987, 654], \"display_options\": { \"map\": \"roadmap\", \"autoscale\": false, \"show_icons\": false, \"show_driver_info\": false, \"show_vehicle_info\": false, \"trace_duration\": 30 } } } EOF Response \u00b6 { \"success\" : true , \"value\" : 104 } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if a user has insufficient rights. 204 \u2013 Entity not found \u2013 if one or more of zones or places are not found. 217 \u2013 List contains nonexistent entities \u2013 if one or more of tracker IDs belong to nonexistent tracker (or to a tracker belonging to different user). 236 \u2013 Feature unavailable due to tariff restrictions \u2013 if there is at least one tracker without weblocator tariff feature. 268 \u2013 Link cannot be created due to quota violation. update \u00b6 Updates Geo Link. Parameters \u00b6 name description type restrictions id Session ID. int lifetime Optional. Start and end of the session. JSON object Optional. description Link's description. string Only printable characters. Max length: 255. trackers List of tracker IDs with parameters for each tracker. array of JSON objects Allowed length 1 to 100. params Link parameters. JSON object Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/tracker/location/link/update\" \\ -H \"Content-Type: application/json\" \\ --data-binary @- << EOF { \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"id\": 104, \"lifetime\": { \"from\": \"2024-01-29 01:00:00\", \"to\": \"2024-01-30 01:00:00\" }, \"description\": \"One tracker link\", \"trackers\": [ { \"alias\": \"John Doe\", \"tracker_id\": 14, \"params\": { \"object_data\": [\"speed\", \"address\"] } } ], \"params\": { \"bounding_zone_ids\": [123, 456], \"bounding_mode\": \"inside\", \"place_ids\": [987, 654], \"shorten_url\": false, \"display_options\": { \"map\": \"roadmap\", \"autoscale\": false, \"show_icons\": false, \"show_driver_info\": false, \"show_vehicle_info\": false, \"trace_duration\": 30 } } } EOF Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if a user has insufficient rights. 201 \u2013 Not found in the database \u2013 if link with such an ID does not exist or does not belong to current user. 204 \u2013 Entity not found \u2013 if one or more of zones or places are not found. 217 \u2013 List contains nonexistent entities \u2013 if one or more of tracker IDs belong to nonexistent tracker (or to a tracker belonging to different user). 236 \u2013 Feature unavailable due to tariff restrictions \u2013 if there is at least one tracker without weblocator tariff feature. status/change \u00b6 Lets to activate and deactivate a link. Parameters \u00b6 name description type id Session ID. int is_active If false , a link is deactivated boolean Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/location/link/status/change' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\":\"a6aa75587e5c59c32d347da438505fc3\",\"id\":104,\"is_active\":false}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database \u2013 if link with such an ID does not exist or does not belong to current user. read \u00b6 Returns a link with a specified ID. Parameters \u00b6 name description type id Session ID. int Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/location/link/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\":\"a6aa75587e5c59c32d347da438505fc3\",\"id\":103}' HTTP GET https://api.navixy.com/v2/tracker/location/link/read?hash=a6aa75587e5c59c32d347da438505fc3&id=103 Response \u00b6 { \"success\" : true , \"value\" : { \"create_date\" : \"2024-01-29 03:00:00\" , \"creator_id\" : 3 , \"description\" : \"Another one tracker\" , \"enabled\" : true , \"hash\" : \"700d4a5400000000600d4a5400000103\" , \"id\" : 103 , \"lifetime\" : { \"from\" : \"2024-01-30 00:00:00\" , \"to\" : \"2024-01-30 03:00:00\" }, \"params\" : { \"bounding_mode\" : \"outside\" , \"bounding_zone_ids\" : [ 51 ], \"display_options\" : { \"autoscale\" : false , \"map\" : \"osm\" , \"show_driver_info\" : false , \"show_icons\" : false , \"show_vehicle_info\" : false , \"trace_duration\" : 0 }, \"place_ids\" : null }, \"trackers\" : [ { \"alias\" : \"Jane Doe\" , \"params\" : { \"object_data\" : [] }, \"tracker_id\" : 15 } ] } } Errors \u00b6 201 \u2013 Not found in the database \u2013 if link with such an ID does not exist or does not belong to current user. list \u00b6 Returns a list of a user's links. Parameters \u00b6 name description type filter Optional. Filter for all fields. If used with conditions, both filter and conditions must match for every returned links. string conditions Optional. Search conditions to apply to list. Array of search conditions, see Search conditions . Possible fields listed below. array of objects offset Optional. Offset, default is 0. int limit Optional. Limit, default is 10,000. int sort Optional. Each option is a pair of field name and sorting direction, e.g. [\"creator=asc\", \"id=desc\"] . Possible fields listed below. string array condition fields \u00b6 trackers \u2013 labels of all trackers aliases \u2013 aliases of all trackers creator \u2013 full name of creator (only for master user) description sort fields \u00b6 id create_date expire_date trackers \u2013 labels of all trackers aliases \u2013 aliases of all trackers status \u2013 enabled < inactive < expired < disabled creator \u2013 full name of creator (only for master user) description If no sort param is specified, then sort option will be \"id=asc\". Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/location/link/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"offset\": 0, \"limit\": 1000}' HTTP GET https://api.navixy.com/v2/tracker/location/link/list?hash=a6aa75587e5c59c32d347da438505fc3&offset=0&limit=1000 Response \u00b6 { \"success\" : true , \"list\" : [ { \"create_date\" : \"2024-01-29 03:00:00\" , \"creator_id\" : 3 , \"description\" : \"Another one tracker\" , \"enabled\" : true , \"hash\" : \"700d4a5400000000600d4a5400000103\" , \"id\" : 103 , \"lifetime\" : { \"from\" : \"2024-01-30 00:00:00\" , \"to\" : \"2024-01-30 03:00:00\" }, \"params\" : { \"bounding_mode\" : \"outside\" , \"bounding_zone_ids\" : [ 51 ], \"display_options\" : { \"autoscale\" : false , \"map\" : \"osm\" , \"show_driver_info\" : false , \"show_icons\" : false , \"show_vehicle_info\" : false , \"trace_duration\" : 0 }, \"place_ids\" : null }, \"trackers\" : [ { \"alias\" : \"Jane Doe\" , \"params\" : { \"object_data\" : [] }, \"tracker_id\" : 15 } ] } ] } delete \u00b6 Deletes a link with a specified ID. Parameters \u00b6 name description type id Session ID. int Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/location/link/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"id\": 103}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database \u2013 if link with such an ID does not exist or does not belong to current user.","title":"GeoLinks"},{"location":"backend-api/resources/location_link/#geo-links","text":"API calls for working with Geo Links. These are special sessions to share the location of mobile objects. This is a new API replacing Weblocator.","title":"Geo Links"},{"location":"backend-api/resources/location_link/#api-actions","text":"API path: /tracker/location/link .","title":"API actions"},{"location":"backend-api/resources/location_link/#create","text":"Creates new Geo Link. required sub-user rights : weblocator_session_create .","title":"create"},{"location":"backend-api/resources/location_link/#update","text":"Updates Geo Link.","title":"update"},{"location":"backend-api/resources/location_link/#statuschange","text":"Lets to activate and deactivate a link.","title":"status/change"},{"location":"backend-api/resources/location_link/#read","text":"Returns a link with a specified ID.","title":"read"},{"location":"backend-api/resources/location_link/#list","text":"Returns a list of a user's links.","title":"list"},{"location":"backend-api/resources/location_link/#delete","text":"Deletes a link with a specified ID.","title":"delete"},{"location":"backend-api/resources/billing/bill/","text":"Bill \u00b6 Bill object description and API calls for work with user's bills. Bill object \u00b6 { \"order_id\" : 63602 , \"created\" : \"2012-03-05 11:55:03\" , \"sum\" : 150.0 , \"status\" : \"created\" , \"positions\" : [ \"The subscription fee for the services of Account W3\" ], \"link\" : \"http://bill.navixy.com/xK1QEYK\" } order_id - int. Unique bill ID. created - date/time . When the bill created. sum - float. A bill sum in default currency of the panel. status - enum . Bill order status. Can be one of: created \u2013 but not settled. settled . canceled . positions - string array. List of position names. Usually contains one element for a bill. link - string. URL to order. API actions \u00b6 API path: /bill . create \u00b6 Creates a new bill for the user. required sub-user rights : payment_create . Parameters \u00b6 name description type payer Some payer description. string sum A bill sum in default currency of the panel. double Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/bill/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"payer\": \"Jon Doe\", \"sum\": 100.0}' Response \u00b6 { \"success\" : true , \"value\" : 6421 } value - int. Created bill ID. Errors \u00b6 222 \u2013 Plugin not found - when plugin 29 not available for user. list \u00b6 Shows list of bills with their parameters in array. required sub-user rights : payment_create . Parameters \u00b6 name description type limit Optional. A maximum number of bills in list. Maximum and default is 10 000. int offset Optional. Get bills starting from offset . Default 0. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/bill/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/bill/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"count\" : 7 , \"bills\" : [{ \"order_id\" : 63602 , \"created\" : \"2012-03-05 11:55:03\" , \"sum\" : 150.0 , \"status\" : \"created\" , \"positions\" : [ \"The subscription fee for the services of Account W3\" ], \"link\" : \"http://bill.navixy.com/xK1QEYK\" }] } count - int. Total number of bills. bills - array of objects. A list of bill objects . If bill created using /bill/create call then positions will contain exactly one element. For Standalone version base part of link may be changed by billing.orders.baseUrl config option. Errors \u00b6 222 \u2013 Plugin not found - when plugin 29 not available for user.","title":"Bill"},{"location":"backend-api/resources/billing/bill/#bill","text":"Bill object description and API calls for work with user's bills.","title":"Bill"},{"location":"backend-api/resources/billing/bill/#bill-object","text":"{ \"order_id\" : 63602 , \"created\" : \"2012-03-05 11:55:03\" , \"sum\" : 150.0 , \"status\" : \"created\" , \"positions\" : [ \"The subscription fee for the services of Account W3\" ], \"link\" : \"http://bill.navixy.com/xK1QEYK\" } order_id - int. Unique bill ID. created - date/time . When the bill created. sum - float. A bill sum in default currency of the panel. status - enum . Bill order status. Can be one of: created \u2013 but not settled. settled . canceled . positions - string array. List of position names. Usually contains one element for a bill. link - string. URL to order.","title":"Bill object"},{"location":"backend-api/resources/billing/bill/#api-actions","text":"API path: /bill .","title":"API actions"},{"location":"backend-api/resources/billing/bill/#create","text":"Creates a new bill for the user. required sub-user rights : payment_create .","title":"create"},{"location":"backend-api/resources/billing/bill/#list","text":"Shows list of bills with their parameters in array. required sub-user rights : payment_create .","title":"list"},{"location":"backend-api/resources/billing/payment_system/","text":"Payment system \u00b6 Payment system settings object and API calls for working with payment systems and make payments. Payment system settings object \u00b6 { \"type\" : \"rbkmoney\" , \"url\" : \"https:rbkmoney.com/acceptpurchase.aspx\" , \"account\" : \"John Doe\" , \"currency\" : \"EUR\" , \"payment_code\" : \"Navixy Demo\" , \"subscription_code\" : \"4671292\" , \"methods\" : [ \"method1\" , \"method2\" ], \"prices\" : { \"Loccate_default_pay_1\" : 0.99 , \"Loccate_default_pay_5\" : 4.99 , \"Loccate_default_pay_10\" : 9.99 , \"Loccate_default_pay_20\" : 19.99 } } type - string. Payment system type. url - string. URL to send payment info. account - optional string. Dealer account in payment system (eshopId for RBK). currency - string. 3-letter ISO 4217 currency code. payment_code - optional string. Code for payments. subscription_code - string. Subscription code. The same as \"payment_code\" for 2Checkout (formerly Avangate) but for subscriptions. methods - optional string array. List of available payment methods (it may be empty). prices - optional object with prices. For type == ios_inapp only. API actions \u00b6 API path: /payment_system . list \u00b6 Returns list of payment systems available for specified user. required sub-user rights: payment_create . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/payment_system/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/payment_system/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"type\" : \"bill\" }] } list - array of objects. List of payment system objects . Errors \u00b6 201 \u2013 Not found in the database. estimate/get \u00b6 Returns the estimate of the monthly payment amount required sub-user rights : payment_create . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/payment_system/estimate/get' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/payment_system/estimate/get?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"value\" : 400.0 } value - float. Payment amount, rounded up to hundreds for rubles or to tens for other currencies.","title":"Payment System"},{"location":"backend-api/resources/billing/payment_system/#payment-system","text":"Payment system settings object and API calls for working with payment systems and make payments.","title":"Payment system"},{"location":"backend-api/resources/billing/payment_system/#payment-system-settings-object","text":"{ \"type\" : \"rbkmoney\" , \"url\" : \"https:rbkmoney.com/acceptpurchase.aspx\" , \"account\" : \"John Doe\" , \"currency\" : \"EUR\" , \"payment_code\" : \"Navixy Demo\" , \"subscription_code\" : \"4671292\" , \"methods\" : [ \"method1\" , \"method2\" ], \"prices\" : { \"Loccate_default_pay_1\" : 0.99 , \"Loccate_default_pay_5\" : 4.99 , \"Loccate_default_pay_10\" : 9.99 , \"Loccate_default_pay_20\" : 19.99 } } type - string. Payment system type. url - string. URL to send payment info. account - optional string. Dealer account in payment system (eshopId for RBK). currency - string. 3-letter ISO 4217 currency code. payment_code - optional string. Code for payments. subscription_code - string. Subscription code. The same as \"payment_code\" for 2Checkout (formerly Avangate) but for subscriptions. methods - optional string array. List of available payment methods (it may be empty). prices - optional object with prices. For type == ios_inapp only.","title":"Payment system settings object"},{"location":"backend-api/resources/billing/payment_system/#api-actions","text":"API path: /payment_system .","title":"API actions"},{"location":"backend-api/resources/billing/payment_system/#list","text":"Returns list of payment systems available for specified user. required sub-user rights: payment_create .","title":"list"},{"location":"backend-api/resources/billing/payment_system/#estimateget","text":"Returns the estimate of the monthly payment amount required sub-user rights : payment_create .","title":"estimate/get"},{"location":"backend-api/resources/billing/subscription/","text":"Subscription \u00b6 API calls to interact with payment subscriptions API actions \u00b6 API path: /subscription . /subscription/avangate/ \u00b6 Working with 2Checkout (formerly Avangate ) subscriptions (renewals). cancel \u00b6 Unsubscribe from auto-renewal by reference. required sub-user rights: payment_create . Parameters \u00b6 name description type reference Internal 2Checkout (formerly Avangate) subscription code. Get it from list call. string Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subscription/avangate/cancel' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"reference\": \"5EAD4B0B2F\"}' HTTP GET https://api.navixy.com/v2/subscription/avangate/cancel?hash=a6aa75587e5c59c32d347da438505fc3&reference=5EAD4B0B2F Response \u00b6 { \"success\" : true } Errors \u00b6 215 \u2013 External service error. list \u00b6 List active 2Checkout formerly Avangate subscriptions (renewals). required sub-user rights: payment_create . Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subscription/avangate/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/subscription/avangate/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"reference\" : \"5EAD4B0B2F\" , \"code\" : \"4679109\" , \"quantity\" : 123 , \"expiration_date\" : \"2021-01-28 13:32:11\" }] } reference - string. Internal 2Checkout (formerly Avangate) subscription code. Pass it to /subscription/avangate/cancel. code - string. 2Checkout (formerly Avangate) product code. quantity - int. Count. expiration_date - date/time . Next renew date/time. Errors \u00b6 215 \u2013 External service error.","title":"Subscription"},{"location":"backend-api/resources/billing/subscription/#subscription","text":"API calls to interact with payment subscriptions","title":"Subscription"},{"location":"backend-api/resources/billing/subscription/#api-actions","text":"API path: /subscription .","title":"API actions"},{"location":"backend-api/resources/billing/subscription/#subscriptionavangate","text":"Working with 2Checkout (formerly Avangate ) subscriptions (renewals).","title":"/subscription/avangate/"},{"location":"backend-api/resources/billing/subscription/#cancel","text":"Unsubscribe from auto-renewal by reference. required sub-user rights: payment_create .","title":"cancel"},{"location":"backend-api/resources/billing/subscription/#list","text":"List active 2Checkout formerly Avangate subscriptions (renewals). required sub-user rights: payment_create .","title":"list"},{"location":"backend-api/resources/billing/transaction/","text":"Transaction \u00b6 Transaction object description and API call to get list of user's billing transactions for the specified period. Transaction object \u00b6 { \"description\" : \"Recharge bonus balance during tracker registration\" , \"type\" : \"bonus_charge\" , \"subtype\" : \"register\" , \"timestamp\" : \"2021-01-28 08:16:40\" , \"user_id\" : 12203 , \"dealer_id\" : 5001 , \"tracker_id\" : 303126 , \"amount\" : -10.0000 , \"new_balance\" : 800.0000 , \"old_balance\" : 810.0000 , \"bonus_amount\" : 10.0000 , \"new_bonus\" : 10.0000 , \"old_bonus\" : 0.0000 } description - string. Transaction description. type - enum . Type of transaction. subtype - enum . Subtype of transaction. timestamp - date/time . When transaction created. user_id - int. ID of a user which made a transaction. dealer_id - int. ID of a dealer. tracker_id - int. Tracker id. 0 if transaction not associated with tracker. amount - double. Amount of money in transaction, can be negative. e.g. -10.0000 means 10 money units removed from user`s balance. new_balance - double. User's money balance after transaction. old_balance - double. User's money balance before transaction. bonus_amount - double. Amount of bonus used in transaction, can be negative. e.g. 10.0000 means 10 bonuses units added to user`s bonus balance. new_bonus - double. User's bonus balance after transaction. old_bonus - double. User's bonus balance before transaction. API actions \u00b6 API path: /transaction . list \u00b6 Gets list of user's billing transactions for the specified period. required sub-user rights : payment_create . Parameters \u00b6 name description type from Start date/time for searching. date/time to End date/time for searching. Must be after from date. date/time limit Optional. Maximum number of returned transactions. int Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/transaction/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"from\": \"2021-01-20 08:16:40\", \"to\": \"2021-01-28 08:16:40\"}' Response \u00b6 { \"success\" : true , \"list\" : [{ \"description\" : \"Recharge bonus balance during tracker registration\" , \"type\" : \"bonus_charge\" , \"subtype\" : \"register\" , \"timestamp\" : \"2021-01-28 08:16:40\" , \"user_id\" : 12203 , \"dealer_id\" : 5001 , \"tracker_id\" : 303126 , \"amount\" : -10.0000 , \"new_balance\" : 800.0000 , \"old_balance\" : 810.0000 , \"bonus_amount\" : 10.0000 , \"new_bonus\" : 10.0000 , \"old_bonus\" : 0.0000 }] } list - array of objects. List of transactions objects . Errors \u00b6 211 \u2013 Requested time span is too big - more than report.maxTimeSpan .","title":"Transaction"},{"location":"backend-api/resources/billing/transaction/#transaction","text":"Transaction object description and API call to get list of user's billing transactions for the specified period.","title":"Transaction"},{"location":"backend-api/resources/billing/transaction/#transaction-object","text":"{ \"description\" : \"Recharge bonus balance during tracker registration\" , \"type\" : \"bonus_charge\" , \"subtype\" : \"register\" , \"timestamp\" : \"2021-01-28 08:16:40\" , \"user_id\" : 12203 , \"dealer_id\" : 5001 , \"tracker_id\" : 303126 , \"amount\" : -10.0000 , \"new_balance\" : 800.0000 , \"old_balance\" : 810.0000 , \"bonus_amount\" : 10.0000 , \"new_bonus\" : 10.0000 , \"old_bonus\" : 0.0000 } description - string. Transaction description. type - enum . Type of transaction. subtype - enum . Subtype of transaction. timestamp - date/time . When transaction created. user_id - int. ID of a user which made a transaction. dealer_id - int. ID of a dealer. tracker_id - int. Tracker id. 0 if transaction not associated with tracker. amount - double. Amount of money in transaction, can be negative. e.g. -10.0000 means 10 money units removed from user`s balance. new_balance - double. User's money balance after transaction. old_balance - double. User's money balance before transaction. bonus_amount - double. Amount of bonus used in transaction, can be negative. e.g. 10.0000 means 10 bonuses units added to user`s bonus balance. new_bonus - double. User's bonus balance after transaction. old_bonus - double. User's bonus balance before transaction.","title":"Transaction object"},{"location":"backend-api/resources/billing/transaction/#api-actions","text":"API path: /transaction .","title":"API actions"},{"location":"backend-api/resources/billing/transaction/#list","text":"Gets list of user's billing transactions for the specified period. required sub-user rights : payment_create .","title":"list"},{"location":"backend-api/resources/billing/tariff/","text":"Plan \u00b6 Tariff object description and API call to get the list of device's plans available to user. Plan object \u00b6 { \"id\" : 10 , \"name\" : \"Business\" , \"group_id\" : 2 , \"active\" : true , \"type\" : \"monthly\" , \"price\" : 13.0 , \"early_change_price\" : 23.0 , \"device_limit\" : 1000 , \"has_reports\" : true , \"paas_free\" : false , \"store_period\" : \"12m\" , \"features\" : [ \"map_layers\" ], \"map_filter\" : { \"exclusion\" : true , \"values\" : [] } } id - int. Unique ID. name - string. Plans's label. group_id - int. Group of plans. User can change the plan only on the plan in the same group. active - boolean. Plan is active if true . User can change the plan only on the active plan. type - enum . Plan type. Can be \"monthly\", \"everyday\", \"activeday\". price - double. Price per month for \"monthly\" and \"everyday\" plan or price per \"active\" day for \"activeday\" plan. early_change_price - double. Price of change plan from current to another. With the last change in less than 30 days ( tariff.freeze.period config option). When not passed or \"null\" user cannot change plan frequently. device_limit - int. Maximum number of devices per account. has_reports - boolean. true if reports allowed, false otherwise. paas_free - boolean. true if this plan is free for PaaS owner, false otherwise. store_period - string. Data storage period, e.g. \"2h\" (2 hours), \"3d\" (3 days), \"5m\" (5 months), \"1y\" (one year). features - string array. Available features for the user. map_filter - object with available maps for the user. exclusion - boolean. If true maps from values will be not active, false - maps from values will be active. API actions \u00b6 API path: /tariff . list \u00b6 Gets list of device's plans available to user. If user's dealer is default dealer or paas then listed tariffs of that dealer, else listed plans of parent dealer. Listed only plans available for user's legal type. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tariff/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/tariff/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 10 , \"name\" : \"Business\" , \"group_id\" : 2 , \"active\" : true , \"type\" : \"monthly\" , \"price\" : 13.0 , \"early_change_price\" : 23.0 , \"device_limit\" : 1000 , \"has_reports\" : true , \"paas_free\" : false , \"store_period\" : \"12m\" , \"features\" : [ \"map_layers\" ], \"map_filter\" : { \"exclusion\" : true , \"values\" : [] } }] } list - array of objects. List of plan objects . Errors \u00b6 General types only.","title":"Index"},{"location":"backend-api/resources/billing/tariff/#plan","text":"Tariff object description and API call to get the list of device's plans available to user.","title":"Plan"},{"location":"backend-api/resources/billing/tariff/#plan-object","text":"{ \"id\" : 10 , \"name\" : \"Business\" , \"group_id\" : 2 , \"active\" : true , \"type\" : \"monthly\" , \"price\" : 13.0 , \"early_change_price\" : 23.0 , \"device_limit\" : 1000 , \"has_reports\" : true , \"paas_free\" : false , \"store_period\" : \"12m\" , \"features\" : [ \"map_layers\" ], \"map_filter\" : { \"exclusion\" : true , \"values\" : [] } } id - int. Unique ID. name - string. Plans's label. group_id - int. Group of plans. User can change the plan only on the plan in the same group. active - boolean. Plan is active if true . User can change the plan only on the active plan. type - enum . Plan type. Can be \"monthly\", \"everyday\", \"activeday\". price - double. Price per month for \"monthly\" and \"everyday\" plan or price per \"active\" day for \"activeday\" plan. early_change_price - double. Price of change plan from current to another. With the last change in less than 30 days ( tariff.freeze.period config option). When not passed or \"null\" user cannot change plan frequently. device_limit - int. Maximum number of devices per account. has_reports - boolean. true if reports allowed, false otherwise. paas_free - boolean. true if this plan is free for PaaS owner, false otherwise. store_period - string. Data storage period, e.g. \"2h\" (2 hours), \"3d\" (3 days), \"5m\" (5 months), \"1y\" (one year). features - string array. Available features for the user. map_filter - object with available maps for the user. exclusion - boolean. If true maps from values will be not active, false - maps from values will be active.","title":"Plan object"},{"location":"backend-api/resources/billing/tariff/#api-actions","text":"API path: /tariff .","title":"API actions"},{"location":"backend-api/resources/billing/tariff/#list","text":"Gets list of device's plans available to user. If user's dealer is default dealer or paas then listed tariffs of that dealer, else listed plans of parent dealer. Listed only plans available for user's legal type.","title":"list"},{"location":"backend-api/resources/billing/tariff/tariff_tracker/","text":"Tracker plans \u00b6 API calls on user's actions with tracker plans. User of dealer can switch tracker from the plan t1 to plan t2 if: Tracker belongs to user and isn't a clone . Tracker's tariff last changed more than tariff.freeze.period (config option. default 30 days) ago. t1.tariff_id != t2.tariff_id , i.e. the new plan must be different from the current. t1.dealer_id = t2.dealer_id = dealer.effectiveDealerId , i.e. current and new plans must belong to user's effective dealer. t2.active = 1 , i.e. new plan is active (plan's option \"Allow users to switch to this plan independently\" in panel is set on ). t1.grouping = t2.grouping , i.e. user can change tariff only within one group of tariffs. t2.device = tracker , i.e. new plan must be for trackers. The new plan is available to user's legal type . User's effective dealer is User's dealer if its dealer_id = defaultDealerId (config option) or dogovor_type = 'paas'. Parent of user's dealer otherwise. API actions \u00b6 API path: /tariff/tracker/ . change \u00b6 Changes plan of tracker (with tracker_id ) to new plan (with tariff_id ). required sub-user rights : admin (available only to master users). name description type tracker_id ID of a tracking device (aka \"object_id\"). The tracking device must belong to authorized user. int tariff_id If of the new plan. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tariff/tracker/change' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 345215, \"tariff_id\": 12}' HTTP GET https://api.navixy.com/v2/tariff/tracker/change?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=345215&tariff_id=12 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if user doesn't have trackers with given tracker_id . 219 \u2013 Not allowed for clones of the device. 237 \u2013 Invalid plan - if there are no plan with specified tariff_id and belongs to user's effective dealer . 221 - Device limit exceeded \u2013 when new plan limit for devices is less than the current count of devices in the account. 238 - Changing plan is not allowed \u2013 user can't switch tracker to that plan. 239 \u2013 New plan doesn't exist. 240 - Not allowed changing plan too frequently \u2013 plan last changed less or equal to 30 days ( tariff.freeze.period config option). list \u00b6 List plans on which user can switch the passed tracker (even when tariff last changed less or equal than tariff.freeze.period time ago). Parameters \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tariff/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 345215}' HTTP GET https://api.navixy.com/v2/tariff/tracker/list?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=345215 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 10 , \"name\" : \"Business\" , \"group_id\" : 2 , \"active\" : true , \"type\" : \"monthly\" , \"price\" : 13.0 , \"early_change_price\" : 23.0 , \"device_limit\" : 1000 , \"has_reports\" : true , \"paas_free\" : false , \"store_period\" : \"12m\" , \"features\" : [ \"map_layers\" ], \"map_filter\" : { \"exclusion\" : true , \"values\" : [] } }], \"days_to_next_change\" : 11 } list - array of objects. List of plan objects . days_to_next_change - int. Days to the next free change, or 0 if free change available. Errors \u00b6 General types only.","title":"Tariff Tracker"},{"location":"backend-api/resources/billing/tariff/tariff_tracker/#tracker-plans","text":"API calls on user's actions with tracker plans. User of dealer can switch tracker from the plan t1 to plan t2 if: Tracker belongs to user and isn't a clone . Tracker's tariff last changed more than tariff.freeze.period (config option. default 30 days) ago. t1.tariff_id != t2.tariff_id , i.e. the new plan must be different from the current. t1.dealer_id = t2.dealer_id = dealer.effectiveDealerId , i.e. current and new plans must belong to user's effective dealer. t2.active = 1 , i.e. new plan is active (plan's option \"Allow users to switch to this plan independently\" in panel is set on ). t1.grouping = t2.grouping , i.e. user can change tariff only within one group of tariffs. t2.device = tracker , i.e. new plan must be for trackers. The new plan is available to user's legal type . User's effective dealer is User's dealer if its dealer_id = defaultDealerId (config option) or dogovor_type = 'paas'. Parent of user's dealer otherwise.","title":"Tracker plans"},{"location":"backend-api/resources/billing/tariff/tariff_tracker/#api-actions","text":"API path: /tariff/tracker/ .","title":"API actions"},{"location":"backend-api/resources/billing/tariff/tariff_tracker/#change","text":"Changes plan of tracker (with tracker_id ) to new plan (with tariff_id ). required sub-user rights : admin (available only to master users). name description type tracker_id ID of a tracking device (aka \"object_id\"). The tracking device must belong to authorized user. int tariff_id If of the new plan. int","title":"change"},{"location":"backend-api/resources/billing/tariff/tariff_tracker/#list","text":"List plans on which user can switch the passed tracker (even when tariff last changed less or equal than tariff.freeze.period time ago).","title":"list"},{"location":"backend-api/resources/commons/api-keys/","text":"API Keys \u00b6 The API key is the main thing that is needed for the integration. This is the same as the hash of the user's session gotten by the auth call , only with an infinite lifetime. Unlike the user's session: the API key will not be deleted if the user logs out or changes the password, you do not need to renew the key periodically, you do not transfer or store the username and password, you can delete the key at any time if there is a suspicion of compromise, you can create a separate key for each individual integration. if request rate limit is exceeded, regular users will not be blocked, because API keys have a separate counter. You can get an API key in user's web interface. This is the recommended way instead of user session hash. In one user's account, you can have up to 20 API keys intended for different external integrations. To distinguish keys from each other, you should give them meaningful names. Security Do not publish API keys anywhere. Having a key, you can perform almost any action in the user's account. Make API calls only over HTTPS because the key is transmitted in cleartext. Find more details on API keys usage in our instructions . API Key object \u00b6 { \"hash\" : \"c915157ac483e7319b0b257408bc04e1\" , \"create_date\" : \"2021-10-29 12:00:36\" , \"title\" : \"Integration with My Super App\" } hash - string, 32 chars. Hash of an API key. create_date - date/time . Key creation date. title - string. Key title. Actions \u00b6 API path: /api/key . create \u00b6 Creates a new API key. This call is available only to the master user and only with a standard session obtained using a login/password via /user/auth . Parameters \u00b6 name description type restrictions hash Master user's session hash. String Not empty. title New key title String Not empty, only printable characters. Max length: 255. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/api/key/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"title\": \"My Super App\"}' HTTP GET https://api.navixy.com/v2/api/key/create?hash=a6aa75587e5c59c32d347da438505fc3&title=My+Super+App Response \u00b6 { \"success\" : true , \"value\" : { \"hash\" : \"c915157ac483e7319b0b257408bc04e1\" , \"create_date\" : \"2021-10-29 12:00:36\" , \"title\" : \"My Super App\" } } Errors \u00b6 4 - User or API key not found or session ended. If the user session ( hash param) is invalid or a non-standard session is used (for example, another API key). 13 - Operation not permitted. If a call with subuser's session hash. 268 - Over quota. If 20 keys have already been created in the user's account. delete \u00b6 Deletes API key. This call is available only to the master user and only with a standard session obtained using a login/password via /user/auth . Parameters \u00b6 name description type restrictions hash Master user's session hash. String Not empty. key The API key to delete. String Not empty. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/api/key/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"key\": \"5063e191d734e87e17987953c7a9a086\"}' HTTP GET https://api.navixy.com/v2/api/key/delete?hash=a6aa75587e5c59c32d347da438505fc3&key=5063e191d734e87e17987953c7a9a086 Response \u00b6 { \"success\" : true } Errors \u00b6 4 - User or API key not found or session ended. If the user session ( hash param) is invalid or a non-standard session is used (for example, another API key). 13 - Operation not permitted. If a call with subuser's session hash. 201 \u2013 Not found in the database - if there is no specified API key in account. list \u00b6 Gets all of API keys for an account. Parameters \u00b6 name description type restrictions hash Master user's session hash. String Not empty. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/api/key/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/api/key/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"list\" : [{ \"hash\" : \"c915157ac483e7319b0b257408bc04e1\" , \"create_date\" : \"2021-10-29 12:00:36\" , \"title\" : \"My Super App\" }, { \"hash\" : \"e3b7d1d727d21e064a190239b3403ee3\" , \"create_date\" : \"2021-11-19 16:06:03\" , \"title\" : \"AmoCRM integration\" }], \"success\" : true } Errors \u00b6 4 - User or API key not found or session ended. If the user session ( hash param) is invalid or a non-standard session is used (for example, another API key). 13 - Operation not permitted. If a call with subuser's session hash.","title":"API Keys"},{"location":"backend-api/resources/commons/api-keys/#api-keys","text":"The API key is the main thing that is needed for the integration. This is the same as the hash of the user's session gotten by the auth call , only with an infinite lifetime. Unlike the user's session: the API key will not be deleted if the user logs out or changes the password, you do not need to renew the key periodically, you do not transfer or store the username and password, you can delete the key at any time if there is a suspicion of compromise, you can create a separate key for each individual integration. if request rate limit is exceeded, regular users will not be blocked, because API keys have a separate counter. You can get an API key in user's web interface. This is the recommended way instead of user session hash. In one user's account, you can have up to 20 API keys intended for different external integrations. To distinguish keys from each other, you should give them meaningful names. Security Do not publish API keys anywhere. Having a key, you can perform almost any action in the user's account. Make API calls only over HTTPS because the key is transmitted in cleartext. Find more details on API keys usage in our instructions .","title":"API Keys"},{"location":"backend-api/resources/commons/api-keys/#api-key-object","text":"{ \"hash\" : \"c915157ac483e7319b0b257408bc04e1\" , \"create_date\" : \"2021-10-29 12:00:36\" , \"title\" : \"Integration with My Super App\" } hash - string, 32 chars. Hash of an API key. create_date - date/time . Key creation date. title - string. Key title.","title":"API Key object"},{"location":"backend-api/resources/commons/api-keys/#actions","text":"API path: /api/key .","title":"Actions"},{"location":"backend-api/resources/commons/api-keys/#create","text":"Creates a new API key. This call is available only to the master user and only with a standard session obtained using a login/password via /user/auth .","title":"create"},{"location":"backend-api/resources/commons/api-keys/#delete","text":"Deletes API key. This call is available only to the master user and only with a standard session obtained using a login/password via /user/auth .","title":"delete"},{"location":"backend-api/resources/commons/api-keys/#list","text":"Gets all of API keys for an account.","title":"list"},{"location":"backend-api/resources/commons/base/","text":"Base \u00b6 Contains API calls to health-check and send email. API actions \u00b6 API path: /base . nothing \u00b6 The report for health-check. It will do nothing. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/base/nothing' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/base/nothing?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true } Errors \u00b6 General types only. send_email \u00b6 Sends email from the platform to any email address with specified title and text. Needs ROOT access level. Parameters \u00b6 name description type from From email address. string to To email address. string title Title of the email. string message Text of the email. string service_id Service parameter. int service_pass Service parameter. int Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/base/send_email' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"from\": \"gps@navixy.com\", \"to\" : \"customer@email.com\", \"title\": \"test email\", \"message\": \"this email for test\", \"service_id\": 1, \"service_pass\": 28}' Response \u00b6 { \"success\" : true } Errors \u00b6 General types only.","title":"Base"},{"location":"backend-api/resources/commons/base/#base","text":"Contains API calls to health-check and send email.","title":"Base"},{"location":"backend-api/resources/commons/base/#api-actions","text":"API path: /base .","title":"API actions"},{"location":"backend-api/resources/commons/base/#nothing","text":"The report for health-check. It will do nothing.","title":"nothing"},{"location":"backend-api/resources/commons/base/#send_email","text":"Sends email from the platform to any email address with specified title and text. Needs ROOT access level.","title":"send_email"},{"location":"backend-api/resources/commons/data/","text":"Data \u00b6 API call to parse the spreadsheet data. /data/spreadsheet/parse \u00b6 Parse spreadsheet file (.xlsx, .xls, .csv) and store it in internal storage. Parameters \u00b6 name description type file File to upload. file preview_count Size of preview. Min=1, max=20. int parse_header Parse first row as header. boolean header_map If parse_header is true should contains map of matching column name to field identifier, {\"Label\": \"label\", \"Latitude\": \"lat\"} . JSON object If parse_header is set to true , first row of the uploaded file will be treated as header corresponding to given header_map . Response \u00b6 { \"file_id\" : \"568539\" , \"header\" : [ \"header1\" , \"header2\" ], \"preview\" : [ \"preview of file 1\" , \"preview of file 2\" ] } file_id - string. Unique file ID. header - optional string array. List of files' headers. preview - string array. First N rows of file. Errors \u00b6 234 \u2013 Invalid data format. /data/import/list \u00b6 Returns the list of the user's import processes. Parameters \u00b6 name description type types Optional. Types of the imported entities, e.g. [\"vehicle\", \"employee\"] . string array Response \u00b6 { \"success\" : true , \"list\" : [ { \"id\" : <i nt > , \"user_id\" : <i nt > , \"created\" : <da te > , \"type\" : <s tr i n g> , // vehicle | employee \"params\" : { \"headers\" : [ <s tr i n g> , <s tr i n g> , ... ] // Lis t o f f iles' headers }, \"filename\" : <s tr i n g> , // Name o f preloaded TSV. \"status\" : <s tr i n g> , // crea te d | i n _progress | do ne | fa iled \"status_change_date\" : <da te > , \"progress\" : { \"imported\" : <i nt > , \"failed\" : <i nt > , \"percent\" : <i nt > , // approxima te perce nta ge o f processed \"processed_lines\" : <i nt > , \"warnings\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 \"errors\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 } }, ... ] } Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/data/import/list\" \\ -H \"Content-Type: application/json\" \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' /data/import/read \u00b6 Returns an import process with specified ID. Parameters \u00b6 name description type process_id Process ID int type Type of the imported entities string Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : <i nt > , \"user_id\" : <i nt > , \"created\" : <da te > , \"type\" : <s tr i n g> , // vehicle | employee \"params\" : { \"headers\" : [ <s tr i n g> , <s tr i n g> , ... ] // Lis t o f f iles' headers }, \"filename\" : <s tr i n g> , // Name o f preloaded TSV. \"status\" : <s tr i n g> , // crea te d | i n _progress | do ne | fa iled | f i n ished \"status_change_date\" : <da te > , \"progress\" : { \"imported\" : <i nt > , \"failed\" : <i nt > , \"percent\" : <i nt > , // approxima te perce nta ge o f processed \"processed_lines\" : <i nt > , \"warnings\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 \"errors\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 } } } Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/data/import/read\" \\ -H \"Content-Type: application/json\" \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"type\": \"employee\", \"process_id\": 1}' Errors \u00b6 201 \u2013 Not found in database (if import is not found)","title":"Data Import"},{"location":"backend-api/resources/commons/data/#data","text":"API call to parse the spreadsheet data.","title":"Data"},{"location":"backend-api/resources/commons/data/#dataspreadsheetparse","text":"Parse spreadsheet file (.xlsx, .xls, .csv) and store it in internal storage.","title":"/data/spreadsheet/parse"},{"location":"backend-api/resources/commons/data/#dataimportlist","text":"Returns the list of the user's import processes.","title":"/data/import/list"},{"location":"backend-api/resources/commons/data/#dataimportread","text":"Returns an import process with specified ID.","title":"/data/import/read"},{"location":"backend-api/resources/commons/dealer/","text":"Dealer \u00b6 Contains API call to get dealer info and dealer-specific UI settings. API actions \u00b6 API path: /dealer . get_ui_config \u00b6 Gets dealer info and dealer-specific UI settings by a domain or hash. It doesn't require authentication and available in UNAUTHORIZED access level. Parameters \u00b6 name description type domain Dealer's monitoring interface domain, e.g. \"panel.navixy.com\". string hash Used instead of a domain to identify a dealer if there is a user session string Params domain and hash is not required both, but one of them must be specified. If hash is specified the domain shouldn't be used. Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/dealer/get_ui_config' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"domain\": \"panel.navixy.com\"}' Response \u00b6 { \"success\" : true , \"dealer\" : { \"id\" : 5001 , \"ui_domain\" : \"demo.navixy.com\" , \"company_url\" : \"navixy.com\" }, \"settings\" : { \"domain\" : \"demo.navixy.com\" , \"service_title\" : \"Navixy Demo\" , \"locale\" : \"at_AT\" , \"demo_login\" : \"demo\" , \"demo_password\" : \"demo\" , \"maps\" : [ \"roadmap\" , \"osm\" ], \"default_map\" : { \"type\" : \"roadmap\" , \"location\" : { \"lat\" : 57.0 , \"lng\" : 61.0 }, \"zoom\" : 10 }, \"currency\" : \"EUR\" , \"payment_link\" : \"http://site.de/pay.php\" , \"promo_url\" : \"http://site.de/about/\" , \"google_client_id\" : \"clientID\" , \"favicon\" : \"paas/5001/custom.ico\" , \"logo\" : \"paas/5001/logo.png\" , \"app_logo\" : \"paas/5001/app_logo.png\" , \"login_wallpaper\" : \"paas/5001/login.png\" , \"desktop_wallpaper\" : \"http://test.com/test.jpg\" , \"monitoring_logo\" : \"http://test.com/test.jpg\" , \"login_footer\" : \"All rights reserved.\" , \"allow_registration\" : true , \"show_mobile_apps\" : true , \"show_call_notifications\" : true , \"default_user_settings\" : { \"geocoder\" : \"google\" , \"route_provider\" : \"progorod\" , \"measurement_system\" : \"metric\" , \"translit\" : false }, \"display_model_features_link\" : true , \"color_theme\" : \"aqua\" , \"app_color_theme\" : \"blue_1\" , \"privacy_policy_link\" : \"http://privacy-policy-url\" , \"tos\" : \"Terms Of Service text\" , \"tracker_model_filter\" : { \"exclusion\" : true , \"values\" : [] }, \"internal\" : { \"light_registration\" : true , \"demo_tracker_source_id\" : 14 , \"demo_tracker_label\" : \"Demo tracker\" }, \"no_register_commands\" : false }, \"demo_ends\" : \"2014-01-01\" , \"premium_gis\" : true , \"features\" : [ \"branding_web\" ], \"platform\" : { \"iso_datetime_support\" : true , \"history.max_limit\" : 10 , \"report.max_time_span\" : \"P90D\" , \"stats.max_allowed_trackers\" : 128 , \"stats.max_time_span\" : \"P31D\" , \"file_storage.hard_max_file_size\" : 16777216 , \"form.max_fields_count\" : 128 , \"form.file_field.max_file_size\" : 16777216 , \"form.file_field.max_files_per_field\" : 6 , \"form.file_field.max_count\" : 16 } } id - int. Dealer's ID. ui_domain - string. Dealer's UI domain. company_url - string. Dealer's promo site URL. settings - object. Custom settings. May be null if dealer has not set any custom settings. domain - string. The same as dealer.ui_domain. service_title - string. Title of the service. locale - enum . Default locale of the dealer. demo_login - string. Dealer's login for demo user or empty string if no demo user available. demo_password - string. Dealer's password for demo user or empty string if no demo user available. maps - string array. List of available maps, e.g. [\"roadmap\", \"cdcom\", \"osm\", \"wikimapia\", \"yandexpublic\", \"hybrid\", \"satellite\"] . default_map - object. Default map settings. type - enum . Default map type. location - object. Default map center location. lat - float. Latitude. long - float. Longitude. zoom - int. Default map zoom level. currency - enum . Dealer's currency ISO 4217 code. payment_link - string. PaaS-dependent link that can be used to refill user's account. Can be null or empty. promo_url - string. Customizable \"About company\" url. google_client_id - string. Client ID which must be used to work with Google API or null. favicon - string. Path or URL to dealer's interface favicon. logo - string. Path or URL to dealer's logotype. app_logo - string. Nullable, path or URL to dealer's mobile app logotype. login_wallpaper - string. Path or URL to dealer's interface login wallpaper. desktop_wallpaper - string. Path to dealer's interface wallpaper or null. monitoring_logo - string. Path to dealer's interface monitoring logo or null. login_footer - string. Footer which will be included in login page. allow_registration - boolean. If true then registration is available for dealer's users. All HTML special chars escaped using HTML entities. show_mobile_apps - boolean. If true then mobile applications are available for dealer's users. show_call_notifications - boolean. If true then call notifications are available for dealer's users. geocoder - enum . Default geocoder. route_provider - enum . Default router. measurement_system - enum . Measurement system. display_model_features_link - boolean. When true show in model info link to squaregps.com (UI option). color_theme - enum . Color theme code or empty string (for default theme). app_color_theme - enum . Mobile app color theme code or empty string (for default theme). tos - string. Terms of service text. tracker_model_filter - object. A filter which describes tracker models available for registration. exclusion - boolean. If true models in the values will be excluded. values - string array. If it is empty - all models available. internal - object with additional options. light_registration - boolean. If true use \"very simple\" registration with demo tracker. demo_tracker_source_id - int. An ID of tracker created on light_registration . demo_tracker_label - string. Label of tracker created on light_registration . no_register_commands - boolean. If true then do not send commands to devices on activation. demo_ends - string. A date when demo for this dealer ends. Is null when dealer is not on Trial tariff. premium_gis - boolean. If true dealer has Premium GIS package. features - string array. Set of the allowed features for a dealer (all list see below in \"Dealer features\"). platform - key-value object. Global platform settings. iso_datetime_support - boolean, if true platform supports ISO 8601 date/time format . history.max_limit - int, max limit for history list actions. report.max_time_span - ISO 8601 duration, max timespan for reports generation . stats.max_allowed_trackers - int, max allowed trackers for stats actions . stats.max_time_span - ISO 8601 duration,max timespan for stats actions . file_storage.hard_max_file_size - long, hard max file size in bytes for uploading files to the file storage. form.max_fields_count - integer, max fields per form. form.file_field.max_file_size - long, max file size in bytes for the form file. form.file_field.max_files_per_field - integer, max files per form field. form.file_field.max_count - integer, max file fields per form. Dealer features \u00b6 name description branding_web Allow to use custom logos, color theme, domain and favicon in UI for web version. branding_mobile Allow to use custom icon, logo, color theme in the mobile applications. subpaas Allow to use Sub-Dealers (can be used only together with navixy_label ). navixy_label Show \"Powered by Navixy\" in UI (required for subpaas feature). Errors \u00b6 12 \u2013 Dealer not found (if corresponding dealer not found in the database). 201 \u2013 Not found in the database (if there is no Ui settings data for corresponding dealer).","title":"Dealer"},{"location":"backend-api/resources/commons/dealer/#dealer","text":"Contains API call to get dealer info and dealer-specific UI settings.","title":"Dealer"},{"location":"backend-api/resources/commons/dealer/#api-actions","text":"API path: /dealer .","title":"API actions"},{"location":"backend-api/resources/commons/dealer/#get_ui_config","text":"Gets dealer info and dealer-specific UI settings by a domain or hash. It doesn't require authentication and available in UNAUTHORIZED access level.","title":"get_ui_config"},{"location":"backend-api/resources/commons/feedback/","text":"Feedback \u00b6 Contains feedback object API call to send a feedback email, ask for help or suggest a new feature. Feedback object \u00b6 { \"text\" : \"My feedback\" , \"useragent\" : \"Chrome/87.0.4280.88\" , \"platform\" : \"Windows NT 10.0; Win64; x64\" , \"screenshots\" : [ \"encoded image1\" , \"encoded image2\" ], \"log\" : <log_ f ile> } text - string. Feedback text. May not be null. useragent - optional string. Information about the browser of user. platform - optional string. Information about the platform of user. screenshots - optional string array. base64-encoded data:url image, example: data:image/jpeg;base64, [encoded image] . log - optional log file. Contains log of the browser. API actions \u00b6 API path: /feedback . send_email \u00b6 Sends an email with user's feedback, ask for help, or suggestion a new feature. The message will be sent to dealer's email address for feedback. Parameters \u00b6 name description type feedback Message from the user. Screenshot and log will be added to email as attachments. JSON object type Optional. One of strings: support_request (default), feature_request and review . enum Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/feedback/send_email' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"feedback\": {\"text\": \"I love this platform\"}, \"type\": \"review\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 General types only.","title":"Feedback"},{"location":"backend-api/resources/commons/feedback/#feedback","text":"Contains feedback object API call to send a feedback email, ask for help or suggest a new feature.","title":"Feedback"},{"location":"backend-api/resources/commons/feedback/#feedback-object","text":"{ \"text\" : \"My feedback\" , \"useragent\" : \"Chrome/87.0.4280.88\" , \"platform\" : \"Windows NT 10.0; Win64; x64\" , \"screenshots\" : [ \"encoded image1\" , \"encoded image2\" ], \"log\" : <log_ f ile> } text - string. Feedback text. May not be null. useragent - optional string. Information about the browser of user. platform - optional string. Information about the platform of user. screenshots - optional string array. base64-encoded data:url image, example: data:image/jpeg;base64, [encoded image] . log - optional log file. Contains log of the browser.","title":"Feedback object"},{"location":"backend-api/resources/commons/feedback/#api-actions","text":"API path: /feedback .","title":"API actions"},{"location":"backend-api/resources/commons/feedback/#send_email","text":"Sends an email with user's feedback, ask for help, or suggestion a new feature. The message will be sent to dealer's email address for feedback.","title":"send_email"},{"location":"backend-api/resources/commons/file/","text":"File \u00b6 Contains an API call to get user's file statistic. API actions \u00b6 API path: /file . stats/read \u00b6 Gets user's files statistic. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/file/stats/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/file/stats/read?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"value\" : { \"file_count\" : 24 , \"total_size\" : 40192953 , \"quota\" : 104857600 } } file_count - int. Count of all uploaded files. total_size - int. Total files size in bytes. quota - int. Space available to the user in bytes. Errors \u00b6 General types only.","title":"Files"},{"location":"backend-api/resources/commons/file/#file","text":"Contains an API call to get user's file statistic.","title":"File"},{"location":"backend-api/resources/commons/file/#api-actions","text":"API path: /file .","title":"API actions"},{"location":"backend-api/resources/commons/file/#statsread","text":"Gets user's files statistic.","title":"stats/read"},{"location":"backend-api/resources/commons/notification/","text":"Notification \u00b6 Contains an API call to get list of user notifications. API actions \u00b6 API path: /notification . list \u00b6 Lists user notifications. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/notification/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/notification/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 12451529 , \"message\" : \"notification\" , \"show_till\" : \"2020-12-31 17:27:28\" }] } id - int. An ID of notification. message - string. Message of notification. show_till - date/time. Date until notification should be shown. Errors \u00b6 General types only.","title":"Notifications"},{"location":"backend-api/resources/commons/notification/#notification","text":"Contains an API call to get list of user notifications.","title":"Notification"},{"location":"backend-api/resources/commons/notification/#api-actions","text":"API path: /notification .","title":"API actions"},{"location":"backend-api/resources/commons/notification/#list","text":"Lists user notifications.","title":"list"},{"location":"backend-api/resources/commons/timezone/","text":"Timezone \u00b6 Contains an API call to get information about all supported timezones. API actions \u00b6 API path: /timezone . list \u00b6 Information about all supported timezones for the specified locale. Does not require user authorization. parameter \u00b6 name description type locale Name of locale. enum Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/timezone/list' \\ -H 'Content-Type: application/json' \\ -d '{\"locale\": \"En-en\"}' Response \u00b6 { \"success\" : true , \"list\" : [{ \"zone_id\" : \"Australia/Sydney\" , \"description\" : \"Sydney\" , \"base_offset\" : 10.0 , \"dst_offset\" : 1 , \"country_code\" : \"AU\" , \"alt_ids\" : [ \"Australia/ACT\" , \"Australia/Canberra\" , \"Australia/NSW\" ] }] } zone_id - string. Timezone ID, which is used throughout the API. description - string. Localized description of the timezone. base_offset - double. Base timezone offset in hours, e.g. 10 means UTC +10. May be negative or fractional! dst_offset - int. DST offset in hours (0 if no DST rules for this timezone). country_code - string. ISO country code for the timezone. alt_ids - string array. List of strings, optional, alternative timezone IDs. Errors \u00b6 General types only.","title":"Timezone"},{"location":"backend-api/resources/commons/timezone/#timezone","text":"Contains an API call to get information about all supported timezones.","title":"Timezone"},{"location":"backend-api/resources/commons/timezone/#api-actions","text":"API path: /timezone .","title":"API actions"},{"location":"backend-api/resources/commons/timezone/#list","text":"Information about all supported timezones for the specified locale. Does not require user authorization.","title":"list"},{"location":"backend-api/resources/commons/entity/","text":"Entity actions \u00b6 This page provides an overview of entity object descriptions and the API calls used to interact with them. In Navixy, an entity represents a class of objects for which representation and editable fields can be customized. For example, you can add custom fields to the places entity or rearrange existing fields to suit your needs. This flexibility allows for tailored data representation and enhanced data management within the platform. Entity object \u00b6 { \"id\" : 123 , \"type\" : \"place\" , \"settings\" : { \"layout\" : { \"sections\" : [{ \"label\" : \"Section label\" , \"field_order\" : [ \"label\" , \"location\" , \"131212\" , \"tags\" , \"description\" ] }] } } } id - int. Entity identifier. type - enum . Currently, only \"place\" is supported. layout - object describes layout of fields for entity. sections - array of objects. Each section can contain one or more fields. At least one section must exist in a layout. label - string. Name of section. field_order - string array. Built-in fields and IDs of custom fields (as strings). Entity types : place - a place object, the same as is available through place API . Builtin fields: label. location. tags. description. API actions \u00b6 API path: /entity . list \u00b6 Get list of entities which are available for customization. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/entity/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/entity/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 123 , \"type\" : \"place\" , \"settings\" : { \"layout\" : { \"sections\" : [{ \"label\" : \"Section label\" , \"field_order\" : [ \"label\" , \"location\" , \"131212\" , \"tags\" , \"description\" ] }] } } }] } Errors \u00b6 General types only. read \u00b6 Gets entity by the ID or by type. Parameters \u00b6 name description type id ID of an entity. int type Type of an entity. Entity type string, see above. string Exactly one of these parameters must be specified. They can't be both null or both non-null. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/entity/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"id\": 131312}' HTTP GET https://api.navixy.com/v2/entity/read?hash=a6aa75587e5c59c32d347da438505fc3&id=131312 Response \u00b6 { \"success\" : true , \"entity\" : { \"id\" : 123 , \"type\" : \"place\" , \"settings\" : { \"layout\" : { \"sections\" : [{ \"label\" : \"Section label\" , \"field_order\" : [ \"label\" , \"location\" , \"131212\" , \"tags\" , \"description\" ] }] } } }, \"fields\" : [{ \"id\" : 131312 , \"label\" : \"Additional info\" , \"type\" : \"text\" , \"required\" : true , \"description\" : \"Info about place\" }] } fields - array of objects. Fields associated with this entity. Described in field object . Errors \u00b6 201 - Not found in the database \u2013 if there is no entity with such ID. update \u00b6 Updates settings of customizable entity. Entity must have a valid ID. required sub-user rights : places_custom_fields_update for entities with type place . entity.settings.layout.sections must contain IDs of all builtin and custom fields which are associated with this entity. No fields can be omitted from layout, only reordering allowed. Fields cannot be duplicated, even in different sections. Parameters \u00b6 name description type entity Entity object with valid ID and settings. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/entity/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"entity\": {\"id\": 123, \"type\": \"place\", \"settings\": {\"layout\": {\"sections\": [{\"label\": \"Section label\", \"field_order\": [\"label\", \"location\", \"131212\", \"tags\", \"description\"]}]}}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if there is no entity with such ID. 7 - Invalid parameters - if entity object violates restrictions described above.","title":"Overview"},{"location":"backend-api/resources/commons/entity/#entity-actions","text":"This page provides an overview of entity object descriptions and the API calls used to interact with them. In Navixy, an entity represents a class of objects for which representation and editable fields can be customized. For example, you can add custom fields to the places entity or rearrange existing fields to suit your needs. This flexibility allows for tailored data representation and enhanced data management within the platform.","title":"Entity actions"},{"location":"backend-api/resources/commons/entity/#entity-object","text":"{ \"id\" : 123 , \"type\" : \"place\" , \"settings\" : { \"layout\" : { \"sections\" : [{ \"label\" : \"Section label\" , \"field_order\" : [ \"label\" , \"location\" , \"131212\" , \"tags\" , \"description\" ] }] } } } id - int. Entity identifier. type - enum . Currently, only \"place\" is supported. layout - object describes layout of fields for entity. sections - array of objects. Each section can contain one or more fields. At least one section must exist in a layout. label - string. Name of section. field_order - string array. Built-in fields and IDs of custom fields (as strings). Entity types : place - a place object, the same as is available through place API . Builtin fields: label. location. tags. description.","title":"Entity object"},{"location":"backend-api/resources/commons/entity/#api-actions","text":"API path: /entity .","title":"API actions"},{"location":"backend-api/resources/commons/entity/#list","text":"Get list of entities which are available for customization.","title":"list"},{"location":"backend-api/resources/commons/entity/#read","text":"Gets entity by the ID or by type.","title":"read"},{"location":"backend-api/resources/commons/entity/#update","text":"Updates settings of customizable entity. Entity must have a valid ID. required sub-user rights : places_custom_fields_update for entities with type place . entity.settings.layout.sections must contain IDs of all builtin and custom fields which are associated with this entity. No fields can be omitted from layout, only reordering allowed. Fields cannot be duplicated, even in different sections.","title":"update"},{"location":"backend-api/resources/commons/entity/fields/","text":"Entity Fields \u00b6 This page provides an overview of the field object and the API calls used to interact with it. Fields are used to add custom information to entities, allowing for enhanced customization and data management. Field Object \u00b6 The field object contains the following attributes: { \"id\" : 131312 , \"label\" : \"Additional info\" , \"type\" : \"employee\" , \"required\" : false , \"description\" : \"Responsibility\" , \"params\" : { \"responsible\" : true } } id - int. Field identifier. Null for the new object. label - string. Name of the field. type - enum . Type of field, see below. required - boolean. Whether the field is required to be filled or not. description - string. Additional information about the field, up to 512 characters. params - object. Type-specific parameters. This field should be omitted if no specific params are needed. Field Types : **Without Special Params: text - Text field up to 700 Unicode symbols. bigtext - Larger text field, up to 20,000 Unicode symbols, with reduced search and sorting capabilities. email - Field for storing an email address, validated to ensure it is a valid email. phone - Field for storing a phone number, validated to ensure it is a valid phone number. decimal - Decimal number from -999999999999.999999 to 999999999999.999999, stored up to six decimal places. integer - integer number from -2^63 to 2^63 - 1 . With Special Params employee - Link to an employee. Special params: { \"responsible\" : true } responsible - boolean. Entities with this set to true can be shown to the employee in the mobile app. Only one employee field can have this value set to true. If there\u2019s an employee assigned to a Mobile Tracker App ( Android / iOS ), and a place has a custom field of type \u201cresponsible employee\u201d, such place will be available in the mobile app for viewing. This allows the employee to view all places assigned to them to visit, etc. Fields actions \u00b6 API path: /entity/fields . Fields allow adding custom information to a customizable entity. Each field belongs to one entity. read \u00b6 Gets a set of custom fields associated with the specified entity. Note that you must know the entity ID, which can be obtained from entity/list . Parameters \u00b6 name description type entity_id ID of an entity. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/entity/fields/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"entity_id\": 131312}' HTTP GET https://api.navixy.com/v2/entity/fields/read?hash=a6aa75587e5c59c32d347da438505fc3&entity_id=131312 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 131312 , \"label\" : \"Additional info\" , \"type\" : \"employee\" , \"required\" : false , \"description\" : \"Responsibility\" , \"params\" : { \"responsible\" : true } }] } Errors \u00b6 201 - Not found in the database - if there is no entity with such ID. update \u00b6 Updates a set of custom fields associated with the specified entity. required sub-user rights : places_custom_fields_update for fields associated with place entity. Fields passed with id equal to null will be created. If field already exists, its type must be equal to type of already stored field (i.e. you can't change a type of field). All fields associated with the same entity must have different label s. Passing fields with id from non-existent fields or fields bound to another entity will result in an error. If delete_missing is true , all existing fields which are missing from the fields list will be permanently deleted! Otherwise, they are unaffected. Parameters \u00b6 name description type entity_id ID of an entity. int fields List of new/existing fields to be created/updated. JSON object delete_missing Optional. Default is false . Delete fields not present in fields list. boolean Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/entity/fields/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"entity_id\": 131312, \"fields\": {\"label\": \"Additional info\", \"type\": \"employee\", \"required\": false, \"description\": \"Responsibility\", \"params\": {\"responsible\": true}}' Response \u00b6 A list of all fields associated with the specified entity. Newly created fields will have their IDs filled. { \"success\" : true , \"list\" : [{ \"id\" : 131312 , \"label\" : \"Additional info\" , \"type\" : \"employee\" , \"required\" : false , \"description\" : \"Responsibility\" , \"params\" : { \"responsible\" : true } }] } Errors \u00b6 201 - Not found in the database \u2013 if there is no entity with such ID. 7 - Invalid parameters - if fields violate restrictions described above.","title":"Fields"},{"location":"backend-api/resources/commons/entity/fields/#entity-fields","text":"This page provides an overview of the field object and the API calls used to interact with it. Fields are used to add custom information to entities, allowing for enhanced customization and data management.","title":"Entity Fields"},{"location":"backend-api/resources/commons/entity/fields/#field-object","text":"The field object contains the following attributes: { \"id\" : 131312 , \"label\" : \"Additional info\" , \"type\" : \"employee\" , \"required\" : false , \"description\" : \"Responsibility\" , \"params\" : { \"responsible\" : true } } id - int. Field identifier. Null for the new object. label - string. Name of the field. type - enum . Type of field, see below. required - boolean. Whether the field is required to be filled or not. description - string. Additional information about the field, up to 512 characters. params - object. Type-specific parameters. This field should be omitted if no specific params are needed. Field Types : **Without Special Params: text - Text field up to 700 Unicode symbols. bigtext - Larger text field, up to 20,000 Unicode symbols, with reduced search and sorting capabilities. email - Field for storing an email address, validated to ensure it is a valid email. phone - Field for storing a phone number, validated to ensure it is a valid phone number. decimal - Decimal number from -999999999999.999999 to 999999999999.999999, stored up to six decimal places. integer - integer number from -2^63 to 2^63 - 1 . With Special Params employee - Link to an employee. Special params: { \"responsible\" : true } responsible - boolean. Entities with this set to true can be shown to the employee in the mobile app. Only one employee field can have this value set to true. If there\u2019s an employee assigned to a Mobile Tracker App ( Android / iOS ), and a place has a custom field of type \u201cresponsible employee\u201d, such place will be available in the mobile app for viewing. This allows the employee to view all places assigned to them to visit, etc.","title":"Field Object"},{"location":"backend-api/resources/commons/entity/fields/#fields-actions","text":"API path: /entity/fields . Fields allow adding custom information to a customizable entity. Each field belongs to one entity.","title":"Fields actions"},{"location":"backend-api/resources/commons/entity/fields/#read","text":"Gets a set of custom fields associated with the specified entity. Note that you must know the entity ID, which can be obtained from entity/list .","title":"read"},{"location":"backend-api/resources/commons/entity/fields/#update","text":"Updates a set of custom fields associated with the specified entity. required sub-user rights : places_custom_fields_update for fields associated with place entity. Fields passed with id equal to null will be created. If field already exists, its type must be equal to type of already stored field (i.e. you can't change a type of field). All fields associated with the same entity must have different label s. Passing fields with id from non-existent fields or fields bound to another entity will result in an error. If delete_missing is true , all existing fields which are missing from the fields list will be permanently deleted! Otherwise, they are unaffected.","title":"update"},{"location":"backend-api/resources/commons/entity/search_conditions/","text":"Entity Search Conditions \u00b6 This page provides an overview of the search conditions object description and the types of conditions that can be used. Search conditions are employed to filter and retrieve a list of specific entities based on both built-in and custom fields. Search conditions object \u00b6 Search conditions are represented by an array of conditions, where each condition is evaluated to either true or false. Boolean operations such as AND or OR can be applied to these conditions. All conditions in the top-level array are joined using the AND operator by default. [ { \"type\" : \"and\" , \"conditions\" :[ { \"type\" : \"or\" , \"conditions\" :[ { \"type\" : \"eq\" , \"field\" : \"18\" , \"value\" : 1111 }, { \"type\" : \"contains\" , \"field\" : \"27\" , \"value\" : \"qqq\" }] }, { \"type\" : \"contains\" , \"field\" : \"label\" , \"value\" : \"who\" }] } ] !!! warning \u201cA maximum of 72 conditions can be used at once, including nested conditions.\u201d Condition Types \u00b6 AND Condition \u00b6 This condition evaluates all specified sub-conditions and joins them using the AND boolean operator. { \"type\" : \"and\" , \"conditions\" :[{ \"type\" : \"eq\" , \"field\" : \"18\" , \"value\" : 1111 }, { \"type\" : \"contains\" , \"field\" : \"27\" , \"value\" : \"qqq\" }] } OR Condition \u00b6 This condition evaluates all specified sub-conditions and joins them using the OR boolean operator. { \"type\" : \"or\" , \"conditions\" :[{ \"type\" : \"eq\" , \"field\" : \"18\" , \"value\" : 1111 }, { \"type\" : \"contains\" , \"field\" : \"27\" , \"value\" : \"qqq\" }] } NUMBER EQUALS Condition \u00b6 This condition checks if the specified field is equal to the provided number value. It also works for text fields (e.g., \u201c111\u201d is considered equal to 111). For linked entity fields, it matches the linked entity ID to the number value. { \"type\" : \"eq\" , \"field\" : \"18\" , \"value\" : 1111 } field - string. A standard field or field ID. value - int. Number value to match against the field. Can be decimal, must be between -2^63 and 2^63-1, with no more than 6 fractional digits. CONTAINS STRING Condition \u00b6 This condition checks if the specified field contains a substring equal to the provided value. It also works for number fields (e.g., 123123 contains \u201c123\u201d). For linked entity fields, it matches the value against the linked entity label or other similar fields (e.g., first name, last name). { \"type\" : \"contains\" , \"field\" : \"label\" , \"value\" : \"who\" } field - string. A standard field or field ID. value - string. Value to match against the field. Cannot be null or empty, maximum length is 760 characters.","title":"Search Conditions"},{"location":"backend-api/resources/commons/entity/search_conditions/#entity-search-conditions","text":"This page provides an overview of the search conditions object description and the types of conditions that can be used. Search conditions are employed to filter and retrieve a list of specific entities based on both built-in and custom fields.","title":"Entity Search Conditions"},{"location":"backend-api/resources/commons/entity/search_conditions/#search-conditions-object","text":"Search conditions are represented by an array of conditions, where each condition is evaluated to either true or false. Boolean operations such as AND or OR can be applied to these conditions. All conditions in the top-level array are joined using the AND operator by default. [ { \"type\" : \"and\" , \"conditions\" :[ { \"type\" : \"or\" , \"conditions\" :[ { \"type\" : \"eq\" , \"field\" : \"18\" , \"value\" : 1111 }, { \"type\" : \"contains\" , \"field\" : \"27\" , \"value\" : \"qqq\" }] }, { \"type\" : \"contains\" , \"field\" : \"label\" , \"value\" : \"who\" }] } ] !!! warning \u201cA maximum of 72 conditions can be used at once, including nested conditions.\u201d","title":"Search conditions object"},{"location":"backend-api/resources/commons/entity/search_conditions/#condition-types","text":"","title":"Condition Types"},{"location":"backend-api/resources/commons/entity/search_conditions/#and-condition","text":"This condition evaluates all specified sub-conditions and joins them using the AND boolean operator. { \"type\" : \"and\" , \"conditions\" :[{ \"type\" : \"eq\" , \"field\" : \"18\" , \"value\" : 1111 }, { \"type\" : \"contains\" , \"field\" : \"27\" , \"value\" : \"qqq\" }] }","title":"AND Condition"},{"location":"backend-api/resources/commons/entity/search_conditions/#number-equals-condition","text":"This condition checks if the specified field is equal to the provided number value. It also works for text fields (e.g., \u201c111\u201d is considered equal to 111). For linked entity fields, it matches the linked entity ID to the number value. { \"type\" : \"eq\" , \"field\" : \"18\" , \"value\" : 1111 } field - string. A standard field or field ID. value - int. Number value to match against the field. Can be decimal, must be between -2^63 and 2^63-1, with no more than 6 fractional digits.","title":"NUMBER EQUALS Condition"},{"location":"backend-api/resources/commons/entity/search_conditions/#contains-string-condition","text":"This condition checks if the specified field contains a substring equal to the provided value. It also works for number fields (e.g., 123123 contains \u201c123\u201d). For linked entity fields, it matches the value against the linked entity label or other similar fields (e.g., first name, last name). { \"type\" : \"contains\" , \"field\" : \"label\" , \"value\" : \"who\" } field - string. A standard field or field ID. value - string. Value to match against the field. Cannot be null or empty, maximum length is 760 characters.","title":"CONTAINS STRING Condition"},{"location":"backend-api/resources/commons/history/","text":"Events history \u00b6 Contains history entry object description and API calls to interact with it. Find instructions on getting notifications here . Tracker history entry \u00b6 { \"id\" : 1 , \"type\" : \"tracker\" , \"is_read\" : false , \"message\" : \"Alarm\" , \"time\" : \"2020-01-01 00:00:00\" , \"event\" : \"offline\" , \"tracker_id\" : 2 , \"rule_id\" : 3 , \"track_id\" : 4 , \"location\" :{ \"lat\" : 50.0 , \"lng\" : 60.0 , \"precision\" : 50 }, \"address\" : \"address\" , \"extra\" : { \"task_id\" : null , \"parent_task_id\" : null , \"counter_id\" : null , \"service_task_id\" : null , \"checkin_id\" : null , \"place_ids\" : null , \"last_known_location\" : false , \"tracker_label\" : \"Tracker label\" , \"emergency\" : false , \"employee_id\" : 4563 } } id - long. An ID of event. type - enum . Type of device. Can be \"socket\", \"tracker\", or \"camera\". is_read - boolean. If true the notification seen by user and marked as read. message - string. Notification message. time - date/time . When this notification received. event - enum . Type of history event extension. Available event types can be obtained by /history/type/list action. tracker_id - int. An ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. rule_id - int. An ID of assigned rule. track_id - int. An ID of a track on which the event happened. location - location object. Location where the event happened. address - string. Address of location or \"\" (empty string) if no address for location. extra - object. Extra fields for events. Like for what task or tracker the event was. task_id - int. Related task identifier. parent_task_id - int. Related parent task identifier (for task checkpoint related history entries). counter_id - int. Related counter identifier. service_task_id - int. Related service task ID. checkin_id - int. Related check-in marker. place_ids - int. Related place identifiers. last_known_location - boolean. true if location may be outdated. tracker_label - string. Tracker label. emergency - boolean. true for emergency events with the same flag in a rule. employee_id - int. Driver ID at the time of the event. Date/time type described in data types description section . API actions \u00b6 API path: /history . read \u00b6 Returns history entry with the specified ID. Parameters \u00b6 name description type id History entry ID. long add_tracker_label Optional. If true tracker label will be added to message. boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/history/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"id\": 11231, \"add_tracker_label\": true}' HTTP GET https://api.navixy.com/v2/history/read?hash=a6aa75587e5c59c32d347da438505fc3&id=11231&add_tracker_label=true Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 1 , \"type\" : \"tracker\" , \"is_read\" : false , \"message\" : \"Alarm\" , \"time\" : \"2020-01-01 00:00:00\" , \"event\" : \"offline\" , \"tracker_id\" : 2 , \"rule_id\" : 3 , \"track_id\" : 4 , \"location\" :{ \"lat\" : 50.0 , \"lng\" : 60.0 , \"precision\" : 50 }, \"address\" : \"address\" , \"extra\" : { \"task_id\" : null , \"parent_task_id\" : null , \"counter_id\" : null , \"service_task_id\" : null , \"checkin_id\" : null , \"place_ids\" : null , \"last_known_location\" : false , \"tracker_label\" : \"Tracker label\" , \"emergency\" : false , \"employee_id\" : 4563 } } } Errors \u00b6 201 \u2013 Not found in the database - when there are no history entries with that ID. mark_read \u00b6 Marks history entry as read by id (see: Tracker history entry ). Parameters \u00b6 name description type id Tracker history entry ID long Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/history/mark_read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"id\": 11231}' HTTP GET https://api.navixy.com/v2/history/mark_read?hash=a6aa75587e5c59c32d347da438505fc3&id=11231 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - when there are no history entries with that ID. mark_read_all \u00b6 Marks all the user's history entries read. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/history/mark_read_all' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/history/mark_read_all?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true } Errors \u00b6 General types only.","title":"Overview"},{"location":"backend-api/resources/commons/history/#events-history","text":"Contains history entry object description and API calls to interact with it. Find instructions on getting notifications here .","title":"Events history"},{"location":"backend-api/resources/commons/history/#tracker-history-entry","text":"{ \"id\" : 1 , \"type\" : \"tracker\" , \"is_read\" : false , \"message\" : \"Alarm\" , \"time\" : \"2020-01-01 00:00:00\" , \"event\" : \"offline\" , \"tracker_id\" : 2 , \"rule_id\" : 3 , \"track_id\" : 4 , \"location\" :{ \"lat\" : 50.0 , \"lng\" : 60.0 , \"precision\" : 50 }, \"address\" : \"address\" , \"extra\" : { \"task_id\" : null , \"parent_task_id\" : null , \"counter_id\" : null , \"service_task_id\" : null , \"checkin_id\" : null , \"place_ids\" : null , \"last_known_location\" : false , \"tracker_label\" : \"Tracker label\" , \"emergency\" : false , \"employee_id\" : 4563 } } id - long. An ID of event. type - enum . Type of device. Can be \"socket\", \"tracker\", or \"camera\". is_read - boolean. If true the notification seen by user and marked as read. message - string. Notification message. time - date/time . When this notification received. event - enum . Type of history event extension. Available event types can be obtained by /history/type/list action. tracker_id - int. An ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. rule_id - int. An ID of assigned rule. track_id - int. An ID of a track on which the event happened. location - location object. Location where the event happened. address - string. Address of location or \"\" (empty string) if no address for location. extra - object. Extra fields for events. Like for what task or tracker the event was. task_id - int. Related task identifier. parent_task_id - int. Related parent task identifier (for task checkpoint related history entries). counter_id - int. Related counter identifier. service_task_id - int. Related service task ID. checkin_id - int. Related check-in marker. place_ids - int. Related place identifiers. last_known_location - boolean. true if location may be outdated. tracker_label - string. Tracker label. emergency - boolean. true for emergency events with the same flag in a rule. employee_id - int. Driver ID at the time of the event. Date/time type described in data types description section .","title":"Tracker history entry"},{"location":"backend-api/resources/commons/history/#api-actions","text":"API path: /history .","title":"API actions"},{"location":"backend-api/resources/commons/history/#read","text":"Returns history entry with the specified ID.","title":"read"},{"location":"backend-api/resources/commons/history/#mark_read","text":"Marks history entry as read by id (see: Tracker history entry ).","title":"mark_read"},{"location":"backend-api/resources/commons/history/#mark_read_all","text":"Marks all the user's history entries read.","title":"mark_read_all"},{"location":"backend-api/resources/commons/history/history_tracker/","text":"Tracker events \u00b6 Contains list method to get tracker's events. API actions \u00b6 API path: /history/tracker/ . list \u00b6 List less than or equal to limit of tracker events filtered by event types ( events ) between from date/time and to date/time sorted by time field. Described this API call usage details in our guide . Parameters \u00b6 name description type trackers List of tracker's IDs. int array from Start date/time for searching. string date/time to End date/time for searching. Must be after \"from\" date. string date/time events Optional. Default: all. List of history types. string array limit Optional. Default: history.maxLimit . Max count of entries in result. int ascending Optional. Default: true . Sort ascending by time when it is true and descending when false . boolean If events (event types) not passed then list all event types. Available event types can be obtained by /history/type/list action. Default and max limit is 1000. (Note for StandAlone: this value configured by maxHistoryLimit config option). Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/history/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"trackers\": [131312, 123985], \"from\": \"2020-12-10 16:44:00\", \"to\": \"2020-12-22 16:44:00\"}' Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 1 , \"type\" : \"tracker\" , \"is_read\" : false , \"message\" : \"Alarm\" , \"time\" : \"2020-01-01 00:00:00\" , \"event\" : \"offline\" , \"tracker_id\" : 2 , \"rule_id\" : 3 , \"track_id\" : 4 , \"location\" :{ \"lat\" : 50.0 , \"lng\" : 60.0 , \"precision\" : 50 }, \"address\" : \"address\" , \"extra\" : { \"task_id\" : null , \"parent_task_id\" : null , \"counter_id\" : null , \"service_task_id\" : null , \"checkin_id\" : null , \"place_ids\" : null , \"last_known_location\" : false , \"tracker_label\" : \"Tracker label\" , \"emergency\" : false , \"employee_id\" : 4563 } }], \"limit_exceeded\" : false } list - list of zero or more history_entry` objects which described in Tracker history entry . limit_exceeded - boolean. false when listed all history entries satisfied with conditions and true otherwise. Errors \u00b6 211 \u2013 Requested time span is too big - time span between from and to is more than report.maxTimeSpan days. 212 \u2013 Requested limit is too big - limit is more than history.maxLimit . 217 \u2013 List contains nonexistent entities \u2013 if one of the specified trackers does not exist or is blocked.","title":"History Tracker"},{"location":"backend-api/resources/commons/history/history_tracker/#tracker-events","text":"Contains list method to get tracker's events.","title":"Tracker events"},{"location":"backend-api/resources/commons/history/history_tracker/#api-actions","text":"API path: /history/tracker/ .","title":"API actions"},{"location":"backend-api/resources/commons/history/history_tracker/#list","text":"List less than or equal to limit of tracker events filtered by event types ( events ) between from date/time and to date/time sorted by time field. Described this API call usage details in our guide .","title":"list"},{"location":"backend-api/resources/commons/history/history_type/","text":"Event type \u00b6 Contains list method to get event types available to user with localized descriptions. API actions \u00b6 API path: /history/type . `### list` Returns available history event types with localized descriptions. Parameters \u00b6 name description type locale Locale code to set language of descriptions. enum only_tracker_events Optional. Default is true . Will return only tracker type events if true . boolean Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/history/type/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"locale\": \"En-en\"}' Response \u00b6 { \"success\" : true , \"list\" : [{ \"type\" : \"alarmcontrol\" , \"description\" : \"Car alarm\" }] } type - string. History event type. description - string. Localized description. Errors \u00b6 General types only.","title":"History Type"},{"location":"backend-api/resources/commons/history/history_type/#event-type","text":"Contains list method to get event types available to user with localized descriptions.","title":"Event type"},{"location":"backend-api/resources/commons/history/history_type/#api-actions","text":"API path: /history/type . `### list` Returns available history event types with localized descriptions.","title":"API actions"},{"location":"backend-api/resources/commons/history/history_unread/","text":"Unread events \u00b6 Contains API calls to interact with unread history events. API actions \u00b6 API path: /history/unread . list \u00b6 List less than or equal to limit of the latest user's unread history events. Described how it works in our guide . Parameters \u00b6 name description type limit Optional. Limit of entries in response. int from Optional. Start date/time for searching. Default from is now minus one year. date/time Default and max limit is history.maxLimit . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/history/unread/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/history/unread/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 1 , \"type\" : \"tracker\" , \"is_read\" : false , \"message\" : \"Alarm\" , \"time\" : \"2020-01-01 00:00:00\" , \"event\" : \"offline\" , \"tracker_id\" : 2 , \"rule_id\" : 3 , \"track_id\" : 4 , \"location\" :{ \"lat\" : 50.0 , \"lng\" : 60.0 , \"precision\" : 50 }, \"address\" : \"address\" , \"extra\" : { \"task_id\" : null , \"parent_task_id\" : null , \"counter_id\" : null , \"service_task_id\" : null , \"checkin_id\" : null , \"place_ids\" : null , \"last_known_location\" : false , \"tracker_label\" : \"Tracker label\" , \"emergency\" : false , \"employee_id\" : 4563 } }] } list - array of objects. list of zero or more Tracker history entry objects. Errors \u00b6 212 \u2013 Requested limit is too big (more history.maxLimit config option). count \u00b6 Get count of user's unread history messages starting from date. Parameters \u00b6 name description type from Optional. Start date/time for searching. Default from is now minus one year. date/time type Optional. Type of devices that should be count. Can be \"socket\", \"tracker\", or \"camera\". enum Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/history/unread/count' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/history/unread/count?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"count\" : 1 } Errors \u00b6 General types only.","title":"History Unread"},{"location":"backend-api/resources/commons/history/history_unread/#unread-events","text":"Contains API calls to interact with unread history events.","title":"Unread events"},{"location":"backend-api/resources/commons/history/history_unread/#api-actions","text":"API path: /history/unread .","title":"API actions"},{"location":"backend-api/resources/commons/history/history_unread/#list","text":"List less than or equal to limit of the latest user's unread history events. Described how it works in our guide .","title":"list"},{"location":"backend-api/resources/commons/history/history_unread/#count","text":"Get count of user's unread history messages starting from date.","title":"count"},{"location":"backend-api/resources/commons/history/history_user/","text":"User events \u00b6 Contains list method to get user's events. API actions \u00b6 API path: /history/user/ . list \u00b6 List less than or equal to limit of tracker events filtered by event types ( events ) between from date/time and to date/time sorted by time field. Added more information about this API call usage in our guide . Parameters \u00b6 name description type from Start date/time for searching. string date/time to End date/time for searching. Must be after \"from\" date. string date/time events Optional. Default: all. List of history types. string array limit Optional. Default: history.maxLimit . Max count of entries in result. int ascending Optional. Default: true . Sort ascending by time when it is true and descending when false . boolean If events (event types) not passed then list all event types. Available event types can be obtained by /history/user/list action. Default and max limit is 1000. (Note for StandAlone: this value configured by maxHistoryLimit config option). Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/history/user/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"from\": \"2020-12-10 16:44:00\", \"to\": \"2020-12-22 16:44:00\"}' Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 1 , \"type\" : \"tracker\" , \"is_read\" : false , \"message\" : \"Alarm\" , \"time\" : \"2020-01-01 00:00:00\" , \"event\" : \"offline\" , \"tracker_id\" : 2 , \"rule_id\" : 3 , \"track_id\" : 4 , \"location\" :{ \"lat\" : 50.0 , \"lng\" : 60.0 , \"precision\" : 50 }, \"address\" : \"address\" , \"extra\" : { \"task_id\" : null , \"parent_task_id\" : null , \"counter_id\" : null , \"service_task_id\" : null , \"checkin_id\" : null , \"place_ids\" : null , \"last_known_location\" : false , \"tracker_label\" : \"Tracker label\" , \"emergency\" : false , \"employee_id\" : 4563 } }], \"limit_exceeded\" : false } list - list of zero or more history_entry` objects which described in Tracker history entry . limit_exceeded - boolean. It indicates if the response has exceeded the store_period limit, set in the user's tariff plan. Will be true if you request a period that exceeds what the user's plan allows. Errors \u00b6 211 \u2013 Requested time span is too big - time span between from and to is more than report.maxTimeSpan days. 212 \u2013 Requested limit is too big - limit is more than history.maxLimit .","title":"History User"},{"location":"backend-api/resources/commons/history/history_user/#user-events","text":"Contains list method to get user's events.","title":"User events"},{"location":"backend-api/resources/commons/history/history_user/#api-actions","text":"API path: /history/user/ .","title":"API actions"},{"location":"backend-api/resources/commons/history/history_user/#list","text":"List less than or equal to limit of tracker events filtered by event types ( events ) between from date/time and to date/time sorted by time field. Added more information about this API call usage in our guide .","title":"list"},{"location":"backend-api/resources/commons/plugin/","text":"Plugin \u00b6 Contains plugin object description and API calls to interact with it. Plugins are special software modules which modify the behavior of various API calls. Plugin object structure \u00b6 { \"id\" : 1 , \"type\" : \"tracker_register\" , \"ui_module\" : \"Registration.appPlugins.BundledSim\" , \"module\" : \"com.navixy.plugin.tracker.register.bundled_sim\" , \"filter\" : { \"exclusion\" : true , \"values\" : [ \"navixymobile\" , \"mobile_unknown.*\" ] }, \"parameters\" : { <parame ter 1 > } id - int. An ID of plugin. type - string. Plugin type. ui_module - string. Plugin UI module name. module - string. Plugin module name. filter - object. A model filter which describes to which device models this plugin is applicable. exclusion - boolean. If true , \"models\" lists models NOT supported by this plugin, if false , \"models\" contains all supported models. values - string array. List of the regexes for models which are (not) supported by this plugin. parameters - plugin-specific parameters as JSON object. This field omitted if it's null (and it is null most of the time). object example \u00b6 { \"id\" : 4 , \"type\" : \"tracker_report\" , \"module\" : \"com.navixy.plugin.tracker.report.trip\" , \"ui_module\" : \"Trip\" , \"filter\" : { \"exclusion\" : true , \"values\" : [] } } API actions \u00b6 API path: /plugin . list \u00b6 Get all plugins available to the user. List of available plugins may vary from user to user depending on platform settings and purchased features. Only these plugins can be used to register trackers, generate reports, etc. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/plugin/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/plugin/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 4 , \"type\" : \"tracker_report\" , \"module\" : \"com.navixy.plugin.tracker.report.trip\" , \"ui_module\" : \"Trip\" , \"filter\" : { \"exclusion\" : true , \"values\" : [] } }] } list - array of objects. List of available plugins. Errors \u00b6 General types only. Standalone-specific: \u00b6 If no plugins enabled for user and his dealer then available plugins enabled by default (config options plugin.tracker.register.defaultIds and plugin.tracker.report.defaultIds ).","title":"Overview"},{"location":"backend-api/resources/commons/plugin/#plugin","text":"Contains plugin object description and API calls to interact with it. Plugins are special software modules which modify the behavior of various API calls.","title":"Plugin"},{"location":"backend-api/resources/commons/plugin/#plugin-object-structure","text":"{ \"id\" : 1 , \"type\" : \"tracker_register\" , \"ui_module\" : \"Registration.appPlugins.BundledSim\" , \"module\" : \"com.navixy.plugin.tracker.register.bundled_sim\" , \"filter\" : { \"exclusion\" : true , \"values\" : [ \"navixymobile\" , \"mobile_unknown.*\" ] }, \"parameters\" : { <parame ter 1 > } id - int. An ID of plugin. type - string. Plugin type. ui_module - string. Plugin UI module name. module - string. Plugin module name. filter - object. A model filter which describes to which device models this plugin is applicable. exclusion - boolean. If true , \"models\" lists models NOT supported by this plugin, if false , \"models\" contains all supported models. values - string array. List of the regexes for models which are (not) supported by this plugin. parameters - plugin-specific parameters as JSON object. This field omitted if it's null (and it is null most of the time).","title":"Plugin object structure"},{"location":"backend-api/resources/commons/plugin/#api-actions","text":"API path: /plugin .","title":"API actions"},{"location":"backend-api/resources/commons/plugin/#list","text":"Get all plugins available to the user. List of available plugins may vary from user to user depending on platform settings and purchased features. Only these plugins can be used to register trackers, generate reports, etc.","title":"list"},{"location":"backend-api/resources/commons/plugin/report_plugins/","text":"Report plugins \u00b6 Contains report plugins with plugin-specific parameters. Trips report \u00b6 A report on detailed trip history. Parameters \u00b6 Default plugin_id : 4. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true , timestamps will be with seconds. boolean include_summary_sheet_only If true , report will contain only a summary sheet for all chosen devices. boolean include_summary_sheet If true , report will contain a summary sheet. Default is true . boolean split Trips will be split by stops if true . boolean show_idle_duration Will show idle duration in report if true . boolean show_coordinates Every address will contain longitude and latitude if true . boolean filter If true ,short trips will hide (shorter than 300m/have less than 4 points total and if the device circles around one point (e.g., star pattern from GPS drifting)). boolean group_by_driver Group trips by driver assigned to the device if true . boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 4 , \"show_seconds\" : false , \"include_summary_sheet_only\" : false , \"include_summary_sheet\" : true , \"split\" : true , \"show_idle_duration\" : false , \"show_coordinates\" : false , \"filter\" : true , \"group_by_driver\" : false } Stops report \u00b6 A report on detailed stops history. Parameters \u00b6 Default plugin_id : 6. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true , timestamps will be with seconds. boolean show_coordinates Every address will contain longitude and latitude if true . boolean filter If true , short trips will be part of stops (shorter than 300m/have less than 4 points total and if the device circles around one point (e.g., star pattern from GPS drifting)). boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 6 , \"show_seconds\" : false , \"show_coordinates\" : false , \"filter\" : false } Trips and stops by shifts report \u00b6 A report on trips and stops by shifts. Parameters \u00b6 Default plugin_id : 77. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean shifts List of shifts with names, start and end time. e.g. [{\"name\":\"Shift1\", \"start_time\":\"00:00\", \"end_time\":\"23:59\"}] array of objects filter If true ,short trips will not coincide (shorter than 300m/have less than 4 points total and if the device circles around one point (e.g., star pattern from GPS drifting)). boolean show_coordinates Every address will contain longitude and latitude if true . boolean split_at_midnight Split shifts at midnight if true . boolean shifts is: { \"shifts\" : [{ \"name\" : \"Shift1\" , \"start_time\" : \"00:00\" , \"end_time\" : \"23:59\" }] } plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 77 , \"show_seconds\" : false , \"shifts\" : [{ \"name\" : \"Shift1\" , \"start_time\" : \"00:00\" , \"end_time\" : \"12:00\" }, { \"name\" : \"Shift2\" , \"start_time\" : \"12:00\" , \"end_time\" : \"23:59\" }], \"filter\" : true , \"show_coordinates\" : false , \"split_at_midnight\" : true } Geofence visits report \u00b6 A report on date, time, and mileage in geofence. Parameters \u00b6 Default plugin_id : 8. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true , timestamps will be with seconds. boolean show_mileage Adds mileage to the report if true . boolean show_not_visited_zones Will show non visited zones if true . boolean min_minutes_in_zone Minimum minutes in a zone to start determining visit. If the device was in a zone less than a specified time - the visit not count. int zone_ids List of zone IDs. int array hide_charts If true , charts will be hidden. boolean include_summary_sheet_only If true , report will contain only a summary sheet. boolean include_summary_sheet If true , report will contain a summary sheet. Default is true . boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 8 , \"show_seconds\" : false , \"include_summary_sheet_only\" : false , \"include_summary_sheet\" : false , \"show_mileage\" : false , \"show_not_visited_zones\" : false , \"min_minutes_in_zone\" : 5 , \"hide_charts\" : false , \"zone_ids\" : [ 2143181 , 2143182 ] } POI visits report \u00b6 A report on date, time, and the number of POIs visits. Parameters \u00b6 Default plugin_id : 85. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true , timestamps will be with seconds. boolean show_mileage Adds mileage to the report if true . boolean show_not_visited_places Will show non visited POIs if true . boolean min_minutes_in_place Minimum minutes in a place to start determining visit. If the device was in a place less than a specified time - the visit not count. int place_ids List of place IDs. int array hide_charts If true , charts will be hidden. boolean include_summary_sheet_only If true , report will have only a summary sheet. boolean include_summary_sheet If true , report will contain a summary sheet. Default is true . boolean fetch_places_by_employees If true , places will show assigned employee. Place should be assigned to an employee to show his name. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 85 , \"show_seconds\" : false , \"include_summary_sheet_only\" : false , \"show_mileage\" : false , \"show_not_visited_places\" : false , \"min_minutes_in_place\" : 5 , \"hide_charts\" : false , \"fetch_places_by_employees\" : false , \"place_ids\" : [ 1612957 , 1886863 , 1886864 ] } Car security report \u00b6 A report on alarms, towing alerts, AutoControl events, and crashes. Parameters \u00b6 Default plugin_id : 15. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 15 , \"show_seconds\" : false } Emergency button (SOS) report \u00b6 A report on SOS button events log Parameters \u00b6 Default plugin_id : 16. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 16 , \"show_seconds\" : false } Fall detection report \u00b6 A report on fall detection sensor log. Parameters \u00b6 Default plugin_id : 17. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 17 , \"show_seconds\" : false } Tracker detach report \u00b6 A report on demounting devices from tracking objects. Parameters \u00b6 Default plugin_id : 18. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 18 , \"show_seconds\" : false } Overall security report \u00b6 A report on all events related to security and safety. Parameters \u00b6 default plugin_id : 19. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean group_by_type If true ,events will group by type. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 19 , \"show_seconds\" : false , \"group_by_type\" : false } Engine hours report \u00b6 A report on time spent in motion and on idling. Parameters \u00b6 default plugin_id : 7. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true , timestamps will be with seconds. boolean show_detailed If true , report will contain detailed engine hours tab. boolean include_summary_sheet_only If true , report will contain only a summary sheet for all chosen devices. boolean include_summary_sheet If true , report will contain a summary sheet. Default is true . boolean filter If true , short trips will not coincide (shorter than 300m/have less than 4 points total and if the device circles around one point (e.g., star pattern from GPS drifting)). boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 7 , \"show_seconds\" : false , \"show_detailed\" : false , \"include_summary_sheet_only\" : false , \"filter\" : true } Fuel volume report \u00b6 A report on fuel refills, drains, consumption (based on fuel level sensor). Parameters \u00b6 default plugin_id : 10. Plugin-specific parameters: name description type show_seconds If true , timestamps will be with seconds. boolean graph_type The type of X-axis. Can be \"time\" or \"mileage\". enum detailed_by_dates If true , show final data on fuel traffic for each day in the period. boolean include_summary_sheet_only If true , report will contain only a summary sheet for all chosen devices. boolean include_summary_sheet If true , report will contain a summary sheet. Default is true . boolean use_ignition_data_for_consumption Calculate consumption only when the ignition was on if true . boolean include_mileage_plot Optional. Used if graph_type = time . Show mileage plot if true . boolean filter If true , short trips will not coincide (shorter than 300m/have less than 4 points total and if the device circles around one point (e.g., star pattern from GPS drifting)). boolean include_speed_plot If true , show speed plot. boolean smoothing Smooth graph if true . Smoothing reduces the accuracy of calculating refills or drains. boolean surge_filter If true , enables surge filter. boolean surge_filter_threshold Defines a level of surge filter. Can be 0.01 - 0.99. float speed_filter If true , enables speed filter. boolean speed_filter_threshold Defines a speed filter threshold. int plugin example \u00b6 { \"show_seconds\" : false , \"plugin_id\" : 10 , \"graph_type\" : \"mileage\" , \"detailed_by_dates\" : true , \"include_summary_sheet_only\" : false , \"use_ignition_data_for_consumption\" : false , \"include_mileage_plot\" : false , \"filter\" : true , \"include_speed_plot\" : false , \"smoothing\" : false , \"surge_filter\" : true , \"surge_filter_threshold\" : 0.2 , \"speed_filter\" : false , \"speed_filter_threshold\" : 10 } Flow meter report \u00b6 A report on fuel consumption counted by flow meter sensors. Parameters \u00b6 default plugin_id : 78. Plugin-specific parameters: name description type detailed_by_dates If true , a table with statistics for every single day in selected date range will be added to the report. boolean filter If true , short trips will not coincide (shorter than 300m/have less than 4 points total and if the device circles around one point (e.g., star pattern from GPS drifting)). boolean include_summary_sheet_only If true , report will contain only a summary sheet for all chosen devices. boolean include_summary_sheet If true , report will contain a summary sheet. Default is true . boolean plugin example \u00b6 { \"detailed_by_dates\" : true , \"plugin_id\" : 78 , \"include_summary_sheet_only\" : false , \"filter\" : true } Vehicle sensors report \u00b6 A report on CAN-bus and OBD2-port data. Parameters \u00b6 default plugin_id : 22. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean details_interval_seconds The interval in seconds. From 30 to 21600. int details_interval_minutes Deprecated! The interval in minutes. Can be [5, 30, 60, 180, 360] . int graph_type The type of X-axis. Can be \"time\" or \"mileage\". enum smoothing Smooth data if true . boolean sensors List of objects containing tracker_id and sensor_id. array of objects sensors is: { \"sensors\" : [{ \"tracker_id\" : 37714 , \"sensor_id\" : 57968 }] } Parameter details_interval_minutes is deprecated. Please use details_interval_seconds . plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 22 , \"details_interval_seconds\" : 60 , \"graph_type\" : \"time\" , \"smoothing\" : false , \"sensors\" : [{ \"tracker_id\" : 993495 , \"sensor_id\" : 1378566 }] } Speed violation \u00b6 A report on speeding instances. Parameters \u00b6 default plugin_id : 27. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean min_duration_minutes A minimum time in seconds when speed is more than max_speed to determine violation. int max_speed A maximum speed to determine violation. int group_by_driver Group violations by driver assigned to the device if true . boolean filter If true ,short trips will not coincide (shorter than 300m/have less than 4 points total and if the device circles around one point (e.g., star pattern from GPS drifting)). boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 27 , \"show_seconds\" : false , \"min_duration_minutes\" : 5 , \"max_speed\" : 60 , \"group_by_driver\" : false , \"filter\" : true } Device switching ON/OFF report \u00b6 A report on switching device using hardware switch. Parameters \u00b6 default plugin_id : 23. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 23 , \"show_seconds\" : false } GSM connection lost \u00b6 A report on long disruptions of server connection Parameters \u00b6 default plugin_id : 13. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 13 , \"show_seconds\" : false } Measuring sensors report \u00b6 A report on detailed sensor reading history. Parameters \u00b6 default plugin_id : 9. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean details_interval_seconds The interval in seconds. From 30 to 21600. int details_interval_minutes Deprecated! The interval in minutes. Can be [5, 30, 60, 180, 360] . int graph_type The type of X-axis. Can be \"time\" or \"mileage\". enum smoothing Smooth data if true . boolean show_address Address of each reading appears in report if true . boolean filter If true ,short trips will not coincide (shorter than 300m/have less than 4 points total and if the device circles around one point (e.g., star pattern from GPS drifting)). boolean sensors List of objects containing tracker_id and sensor_id. array of objects sensors is: { \"sensors\" : [{ \"tracker_id\" : 37714 , \"sensor_id\" : 57968 }] } Param details_interval_minutes is deprecated. Please sue details_interval_seconds . plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 9 , \"details_interval_seconds\" : 60 , \"graph_type\" : \"time\" , \"smoothing\" : false , \"show_address\" : false , \"filter\" : true , \"sensors\" : [{ \"tracker_id\" : 993495 , \"sensor_id\" : 1378566 }] } Equipment working time \u00b6 A report on activity and idle time of the equipment. Parameters \u00b6 default plugin_id : 12. name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean min_working_period_duration A minimum time in seconds the equipment works to determine activity. Min = 1. int show_idle_percent If true ,show percentage of idling. boolean filter If true ,short trips will not coincide (shorter than 300m/have less than 4 points total and if the device circles around one point (e.g., star pattern from GPS drifting)). boolean sensors List of objects containing tracker_id and sensor_id. array of objects sensors is: { \"sensors\" : [{ \"tracker_id\" : 37714 , \"sensor_id\" : 57968 }] } plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 12 , \"show_seconds\" : false , \"min_working_period_duration\" : 60 , \"show_idle_percent\" : false , \"filter\" : false , \"sensors\" : [{ \"tracker_id\" : 993495 , \"sensor_id\" : 1378562 }] } Tasks report \u00b6 A report on tasks statuses. Parameters \u00b6 default plugin_id : 42. name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean show_external_id Show external ID of task, if true . boolean show_description Show description of task, if true . boolean show_forms Show forms when the task has it, if true . boolean show_places_and_zones Show places and geofences, if true . boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 42 , \"show_seconds\" : false , \"show_external_id\" : false , \"show_description\" : false , \"show_forms\" : true , \"show_places_and_zones\" : false } Form completion statistics report \u00b6 A report on form fields completion rate. Parameters \u00b6 default plugin_id : 70. name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_nonselected If true , not selected options in forms will be shown. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 70 , \"show_nonselected\" : true } Work statuses report \u00b6 A report on status changes history. Parameters \u00b6 default plugin_id : 47. name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 47 , \"show_seconds\" : false } Check-in report \u00b6 A report on markers for Check-in function. Available only for X-GPS Trackers. Parameters \u00b6 default plugin_id : 80 Plugin-specific parameters: name description type show_coordinates If true , coordinates will be added to the report. boolean hide_empty_tabs If true , empty tabs will be hidden. boolean show_coordinates Every address will contain longitude and latitude, if true . boolean show_places_and_zones Show places and geofences, if true . show_forms Show forms when the task has it, if true . boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 80 , \"show_coordinates\" : false , \"show_places_and_zones\" : false , \"show_forms\" : true } Driver shift change report \u00b6 A report on driver identification. Parameters \u00b6 default plugin_id : 66. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 66 , \"show_seconds\" : false } Trips by state \u00b6 A report on trips breakdown by jurisdictions. Parameters \u00b6 default plugin_id : 73. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true , timestamps will be with seconds. boolean filter If true , short trips will not coincide (shorter than 300m/have less than 4 points total and if the device circles around one point (e.g., star pattern from GPS drifting)). boolean include_summary_sheet_only If true , report will contain only a summary sheet for all chosen devices. boolean include_summary_sheet If true , the report will contain a summary sheet. Default is true . boolean group_type A group type. Can be \"province\" or \"country\". enum plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 73 , \"show_seconds\" : false , \"filter\" : false , \"include_summary_sheet_only\" : false , \"group_type\" : \"province\" } Report on all events \u00b6 An overall report about any kind of events. Parameters \u00b6 default plugin_id : 11. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean group_by_type Groups events by type if true . boolean event_types A list of event types that will be considered. string array the object with all event_types is: { \"event_types\" : [ \"auto_geofence_in\" , \"auto_geofence_out\" , \"door_alarm\" , \"forward_collision_warning\" , \"gps_lost\" , \"gps_recover\" , \"gsm_damp\" , \"harsh_driving\" , \"headway_warning\" , \"hood_alarm\" , \"idle_end\" , \"idle_start\" , \"ignition\" , \"inroute\" , \"outroute\" , \"lane_departure\" , \"obd_plug_in\" , \"obd_unplug\" , \"peds_collision_warning\" , \"peds_in_danger_zone\" , \"odometer_set\" , \"online\" , \"output_change\" , \"security_control\" , \"tracker_rename\" , \"track_end\" , \"track_start\" , \"tsr_warning\" , \"sensor_inrange\" , \"sensor_outrange\" , \"work_status_change\" , \"call_button_pressed\" , \"driver_changed\" , \"driver_identified\" , \"driver_not_identified\" , \"fueling\" , \"drain\" , \"checkin_creation\" , \"tacho\" , \"antenna_disconnect\" , \"check_engine_light\" , \"location_response\" , \"backup_battery_low\" , \"fatigue_driving\" , \"inzone\" , \"outzone\" , \"speedup\" , \"alarmcontrol\" , \"battery_off\" , \"bracelet_close\" , \"bracelet_open\" , \"case_closed\" , \"case_opened\" , \"crash_alarm\" , \"detach\" , \"g_sensor\" , \"input_change\" , \"light_sensor_bright\" , \"light_sensor_dark\" , \"lock_closed\" , \"lock_opened\" , \"lowpower\" , \"offline\" , \"parking\" , \"poweroff\" , \"poweron\" , \"sos\" , \"strap_bolt_cut\" , \"strap_bolt_ins\" , \"vibration_start\" , \"vibration_end\" , \"proximity_violation_start\" , \"proximity_violation_end\" , \"force_location_request\" , \"info\" ] } plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 11 , \"show_seconds\" : false , \"group_by_type\" : false , \"event_types\" : [ \"force_location_request\" , \"info\" , \"inzone\" , \"outzone\" , \"speedup\" ] } Geofence entry/exit events \u00b6 A report on ins ad outs of a certain geofence. Parameters \u00b6 default plugin_id : 89. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean min_minutes_in_zone Minimum minutes in a zone to start determining visit. If the device was in a zone less than a specified time - the visit not count. int plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 89 , \"show_seconds\" : false , \"min_minutes_in_zone\" : 5 } SMS-locations report \u00b6 A report on location requests over SMS channel. Parameters \u00b6 default plugin_id : 20. Plugin-specific parameters: name description type hide_empty_tabs If true , empty tabs will be hidden. boolean show_seconds If true ,timestamps will be with seconds. boolean plugin example \u00b6 { \"hide_empty_tabs\" : true , \"plugin_id\" : 20 , \"show_seconds\" : false } Point report \u00b6 Information on the points transmitted during the day. Maximum period is 24 hours. Parameters \u00b6 default plugin_id : 91. Plugin-specific parameters: name description type show_seconds If true ,timestamps will be with seconds. boolean plugin example \u00b6 { \"show_seconds\" : true , \"plugin_id\" : 91 } Eco-driving report by trackers \u00b6 A report on safety driving by trackers. For report/generate request use trackers parameter. Parameters \u00b6 default plugin_id : 46. Plugin-specific parameters: name description type harsh_driving_penalties A list of penalties for harsh driving. array of objects speeding_penalties A list of penalties for speeding. array of objects speed_limit Max permitted speed value. int idling_penalty Penalty for idling. int min_idling_duration A minimum time in minutes to determine idling. int min_speeding_duration A minimum time in minutes when speed is more than speed_limit to determine violation. int use_vehicle_speed_limit If true vehicle speed limit used instead of speed_limit parameter. boolean show_seconds If true ,timestamps will be with seconds. boolean harsh_driving_penalties is: { \"harsh_driving_penalties\" : { \"harshAcceleration\" : 5 , \"harshBraking\" : 5 , \"harshTurn\" : 5 , \"harshAccelerationNTurn\" : 12 , \"harshBrakingNTurn\" : 12 , \"harshQuickLaneChange\" : 12 } } speeding_penalties is: { \"speeding_penalties\" : { \"10\" : 2 , \"20\" : 10 , \"30\" : 25 , \"50\" : 75 } } \"10\", \"20\", \"30\", \"50\" - the number of penalty points assigned for speeding by 10, 20, 30, and 50 km/h. plugin example \u00b6 { \"speeding_penalties\" : { \"10\" : 2 , \"20\" : 10 , \"30\" : 25 , \"50\" : 75 }, \"harsh_driving_penalties\" : { \"harshAcceleration\" : 5 , \"harshBraking\" : 5 , \"harshTurn\" : 5 , \"harshBrakingNTurn\" : 12 , \"harshAccelerationNTurn\" : 12 , \"harshQuickLaneChange\" : 12 }, \"speed_limit\" : 260 , \"idling_penalty\" : 5 , \"min_speeding_duration\" : 1 , \"min_idling_duration\" : 5 , \"use_vehicle_speed_limit\" : true , \"plugin_id\" : 46 , \"show_seconds\" : false } Eco-driving report by drivers \u00b6 A report on safety driving by drivers. For report/generate request use employees parameter. Parameters \u00b6 default plugin_id : 82. Plugin-specific parameters: name description type harsh_driving_penalties A list of penalties for harsh driving. array of objects speeding_penalties A list of penalties for speeding. array of objects speed_limit Max permitted speed value. int idling_penalty Penalty for idling. int min_idling_duration A minimum time in minutes to determine idling. int min_speeding_duration A minimum time in minutes when speed is more than speed_limit to determine violation. int use_vehicle_speed_limit If true vehicle speed limit used instead of speed_limit parameter. boolean show_seconds If true ,timestamps will be with seconds. boolean plugin example \u00b6 { \"speeding_penalties\" : { \"10\" : 2 , \"20\" : 10 , \"30\" : 25 , \"50\" : 75 }, \"harsh_driving_penalties\" : { \"harshAcceleration\" : 5 , \"harshBraking\" : 5 , \"harshTurn\" : 5 , \"harshBrakingNTurn\" : 12 , \"harshAccelerationNTurn\" : 12 , \"harshQuickLaneChange\" : 12 }, \"speed_limit\" : 260 , \"idling_penalty\" : 5 , \"min_speeding_duration\" : 1 , \"min_idling_duration\" : 5 , \"use_vehicle_speed_limit\" : true , \"plugin_id\" : 82 , \"show_seconds\" : false } Stay in zones report \u00b6 Parameters \u00b6 default plugin_id : 84 plugin-specific parameters: name description type show_seconds If true , time values in report should have format with seconds. Default is false . boolean show_tags If true , tags fields will be added to the report. Default is false . boolean min_minutes_in_zone Minimum time in zone (geofence). Default is 5 . int, min value 1 zone_ids IDs of user zones, required, min size 1, max size 30 int array plugin example \u00b6 { \"show_seconds\" : true , \"show_tags\" : true , \"min_minutes_in_zone\" : 1 , \"zone_ids\" : [ 2143181 , 2143182 ], \"plugin_id\" : 84 } Stay in places report \u00b6 Parameters \u00b6 default plugin_id : 85 plugin-specific parameters: name description type fetch_places_by_employees If true , report will be built for places that are related to selected trackers via custom fields. Cannot be used in conjunction with place_ids boolean hide_charts If true , charts will be hidden. boolean min_minutes_in_place Minimum time in spent in place. Minimum value is 1, default is 5 int place_ids IDs of user's POI. Min size 1, max size 30 int array show_mileage Adds mileage to the report if true . boolean show_not_visited_places Will show non visited POIs if true . boolean show_seconds If true , time values in report should have format with seconds. Default is false . boolean plugin example \u00b6 { \"show_seconds\" : true , \"min_minutes_in_place\" : 1 , \"fetch_places_by_employees\" : false , \"hide_charts\" : true , \"place_ids\" : [ 278645 , 278646 ], \"show_mileage\" : true , \"show_not_visited_places\" : true , \"plugin_id\" : 85 }","title":"Report Plugins"},{"location":"backend-api/resources/commons/plugin/report_plugins/#report-plugins","text":"Contains report plugins with plugin-specific parameters.","title":"Report plugins"},{"location":"backend-api/resources/commons/plugin/report_plugins/#trips-report","text":"A report on detailed trip history.","title":"Trips report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#stops-report","text":"A report on detailed stops history.","title":"Stops report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#trips-and-stops-by-shifts-report","text":"A report on trips and stops by shifts.","title":"Trips and stops by shifts report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#geofence-visits-report","text":"A report on date, time, and mileage in geofence.","title":"Geofence visits report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#poi-visits-report","text":"A report on date, time, and the number of POIs visits.","title":"POI visits report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#car-security-report","text":"A report on alarms, towing alerts, AutoControl events, and crashes.","title":"Car security report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#emergency-button-sos-report","text":"A report on SOS button events log","title":"Emergency button (SOS) report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#fall-detection-report","text":"A report on fall detection sensor log.","title":"Fall detection report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#tracker-detach-report","text":"A report on demounting devices from tracking objects.","title":"Tracker detach report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#overall-security-report","text":"A report on all events related to security and safety.","title":"Overall security report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#engine-hours-report","text":"A report on time spent in motion and on idling.","title":"Engine hours report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#fuel-volume-report","text":"A report on fuel refills, drains, consumption (based on fuel level sensor).","title":"Fuel volume report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#flow-meter-report","text":"A report on fuel consumption counted by flow meter sensors.","title":"Flow meter report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#vehicle-sensors-report","text":"A report on CAN-bus and OBD2-port data.","title":"Vehicle sensors report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#speed-violation","text":"A report on speeding instances.","title":"Speed violation"},{"location":"backend-api/resources/commons/plugin/report_plugins/#device-switching-onoff-report","text":"A report on switching device using hardware switch.","title":"Device switching ON/OFF report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#gsm-connection-lost","text":"A report on long disruptions of server connection","title":"GSM connection lost"},{"location":"backend-api/resources/commons/plugin/report_plugins/#measuring-sensors-report","text":"A report on detailed sensor reading history.","title":"Measuring sensors report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#equipment-working-time","text":"A report on activity and idle time of the equipment.","title":"Equipment working time"},{"location":"backend-api/resources/commons/plugin/report_plugins/#tasks-report","text":"A report on tasks statuses.","title":"Tasks report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#form-completion-statistics-report","text":"A report on form fields completion rate.","title":"Form completion statistics report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#work-statuses-report","text":"A report on status changes history.","title":"Work statuses report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#check-in-report","text":"A report on markers for Check-in function. Available only for X-GPS Trackers.","title":"Check-in report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#driver-shift-change-report","text":"A report on driver identification.","title":"Driver shift change report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#trips-by-state","text":"A report on trips breakdown by jurisdictions.","title":"Trips by state"},{"location":"backend-api/resources/commons/plugin/report_plugins/#report-on-all-events","text":"An overall report about any kind of events.","title":"Report on all events"},{"location":"backend-api/resources/commons/plugin/report_plugins/#geofence-entryexit-events","text":"A report on ins ad outs of a certain geofence.","title":"Geofence entry/exit events"},{"location":"backend-api/resources/commons/plugin/report_plugins/#sms-locations-report","text":"A report on location requests over SMS channel.","title":"SMS-locations report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#point-report","text":"Information on the points transmitted during the day. Maximum period is 24 hours.","title":"Point report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#eco-driving-report-by-trackers","text":"A report on safety driving by trackers. For report/generate request use trackers parameter.","title":"Eco-driving report by trackers"},{"location":"backend-api/resources/commons/plugin/report_plugins/#eco-driving-report-by-drivers","text":"A report on safety driving by drivers. For report/generate request use employees parameter.","title":"Eco-driving report by drivers"},{"location":"backend-api/resources/commons/plugin/report_plugins/#stay-in-zones-report","text":"","title":"Stay in zones report"},{"location":"backend-api/resources/commons/plugin/report_plugins/#stay-in-places-report","text":"","title":"Stay in places report"},{"location":"backend-api/resources/commons/report/report_schedule/","text":"Report schedule \u00b6 Particular report can be delivered to user's mailbox regularly. Contains report schedule object description and API calls to interact with it. schedule_entry object: \u00b6 { \"id\" : 1 , \"enabled\" : true , \"parameters\" : { \"period\" : \"1m\" , \"schedule\" : { \"type\" : \"weekdays\" , \"weekdays\" : [ 1 , 2 , 3 , 4 , 5 ] }, \"report\" : { \"trackers\" : [ 1 ], \"title\" : \"Title\" , \"time_filter\" : { \"from\" : \"00:00:00\" , \"to\" : \"23:59:59\" , \"weekdays\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] }, \"geocoder\" : \"yandex\" , \"plugin\" : { \"plugin_id\" : 4 , \"show_idle_duration\" : false } }, \"emails\" : [ \"email@example.ru\" ], \"email_format\" : \"pdf\" , \"email_zip\" : false , \"sending_time\" : \"12:00:00\" }, \"fire_time\" : \"2014-09-05 00:00:00\" , \"last_result\" : { \"success\" : true , \"id\" : 1 } } id - int. Schedule id, ignored on create. enabled - boolean. true if the scheduled report enabled. period - string. Report period, \"Xm\" | \"w\" | \"d\" | \"y\". emails - optional string array. List of emails. email_format - enum . Can be \"pdf\" | \"xls\". sending_time - optional string. Local time for sending reports, default \"00:00:00\", hourly granularity. fire_time - optional string. Last schedule fire time, ignored on create/update. last_result object with last report creation result. id - int. An ID of generated report. API actions \u00b6 API path: /report/schedule . create \u00b6 Creates a new report schedule entry. required sub-user rights : reports . Parameters \u00b6 name description type schedule Schedule object without fields \"id\", \"fire_time\", \"last_result\". JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/report/schedule/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"schedule\": {\"enabled\": true, \"parameters\": {\"report\": {\"title\": \"Trip report\", \"trackers\": [669673], \"time_filter\": {\"from\": \"00:00:00\", \"to\": \"23:59:59\", \"weekdays\": [1,2,3,4,5,6,7]}, \"plugin\": {\"hide_empty_tabs\": true, \"plugin_id\": 4, \"show_seconds\": false, \"include_summary_sheet_only\": false, \"split\": true, \"show_idle_duration\": false, \"show_coordinates\": false, \"filter\": true, \"group_by_driver\": false}}, \"period\": \"1w\", \"email_zip\": false, \"email_format\": \"xls\", \"emails\": [\"test@example.com\"], \"sending_time\": \"00:00:00\", \"schedule\": {\"type\": \"weekdays\", \"weekdays\": [1]}}}}}' Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. An ID of the created schedule entry. Errors \u00b6 217 - List contains nonexistent entities - if one or more of tracker IDs belong to nonexistent tracker (or to a tracker belonging to different user). 222 - Plugin not found - if specified report plugin not found. 236 - Feature unavailable due to. delete \u00b6 Deletes report schedule with the specified ID. required sub-user rights : reports . Parameters \u00b6 name description type schedule_id ID of the report schedule to delete. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/report/schedule/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"schedule_id\": 1234567}' HTTP GET https://api.navixy.com/v2/report/schedule/delete?hash=a6aa75587e5c59c32d347da438505fc3&schedule_id=1234567 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database - if there is no schedule with specified ID. list \u00b6 Get all report schedules belonging to user. required sub-user rights : reports . Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/report/schedule/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/report/schedule/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 1 , \"enabled\" : true , \"parameters\" : { \"period\" : \"1m\" , \"schedule\" : { \"type\" : \"weekdays\" , \"weekdays\" : [ 1 , 2 , 3 , 4 , 5 ] }, \"report\" : { \"trackers\" : [ 1 ], \"title\" : \"Title\" , \"time_filter\" : { \"from\" : \"00:00:00\" , \"to\" : \"23:59:59\" , \"weekdays\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] }, \"geocoder\" : \"yandex\" , \"plugin\" : { \"plugin_id\" : 4 , \"show_idle_duration\" : false } }, \"emails\" : [ \"email@example.ru\" ], \"email_format\" : \"pdf\" , \"email_zip\" : false , \"sending_time\" : \"12:00:00\" }, \"fire_time\" : \"2014-09-05 00:00:00\" , \"last_result\" : { \"success\" : true , \"id\" : 1 } }] } Errors \u00b6 General types only. update \u00b6 Update existing report schedule. required sub-user rights : reports . Parameters \u00b6 name description type schedule Schedule object without fields \"fire_time\", \"last_result\". JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/report/schedule/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"schedule\": {\"enabled\": true, \"parameters\": {\"report\": {\"title\": \"Trip report\", \"trackers\": [669673], \"time_filter\": {\"from\": \"00:00:00\", \"to\": \"23:59:59\", \"weekdays\": [1,2,3,4,5,6,7]}, \"plugin\": {\"hide_empty_tabs\": true, \"plugin_id\": 4, \"show_seconds\": false, \"include_summary_sheet_only\": false, \"split\": true, \"show_idle_duration\": false, \"show_coordinates\": false, \"filter\": true, \"group_by_driver\": false}}, \"period\": \"1w\", \"email_zip\": false, \"email_format\": \"xls\", \"emails\": [\"test@example.com\"], \"sending_time\": \"00:00:00\", \"schedule\": {\"type\": \"weekdays\", \"weekdays\": [1]}}}}}' Response \u00b6 { \"success\" : true } Errors \u00b6 217 - List contains nonexistent entities - if one or more of tracker IDs belong to nonexistent tracker (or to a tracker belonging to different user). 222 - Plugin not found - if specified report plugin not found. 236 - Feature unavailable due to tariff restrictions - if device's tariff does not allow usage of reports.","title":"Report Schedule"},{"location":"backend-api/resources/commons/report/report_schedule/#report-schedule","text":"Particular report can be delivered to user's mailbox regularly. Contains report schedule object description and API calls to interact with it.","title":"Report schedule"},{"location":"backend-api/resources/commons/report/report_schedule/#schedule_entry-object","text":"{ \"id\" : 1 , \"enabled\" : true , \"parameters\" : { \"period\" : \"1m\" , \"schedule\" : { \"type\" : \"weekdays\" , \"weekdays\" : [ 1 , 2 , 3 , 4 , 5 ] }, \"report\" : { \"trackers\" : [ 1 ], \"title\" : \"Title\" , \"time_filter\" : { \"from\" : \"00:00:00\" , \"to\" : \"23:59:59\" , \"weekdays\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] }, \"geocoder\" : \"yandex\" , \"plugin\" : { \"plugin_id\" : 4 , \"show_idle_duration\" : false } }, \"emails\" : [ \"email@example.ru\" ], \"email_format\" : \"pdf\" , \"email_zip\" : false , \"sending_time\" : \"12:00:00\" }, \"fire_time\" : \"2014-09-05 00:00:00\" , \"last_result\" : { \"success\" : true , \"id\" : 1 } } id - int. Schedule id, ignored on create. enabled - boolean. true if the scheduled report enabled. period - string. Report period, \"Xm\" | \"w\" | \"d\" | \"y\". emails - optional string array. List of emails. email_format - enum . Can be \"pdf\" | \"xls\". sending_time - optional string. Local time for sending reports, default \"00:00:00\", hourly granularity. fire_time - optional string. Last schedule fire time, ignored on create/update. last_result object with last report creation result. id - int. An ID of generated report.","title":"schedule_entry object:"},{"location":"backend-api/resources/commons/report/report_schedule/#api-actions","text":"API path: /report/schedule .","title":"API actions"},{"location":"backend-api/resources/commons/report/report_schedule/#create","text":"Creates a new report schedule entry. required sub-user rights : reports .","title":"create"},{"location":"backend-api/resources/commons/report/report_schedule/#delete","text":"Deletes report schedule with the specified ID. required sub-user rights : reports .","title":"delete"},{"location":"backend-api/resources/commons/report/report_schedule/#list","text":"Get all report schedules belonging to user. required sub-user rights : reports .","title":"list"},{"location":"backend-api/resources/commons/report/report_schedule/#update","text":"Update existing report schedule. required sub-user rights : reports .","title":"update"},{"location":"backend-api/resources/commons/report/report_tracker/","text":"Report Tracker \u00b6 User reports enable comprehensive statistics and analytics, presenting summary data in various perspectives through tables and graphs. This section details API calls to interact with tracker reports. For information on how to obtain data from reports, refer to the guide . API actions \u00b6 API path: /report/tracker . delete \u00b6 Deletes a report from the database. required sub-user rights : reports . Parameters \u00b6 name description type report_id ID of a report that should be deleted. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"report_id\": 1234567}' HTTP GET https://api.navixy.com/v2/report/tracker/delete?hash=a6aa75587e5c59c32d347da438505fc3&report_id=1234567 Response \u00b6 { \"success\" : true } Errors \u00b6 101 \u2013 In demo mode this function disabled. download \u00b6 Retrieve generated report as a file. required sub-user rights : reports Parameters \u00b6 name description type report_id ID of a report that should be deleted. int format A format of report that should be downloaded. Can be \"xls\", xlsx\" or \"pdf\". enum headless Optional parameter. Default= false . If need report without title page and TOC, set it to true . boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/download' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"report_id\": 1234567, \"format\": \"pdf\"}' HTTP GET https://api.navixy.com/v2/report/tracker/download?hash=a6aa75587e5c59c32d347da438505fc3&report_id=1234567&format=pdf Response \u00b6 A report rendered to file (standard file download). Errors \u00b6 204 - Entity not found - if report with the specified ID not found. 229 - Requested data is not ready yet - if report exists, but its generation is still in progress. generate \u00b6 Requests a report generation with the specified parameters. required sub-user rights : reports . Parameters \u00b6 name description type from A string containing date/time . string to A string containing date/time . Specified date must be after \"from\" date. string title Report title. Default title will be used if null. string geocoder Which geocoder to use. See geocoder/ . string trackers List of trackers' IDs to be included in report (if report is by trackers). int array employees List of employees' IDs to be included in report (if report is by employees. For example, plugin ID 82 ). int array time_filter An object which contains everyday time and weekday limits for processed data, e.g. {\"to\":\"18:00\", \"from\":\"12:00\", \"weekdays\":[1,2,3,4,5]} . JSON object plugin A plugin object (see below). JSON object Parameter object fields: \u00b6 Part of parameters are plugin-specific. See \"Tracker report plugins\" section. Common parameters are: name description type plugin_id An ID of a tracker report plugin which will be used to generate report. int show_seconds Flag to define whether time values in report should have format with seconds. true - show seconds, false - don't show seconds. boolean Plugin example: \u00b6 { \"details_interval_seconds\" : 300 , \"plugin_id\" : 9 , \"show_seconds\" : false , \"graph_type\" : \"time\" , \"smoothing\" : false , \"sensors\" : [ { \"tracker_id\" : 123456 , \"sensor_id\" : 123456 } ] } Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/generate' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Trip report\", \"trackers\": [669673], \"from\": \"2020-10-05 00:00:00\", \"to\": \"2020-10-06 23:59:59\", \"time_filter\": {\"from\": \"00:00:00\", \"to\": \"23:59:59\", \"weekdays\": [1,2,3,4,5,6,7]}, \"plugin\": {\"hide_empty_tabs\": true, \"plugin_id\": 4, \"show_seconds\": false, \"include_summary_sheet_only\": false, \"split\": true, \"show_idle_duration\": false, \"show_coordinates\": false, \"filter\": true, \"group_by_driver\": false}}' Response \u00b6 { \"success\" : true , \"id\" : 222 } id - int. An ID of the report queued for generation. Can be used to request report generation status and to retrieve generated report. Errors \u00b6 15 - Too many requests / rate limit exceeded - the number of reports created by one user in parallel limited. 211 - Requested time span is too big - interval from from to to is bigger then max allowed time span (see response). { \"success\" : false , \"status\" : { \"code\" : 211 , \"description\" : \"Requested time span is too big\" }, \"max_time_span\" : \"P90D\" } max_time_span - string. ISO 8601 duration. 217 - List contains nonexistent entities - when one or more of tracker IDs belong to nonexistent tracker (or to a tracker belonging to different user). 222 - Plugin not found - when specified report plugin not found. 236 - Feature unavailable due to tariff restrictions - when one of the trackers has tariff with disabled reports (\"has_reports\" is false). list \u00b6 Returns info about all available generated or in-progress reports. required sub-user rights : reports . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/report/tracker/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [ { \"created\" : \"2020-10-08 21:59:30\" , \"time_filter\" : { \"from\" : \"00:00:00\" , \"to\" : \"23:59:59\" , \"weekdays\" :[ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]}, \"title\" : \"Trip report\" , \"id\" : 5601797 , \"parameters\" : { \"geocoder\" : \"google\" , \"trackers\" : [ 669673 ], \"plugins\" : [{ \"plugin_id\" : 4 , \"filter\" : true , \"hide_empty_tabs\" : true , \"show_coordinates\" : false , \"split\" : true , \"include_summary_sheet_only\" : false , \"show_seconds\" : false , \"group_by_driver\" : false , \"show_idle_duration\" : false }], \"locale_info\" : { \"locale\" : \"ru_RU\" , \"time_zone\" : \"Asia/Yekaterinburg\" , \"measurement_system\" : \"metric\" } }, \"percent\" : 100 , \"type\" : \"user\" , \"from\" : \"2020-10-05 00:00:00\" , \"to\" : \"2020-10-06 23:59:59\" } ]} created - string. Date when report created. time_filter - object. from - string. Control time \"from\" of day. to - string. Control time \"to\" of day. weekdays - int array. Control \"weekdays\" of the report. Can be 1 - 7. title - string. Report title. id - int. Report ID which can be used to retrieve or download report. parameters - object with report parameters. trackers - int array. List of tracker IDs used for report. plugins - array of objects. List of parameters for all plugins which were used to generate report. locale_info - object with information about the locale, timezone, and measurement system used for the report. percent - int. Report readiness in percent. type - enum . Type of created report. from - string. \"from\" parameter from generate. to - string. \"to\" parameter from generate. Errors \u00b6 General types only. retrieve \u00b6 Retrieves a generated report as JSON. required sub-user rights : reports . Parameters \u00b6 name description type report_id ID of a report that should be deleted. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/retrieve' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"report_id\": 1234567}' HTTP GET https://api.navixy.com/v2/report/tracker/retrieve?hash=a6aa75587e5c59c32d347da438505fc3&report_id=1234567 Response \u00b6 Response { \"success\" : true , \"report\" : { \"created\" : \"2020-10-06 16:01:46\" , \"time_filter\" : { \"from\" : \"00:00:00\" , \"to\" : \"23:59:59\" , \"weekdays\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] }, \"title\" : \"Trip report\" , \"id\" : 5602232 , \"sheets\" : [ { \"header\" : \"Samantha (Ford Focus)\" , \"sections\" : [ { \"data\" : [ { \"rows\" : [ { \"to\" : { \"v\" : \"02:39 - Serpukhov, Moscow Oblast, Russia, 142253\" , \"raw\" : 1601941188000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 54.9218516 , \"lng\" : 37.335545 } }, \"from\" : { \"v\" : \"00:47 - Selyatino, Naro-Fominskii gor. okrug, Moscow Oblast, Russia, 143370\" , \"raw\" : 1601934439000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 55.5311083 , \"lng\" : 36.96743 } }, \"time\" : { \"v\" : \"01:52\" , \"raw\" : 6749.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"106.29\" , \"raw\" : 106.29 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"57\" , \"raw\" : 57.0 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"94\" , \"raw\" : 94.0 , \"type\" : \"value\" } }, { \"to\" : { \"v\" : \"05:10 - Selyatino, Naro-Fominskii gor. okrug, Moscow Oblast, Russia, 143370\" , \"raw\" : 1601950218000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 55.5308216 , \"lng\" : 36.967315 } }, \"from\" : { \"v\" : \"03:11 - Serpukhov, Moscow Oblast, Russia, 142253\" , \"raw\" : 1601943083000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 54.9218116 , \"lng\" : 37.3354833 } }, \"time\" : { \"v\" : \"01:58\" , \"raw\" : 7135.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"106.97\" , \"raw\" : 106.97 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"54\" , \"raw\" : 54.0 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"94\" , \"raw\" : 94.0 , \"type\" : \"value\" } }, { \"to\" : { \"v\" : \"07:54 - Khievskii pereulok, 10, TNKh, Rassudovo, Troitsky Administrative Okrug, Moscow, Russia, 143340\" , \"raw\" : 1601960075000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 55.4666366 , \"lng\" : 36.9216966 } }, \"from\" : { \"v\" : \"07:38 - Selyatino, Naro-Fominskii gor. okrug, Moscow Oblast, Russia, 143370\" , \"raw\" : 1601959081000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 55.53122 , \"lng\" : 36.9672916 } }, \"time\" : { \"v\" : \"00:16\" , \"raw\" : 994.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"10.03\" , \"raw\" : 10.03 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"36\" , \"raw\" : 36.0 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"85\" , \"raw\" : 85.0 , \"type\" : \"value\" } }, { \"to\" : { \"v\" : \"09:36 - Serpukhov, Moscow Oblast, Russia, 142253\" , \"raw\" : 1601966165000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 54.926835 , \"lng\" : 37.3341066 } }, \"from\" : { \"v\" : \"07:58 - Khievskii pereulok, 10, TNKh, Rassudovo, Troitsky Administrative Okrug, Moscow, Russia, 143340\" , \"raw\" : 1601960315000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 55.46661 , \"lng\" : 36.9216516 } }, \"time\" : { \"v\" : \"01:37\" , \"raw\" : 5850.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"95.31\" , \"raw\" : 95.31 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"59\" , \"raw\" : 59.0 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"91\" , \"raw\" : 91.0 , \"type\" : \"value\" } }, { \"to\" : { \"v\" : \"09:53 - Serpukhov, Moscow Oblast, Russia, 142253\" , \"raw\" : 1601967190000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 54.921935 , \"lng\" : 37.33551 } }, \"from\" : { \"v\" : \"09:43 - Serpukhov, Moscow Oblast, Russia, 142253\" , \"raw\" : 1601966585000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 54.9264033 , \"lng\" : 37.3336633 } }, \"time\" : { \"v\" : \"00:10\" , \"raw\" : 605.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"0.95\" , \"raw\" : 0.95 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"6\" , \"raw\" : 6.0 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"13\" , \"raw\" : 13.0 , \"type\" : \"value\" } }, { \"to\" : { \"v\" : \"12:36 - Selyatino, Naro-Fominskii gor. okrug, Moscow Oblast, Russia, 143370\" , \"raw\" : 1601977017000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 55.5309666 , \"lng\" : 36.9674183 } }, \"from\" : { \"v\" : \"10:27 - Serpukhov, Moscow Oblast, Russia, 142253\" , \"raw\" : 1601969226000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 54.9219933 , \"lng\" : 37.335495 } }, \"time\" : { \"v\" : \"02:09\" , \"raw\" : 7791.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"108.48\" , \"raw\" : 108.48 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"50\" , \"raw\" : 50.0 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"89\" , \"raw\" : 89.0 , \"type\" : \"value\" } }, { \"to\" : { \"v\" : \"16:01 - KhP \\\"Lesnoe ozero\\\", Dernopol'e, gor. okrug Serpukhov, Moscow Oblast, Russia, 142279\" , \"raw\" : 1601989300000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 54.9875133 , \"lng\" : 37.3093183 } }, \"from\" : { \"v\" : \"13:34 - Selyatino, Naro-Fominskii gor. okrug, Moscow Oblast, Russia, 143370\" , \"raw\" : 1601980444000.0 , \"type\" : \"value\" , \"location\" : { \"lat\" : 55.5309966 , \"lng\" : 36.96738 } }, \"time\" : { \"v\" : \"02:27\" , \"raw\" : 8856.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"95.79\" , \"raw\" : 95.79 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"39\" , \"raw\" : 39.0 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"88\" , \"raw\" : 88.0 , \"type\" : \"value\" } } ], \"total\" : { \"text\" : \"In total:\" , \"time\" : { \"v\" : \"10:33\" , \"raw\" : 37980.0 , \"type\" : \"value\" }, \"length\" : { \"v\" : \"523.8\" , \"raw\" : 523.8 , \"type\" : \"value\" }, \"avg_speed\" : { \"v\" : \"50\" , \"raw\" : 50.0 , \"type\" : \"value\" }, \"max_speed\" : { \"v\" : \"94\" , \"raw\" : 94.0 , \"type\" : \"value\" } }, \"header\" : \"Oct 6, 2020 (Tue) : 7\" } ], \"type\" : \"table\" , \"header\" : \"Trips\" , \"columns\" : [ { \"align\" : \"left\" , \"field\" : \"from\" , \"title\" : \"Movement start\" , \"width\" : 4 , \"weight\" : 3 , \"highlight_min_max\" : false }, { \"align\" : \"left\" , \"field\" : \"to\" , \"title\" : \"Movement end\" , \"width\" : 4 , \"weight\" : 3 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"length\" , \"title\" : \"Total trips length,\\nkm\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"time\" , \"title\" : \"Travel time\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"avg_speed\" , \"title\" : \"Average speed,\\nkm/h\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false }, { \"align\" : \"right\" , \"field\" : \"max_speed\" , \"title\" : \"Max. speed,\\nkm/h\" , \"width\" : 1 , \"weight\" : 0 , \"highlight_min_max\" : false } ], \"column_groups\" : [] }, { \"rows\" : [ { \"v\" : \"7\" , \"raw\" : 7.0 , \"name\" : \"Trips\" , \"highlight\" : false }, { \"v\" : \"523.8\" , \"raw\" : 523.8 , \"name\" : \"Total trips length, km\" , \"highlight\" : false }, { \"v\" : \"10:33\" , \"raw\" : 633.0 , \"name\" : \"Travel time\" , \"highlight\" : false }, { \"v\" : \"50\" , \"raw\" : 50.0 , \"name\" : \"Average speed, km/h\" , \"highlight\" : false }, { \"v\" : \"94\" , \"raw\" : 94.0 , \"name\" : \"Max. speed, km/h\" , \"highlight\" : false }, { \"v\" : \"515855\" , \"raw\" : 515855.0 , \"name\" : \"Odometer value *, km\" , \"highlight\" : false } ], \"type\" : \"map_table\" , \"header\" : \"Summary\" }, { \"text\" : \"Odometer value at the end of the selected period.\" , \"type\" : \"text\" , \"style\" : \"small_print\" } ], \"entity_ids\" : [ 311852 ], \"additional_field\" : \"\" } ], \"from\" : \"2020-10-06 00:00:00\" , \"to\" : \"2020-10-06 23:59:59\" } report - object. Body of the generated report. Its contents are plugin-dependent. Errors \u00b6 204 - Entity not found - if report with the specified ID not found. 229 - Requested data is not ready yet - if report exists, but its generation is still in progress. status \u00b6 Returns a report generation status for the specified report id. required sub-user rights : reports . Parameters \u00b6 name description type report_id ID of a report that should be deleted. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/report/tracker/status' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"report_id\": 1234567}' HTTP GET https://api.navixy.com/v2/report/tracker/status?hash=a6aa75587e5c59c32d347da438505fc3&report_id=1234567 Response \u00b6 { \"success\" : true , \"percent_ready\" : 75 } percent_ready - int. Report readiness in percent. Errors \u00b6 204 - Entity not found - if report with the specified ID not found.","title":"Report Tracker"},{"location":"backend-api/resources/commons/report/report_tracker/#report-tracker","text":"User reports enable comprehensive statistics and analytics, presenting summary data in various perspectives through tables and graphs. This section details API calls to interact with tracker reports. For information on how to obtain data from reports, refer to the guide .","title":"Report Tracker"},{"location":"backend-api/resources/commons/report/report_tracker/#api-actions","text":"API path: /report/tracker .","title":"API actions"},{"location":"backend-api/resources/commons/report/report_tracker/#delete","text":"Deletes a report from the database. required sub-user rights : reports .","title":"delete"},{"location":"backend-api/resources/commons/report/report_tracker/#download","text":"Retrieve generated report as a file. required sub-user rights : reports","title":"download"},{"location":"backend-api/resources/commons/report/report_tracker/#generate","text":"Requests a report generation with the specified parameters. required sub-user rights : reports .","title":"generate"},{"location":"backend-api/resources/commons/report/report_tracker/#list","text":"Returns info about all available generated or in-progress reports. required sub-user rights : reports .","title":"list"},{"location":"backend-api/resources/commons/report/report_tracker/#retrieve","text":"Retrieves a generated report as JSON. required sub-user rights : reports .","title":"retrieve"},{"location":"backend-api/resources/commons/report/report_tracker/#status","text":"Returns a report generation status for the specified report id. required sub-user rights : reports .","title":"status"},{"location":"backend-api/resources/commons/subuser/","text":"Subuser \u00b6 Contains API calls related to sub-users, that is, additional users who have access to your account and monitoring assets. Sub-users is a convenient way for corporate clients to provide multiple employees, who have different roles and privileges, with access to the monitoring system. \"Usual\" user account called \"master account\" in relation to sub-users. Every sub-user can operate on a subset of trackers from your \"master account\". Every entity, which is associated with unavailable trackers, also becomes hidden from sub-user. This is called \"scoping\". Sub-users' rights can also be limited to prevent unauthorized changes to your data and application setting. NOTE: Sub-users cannot have any \"exclusive\" objects. Every tracker, rule, task, etc., even created or edited by sub-user, still belongs to your account. The only exception is reporting system: every sub-user has its own reports pool and reports schedule. Sub-user object structure \u00b6 Sub-user object is almost identical to usual user. { \"id\" : 103 , \"activated\" : true , \"login\" : \"user@test.com\" , \"first_name\" : \"Charles\" , \"middle_name\" : \"Henry\" , \"last_name\" : \"Pearson\" , \"legal_type\" : \"legal_entity\" , \"phone\" : \"491761234567\" , \"post_country\" : \"Germany\" , \"post_index\" : \"61169\" , \"post_region\" : \"Hessen\" , \"post_city\" : \"Wiesbaden\" , \"post_street_address\" : \"Marienplatz 2\" , \"registered_country\" : \"Germany\" , \"registered_index\" : \"61169\" , \"registered_region\" : \"Hessen\" , \"registered_city\" : \"Wiesbaden\" , \"registered_street_address\" : \"Marienplatz 2\" , \"state_reg_num\" : \"12-3456789\" , \"tin\" : \"1131145180\" , \"legal_name\" : \"E. Biasi GmbH\" , \"iec\" : \"\" , \"security_group_id\" : 333 , \"creation_date\" : \"2016-05-20 00:00:00\" } id - int. Sub-user's ID, can be null (when creating new sub-user). activated - boolean. true if sub-user activated (allowed to log in). login - string. Sub-user email as login. Must be valid unique email address. first_name - string. Sub-user's or contact person first name. middle_name - string. Sub-user's or contact person middle name. last_name - string. Sub-user's or contact person last name. legal_type - enum . Can bed \"legal_entity\", \"individual\" or \"sole_trader\". phone - string. Sub-user's or contact phone (10-15 digits). post_country - string. Country part of sub-user's post address. post_index - string. Index part of sub-user's post address. post_region - string. Region part of sub-user's post address. post_city - string. City from postal address. post_street_address - string. Street address. registered_country - string. Country part of sub-user's registered address. registered_index - string. Index part of sub-user's registered address. registered_region - string. Region part of sub-user's registered address. registered_city - string. City from registered address. registered_street_address - string. Sub-user's registered address. state_reg_num - string. State registration number. E.g. EIN in the USA, OGRN in Russia. 15 characters max. tin - string. Taxpayer identification number aka \"VATIN\" or \"INN\". legal_name - string. Sub-user's legal name (for \"legal_entity\" only). iec - optional string. Industrial Enterprises Classifier aka \"KPP\" (used in Russia. For \"legal_entity\" only). security_group_id - int. An ID of the security group to which sub-user belongs to. Can be null, which means default group with no privileges. creation_date - date/time . Date and time when sub-user was created. This field is read-only, it should not be used in subuser/update. API actions \u00b6 API path: /subuser . delete \u00b6 Deletes sub-user. This operation cannot be reversed. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of the sub-user belonging to current account. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 123567}' HTTP GET https://api.navixy.com/v2/subuser/delete?hash=a6aa75587e5c59c32d347da438505fc3&subuser_id=123567 Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 236 \u2013 Feature unavailable due to tariff restrictions - if there is at least one tracker without multilevel_access tariff feature. 201 \u2013 Not found in the database \u2013 if sub-user with such an ID does not exist or does not belong to current master user. list \u00b6 List all sub-users belonging to current user. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/subuser/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 103 , \"activated\" : true , \"login\" : \"user@test.com\" , \"first_name\" : \"Charles\" , \"middle_name\" : \"Henry\" , \"last_name\" : \"Pearson\" , \"legal_type\" : \"legal_entity\" , \"phone\" : \"491761234567\" , \"post_country\" : \"Germany\" , \"post_index\" : \"61169\" , \"post_region\" : \"Hessen\" , \"post_city\" : \"Wiesbaden\" , \"post_street_address\" : \"Marienplatz 2\" , \"registered_country\" : \"Germany\" , \"registered_index\" : \"61169\" , \"registered_region\" : \"Hessen\" , \"registered_city\" : \"Wiesbaden\" , \"registered_street_address\" : \"Marienplatz 2\" , \"state_reg_num\" : \"12-3456789\" , \"tin\" : \"1131145180\" , \"legal_name\" : \"E. Biasi GmbH\" , \"iec\" : \"\" , \"security_group_id\" : 333 , \"creation_date\" : \"2016-05-20 00:00:00\" }] } list - array of objects. List of all sub-users belonging to this master account. Sub-user object described here . Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 236 \u2013 Feature unavailable due to tariff restrictions - if there is at least one tracker without multilevel_access tariff feature. register \u00b6 Allows you to create sub-users associated to your master account. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type user subuser object without id field. JSON object password New sub-user's password. 6 to 20 characters. string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/register' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"password\": 123456, \"user\": {\"activated\": true, \"login\": \"user@test.com\", \"first_name\": \"Charles\", \"middle_name\": \"Henry\", \"last_name\": \"Pearson\", \"legal_type\": \"legal_entity\", \"phone\": \"491761234567\", \"post_country\": \"Germany\", \"post_index\": \"61169\", \"post_region\": \"Hessen\", \"post_city\": \"Wiesbaden\", \"post_street_address\": \"Marienplatz 2\", \"registered_country\": \"Germany\", \"registered_index\": \"61169\", \"registered_region\": \"Hessen\", \"registered_city\": \"Wiesbaden\", \"registered_street_address\": \"Marienplatz 2\", \"state_reg_num\": \"12-3456789\", \"tin\": \"1131145180\", \"legal_name\": \"E. Biasi GmbH\", \"iec\": \"\", \"security_group_id\": 333}}' Response \u00b6 { \"success\" : true , \"id\" : 121458 } id - int. An ID of the created sub-user. Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 236 \u2013 Feature unavailable due to tariff restrictions - if there is at least one tracker without multilevel_access tariff feature. 201 \u2013 Not found in the database \u2013 when specified security_group_id does not exist. 206 \u2013 login already in use - if this login email already registered. update \u00b6 Updates sub-user data. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type user subuser object with id field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"user\": {\"id\": 123451, \"activated\": true, \"login\": \"user@test.com\", \"first_name\": \"Charles\", \"middle_name\": \"Henry\", \"last_name\": \"Pearson\", \"legal_type\": \"legal_entity\", \"phone\": \"491761234567\", \"post_country\": \"Germany\", \"post_index\": \"61169\", \"post_region\": \"Hessen\", \"post_city\": \"Wiesbaden\", \"post_street_address\": \"Marienplatz 2\", \"registered_country\": \"Germany\", \"registered_index\": \"61169\", \"registered_region\": \"Hessen\", \"registered_city\": \"Wiesbaden\", \"registered_street_address\": \"Marienplatz 2\", \"state_reg_num\": \"12-3456789\", \"tin\": \"1131145180\", \"legal_name\": \"E. Biasi GmbH\", \"iec\": \"\", \"security_group_id\": 333}}' Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 236 \u2013 Feature unavailable due to tariff restrictions - if there is at least one tracker without multilevel_access tariff feature. 201 \u2013 Not found in the database \u2013 if sub-user with such an ID does not exist or does not belong to current master user. Also, when specified security_group_id does not exist.","title":"Overview"},{"location":"backend-api/resources/commons/subuser/#subuser","text":"Contains API calls related to sub-users, that is, additional users who have access to your account and monitoring assets. Sub-users is a convenient way for corporate clients to provide multiple employees, who have different roles and privileges, with access to the monitoring system. \"Usual\" user account called \"master account\" in relation to sub-users. Every sub-user can operate on a subset of trackers from your \"master account\". Every entity, which is associated with unavailable trackers, also becomes hidden from sub-user. This is called \"scoping\". Sub-users' rights can also be limited to prevent unauthorized changes to your data and application setting. NOTE: Sub-users cannot have any \"exclusive\" objects. Every tracker, rule, task, etc., even created or edited by sub-user, still belongs to your account. The only exception is reporting system: every sub-user has its own reports pool and reports schedule.","title":"Subuser"},{"location":"backend-api/resources/commons/subuser/#sub-user-object-structure","text":"Sub-user object is almost identical to usual user. { \"id\" : 103 , \"activated\" : true , \"login\" : \"user@test.com\" , \"first_name\" : \"Charles\" , \"middle_name\" : \"Henry\" , \"last_name\" : \"Pearson\" , \"legal_type\" : \"legal_entity\" , \"phone\" : \"491761234567\" , \"post_country\" : \"Germany\" , \"post_index\" : \"61169\" , \"post_region\" : \"Hessen\" , \"post_city\" : \"Wiesbaden\" , \"post_street_address\" : \"Marienplatz 2\" , \"registered_country\" : \"Germany\" , \"registered_index\" : \"61169\" , \"registered_region\" : \"Hessen\" , \"registered_city\" : \"Wiesbaden\" , \"registered_street_address\" : \"Marienplatz 2\" , \"state_reg_num\" : \"12-3456789\" , \"tin\" : \"1131145180\" , \"legal_name\" : \"E. Biasi GmbH\" , \"iec\" : \"\" , \"security_group_id\" : 333 , \"creation_date\" : \"2016-05-20 00:00:00\" } id - int. Sub-user's ID, can be null (when creating new sub-user). activated - boolean. true if sub-user activated (allowed to log in). login - string. Sub-user email as login. Must be valid unique email address. first_name - string. Sub-user's or contact person first name. middle_name - string. Sub-user's or contact person middle name. last_name - string. Sub-user's or contact person last name. legal_type - enum . Can bed \"legal_entity\", \"individual\" or \"sole_trader\". phone - string. Sub-user's or contact phone (10-15 digits). post_country - string. Country part of sub-user's post address. post_index - string. Index part of sub-user's post address. post_region - string. Region part of sub-user's post address. post_city - string. City from postal address. post_street_address - string. Street address. registered_country - string. Country part of sub-user's registered address. registered_index - string. Index part of sub-user's registered address. registered_region - string. Region part of sub-user's registered address. registered_city - string. City from registered address. registered_street_address - string. Sub-user's registered address. state_reg_num - string. State registration number. E.g. EIN in the USA, OGRN in Russia. 15 characters max. tin - string. Taxpayer identification number aka \"VATIN\" or \"INN\". legal_name - string. Sub-user's legal name (for \"legal_entity\" only). iec - optional string. Industrial Enterprises Classifier aka \"KPP\" (used in Russia. For \"legal_entity\" only). security_group_id - int. An ID of the security group to which sub-user belongs to. Can be null, which means default group with no privileges. creation_date - date/time . Date and time when sub-user was created. This field is read-only, it should not be used in subuser/update.","title":"Sub-user object structure"},{"location":"backend-api/resources/commons/subuser/#api-actions","text":"API path: /subuser .","title":"API actions"},{"location":"backend-api/resources/commons/subuser/#delete","text":"Deletes sub-user. This operation cannot be reversed. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"delete"},{"location":"backend-api/resources/commons/subuser/#list","text":"List all sub-users belonging to current user. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"list"},{"location":"backend-api/resources/commons/subuser/#register","text":"Allows you to create sub-users associated to your master account. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"register"},{"location":"backend-api/resources/commons/subuser/#update","text":"Updates sub-user data. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"update"},{"location":"backend-api/resources/commons/subuser/places/","text":"Subuser places \u00b6 Contains API calls to control which places is available to which sub-user. API actions \u00b6 API path: /subuser/places . bind \u00b6 Gives access for sub-user to specified places. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of a sub-user belonging to current account. int access_to_all Optional. If true then sub-user will have access to all places of master user. boolean place_ids Optional. List of place IDs to associate with a specified sub-user. All places must belong to current master user. int array At least one of access_to_all and place_ids parameters must be not null. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/places/bind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951, \"access_to_all\": false, \"place_ids\": [7548]}' Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database \u2013 if sub-user/place does not exist or does not belong to current master user. 236 \u2013 Feature unavailable due to tariff restrictions (if there is at least one tracker without multilevel_access tariff feature). unbind \u00b6 Disables access for a sub-user to specified places. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of a sub-user belonging to current account. int place_ids List of place IDs to associate with a specified sub-user. All places must belong to current master user. int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/places/unbind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951, \"place_ids\": [7548]}' Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database \u2013 if sub-user/place not exist or does not belong to current master user. 236 \u2013 Feature unavailable due to tariff restrictions (if there is at least one tracker without multilevel_access tariff feature). list_ids \u00b6 Gets a list of place IDs to which this sub-user has access. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of a sub-user belonging to current account. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/places/list_ids' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951}' Response \u00b6 { \"success\" : true , \"access_to_all\" : true , \"list\" : [ 7548 ] } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database \u2013 if sub-user with such an ID does not exist or does not belong to current master user. 236 \u2013 Feature unavailable due to tariff restrictions (if there is at least one tracker without multilevel_access tariff feature). list \u00b6 Gets a list of places to which this sub-user has access. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of a sub-user belonging to current account. int filter Optional. Filter for place label, description, address, external ID and custom fields. string tag_ids Optional. Tag IDs assigned to places. Places found must include all tags from a list. int array offset Optional. Offset from start of found places for pagination. int limit Optional. Limit of found places for pagination. int order Optional. Specify list ordering. Can be any of id , label , description , location , external_id , assigned_date . Default order by id . enum Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/places/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951, \"offset\": 0, \"limit\": 1000}' Response \u00b6 { \"success\" : true , \"access_to_all\" : false , \"list\" : [ <place> , ... ], \"count\" : 12 } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database \u2013 if sub-user with such an ID does not exist or does not belong to current master user. 236 \u2013 Feature unavailable due to tariff restrictions (if there is at least one tracker without multilevel_access tariff feature).","title":"Places"},{"location":"backend-api/resources/commons/subuser/places/#subuser-places","text":"Contains API calls to control which places is available to which sub-user.","title":"Subuser places"},{"location":"backend-api/resources/commons/subuser/places/#api-actions","text":"API path: /subuser/places .","title":"API actions"},{"location":"backend-api/resources/commons/subuser/places/#bind","text":"Gives access for sub-user to specified places. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"bind"},{"location":"backend-api/resources/commons/subuser/places/#unbind","text":"Disables access for a sub-user to specified places. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"unbind"},{"location":"backend-api/resources/commons/subuser/places/#list_ids","text":"Gets a list of place IDs to which this sub-user has access. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"list_ids"},{"location":"backend-api/resources/commons/subuser/places/#list","text":"Gets a list of places to which this sub-user has access. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"list"},{"location":"backend-api/resources/commons/subuser/security_group/","text":"Subuser security group \u00b6 Contains security group object structure and API calls related to security groups, that is, groups of sub-users with the specified set of rights and privileges. Security group object structure \u00b6 { \"id\" : 103 , \"label\" : \"Managers\" , \"privileges\" : { \"rights\" : [ \"tag_update\" , \"tracker_register\" ], \"store_period\" : \"1d\" } } id - int. Group id, can be null (when creating new security group). label - string. Group label. privileges - object containing privileges of group. rights - string array. A set of rights granted to security group (see below). store_period - optional string. Period of viewing history in legacy duration format, e.g. \"2h\" (2 hours), \"3d\" (3 days), \"5m\" (5 months), \"1y\" (one year). Default security group \u00b6 Default (or empty) security group is the group which is effective when sub-users' security_group_id is null. It has empty rights array. Master user's rights \u00b6 Master user always has all rights, including exclusive \"admin\" right. Security group rights \u00b6 Absolute majority of read operations does not require any rights (that is, they are available to all sub-users, even with \"null\" security group). However, some entities may be hidden because they are associated with the trackers unavailable to sub-user. Most of data-modifying operations, on the contrary, require some rights to be present. Possible rights are: admin \u2013 master user-only. Can't be assigned to security groups, tracker_update, tracker_register, tracker_rule_update, tracker_configure, tracker_set_output, tag_update, task_update, zone_update, place_update, employee_update, vehicle_update, payment_create form_template_update, reports, checkin_update. API actions \u00b6 API path: /subuser/security_group/ . create \u00b6 Creates new security group. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type group security_group object without \"id\" field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/security_group/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"group\": {\"label\": \"Managers\", \"privileges\": {\"rights\": [\"tag_update\", \"tracker_register\"], \"store_period\": \"1d\"}}}' Response \u00b6 { \"success\" : true , \"id\" : 103 } id - int. An ID of the created security group. Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 236 \u2013 Feature unavailable due to tariff restrictions - if there is at least one tracker without multilevel_access tariff feature. delete \u00b6 Deletes existing security group. All sub-users belonging to this group will be assigned to default (null) security group. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type security_group_id ID of security group, which must be deleted. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/security_group/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"id\": 103}' HTTP GET https://api.navixy.com/v2/subuser/security_group/delete?hash=a6aa75587e5c59c32d347da438505fc3&id=103 Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database \u2013 when group with the specified security_group_id does not exist. 236 \u2013 Feature unavailable due to tariff restrictions - if there is at least one tracker without multilevel_access tariff feature. list \u00b6 List all security groups belonging to current user. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/security_group/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/subuser/security_group/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 103 , \"label\" : \"Managers\" , \"privileges\" : { \"rights\" : [ \"tag_update\" , \"tracker_register\" ], \"store_period\" : \"1d\" } }] } list - array of objects. List of all security groups belonging to this master account. Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 236 \u2013 Feature unavailable due to tariff restrictions (if there is at least one tracker without multilevel_access tariff feature). update \u00b6 Updates existing security group. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type group security_group with \"id\" field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/security_group/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"group\": {\"id\": 103, \"label\": \"Managers\", \"privileges\": {\"rights\": [\"tag_update\", \"tracker_register\"], \"store_period\": \"1d\"}}}' Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database \u2013 when security group with the specified ID does not exist. 236 \u2013 Feature unavailable due to tariff restrictions - if there is at least one tracker without multilevel_access tariff feature. assign \u00b6 Assigns (removes) a security group to sub-users. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type group_id Nullable, ID of a security group int subuser_ids IDs of sub-users int array Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/security_group/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"group_id\": 3, subuser_ids: [12, 34]}' Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database \u2013 when security group with the specified ID does not exist. 236 \u2013 Feature unavailable due to tariff restrictions - if there is at least one tracker without multilevel_access tariff feature.","title":"Security Group"},{"location":"backend-api/resources/commons/subuser/security_group/#subuser-security-group","text":"Contains security group object structure and API calls related to security groups, that is, groups of sub-users with the specified set of rights and privileges.","title":"Subuser security group"},{"location":"backend-api/resources/commons/subuser/security_group/#security-group-object-structure","text":"{ \"id\" : 103 , \"label\" : \"Managers\" , \"privileges\" : { \"rights\" : [ \"tag_update\" , \"tracker_register\" ], \"store_period\" : \"1d\" } } id - int. Group id, can be null (when creating new security group). label - string. Group label. privileges - object containing privileges of group. rights - string array. A set of rights granted to security group (see below). store_period - optional string. Period of viewing history in legacy duration format, e.g. \"2h\" (2 hours), \"3d\" (3 days), \"5m\" (5 months), \"1y\" (one year).","title":"Security group object structure"},{"location":"backend-api/resources/commons/subuser/security_group/#default-security-group","text":"Default (or empty) security group is the group which is effective when sub-users' security_group_id is null. It has empty rights array.","title":"Default security group"},{"location":"backend-api/resources/commons/subuser/security_group/#master-users-rights","text":"Master user always has all rights, including exclusive \"admin\" right.","title":"Master user's rights"},{"location":"backend-api/resources/commons/subuser/security_group/#security-group-rights","text":"Absolute majority of read operations does not require any rights (that is, they are available to all sub-users, even with \"null\" security group). However, some entities may be hidden because they are associated with the trackers unavailable to sub-user. Most of data-modifying operations, on the contrary, require some rights to be present. Possible rights are: admin \u2013 master user-only. Can't be assigned to security groups, tracker_update, tracker_register, tracker_rule_update, tracker_configure, tracker_set_output, tag_update, task_update, zone_update, place_update, employee_update, vehicle_update, payment_create form_template_update, reports, checkin_update.","title":"Security group rights"},{"location":"backend-api/resources/commons/subuser/security_group/#api-actions","text":"API path: /subuser/security_group/ .","title":"API actions"},{"location":"backend-api/resources/commons/subuser/security_group/#create","text":"Creates new security group. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"create"},{"location":"backend-api/resources/commons/subuser/security_group/#delete","text":"Deletes existing security group. All sub-users belonging to this group will be assigned to default (null) security group. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"delete"},{"location":"backend-api/resources/commons/subuser/security_group/#list","text":"List all security groups belonging to current user. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"list"},{"location":"backend-api/resources/commons/subuser/security_group/#update","text":"Updates existing security group. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"update"},{"location":"backend-api/resources/commons/subuser/security_group/#assign","text":"Assigns (removes) a security group to sub-users. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"assign"},{"location":"backend-api/resources/commons/subuser/session/","text":"Subuser session \u00b6 Sub-user session actions to obtain its hash. API actions \u00b6 API path: /subuser/session/ . create \u00b6 Creates a new session for the specified sub-user and obtain its hash. Can be used to log in to sub-user's accounts. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of the sub-user belonging to current account. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/session/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951}' HTTP GET https://api.navixy.com/v2/subuser/session/create?hash=a6aa75587e5c59c32d347da438505fc3&subuser_id=204951 Response \u00b6 { \"success\" : true , \"hash\" : \"22eac1c27af4be7b9d04da2ce1af111b\" } hash - string. Hash of the created sub-user session. Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 236 \u2013 Feature unavailable due to tariff restrictions - if there is at least one tracker without multilevel_access tariff feature. 201 \u2013 Not found in the database \u2013 if sub-user with such an ID does not exist or does not belong to current master user.","title":"Session"},{"location":"backend-api/resources/commons/subuser/session/#subuser-session","text":"Sub-user session actions to obtain its hash.","title":"Subuser session"},{"location":"backend-api/resources/commons/subuser/session/#api-actions","text":"API path: /subuser/session/ .","title":"API actions"},{"location":"backend-api/resources/commons/subuser/session/#create","text":"Creates a new session for the specified sub-user and obtain its hash. Can be used to log in to sub-user's accounts. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"create"},{"location":"backend-api/resources/commons/subuser/tracker/","text":"Subuser tracker \u00b6 Contains API calls to control which tracker is available to which sub-user. API actions \u00b6 API path: /subuser/tracker . bind \u00b6 Gives access for sub-user to the specified trackers. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of the sub-user belonging to current account. int trackers List of tracker IDs to associate with the specified sub-user. All trackers must belong to current master user. int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/tracker/bind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951, \"trackers\": [127830]}' HTTP GET https://api.navixy.com/v2/subuser/tracker/bind?hash=a6aa75587e5c59c32d347da438505fc3&subuser_id=204951&trackers=[127830] Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 236 \u2013 Feature unavailable due to tariff restrictions - if there is at least one tracker without multilevel_access tariff feature. 201 \u2013 Not found in the database \u2013 if sub-user with such an ID does not exist or does not belong to current master user. 262 \u2013 Entries list is missing some entries or contains nonexistent entries \u2013 if one or more of specified tracker IDs don't exist. list \u00b6 Gets a list of tracker IDs to which this sub-user has access. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of the sub-user belonging to current account. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951}' HTTP GET https://api.navixy.com/v2/subuser/tracker/list?hash=a6aa75587e5c59c32d347da438505fc3&subuser_id=204951 Response \u00b6 { \"success\" : true , \"list\" : [ 124588 ] } list - int array. List of tracker IDs to which this sub-user has access. Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 236 \u2013 Feature unavailable due to tariff restrictions - if there is at least one tracker without multilevel_access tariff feature. 201 \u2013 Not found in the database \u2013 if sub-user with such an ID does not exist or does not belong to current master user. unbind \u00b6 Disables access for sub-user to the specified trackers. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of the sub-user belonging to current account. int trackers List of tracker IDs to associate with the specified sub-user. All trackers must belong to current master user. int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/tracker/unbind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951, \"trackers\": [127830]}' HTTP GET https://api.navixy.com/v2/subuser/tracker/unbind?hash=a6aa75587e5c59c32d347da438505fc3&subuser_id=204951&trackers=[127830] Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 236 \u2013 Feature unavailable due to tariff restrictions (if there is at least one tracker without multilevel_access tariff feature). 201 \u2013 Not found in the database \u2013 if sub-user with such an ID does not exist or does not belong to current master user. 262 \u2013 Entries list is missing some entries or contains nonexistent entries \u2013 if one or more of specified tracker IDs don't exist.","title":"Tracker"},{"location":"backend-api/resources/commons/subuser/tracker/#subuser-tracker","text":"Contains API calls to control which tracker is available to which sub-user.","title":"Subuser tracker"},{"location":"backend-api/resources/commons/subuser/tracker/#api-actions","text":"API path: /subuser/tracker .","title":"API actions"},{"location":"backend-api/resources/commons/subuser/tracker/#bind","text":"Gives access for sub-user to the specified trackers. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"bind"},{"location":"backend-api/resources/commons/subuser/tracker/#list","text":"Gets a list of tracker IDs to which this sub-user has access. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"list"},{"location":"backend-api/resources/commons/subuser/tracker/#unbind","text":"Disables access for sub-user to the specified trackers. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"unbind"},{"location":"backend-api/resources/commons/subuser/zones/","text":"Subuser geofences \u00b6 Contains API calls to control which geofences is available to which sub-user. API actions \u00b6 API path: /subuser/zones . bind \u00b6 Gives access for sub-user to specified geofences. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of a sub-user belonging to current account. int access_to_all Optional. If true then sub-user will have access to all geofences of master user. boolean zone_ids Optional. List of geofence IDs to associate with a specified sub-user. All geofences must belong to current master user. int array At least one of access_to_all and zone_ids parameters must be not null. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/zones/bind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951, \"access_to_all\": false, \"zone_ids\": [7548]}' Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database \u2013 if sub-user/geofence does not exist or does not belong to current master user. 236 \u2013 Feature unavailable due to tariff restrictions (if there is at least one tracker without multilevel_access tariff feature). unbind \u00b6 Disables access for sub-user to specified geofences. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of a sub-user belonging to current account. int zone_ids List of geofence IDs to associate with a specified sub-user. All geofences must belong to current master user. int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/zones/unbind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951, \"zone_ids\": [7548]}' Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database \u2013 if sub-user/geofence not exist or does not belong to current master user. 236 \u2013 Feature unavailable due to tariff restrictions (if there is at least one tracker without multilevel_access tariff feature). list_ids \u00b6 Gets a list of geofence IDs to which this sub-user has access. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of a sub-user belonging to current account. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/zones/list_ids' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951}' Response \u00b6 { \"success\" : true , \"access_to_all\" : true , \"list\" : [ 7548 ] } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database \u2013 if sub-user with such an ID does not exist or does not belong to current master user. 236 \u2013 Feature unavailable due to tariff restrictions (if there is at least one tracker without multilevel_access tariff feature). list \u00b6 Gets a list of geofences to which this sub-user has access. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type subuser_id ID of a sub-user belonging to current account. int filter Optional. Filter for geofence label. string tag_ids Optional. Tag IDs assigned to geofences. Geofences found must include all tags from a list. int array offset Optional. Offset from start of found geofences for pagination. int limit Optional. Limit of found geofences for pagination. int order Optional. Specify list ordering. Can be any of id , label . Default order by id . enum Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/subuser/zones/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"subuser_id\": 204951, \"offset\": 0, \"limit\": 1000}' Response \u00b6 { \"success\" : true , \"access_to_all\" : false , \"list\" : [ <zo ne > , ... ], \"count\" : 12 } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database \u2013 if sub-user with such an ID does not exist or does not belong to current master user. 236 \u2013 Feature unavailable due to tariff restrictions (if there is at least one tracker without multilevel_access tariff feature).","title":"Zones"},{"location":"backend-api/resources/commons/subuser/zones/#subuser-geofences","text":"Contains API calls to control which geofences is available to which sub-user.","title":"Subuser geofences"},{"location":"backend-api/resources/commons/subuser/zones/#api-actions","text":"API path: /subuser/zones .","title":"API actions"},{"location":"backend-api/resources/commons/subuser/zones/#bind","text":"Gives access for sub-user to specified geofences. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"bind"},{"location":"backend-api/resources/commons/subuser/zones/#unbind","text":"Disables access for sub-user to specified geofences. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"unbind"},{"location":"backend-api/resources/commons/subuser/zones/#list_ids","text":"Gets a list of geofence IDs to which this sub-user has access. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"list_ids"},{"location":"backend-api/resources/commons/subuser/zones/#list","text":"Gets a list of geofences to which this sub-user has access. required tariff features: multilevel_access \u2013 for ALL trackers. required sub-user rights: admin (available only to master users).","title":"list"},{"location":"backend-api/resources/commons/tag/","text":"Tag \u00b6 A tag is a label or keyword used for quick and easy searches. Tags help locate places, geofences, employees, tasks, trackers, and vehicles. This section contains information about the tag object and the API calls used to interact with it. For more details on using the tags API, refer to our how-to guide . Tag object \u00b6 { \"id\" : 3 , \"avatar_file_name\" : \"avatar.jpg\" , \"name\" : \"hop\" , \"color\" : \"FF0000\" } id - int. Tag ID. avatar_file_name - optional string. File name with extension. name - string. Tag's name. color - string. Tag color in 3-byte RGB hex format. tagged entity types \u00b6 place task task_schedule employee vehicle zone tracker API actions \u00b6 API path: /tag . create \u00b6 Creates a new tag. required sub-user rights : tag_update . Parameters \u00b6 name description type tag Tag object without id field. JSON object Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tag/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tag\": {\"name\": \"hop\", \"color\": \"FF0000\"}}' HTTP GET https://api.navixy.com/v2/tag/create?hash=a6aa75587e5c59c32d347da438505fc3&tag={\"name\": \"hop\", \"color\": \"FF0000\"} Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. An ID of the created tag. Errors \u00b6 General types only. delete \u00b6 Deletes tag with the specified ID. required sub-user rights : tag_update . Parameters \u00b6 To delete tags, only one of the following parameters must be specified. name description type tag_id ID of the tag to delete. int tag_ids An array of tag IDs to delete. int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tag/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tag_id\": 1}' HTTP GET https://api.navixy.com/v2/tag/delete?hash=a6aa75587e5c59c32d347da438505fc3&tag_id=1 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tag with such an ID. This error will not occur if the tag_ids parameter is specified, deletion is silent in this case. list \u00b6 Gets all tags belonging to user with optional filtering. Parameters \u00b6 name description type filter Optional filter for tag name. 3-60 characters or null. string Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tag/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/tag/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 3 , \"avatar_file_name\" : \"avatar.jpg\" , \"name\" : \"hop\" , \"color\" : \"FF0000\" }] } Errors \u00b6 General types only. search \u00b6 Search entities that bound with all of specified tags. Parameters \u00b6 name description type tag_ids List of tag IDs to search. int array entity_types Optional. List of tagged entity types to filter. string array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tag/search' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tag_ids\": [1, 2, 3]}' HTTP GET https://api.navixy.com/v2/tag/search?hash=a6aa75587e5c59c32d347da438505fc3&tag_ids=[1, 2, 3] Response \u00b6 { \"success\" : true , \"result\" : { \"place\" : [ <place> ], \"task\" : [ < tas k> ], \"task_schedule\" : [ < tas k_schedule> ], \"employee\" : [ <employee> ], \"vehicle\" : [ <vehicle> ], \"zone\" : [ <zo ne > ], \"tracker\" : [ < tra cker> ] } } place - array of objects. List of place objects. task - array of objects. List of task objects. task_schedule - array of objects. List of task_schedule objects. employee - array of objects. List of employee objects. vehicle - array of objects. List of vehicle objects. zone - array of objects. List of zone objects. tracker - array of objects. List of tracker objects. Errors \u00b6 General types only. update \u00b6 Updates existing tag. required sub-user rights : tag_update . Parameters \u00b6 name description type tag Tag object with id field. JSON object Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tag/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tag\": {\"id\": 3, \"name\": \"hop\", \"color\": \"FF0000\"}}' HTTP GET https://api.navixy.com/v2/tag/update?hash=a6aa75587e5c59c32d347da438505fc3&tag={\"id\": 3, \"name\": \"hop\", \"color\": \"FF0000\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tag with such an ID.","title":"Overview"},{"location":"backend-api/resources/commons/tag/#tag","text":"A tag is a label or keyword used for quick and easy searches. Tags help locate places, geofences, employees, tasks, trackers, and vehicles. This section contains information about the tag object and the API calls used to interact with it. For more details on using the tags API, refer to our how-to guide .","title":"Tag"},{"location":"backend-api/resources/commons/tag/#tag-object","text":"{ \"id\" : 3 , \"avatar_file_name\" : \"avatar.jpg\" , \"name\" : \"hop\" , \"color\" : \"FF0000\" } id - int. Tag ID. avatar_file_name - optional string. File name with extension. name - string. Tag's name. color - string. Tag color in 3-byte RGB hex format.","title":"Tag object"},{"location":"backend-api/resources/commons/tag/#api-actions","text":"API path: /tag .","title":"API actions"},{"location":"backend-api/resources/commons/tag/#create","text":"Creates a new tag. required sub-user rights : tag_update .","title":"create"},{"location":"backend-api/resources/commons/tag/#delete","text":"Deletes tag with the specified ID. required sub-user rights : tag_update .","title":"delete"},{"location":"backend-api/resources/commons/tag/#list","text":"Gets all tags belonging to user with optional filtering.","title":"list"},{"location":"backend-api/resources/commons/tag/#search","text":"Search entities that bound with all of specified tags.","title":"search"},{"location":"backend-api/resources/commons/tag/#update","text":"Updates existing tag. required sub-user rights : tag_update .","title":"update"},{"location":"backend-api/resources/commons/tag/tag_avatar/","text":"Tag avatar \u00b6 Contains API calls to interact with tag avatars. API actions \u00b6 API path: /tag/avatar . assign \u00b6 Assigns icon_id (from standard icon set) to specified tag. required sub-user rights : tag_update . Parameters \u00b6 name description type tag_id ID of the tag to assign. int icon_id Icon to assign to tag. Can be null \u2013 this means that uploaded avatar should be used instead of icon. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tag/avatar/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tag_id\": 1, \"icon_id\": 14}' HTTP GET https://api.navixy.com/v2/tag/avatar/assign?hash=a6aa75587e5c59c32d347da438505fc3&tag_id=1&icon_id=14 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - when vehicle with specified tag_id not found. upload \u00b6 Uploads avatar image for specified tag. Then it will be available from [api_base_url]/[api_static_path]/tag/avatars/<file_name> e.g. https://api.navixy.com/v2/static/tag/avatars/abcdef123456789.png . required sub-user rights : tag_update . avatar_file_name returned in response and will be returned from /tag/list . MUST be a POST multipart request (multipart/form-data), with one of the parts being an image file upload (with the name file ). File part mime type must be one of: image/jpeg image/pjpeg image/png image/gif image/webp Parameters \u00b6 name description tag_id ID of the tag to upload. file Image file. redirect_target Optional. URL to redirect. If redirect_target passed return redirect to <redirect_target>?response=<urlencoded response json> Response \u00b6 { \"success\" : true , \"value\" : \"avatar.jpg\" } value - string. Avatar file name. Errors \u00b6 201 \u2013 Not found in the database - when tag with specified tag_id not found. 233 \u2013 No data file - if file part not passed. 234 \u2013 Invalid data format - if passed file with unexpected mime type. 254 \u2013 Cannot save file - on some file system errors.","title":"Tag Avatar"},{"location":"backend-api/resources/commons/tag/tag_avatar/#tag-avatar","text":"Contains API calls to interact with tag avatars.","title":"Tag avatar"},{"location":"backend-api/resources/commons/tag/tag_avatar/#api-actions","text":"API path: /tag/avatar .","title":"API actions"},{"location":"backend-api/resources/commons/tag/tag_avatar/#assign","text":"Assigns icon_id (from standard icon set) to specified tag. required sub-user rights : tag_update .","title":"assign"},{"location":"backend-api/resources/commons/tag/tag_avatar/#upload","text":"Uploads avatar image for specified tag. Then it will be available from [api_base_url]/[api_static_path]/tag/avatars/<file_name> e.g. https://api.navixy.com/v2/static/tag/avatars/abcdef123456789.png . required sub-user rights : tag_update . avatar_file_name returned in response and will be returned from /tag/list . MUST be a POST multipart request (multipart/form-data), with one of the parts being an image file upload (with the name file ). File part mime type must be one of: image/jpeg image/pjpeg image/png image/gif image/webp","title":"upload"},{"location":"backend-api/resources/commons/user/","text":"User \u00b6 A user account lets you start working with the platform as well as customize your experience within it. Contains user object structure and API calls to interact with users. User object structure \u00b6 { \"success\" : true , \"paas_id\" : 7 , \"paas_settings\" : <paas_se tt i n gs> , \"user_info\" : { \"id\" : 43568 , \"login\" : \"demo@navixy.com\" , \"title\" : \"John Smith\" , \"phone\" : \"79123456789\" , \"creation_date\" : \"2016-05-20 01:10:34\" , \"balance\" : 74.31 , \"bonus\" : 0 , \"locale\" : \"en_US\" , \"demo\" : true , \"verified\" : true , \"legal_type\" : \"individual\" , \"default_geocoder\" : \"google\" , \"route_provider\" : \"google\" , \"time_zone\" : \"America/New_York\" , \"measurement_system\" : \"metric\" , \"date_format\" : \"ddMMyyyy_dots\" , \"hour_mode\" : \"TWENTY_FOUR_HOURS\" , \"tin\" : \"2345678239\" , \"iec\" : \"\" , \"post_country\" : \"USA\" , \"post_region\" : \"NY\" , \"post_index\" : \"10120\" , \"post_city\" : \"New York\" , \"post_street_address\" : \"1556 Broadway, suite 416\" , \"registered_country\" : \"USA\" , \"registered_region\" : \"NY\" , \"registered_index\" : \"10120\" , \"registered_city\" : \"New York\" , \"registered_street_address\" : \"1556 Broadway, suite 416\" , \"first_name\" : \"John\" , \"middle_name\" : \"Walker\" , \"last_name\" : \"Smith\" , \"legal_name\" : \"QWER Inc.\" }, \"master\" : { \"id\" : 1234 , \"demo\" : false , \"legal_type\" : \"individual\" , \"first_name\" : \"David\" , \"middle_name\" : \"Middle\" , \"last_name\" : \"Blane\" , \"legal_name\" : \"Blah LLC\" , \"title\" : \"David Blane\" , \"balance\" : 0.0 , \"bonus\" : 89.78 }, \"tariff_restrictions\" : { \"allowed_maps\" : [ \"roadmap\" , \"osm\" ] }, \"premium_gis\" : true , \"features\" : [ \"branding_web\" ], \"privileges\" : { \"rights\" : [ \"tag_update\" ] } } paas_id - int. Dealer ID. paas_settings - object. The same as settings in /dealer/get_ui_config response . user_info - object. Info about user. id - int. User ID. login - string. User's login (in most cases it's an email address). title - string. User first and last name or organization title. phone - string. User phone (if not empty). creation_date - date/time . User registration date/time. balance - float. User balance, max. 2 digits after dot. For sub-users, this field should be ignored. bonus - float. User bonus, max. 2 digits after dot. For sub-users, this field should be ignored. locale - enum . User locale, for example \"en_EN\". demo - boolean. true if this is a demo user, false otherwise. verified - boolean. true if user email already verified. legal_type - enum . Can bed \"legal_entity\", \"individual\" or \"sole_trader\". default_geocoder - enum . User's default geocoder. Can be \"google\", \"yandex\", \"progorod\", \"osm\", or \"locationiq\". route_provider - enum . User's route provider. Can be \"progorod\", \"google\" or \"osrm\". time_zone - enum . User timezone name. measurement_system - enum . User's measurement system \"metric\", \"imperial\", \"us\", \"metric_gal_us\" or \"nautical\". date_format - Optional enum . Date representation. Can be \"ddMMyyyy_dots\"(\"dd.MM.yyyy\", \"01.12.2021\"), \"ddMMyyyy_slashes\"(\"dd/MM/yyyy\", \"01/12/2021\"), \"MMddyyyy_hyphens\"(\"MM-dd-yyyy\", \"12-01-2021\"), \"yyyyMMdd_hyphens\"(\"yyyy-MM-dd\", \"2021-12-01\"), \"dMMMy\"(\"d MMM y\", \"1 Dec 2021\") or \"dMMMMy\"(\"d MMMM y\", \"1 December 2021\") hour_mode - Optional enum . Time representation. Can be \"TWENTY_FOUR_HOURS\" (24-hour clock, \"HH:mm\" or \"HH:mm:ss\", \"17:45\"/\"17:45:46\") or \"TWELVE_HOURS\" (12-hour clock, \"h:mm a\" or \"h:mm:ss a\", \"5:45 PM\"/\"5:45:46 PM\") tin - string. Taxpayer identification number aka \"VATIN\" or \"INN\". iec - optional string. Industrial Enterprises Classifier aka \"KPP\". Used in Russia for legal entities. post_country - string. Country part of user's post address. post_index - string. Post index or ZIP code. post_region - string. Region part of post address (oblast, state, etc.). post_city - string. City from postal address. post_street_address - string. Street address. registered_country - string. Country part of user's registered address. registered_index - string. Index part of user's registered address. registered_region - string. Region part of user's registered address. registered_city - string. City from registered address. registered_street_address - string. User's registered address. first_name - string. User's or contact person first name. middle_name - string. User's or contact person middle name. last_name - string. User's or contact person last name. legal_name - optional string. A juridical name. master - object. Returned only if current user is sub-user. All fields have same meaning as in \"user_info\", but for master user's account. tariff_restrictions - tariff restrictions object, for more info see user/get_tariff_restrictions . allowed_maps - string array. List of allowed maps. premium_gis - boolean. true if a dealer has premium GIS tariff. features - string array. Set of allowed Dealer features . privileges - object only returned for sub-users. Describes effective sub-user privileges. rights - string array. A set of rights granted to sub-user. Described in security group rights . API actions \u00b6 API path: /user . activate \u00b6 Activates previously registered user with the provided session hash (it is contained in activation link from email sent to user). Available only to master users. Attention This call will receive only session hash from registration email. Any other hash will result in result error code 4 (User or API key not found or session ended). The only thing that API calls with a user session will work for is creating, reading, and deleting API keys. Response \u00b6 { \"success\" : true } auth \u00b6 Tries to authenticate user and get hash. It does not need authentication/hash and is available at UNAUTHORIZED access level. It is strongly recommended using API keys instead of user session hash. Parameters \u00b6 name description type restrictions login User email as login (or demo login). string not null. password User password. string not null, 1 to 40 printable characters. dealer_id If specified, API will check that user belongs to this dealer, and if not, error 102 will be returned. int optional. Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/auth' \\ -H 'Content-Type: application/json' \\ -d '{\"login\": \"user@email.com\", \"password\": \"12@14Y$\"}' Response \u00b6 { \"success\" : true , \"hash\" : \"22eac1c27af4be7b9d04da2ce1af111b\" } hash - string. Session hash. Errors \u00b6 11 \u2013 Access denied - if dealer blocked. 102 \u2013 Wrong login or password. 103 \u2013 User not activated. 104 \u2013 Logins limit exceeded, please reuse existing sessions instead (see also user/session/renew). 105 \u2013 Login attempts limit exceeded, try again later. get_info \u00b6 Gets user information and some settings. Parameters \u00b6 name description type restrictions application If specified, the response will contain a description of the application's custom menu string optional Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/get_info' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/user/get_info?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"paas_id\" : 7 , \"paas_settings\" : <paas_se tt i n gs> , \"user_info\" : { \"id\" : 43568 , \"login\" : \"demo@navixy.com\" , \"title\" : \"John Smith\" , \"phone\" : \"79123456789\" , \"creation_date\" : \"2016-05-20 01:10:34\" , \"balance\" : 74.31 , \"bonus\" : 0 , \"locale\" : \"en_US\" , \"demo\" : true , \"verified\" : true , \"legal_type\" : \"individual\" , \"default_geocoder\" : \"google\" , \"route_provider\" : \"google\" , \"time_zone\" : \"America/New_York\" , \"measurement_system\" : \"metric\" , \"date_format\" : \"ddMMyyyy_dots\" , \"hour_mode\" : \"TWENTY_FOUR_HOURS\" , \"tin\" : \"2345678239\" , \"iec\" : \"\" , \"post_country\" : \"USA\" , \"post_region\" : \"NY\" , \"post_index\" : \"10120\" , \"post_city\" : \"New York\" , \"post_street_address\" : \"1556 Broadway, suite 416\" , \"registered_country\" : \"USA\" , \"registered_region\" : \"NY\" , \"registered_index\" : \"10120\" , \"registered_city\" : \"New York\" , \"registered_street_address\" : \"1556 Broadway, suite 416\" , \"first_name\" : \"John\" , \"middle_name\" : \"Walker\" , \"last_name\" : \"Smith\" , \"legal_name\" : \"QWER Inc.\" }, \"master\" : { \"id\" : 1234 , \"demo\" : false , \"legal_type\" : \"individual\" , \"first_name\" : \"David\" , \"middle_name\" : \"Middle\" , \"last_name\" : \"Blane\" , \"legal_name\" : \"Blah LLC\" , \"title\" : \"David Blane\" , \"balance\" : 0.0 , \"bonus\" : 89.78 }, \"tariff_restrictions\" : { \"allowed_maps\" : [ \"roadmap\" , \"osm\" ] }, \"premium_gis\" : true , \"features\" : [ \"branding_web\" ], \"privileges\" : { \"rights\" : [ \"tag_update\" ] }, \"menu\" : <cus t omizable_user_me nu > } user_object - for more info see user object structure . Errors \u00b6 General types only. get_tariff_restrictions \u00b6 Gets user plan restrictions. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/get_tariff_restrictions' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/user/get_tariff_restrictions?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"value\" : { \"allowed_maps\" : [ \"roadmap\" , \"osm\" ] } } allowed_maps - string array. List of allowed maps. Errors \u00b6 General types only. logout \u00b6 Destroys current user session. Works only with standard user session (not with API key). Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/logout' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/user/logout?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true } Errors \u00b6 General types only. resend_activation \u00b6 Sends a new activation link to user. It does not need authentication/hash and is available at UNAUTHORIZED access level. Parameters \u00b6 name description type restrictions login User login (email). string not null. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/resend_activation' \\ -H 'Content-Type: application/json' \\ -d '{\"login\": \"user@login.com\"}' HTTP GET https://api.navixy.com/v2/user/resend_activation?login=user@login.com Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 user with a passed login not found. 209 - Failed sending email \u2013 can't send email. 264 - Timeout not reached \u2013 previous activation link generated less than 5 minutes ago (or other configured on server timeout). { \"success\" : false , \"status\" : { \"code\" : 264 , \"description\" : \"Timeout not reached\" }, \"timeout\" : \"PT5M\" , \"remainder\" : \"PT4M31.575S\" } timeout - string. timeout between sending activation links in ISO 8601 duration format. remainder - string. remaining time to next try in ISO 8601 duration format 265 - Already done \u2013 user already activated and verified.","title":"Overview"},{"location":"backend-api/resources/commons/user/#user","text":"A user account lets you start working with the platform as well as customize your experience within it. Contains user object structure and API calls to interact with users.","title":"User"},{"location":"backend-api/resources/commons/user/#user-object-structure","text":"{ \"success\" : true , \"paas_id\" : 7 , \"paas_settings\" : <paas_se tt i n gs> , \"user_info\" : { \"id\" : 43568 , \"login\" : \"demo@navixy.com\" , \"title\" : \"John Smith\" , \"phone\" : \"79123456789\" , \"creation_date\" : \"2016-05-20 01:10:34\" , \"balance\" : 74.31 , \"bonus\" : 0 , \"locale\" : \"en_US\" , \"demo\" : true , \"verified\" : true , \"legal_type\" : \"individual\" , \"default_geocoder\" : \"google\" , \"route_provider\" : \"google\" , \"time_zone\" : \"America/New_York\" , \"measurement_system\" : \"metric\" , \"date_format\" : \"ddMMyyyy_dots\" , \"hour_mode\" : \"TWENTY_FOUR_HOURS\" , \"tin\" : \"2345678239\" , \"iec\" : \"\" , \"post_country\" : \"USA\" , \"post_region\" : \"NY\" , \"post_index\" : \"10120\" , \"post_city\" : \"New York\" , \"post_street_address\" : \"1556 Broadway, suite 416\" , \"registered_country\" : \"USA\" , \"registered_region\" : \"NY\" , \"registered_index\" : \"10120\" , \"registered_city\" : \"New York\" , \"registered_street_address\" : \"1556 Broadway, suite 416\" , \"first_name\" : \"John\" , \"middle_name\" : \"Walker\" , \"last_name\" : \"Smith\" , \"legal_name\" : \"QWER Inc.\" }, \"master\" : { \"id\" : 1234 , \"demo\" : false , \"legal_type\" : \"individual\" , \"first_name\" : \"David\" , \"middle_name\" : \"Middle\" , \"last_name\" : \"Blane\" , \"legal_name\" : \"Blah LLC\" , \"title\" : \"David Blane\" , \"balance\" : 0.0 , \"bonus\" : 89.78 }, \"tariff_restrictions\" : { \"allowed_maps\" : [ \"roadmap\" , \"osm\" ] }, \"premium_gis\" : true , \"features\" : [ \"branding_web\" ], \"privileges\" : { \"rights\" : [ \"tag_update\" ] } } paas_id - int. Dealer ID. paas_settings - object. The same as settings in /dealer/get_ui_config response . user_info - object. Info about user. id - int. User ID. login - string. User's login (in most cases it's an email address). title - string. User first and last name or organization title. phone - string. User phone (if not empty). creation_date - date/time . User registration date/time. balance - float. User balance, max. 2 digits after dot. For sub-users, this field should be ignored. bonus - float. User bonus, max. 2 digits after dot. For sub-users, this field should be ignored. locale - enum . User locale, for example \"en_EN\". demo - boolean. true if this is a demo user, false otherwise. verified - boolean. true if user email already verified. legal_type - enum . Can bed \"legal_entity\", \"individual\" or \"sole_trader\". default_geocoder - enum . User's default geocoder. Can be \"google\", \"yandex\", \"progorod\", \"osm\", or \"locationiq\". route_provider - enum . User's route provider. Can be \"progorod\", \"google\" or \"osrm\". time_zone - enum . User timezone name. measurement_system - enum . User's measurement system \"metric\", \"imperial\", \"us\", \"metric_gal_us\" or \"nautical\". date_format - Optional enum . Date representation. Can be \"ddMMyyyy_dots\"(\"dd.MM.yyyy\", \"01.12.2021\"), \"ddMMyyyy_slashes\"(\"dd/MM/yyyy\", \"01/12/2021\"), \"MMddyyyy_hyphens\"(\"MM-dd-yyyy\", \"12-01-2021\"), \"yyyyMMdd_hyphens\"(\"yyyy-MM-dd\", \"2021-12-01\"), \"dMMMy\"(\"d MMM y\", \"1 Dec 2021\") or \"dMMMMy\"(\"d MMMM y\", \"1 December 2021\") hour_mode - Optional enum . Time representation. Can be \"TWENTY_FOUR_HOURS\" (24-hour clock, \"HH:mm\" or \"HH:mm:ss\", \"17:45\"/\"17:45:46\") or \"TWELVE_HOURS\" (12-hour clock, \"h:mm a\" or \"h:mm:ss a\", \"5:45 PM\"/\"5:45:46 PM\") tin - string. Taxpayer identification number aka \"VATIN\" or \"INN\". iec - optional string. Industrial Enterprises Classifier aka \"KPP\". Used in Russia for legal entities. post_country - string. Country part of user's post address. post_index - string. Post index or ZIP code. post_region - string. Region part of post address (oblast, state, etc.). post_city - string. City from postal address. post_street_address - string. Street address. registered_country - string. Country part of user's registered address. registered_index - string. Index part of user's registered address. registered_region - string. Region part of user's registered address. registered_city - string. City from registered address. registered_street_address - string. User's registered address. first_name - string. User's or contact person first name. middle_name - string. User's or contact person middle name. last_name - string. User's or contact person last name. legal_name - optional string. A juridical name. master - object. Returned only if current user is sub-user. All fields have same meaning as in \"user_info\", but for master user's account. tariff_restrictions - tariff restrictions object, for more info see user/get_tariff_restrictions . allowed_maps - string array. List of allowed maps. premium_gis - boolean. true if a dealer has premium GIS tariff. features - string array. Set of allowed Dealer features . privileges - object only returned for sub-users. Describes effective sub-user privileges. rights - string array. A set of rights granted to sub-user. Described in security group rights .","title":"User object structure"},{"location":"backend-api/resources/commons/user/#api-actions","text":"API path: /user .","title":"API actions"},{"location":"backend-api/resources/commons/user/#activate","text":"Activates previously registered user with the provided session hash (it is contained in activation link from email sent to user). Available only to master users. Attention This call will receive only session hash from registration email. Any other hash will result in result error code 4 (User or API key not found or session ended). The only thing that API calls with a user session will work for is creating, reading, and deleting API keys.","title":"activate"},{"location":"backend-api/resources/commons/user/#auth","text":"Tries to authenticate user and get hash. It does not need authentication/hash and is available at UNAUTHORIZED access level. It is strongly recommended using API keys instead of user session hash.","title":"auth"},{"location":"backend-api/resources/commons/user/#get_info","text":"Gets user information and some settings.","title":"get_info"},{"location":"backend-api/resources/commons/user/#get_tariff_restrictions","text":"Gets user plan restrictions.","title":"get_tariff_restrictions"},{"location":"backend-api/resources/commons/user/#logout","text":"Destroys current user session. Works only with standard user session (not with API key).","title":"logout"},{"location":"backend-api/resources/commons/user/#resend_activation","text":"Sends a new activation link to user. It does not need authentication/hash and is available at UNAUTHORIZED access level.","title":"resend_activation"},{"location":"backend-api/resources/commons/user/password/","text":"User password \u00b6 Contains API calls to change and set users' passwords. API actions \u00b6 API path: /user/password . change \u00b6 Changes password of user with the provided session hash (it is contained in a password restore link from email sent to user by user/restore_password). This call will receive only session hash from a password restore email. Any other hash will result in result error code 4 (User or API key not found or session ended). Parameters \u00b6 name description type password New password for the user. 6 to 20 printable characters. string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/password/change' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"password\": \"12@14Y$\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 101 \u2013 In demo mode this function disabled - if specified session hash belongs to demo user. set \u00b6 Changes password for login user. Works only with standard user session (not with API key). Parameters \u00b6 name description type old_password Current password of the user. string new_password New password for the user. 6 to 20 printable characters. string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/password/set' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"old_password\": \"qwert1\", \"new_password\": \"12@14Y$\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 101 \u2013 In demo mode this function disabled - if specified session hash belongs to demo user. 245 \u2013 New password must be different - if old_password = new_password . 248 \u2013 Wrong password - if old_password is wrong.","title":"User Password"},{"location":"backend-api/resources/commons/user/password/#user-password","text":"Contains API calls to change and set users' passwords.","title":"User password"},{"location":"backend-api/resources/commons/user/password/#api-actions","text":"API path: /user/password .","title":"API actions"},{"location":"backend-api/resources/commons/user/password/#change","text":"Changes password of user with the provided session hash (it is contained in a password restore link from email sent to user by user/restore_password). This call will receive only session hash from a password restore email. Any other hash will result in result error code 4 (User or API key not found or session ended).","title":"change"},{"location":"backend-api/resources/commons/user/password/#set","text":"Changes password for login user. Works only with standard user session (not with API key).","title":"set"},{"location":"backend-api/resources/commons/user/personal_info/","text":"User personal info \u00b6 Contains user personal info update API call. API actions \u00b6 API path: /user/personal_info . update \u00b6 Updates user personal info. Require a plugin with id=45 . Parameters \u00b6 legal_type \u2013 string. Either \"legal_entity\", \"sole_trader\" or \"individual\". first_name \u2013 string. Contact person first name. middle_name \u2013 string. Contact person middle name. last_name \u2013 string. Contact person last name. phone \u2013 string. 0-15 digits. Optional. Contact phone. Not changes if not passed. post_country \u2013 string. Optional. Country part of user's post address. post_index \u2013 string. Optional. Index part of user's post address. post_region \u2013 string. Optional. Region part of user's post address. post_city \u2013 string. Optional. City from post address. post_street_address \u2013 string. Optional. User's post address, and for legal_entity or sole_trader : iec \u2013 string. Industrial Enterprises Classifier aka \"KPP\". Used in Russia. For legal_entity only. legal_name \u2013 string. User legal (juridical) name. For legal_entity only. okpo_code - string, optional, 8 or 10 characters maximum. All-Russian Classifier of Enterprises and Organizations. Used in Russia. registered_country \u2013 string. Country part of user's registered address. registered_index \u2013 string. Index part of user's registered address. registered_region \u2013 string. Region part of user's registered address. registered_city \u2013 string. City from registered address. registered_street_address \u2013 string. User's registered address. state_reg_num - string, optional, 15 characters maximum. State registration number. E.g. EIN in the USA, OGRN in Russia. tin \u2013 string. Taxpayer identification number. Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/personal_info/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"first_name\": \"Charles\", \"middle_name\": \"Henry\", \"last_name\": \"Pearson\", \"legal_type\": \"legal_entity\", \"phone\": \"491761234567\", \"post_country\": \"Germany\", \"post_index\": \"61169\", \"post_region\": \"Hessen\", \"post_city\": \"Wiesbaden\", \"post_street_address\": \"Marienplatz 2\", \"registered_country\": \"Germany\", \"registered_index\": \"61169\", \"registered_region\": \"Hessen\", \"registered_city\": \"Wiesbaden\", \"registered_street_address\": \"Marienplatz 2\", \"state_reg_num\": \"12-3456789\", \"tin\": \"1131145180\", \"legal_name\": \"E. Biasi GmbH\", \"iec\": \"\", \"okpo_code\": \"\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 222 - Plugin not found \u2013 when plugin 45 not available for user.","title":"Personal Info"},{"location":"backend-api/resources/commons/user/personal_info/#user-personal-info","text":"Contains user personal info update API call.","title":"User personal info"},{"location":"backend-api/resources/commons/user/personal_info/#api-actions","text":"API path: /user/personal_info .","title":"API actions"},{"location":"backend-api/resources/commons/user/personal_info/#update","text":"Updates user personal info. Require a plugin with id=45 .","title":"update"},{"location":"backend-api/resources/commons/user/audit/","text":"User audit \u00b6 Contains user audit check-in method that calls when user opens UI or activates the UI tab in the browser after it hasn't been used for more than 2 hours. API actions \u00b6 API path: /user/audit . checkin \u00b6 This action occurs when a customer opens the UI or activates the UI tab in the browser after it hasn't been used for more than 2 hours. Works only with standard user session (not with API key). This action type may be in the user audit log . Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/audit/checkin' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/user/audit/checkin?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true } Errors \u00b6 General types only.","title":"Index"},{"location":"backend-api/resources/commons/user/audit/#user-audit","text":"Contains user audit check-in method that calls when user opens UI or activates the UI tab in the browser after it hasn't been used for more than 2 hours.","title":"User audit"},{"location":"backend-api/resources/commons/user/audit/#api-actions","text":"API path: /user/audit .","title":"API actions"},{"location":"backend-api/resources/commons/user/audit/#checkin","text":"This action occurs when a customer opens the UI or activates the UI tab in the browser after it hasn't been used for more than 2 hours. Works only with standard user session (not with API key). This action type may be in the user audit log .","title":"checkin"},{"location":"backend-api/resources/commons/user/audit/audit_log/","text":"User audit log \u00b6 Using the audit log, account owner can track the activity of all users added through the \"Access rights\" section. Contains audit object and list method to get the audit log. Audit object \u00b6 { \"id\" : 44504790 , \"user_id\" : 3 , \"subuser_id\" : 184541 , \"entry_category\" : \"custom_field\" , \"entry_id\" : null , \"action\" : \"create\" , \"payload\" : { \"name\" : \"Decimal number\" }, \"host\" : \"94.140.138.215\" , \"user_agent\" : \"Apache-HttpClient/4.1.1 (java 1.5)\" , \"action_date\" : \"2020-12-21 17:54:01\" } id - int. An ID of the audit record. user_id - int. Master user's ID. subuser_id - int. ID of the sub-user who made an action. entry_category - string. Category of the entry on which an action made. entry_id - int. ID of the entry on which an action made. Nullable. action - string. Action on entry. payload - Nullable JSON object. Additional information about action. host - string. Host from which an action made. IPv4 or IPv6. user_agent - string. User agent. action_date - date/time . Date and time of the action. API actions \u00b6 API path: /user/audit/log . list \u00b6 Gets list of audit records available for current user. required sub-user rights : admin (available only to master users). Parameters \u00b6 name description type from Include audit objects recorded after this date. date/time to Include audits before this date. date/time subuser_ids Optional. Include audits for specific sub-users. int array actions Optional. Include audits for specific actions only. string array limit Pagination. Maximum number of audit records to return. int offset Pagination. Get audits starting from. int sort Optional. Set of sort options. Each option is a pair of property name and sorting direction, e.g. [\"action_date=asc\", \"user=desc\"] . string array grouping Optional. Group log by \"user\", \"action_date\", \"action\" or don't group \"default\". enum Properties available for sorting by: action . action_date - sort only by date, not considering time part. action_datetime - sort by date including time. user - sort by user's (sub-user) last+first+middle name, not by ID. host . If no sort param is specified, then sorting equivalent to option [\"action_date=asc\"] will be applied. Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/audit/log/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"from\": \"2020-12-25 03:24:00\", \"to\": \"2020-12-28 06:24:00\", \"limit\": 50, \"offset\": 0}' Response \u00b6 { \"success\" : true , \"list\" : [ { \"id\" : 44504790 , \"user_id\" : 3 , \"subuser_id\" : 184541 , \"entry_category\" : \"custom_field\" , \"entry_id\" : null , \"action\" : \"create\" , \"payload\" : { \"name\" : \"Decimal number\" }, \"host\" : \"94.140.138.215\" , \"user_agent\" : \"Apache-HttpClient/4.1.1 (java 1.5)\" , \"action_date\" : \"2020-12-21 17:54:01\" } ] } Errors \u00b6 General types only.","title":"Audit Log"},{"location":"backend-api/resources/commons/user/audit/audit_log/#user-audit-log","text":"Using the audit log, account owner can track the activity of all users added through the \"Access rights\" section. Contains audit object and list method to get the audit log.","title":"User audit log"},{"location":"backend-api/resources/commons/user/audit/audit_log/#audit-object","text":"{ \"id\" : 44504790 , \"user_id\" : 3 , \"subuser_id\" : 184541 , \"entry_category\" : \"custom_field\" , \"entry_id\" : null , \"action\" : \"create\" , \"payload\" : { \"name\" : \"Decimal number\" }, \"host\" : \"94.140.138.215\" , \"user_agent\" : \"Apache-HttpClient/4.1.1 (java 1.5)\" , \"action_date\" : \"2020-12-21 17:54:01\" } id - int. An ID of the audit record. user_id - int. Master user's ID. subuser_id - int. ID of the sub-user who made an action. entry_category - string. Category of the entry on which an action made. entry_id - int. ID of the entry on which an action made. Nullable. action - string. Action on entry. payload - Nullable JSON object. Additional information about action. host - string. Host from which an action made. IPv4 or IPv6. user_agent - string. User agent. action_date - date/time . Date and time of the action.","title":"Audit object"},{"location":"backend-api/resources/commons/user/audit/audit_log/#api-actions","text":"API path: /user/audit/log .","title":"API actions"},{"location":"backend-api/resources/commons/user/audit/audit_log/#list","text":"Gets list of audit records available for current user. required sub-user rights : admin (available only to master users).","title":"list"},{"location":"backend-api/resources/commons/user/session/","text":"User session \u00b6 Contains a call to prolong user session. API actions \u00b6 API path: /user/session . renew \u00b6 Prolongs current user session. Works only with standard user session (not with API key). Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/session/renew' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/user/session/renew?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true }","title":"Index"},{"location":"backend-api/resources/commons/user/session/#user-session","text":"Contains a call to prolong user session.","title":"User session"},{"location":"backend-api/resources/commons/user/session/#api-actions","text":"API path: /user/session .","title":"API actions"},{"location":"backend-api/resources/commons/user/session/#renew","text":"Prolongs current user session. Works only with standard user session (not with API key).","title":"renew"},{"location":"backend-api/resources/commons/user/session/delivery/","text":"Delivery \u00b6 Calls to work with \"delivery\" type sessions. Those are special sessions to integrate order (task) tracking functionality into external systems. API actions \u00b6 API path: /user/session/delivery . create \u00b6 Creates new user delivery session. In demo session allowed to create a new session only if it not already exists. required sub-user rights : admin (available only to master users). Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/session/delivery/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/user/session/delivery/create?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"value\" : \"42fc7d3068cb98d233c3af749dee4a8d\" } value - string. Created delivery session hash key. Errors \u00b6 101 - In demo mode this function disabled \u2013 current session is demo but weblocator session already exists. 236 \u2013 Feature unavailable due to tariff restrictions. read \u00b6 Returns current user delivery session key. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/session/delivery/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/user/session/delivery/read?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"value\" : \"42fc7d3068cb98d233c3af749dee4a8d\" } value - string. Delivery session hash. Errors \u00b6 201 \u2013 Not found in the database - if there is no delivery session. Errors \u00b6 General types only.","title":"Delivery"},{"location":"backend-api/resources/commons/user/session/delivery/#delivery","text":"Calls to work with \"delivery\" type sessions. Those are special sessions to integrate order (task) tracking functionality into external systems.","title":"Delivery"},{"location":"backend-api/resources/commons/user/session/delivery/#api-actions","text":"API path: /user/session/delivery .","title":"API actions"},{"location":"backend-api/resources/commons/user/session/delivery/#create","text":"Creates new user delivery session. In demo session allowed to create a new session only if it not already exists. required sub-user rights : admin (available only to master users).","title":"create"},{"location":"backend-api/resources/commons/user/session/delivery/#read","text":"Returns current user delivery session key.","title":"read"},{"location":"backend-api/resources/commons/user/session/push_token/","text":"Push token \u00b6 Contains API calls to interact with push token. Find information about push token usage in our instructions . API actions \u00b6 API path: /user/session/push_token . bind \u00b6 Binds Push token with a current session. Parameters \u00b6 name description type application Application ID, \"navixy_iphone_viewer\" or \"navixy_android_viewer\" or \"w3c_pushapi\". enum token Push token or endpoint from pushSubscription, full URL like https://fcm.googleapis.com/fcm/send/f6kicrBn7S0:APA91b if your app ID is \" \" string parameters Should be used only with object with \"w3c_pushapi\". Contain keys from pushSubscription {\"p256dh\": \"...\", \"auth\":\"...\"} JSON object category_filter Optional. Push notifications category filter, default is * . string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/session/push_token/bind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"application\": \"navixy_android_viewer\", \"token\": \"f4be7b9d04da2ce1af111b\"}' Response \u00b6 { \"success\" : true } Using category_filter you can filter out unwanted notifications categories. If category_filter equals to * this means all categories allowed. Delimited with comma list means that allowed only listed categories i.e. chat_message,history_rule . Prepended with minus and delimited with comma list means that all categories allowed except given i.e. \u2013 history_task,history_rule . Possible categories: \u00b6 chat_message \u2013 notification about new chat message. history_rule \u2013 notifications related to rule actuation. history_task \u2013 notifications related to tasks. history_info \u2013 service information. history_service_task \u2013 service task notifications. history_work_status \u2013 work status notifications. Errors \u00b6 General types only. delete \u00b6 Deletes push token bound with the session. Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/session/push_token/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/user/session/push_token/delete?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true } Errors \u00b6 General types only.","title":"Push Token"},{"location":"backend-api/resources/commons/user/session/push_token/#push-token","text":"Contains API calls to interact with push token. Find information about push token usage in our instructions .","title":"Push token"},{"location":"backend-api/resources/commons/user/session/push_token/#api-actions","text":"API path: /user/session/push_token .","title":"API actions"},{"location":"backend-api/resources/commons/user/session/push_token/#bind","text":"Binds Push token with a current session.","title":"bind"},{"location":"backend-api/resources/commons/user/session/push_token/#delete","text":"Deletes push token bound with the session.","title":"delete"},{"location":"backend-api/resources/commons/user/settings/","text":"User settings \u00b6 CRUD actions for user settings. settings object \u00b6 { \"time_zone\" : \"Europe/Amsterdam\" , \"locale\" : \"nl_NL\" , \"measurement_system\" : \"metric\" , \"date_format\" : \"ddMMyyyy_dots\" , \"hour_mode\" : \"TWENTY_FOUR_HOURS\" , \"geocoder\" : \"osm\" , \"route_provider\" : \"google\" , \"translit\" : false } time_zone - enum . ISO timezone ID. locale - enum . Locale code. measurement_system - enum . Measurement system. Can be \"metric\", \"imperial\", \"us\", \"metric_gal_us\" or \"nautical\". date_format - Optional enum . Date representation. Can be \"ddMMyyyy_dots\"(\"dd.MM.yyyy\", \"01.12.2021\"), \"ddMMyyyy_slashes\"(\"dd/MM/yyyy\", \"01/12/2021\"), \"MMddyyyy_hyphens\"(\"MM-dd-yyyy\", \"12-01-2021\"), \"yyyyMMdd_hyphens\"(\"yyyy-MM-dd\", \"2021-12-01\"), \"dMMMy\"(\"d MMM y\", \"1 Dec 2021\") or \"dMMMMy\"(\"d MMMM y\", \"1 December 2021\") hour_mode - Optional enum . Time representation. Can be \"TWENTY_FOUR_HOURS\" (24-hour clock, \"HH:mm\" or \"HH:mm:ss\", \"17:45\"/\"17:45:46\") or \"TWELVE_HOURS\" (12-hour clock, \"h:mm a\" or \"h:mm:ss a\", \"5:45 PM\"/\"5:45:46 PM\") geocoder - enum . Preferred geocoder type. Can be \"google\", \"yandex\", \"progorod\", \"osm\" or \"locationiq\". route_provider - enum . Preferred route finding provider. Can be \"google\", \"progorod\" or \"osrm\". translit - boolean. true if sms notification should be transliterated, false otherwise. balance_alert_settings type is JSON object: { \"emails\" : [ \"email1@example.com\" , \"email2@example.com\" ] } emails - string array. List of emails to send alert message about balance. Empty array means disclaimer of notifications. file_storage_settings type is JSON object: { \"auto_overwrite\" : true } auto_overwrite - boolean. If true new files will replace old ones when file storage is full. Default is false . API actions \u00b6 API path: /user/settings . read \u00b6 Reads current user's settings. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/settings/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/user/settings/read?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"settings\" : { \"time_zone\" : \"Europe/Amsterdam\" , \"locale\" : \"nl_NL\" , \"measurement_system\" : \"metric\" , \"geocoder\" : \"osm\" , \"route_provider\" : \"google\" , \"translit\" : false }, \"file_storage_settings\" : { \"auto_overwrite\" : true }, \"balance_alert_settings\" : { \"emails\" : [ \"email1@example.com\" , \"email2@example.com\" ] }, \"first_user_balance_warning_period\" : \"7d\" , \"second_user_balance_warning_period\" : \"2d\" } first_user_balance_warning_period - string. The first interval to send alert. \"7d\" means send the first alert warning 7 days before. second_user_balance_warning_period - string. The second interval to send alert. Send the second alert warning n days before. Where settings , balance_alert_settings and file_storage_settings described above. required sub-user rights for balance_alert_settings and file_storage_settings fields: admin (available only to master users). update \u00b6 Update current user's settings. required sub-user rights for balance_alert_settings and file_storage_settings : admin (available only to master users). Parameters \u00b6 name description type time_zone ISO timezone ID. enum locale Locale code. enum measurement_system Measurement system. Can be \"metric\", \"imperial\", \"us\", \"metric_gal_us\" or \"nautical\". enum geocoder Preferred geocoder type. Can be \"google\", \"yandex\", \"progorod\", \"osm\" or \"locationiq\". enum route_provider Preferred route finding provider. Can be \"google\", \"progorod\" or \"osrm\". enum translit true if sms notification should be transliterated, false otherwise. boolean balance_alert_settings Object containing array of emails. JSON object file_storage_settings Object containing file storage settings. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/settings/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"time_zone\": \"Europe/Amsterdam\", \"locale\": \"nl_NL\", \"measurement_system\": \"metric\", \"geocoder\": \"osm\", \"route_provider\": \"google\", \"translit\": false, \"balance_alert_settings\": {\"emails\": [\"email1@example.com\", \"email2@example.com\"]}, \"file_storage_settings\": {\"auto_overwrite\": true}}' Response \u00b6 { \"success\" : true } Errors \u00b6 General types only. file_storage/update \u00b6 Updates current user's file storage settings. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type file_storage_settings Object containing file storage settings. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/settings/file_storage/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"file_storage_settings\": {\"auto_overwrite\": true}}' Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights.","title":"Index"},{"location":"backend-api/resources/commons/user/settings/#user-settings","text":"CRUD actions for user settings.","title":"User settings"},{"location":"backend-api/resources/commons/user/settings/#settings-object","text":"{ \"time_zone\" : \"Europe/Amsterdam\" , \"locale\" : \"nl_NL\" , \"measurement_system\" : \"metric\" , \"date_format\" : \"ddMMyyyy_dots\" , \"hour_mode\" : \"TWENTY_FOUR_HOURS\" , \"geocoder\" : \"osm\" , \"route_provider\" : \"google\" , \"translit\" : false } time_zone - enum . ISO timezone ID. locale - enum . Locale code. measurement_system - enum . Measurement system. Can be \"metric\", \"imperial\", \"us\", \"metric_gal_us\" or \"nautical\". date_format - Optional enum . Date representation. Can be \"ddMMyyyy_dots\"(\"dd.MM.yyyy\", \"01.12.2021\"), \"ddMMyyyy_slashes\"(\"dd/MM/yyyy\", \"01/12/2021\"), \"MMddyyyy_hyphens\"(\"MM-dd-yyyy\", \"12-01-2021\"), \"yyyyMMdd_hyphens\"(\"yyyy-MM-dd\", \"2021-12-01\"), \"dMMMy\"(\"d MMM y\", \"1 Dec 2021\") or \"dMMMMy\"(\"d MMMM y\", \"1 December 2021\") hour_mode - Optional enum . Time representation. Can be \"TWENTY_FOUR_HOURS\" (24-hour clock, \"HH:mm\" or \"HH:mm:ss\", \"17:45\"/\"17:45:46\") or \"TWELVE_HOURS\" (12-hour clock, \"h:mm a\" or \"h:mm:ss a\", \"5:45 PM\"/\"5:45:46 PM\") geocoder - enum . Preferred geocoder type. Can be \"google\", \"yandex\", \"progorod\", \"osm\" or \"locationiq\". route_provider - enum . Preferred route finding provider. Can be \"google\", \"progorod\" or \"osrm\". translit - boolean. true if sms notification should be transliterated, false otherwise. balance_alert_settings type is JSON object: { \"emails\" : [ \"email1@example.com\" , \"email2@example.com\" ] } emails - string array. List of emails to send alert message about balance. Empty array means disclaimer of notifications. file_storage_settings type is JSON object: { \"auto_overwrite\" : true } auto_overwrite - boolean. If true new files will replace old ones when file storage is full. Default is false .","title":"settings object"},{"location":"backend-api/resources/commons/user/settings/#api-actions","text":"API path: /user/settings .","title":"API actions"},{"location":"backend-api/resources/commons/user/settings/#read","text":"Reads current user's settings.","title":"read"},{"location":"backend-api/resources/commons/user/settings/#update","text":"Update current user's settings. required sub-user rights for balance_alert_settings and file_storage_settings : admin (available only to master users).","title":"update"},{"location":"backend-api/resources/commons/user/settings/#file_storageupdate","text":"Updates current user's file storage settings. required sub-user rights: admin (available only to master users).","title":"file_storage/update"},{"location":"backend-api/resources/commons/user/settings/ui/","text":"User UI settings \u00b6 The user interface settings intended for storing settings of client applications that use the API. One can imagine that this works similarly to the browser cache/local storage mechanism. The feature is that long-term storage of these settings provided but not guaranteed - when the quota exceeded, data could be deleted. API actions \u00b6 API path: /user/settings/ui . read \u00b6 Reads setting value by key. Parameters \u00b6 name description type key Length should be between 1 and 50 is 50 symbols, should only contain English letters, digits, _ and - . string Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/user/settings/ui/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"key\": \"tracker-icons\"}' Responses: \u00b6 { \"success\" : true , \"value\" : \"previously saved value\" } When nonexistent key provided: { \"success\" : false , \"status\" : { \"code\" : 201 , \"description\" : \"Not found in database\" } } Errors \u00b6 General types only. update \u00b6 Sets setting value. Parameters \u00b6 name description type key Length should be between 1 and 50 is 50 symbols, should only contain English letters, digits, _ and - . string value A new UI config value. Length should be between 0 and 8192 symbols. string Responses: \u00b6 { \"success\" : true } Errors \u00b6 General types. 268 - over quota. The amount of storage available for the user for these settings has been exhausted. New settings cannot be added until the amount of stored data has been reduced.","title":"Ui"},{"location":"backend-api/resources/commons/user/settings/ui/#user-ui-settings","text":"The user interface settings intended for storing settings of client applications that use the API. One can imagine that this works similarly to the browser cache/local storage mechanism. The feature is that long-term storage of these settings provided but not guaranteed - when the quota exceeded, data could be deleted.","title":"User UI settings"},{"location":"backend-api/resources/commons/user/settings/ui/#api-actions","text":"API path: /user/settings/ui .","title":"API actions"},{"location":"backend-api/resources/commons/user/settings/ui/#read","text":"Reads setting value by key.","title":"read"},{"location":"backend-api/resources/commons/user/settings/ui/#update","text":"Sets setting value.","title":"update"},{"location":"backend-api/resources/field_service/checkin/","text":"Check-ins \u00b6 Here's the corrected version: Check-ins are created using the Mobile Tracker App ( Android / iOS ). They contain date/time, address, coordinates, and additional information (comment, photo, filled form) provided by the app user after pressing \"Check-in\" in the tracker app. Using check-ins, field personnel can provide real-time information to their HQ while on site. For example, they can provide photo proof of work completed or notify about a malfunction, along with a filled form describing the issue. Check-ins cannot be created using the web API ( create is needed for exceptional cases and described in the guide ), so all actions are read-only. Check-in object \u00b6 { \"id\" : 1 , \"marker_time\" : \"2017-03-15 12:36:27\" , \"user_id\" : 111 , \"tracker_id\" : 222 , \"employee_id\" : 333 , \"location\" : { \"lat\" : 53.787154 , \"lng\" : 9.757980 , \"address\" : \"Moltkestrasse 32\" , \"precision\" : 150 }, \"comment\" : \"houston, we have a problem\" , \"files\" : [{ \"id\" : 16 , \"storage_id\" : 1 , \"user_id\" : 12203 , \"type\" : \"image\" , \"created\" : \"2017-09-06 11:54:28\" , \"uploaded\" : \"2017-09-06 11:55:14\" , \"name\" : \"lala.jpg\" , \"size\" : 72594 , \"mime_type\" : \"image/png\" , \"metadata\" : { \"orientation\" : 1 }, \"state\" : \"uploaded\" , \"download_url\" : \"https://static.navixy.com/file/dl/1/0/1g/01gw2j5q7nm4r92dytolzd6koxy9e38v.png/lala.jpg\" }], \"form_id\" : 23423 , \"form_label\" : \"Service request form\" } id - int. An ID of a check-in. marker_time - date/time . Non-null. The time of check-in creation. user_id - int. Non-null. An ID of the master user. tracker_id - int. Non-null. An ID of the tracker which created this check-in. employee_id - optional int. An ID of the employee assigned to the tracker. location - non-null object. Location associated with this check-in marker. address - string. Address of the location. comment - optional string. A comment provided by app user. files - list of objects. Non-null. May be empty. id - int. File ID. storage_id - int. Storage ID. user_id - int. An ID of the user. type - enum . Can be \"image\" | \"file\". created - date/time . Date when file created. uploaded - date/time . Date when file uploaded, can be null if file not yet uploaded. name - string. A name of the file. size int. File size in bytes. If file not uploaded, show maximum allowed size for an upload. metadata - metadata object. orientation - int. Image exif orientation. state - enum . Can be \"created\" | \"in_progress\" | \"uploaded\" | \"deleted\". download_url - string. Actual URL at which file is available. Can be null if file not yet uploaded. form_id - int. An ID of the form which was sent along with a check-in, can be null. form_label - string. Label of the form which was sent along with a check-in, can be null. API actions \u00b6 API path: /checkin . read \u00b6 Get check-in which ID is equal to checkin_id . required sub-user rights: employee_update . Parameters \u00b6 name description type checkin_id ID of the check-in entry. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/checkin/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"checkin_id\": 1}' HTTP GET https://api.navixy.com/v2/checkin/read?hash=a6aa75587e5c59c32d347da438505fc3&checkin_id=1 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 1 , \"marker_time\" : \"2017-03-15 12:36:27\" , \"user_id\" : 111 , \"tracker_id\" : 222 , \"employee_id\" : 333 , \"location\" : { \"lat\" : 53.787154 , \"lng\" : 9.757980 , \"address\" : \"Moltkestrasse 32\" , \"precision\" : 150 }, \"comment\" : \"houston, we have a problem\" , \"files\" : [{ \"id\" : 16 , \"storage_id\" : 1 , \"user_id\" : 12203 , \"type\" : \"image\" , \"created\" : \"2017-09-06 11:54:28\" , \"uploaded\" : \"2017-09-06 11:55:14\" , \"name\" : \"lala.jpg\" , \"size\" : 72594 , \"mime_type\" : \"image/png\" , \"metadata\" : { \"orientation\" : 1 }, \"state\" : \"uploaded\" , \"download_url\" : \"https://static.navixy.com/file/dl/1/0/1g/01gw2j5q7nm4r92dytolzd6koxy9e38v.png/lala.jpg\" }], \"form_id\" : 23423 , \"form_label\" : \"Service request form\" } } Errors \u00b6 7 \u2013 Invalid parameters. 204 \u2013 Entity not found \u2013 when the marker entry is not exists. list \u00b6 Gets marker entries on a map for trackers and for the specified time interval. required sub-user rights: employee_update . Parameters \u00b6 name description type trackers Optional. Array of tracker IDs. All trackers must not be deleted or blocked (if list_blocked=false). If not specified, all available trackers will be used as value. int array from Optional. Start date/time for searching. date/time to Optional. End date/time for searching. Must be after \"from\" date. date/time conditions Optional. Search conditions to apply to list. See Search conditions . Allowed fields are employee , location , marker_time , comment . string array sort Optional. List of sort expressions. See below. string array location Optional, location with radius, inside which check-ins must reside. Location JSON. For example, { \"lat\": 53.787154, \"lng\": 9.757980, \"radius\": 350 } limit Optional. Max number of records to return. int offset Optional, offset (starting index of first returned record), default is 0. int format Optional. If empty, JSON will be returned. Otherwise server will return file download in specified format. Can be \"pdf\" or \"xlsx\". string condition fields \u00b6 Name Type Comment employee number ID tracker_id number marker_time DateTime location string address comment string form number template's ID sort \u00b6 It's a set of sort options. Each option is a pair of field name and sorting direction, e.g. [\"location=asc\", \"employee=desc\", \"marker_time=desc\"] . sort fields \u00b6 Name Type Comment employee string full name tracker_id number marker_time DateTime location string address comment string form string label Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/checkin/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"trackers\": [616384,345623], \"from\": \"2020-08-05 03:06:00\", \"to\": \"2020-09-05 03:00:00\", \"offset\": 20, \"limit\": 100, \"format\": \"xlsx\"}' Response \u00b6 { \"success\" : true , \"list\" : [ <checki n > ], \"count\" : 22 } list - list of check-in objects. count - int. Total number of check-ins (ignoring offset and limit). Errors \u00b6 7 \u2013 Invalid parameters. 211 \u2013 Requested time span is too big. 217 \u2013 The list contains non-existent entities \u2013 if one of the specified trackers does not exist, is blocked or doesn't have required tariff features. 221 \u2013 Device limit exceeded - if device limit set for the user's dealer has been exceeded. delete \u00b6 Deletes check-ins with the specified IDs. required sub-user rights: checkin_update . Parameters \u00b6 name description type checkin_ids List of check-in IDs. int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/checkin/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"checkin_ids\": [2132,4533]}' HTTP GET https://api.navixy.com/v2/checkin/delete?hash=a6aa75587e5c59c32d347da438505fc3&checkin_ids=[2132,4533] Response \u00b6 { \"success\" : true } Errors \u00b6 7 \u2013 Invalid parameters. 201 \u2013 Not found in the database - check-ins with the specified IDs don't exist, or their corresponding trackers are not available to current sub-user. create \u00b6 Creates a new check-in. Needed for exceptional cases. required sub-user rights : checkin_update . Parameters \u00b6 name description type tracker_id ID of the tracker. Tracker must belong to authorized user and not be blocked. int location Location coordinates (see: data types description section section). JSON object comment Optional. string file_ids Optional. IDs of files created by checkin/image/create). int array form_submission Optional, only present when sending form along with check-in. If the form includes optional fields that should be left empty for your check-in, refrain from adding these fields to the form submission object. JSON object where form_submission type is JSON object: { \"form_id\" : <i nt > , // id o f t he f orm previously crea te d wi t h checki n / f orm/crea te \"values\" : { // map which co nta i ns values f or f orm f ields } } Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/checkin/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 22, \"location\": { \"lat\": 9.861999, \"lng\": -83.948999 }, \"comment\": \"houston, we have a problem\", \"file_ids\": [11, 22], \"form_submission\": { \"form_id\": 23423, \"values\": {\"111-aaa-whatever\": { \"type\": \"text\", \"value\": \"John Doe\" }} }}' Response \u00b6 { \"success\" : true , \"id\" : 111 } Errors \u00b6 7 \u2013 Invalid parameters. 201 \u2013 Not found in the database - form with the specified IDs don't exist, or their corresponding trackers are not available to current sub-user. 242 \u2013 There were errors during content validation, if given values are invalid for the form. image/create \u00b6 Creates an image for check-in. If you have multiple files to upload, be sure to add a brief delay between uploading each one to ensure a smooth process. Parameters \u00b6 name description type size Maximum size in bytes for the file which will be uploaded. This is needed to \"reserve\" the space for a file in user's disk space quota. int filename Optional. If specified, uploaded file will have the specified name. If not, name will be taken from actual file upload form. string metadata Optional. Metadata object (for images only). JSON object Response \u00b6 when using internal storage: { \"success\" : true , \"value\" : { \"file_id\" : 111 , \"url\" : \"http://bla.org/bla\" , \"expires\" : \"2020-02-03 03:04:00\" , \"file_field_name\" : \"file\" , \"fields\" : { \"token\" : \"a43f43ed4340b86c808ac\" } } } when using the Amazon S3: { \"success\" : true , \"value\" : { \"file_id\" : 111 , \"url\" : \"https://bla.s3.amazonaws.com/\" , \"expires\" : \"2020-02-03 03:04:00\" , \"file_field_name\" : \"file\" , \"fields\" : { \"policy\" : \"<Base64-encoded policy string>\" , \"key\" : \"user/user1/${filename}\" , \"success_action_status\" : \"200\" , \"x-amz-algorithm\" : \"AWS4-HMAC-SHA256\" , \"x-amz-credential\" : \"AKIAIOSFODNN7EXAMPLE/20151229/us-east-1/s3/aws4_request\" , \"x-amz-date\" : \"20151229T000000Z\" , \"x-amz-signature\" : \"<signature-value>\" , \"x-amz-server-side-encryption\" : \"AES256\" , \"content-type\" : \"image/png\" } } } file_id - int. This value will be submitted as form's field value. url - string. A URL to which POST form-data with file contents should be executed. expires - date/time. After this date file record wil expire and upload requests will be rejected. file_field_name - string. Name for file field in POST upload request. fields - these fields should be passed as additional fields in POST multipart upload request, field with a file must be the last one. How to upload file data \u00b6 Here's an example of upload you must make after receiving such response (assuming you uploading image named actual_file_name.png ): Internal storage example: POST /bla HTTP / 1.1 Host : bla.org Content-Length : 1325 Origin : http://bla.org ... other headers ... Content-Type : multipart/form-data; boundary=WebAppBoundary --WebAppBoundary Content-Disposition: form-data; name=\"token\" a43f43ed4340b86c808ac --WebAppBoundary Content-Disposition: form-data; name=\"file\"; filename=\"actual_file_name.png\" Content-Type: image/png ... contents of file goes here ... --WebAppBoundary-- Amazon S3 example: POST / HTTP / 1.1 Host : https://bla.s3.amazonaws.com Content-Length : 1972 Origin : https://bla.s3.amazonaws.com/ ... other headers ... Content-Type : multipart/form-data; boundary=WebAppBoundary --WebAppBoundary Content-Disposition: form-data; name=\"policy\" Content-Type: text/plain eyJleHBpcmF0aW9uIjogIjIwMjMtMDMtMjdUMjE6MTU6MzYuMDczWiIsImNvbmRpdGlvbnMiOiNbeyJidWNrZXQiOiAibmF2aXh5LWZpbGVzLXRlc3QtZXUifSxbInN0YXJ0cy13aXRoIiwgIiRrZXkiLCAiIl0seyJzdWNjZXNzX2FjdGlvbl9zdGF0dXMiOiAiMjAwIn0seyJ4LWFtei1hbGdvcml0aG0iOiAiQVdTNC1ITUFDLVNIQTI1NiJ9LHsieC1hbXotY3JlZGVudGlhbCI6ICJBS0lBSUJRNlNSQjY1RVZTU1JNQS8yMDIzMDMyNy9ldS1jZW50cmFsLTEvczMvYXdzNF9yZXF1ZXN0In0seyJ4LWFtei1kYXRlIjogIjIwMjMwMzI3VDIxMDAzNloifSx7IngtYW16LXNlcnZlci1zaWRlLWVuY3J5cHRpb24iOiAiQUVTMjU2In1dfQ== --WebAppBoundary Content-Disposition: form-data; name=\"key\" Content-Type: text/plain nj9relv6m52qp01t0wv47wyk1ozd309g/${filename} --WebAppBoundary Content-Disposition: form-data; name=\"success_action_status\" Content-Type: text/plain 200 --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-algorithm\" Content-Type: text/plain AWS4-HMAC-SHA256 --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-credential\" Content-Type: text/plain AKIAIBQ6SRB65EVSSRMA/20230327/eu-central-1/s3/aws4_request --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-date\" Content-Type: text/plain 20230327T210036Z --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-signature\" Content-Type: text/plain 2df7efa0c0e0c5b97d0d9483acd77c9ec37360df921b019a4c4a93180a6136ad --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-server-side-encryption\" Content-Type: text/plain AES256 --WebAppBoundary Content-Disposition: form-data; name=\"file\"; filename=\"actual_file_name.png\" Content-Type: image/png ... contents of file goes here ... --WebAppBoundary-- Errors \u00b6 268 \u2013 File cannot be created due to quota violation. 271 \u2013 File size is larger than the maximum allowed (by default 16 MB). form/create \u00b6 Creates a new form that can be attached to a check-in. Form always created on the basis of form template. Parameters \u00b6 name description type tracker_id ID of the tracker. Tracker must belong to authorized user and not be blocked. int template_id ID of the form template. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/checkin/form/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 22, \"template_id\": 12548}' HTTP GET https://api.navixy.com/v2/checkin/form/create?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=22&template_id=12548 Response \u00b6 { \"success\" : true , \"id\" : 23423 } Errors \u00b6 201 \u2013 Not found in the database - if there is no template with such an ID. form/file/create \u00b6 Creates a new file entry associated with form's field. If you have multiple files to upload, be sure to add a brief delay between uploading each one to ensure a smooth process. Parameters \u00b6 name description type checkin_id ID of the check-in to which form attached. int form_id ID of the form. int field_id ID of the form's field to which a new file should be attached. string size Maximum size in bytes for the file which will be uploaded. This is needed to \"reserve\" the space for a file in user's disk space quota. int filename Optional. If specified, uploaded file will have the specified name. If not, name will be taken from actual file upload form. string metadata Optional. Metadata object (for images only). JSON object Use only one parameter checkin_id or form_id . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/checkin/form/file/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"checkin_id\": 1, \"field_id\": \"111-aaa-whatever\", \"size\": 101}' Response \u00b6 The response and update process are same to image/create . file_id - int. This value will be submitted as form's field value. url - string. A URL to which POST form-data with file contents should be executed. expires - date/time. After this date file record wil expire and upload requests will be rejected. file_field_name - string. Name for file field in POST upload request. fields - these fields should be passed as additional fields in POST multipart upload request, field with a file must be the last one. Errors \u00b6 201 \u2013 Not found in the database - if there is no check-in with such an ID, or check-in doesn't have form, or form has no field with such a field_id. 231 \u2013 Entity type mismatch - if form field is not file-based, i.e. doesn't use file ID as its value. 267 \u2013 Too many entities - if there are 6 or more unsubmitted files already associated with this form's field. 268 \u2013 File cannot be created due to quota violation. 271 \u2013 File size is larger than the maximum allowed (by default 16 MB).","title":"Checkin"},{"location":"backend-api/resources/field_service/checkin/#check-ins","text":"Here's the corrected version: Check-ins are created using the Mobile Tracker App ( Android / iOS ). They contain date/time, address, coordinates, and additional information (comment, photo, filled form) provided by the app user after pressing \"Check-in\" in the tracker app. Using check-ins, field personnel can provide real-time information to their HQ while on site. For example, they can provide photo proof of work completed or notify about a malfunction, along with a filled form describing the issue. Check-ins cannot be created using the web API ( create is needed for exceptional cases and described in the guide ), so all actions are read-only.","title":"Check-ins"},{"location":"backend-api/resources/field_service/checkin/#check-in-object","text":"{ \"id\" : 1 , \"marker_time\" : \"2017-03-15 12:36:27\" , \"user_id\" : 111 , \"tracker_id\" : 222 , \"employee_id\" : 333 , \"location\" : { \"lat\" : 53.787154 , \"lng\" : 9.757980 , \"address\" : \"Moltkestrasse 32\" , \"precision\" : 150 }, \"comment\" : \"houston, we have a problem\" , \"files\" : [{ \"id\" : 16 , \"storage_id\" : 1 , \"user_id\" : 12203 , \"type\" : \"image\" , \"created\" : \"2017-09-06 11:54:28\" , \"uploaded\" : \"2017-09-06 11:55:14\" , \"name\" : \"lala.jpg\" , \"size\" : 72594 , \"mime_type\" : \"image/png\" , \"metadata\" : { \"orientation\" : 1 }, \"state\" : \"uploaded\" , \"download_url\" : \"https://static.navixy.com/file/dl/1/0/1g/01gw2j5q7nm4r92dytolzd6koxy9e38v.png/lala.jpg\" }], \"form_id\" : 23423 , \"form_label\" : \"Service request form\" } id - int. An ID of a check-in. marker_time - date/time . Non-null. The time of check-in creation. user_id - int. Non-null. An ID of the master user. tracker_id - int. Non-null. An ID of the tracker which created this check-in. employee_id - optional int. An ID of the employee assigned to the tracker. location - non-null object. Location associated with this check-in marker. address - string. Address of the location. comment - optional string. A comment provided by app user. files - list of objects. Non-null. May be empty. id - int. File ID. storage_id - int. Storage ID. user_id - int. An ID of the user. type - enum . Can be \"image\" | \"file\". created - date/time . Date when file created. uploaded - date/time . Date when file uploaded, can be null if file not yet uploaded. name - string. A name of the file. size int. File size in bytes. If file not uploaded, show maximum allowed size for an upload. metadata - metadata object. orientation - int. Image exif orientation. state - enum . Can be \"created\" | \"in_progress\" | \"uploaded\" | \"deleted\". download_url - string. Actual URL at which file is available. Can be null if file not yet uploaded. form_id - int. An ID of the form which was sent along with a check-in, can be null. form_label - string. Label of the form which was sent along with a check-in, can be null.","title":"Check-in object"},{"location":"backend-api/resources/field_service/checkin/#api-actions","text":"API path: /checkin .","title":"API actions"},{"location":"backend-api/resources/field_service/checkin/#read","text":"Get check-in which ID is equal to checkin_id . required sub-user rights: employee_update .","title":"read"},{"location":"backend-api/resources/field_service/checkin/#list","text":"Gets marker entries on a map for trackers and for the specified time interval. required sub-user rights: employee_update .","title":"list"},{"location":"backend-api/resources/field_service/checkin/#delete","text":"Deletes check-ins with the specified IDs. required sub-user rights: checkin_update .","title":"delete"},{"location":"backend-api/resources/field_service/checkin/#create","text":"Creates a new check-in. Needed for exceptional cases. required sub-user rights : checkin_update .","title":"create"},{"location":"backend-api/resources/field_service/checkin/#imagecreate","text":"Creates an image for check-in. If you have multiple files to upload, be sure to add a brief delay between uploading each one to ensure a smooth process.","title":"image/create"},{"location":"backend-api/resources/field_service/checkin/#formcreate","text":"Creates a new form that can be attached to a check-in. Form always created on the basis of form template.","title":"form/create"},{"location":"backend-api/resources/field_service/checkin/#formfilecreate","text":"Creates a new file entry associated with form's field. If you have multiple files to upload, be sure to add a brief delay between uploading each one to ensure a smooth process.","title":"form/file/create"},{"location":"backend-api/resources/field_service/department/","text":"Departments \u00b6 Department is essentially just a group of employees . They can be assigned to departments by specifying non-null department_id . Department object \u00b6 { \"id\" : 222 , \"label\" : \"Drivers\" , \"location\" : { \"lat\" : 46.9 , \"lng\" : 7.4 , \"address\" : \"Rosenweg 3\" , \"radius\" : 150 } } id - int. An ID of department. label - string. Name of department. location - optional object. Location associated with these departments. Should be valid or null. address - string. Address of the location. radius - int. Radius of location zone in meters. API actions \u00b6 API base path: /department . list \u00b6 Gets all departments belonging to user. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/department/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/department/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 222 , \"label\" : \"Drivers\" , \"location\" : { \"lat\" : 46.9 , \"lng\" : 7.4 , \"address\" : \"Rosenweg 3\" , \"radius\" : 150 } }] } Errors \u00b6 7 \u2013 Invalid parameters. 217 \u2013 The list contains non-existent entities \u2013 if one of the specified trackers does not exist, is blocked or doesn't have required tariff features. 221 \u2013 Device limit exceeded - if device limit set for the user\u2019s dealer has been exceeded. create \u00b6 Creates a new department with specified parameters. required sub-user rights: employee_update . Parameters \u00b6 name description type department An department object without id field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/department/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"department\": {\"label\": \"My Department\", \"location\": {\"lat\": 46.9, \"lng\": 7.4, \"address\": \"Rosenweg 3\", \"radius\": 50}}' Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. An ID of the created department. Errors \u00b6 7 \u2013 Invalid parameters. 217 \u2013 The list contains non-existent entities \u2013 if one of the specified trackers does not exist, is blocked or doesn't have required tariff features. 221 \u2013 Device limit exceeded - if device limit set for the user\u2019s dealer has been exceeded. update \u00b6 Updates existing department with a new specified parameters. required sub-user rights: employee_update . Parameters \u00b6 name description type department An department object . JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/department/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"department\": {\"id\": 111, \"label\": \"My Department\", \"location\": {\"lat\": 46.9, \"lng\": 7.4, \"address\": \"Rosenweg 3\", \"radius\": 50}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no department with specified ID. delete \u00b6 Deletes department with the specified ID. required sub-user rights: employee_update . Parameters \u00b6 name description type department_id An ID of the department. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/department/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"department_id\": 111}' HTTP GET https://api.navixy.com/v2/department/delete?hash=a6aa75587e5c59c32d347da438505fc3&department_id=111 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no department with specified ID.","title":"Department"},{"location":"backend-api/resources/field_service/department/#departments","text":"Department is essentially just a group of employees . They can be assigned to departments by specifying non-null department_id .","title":"Departments"},{"location":"backend-api/resources/field_service/department/#department-object","text":"{ \"id\" : 222 , \"label\" : \"Drivers\" , \"location\" : { \"lat\" : 46.9 , \"lng\" : 7.4 , \"address\" : \"Rosenweg 3\" , \"radius\" : 150 } } id - int. An ID of department. label - string. Name of department. location - optional object. Location associated with these departments. Should be valid or null. address - string. Address of the location. radius - int. Radius of location zone in meters.","title":"Department object"},{"location":"backend-api/resources/field_service/department/#api-actions","text":"API base path: /department .","title":"API actions"},{"location":"backend-api/resources/field_service/department/#list","text":"Gets all departments belonging to user.","title":"list"},{"location":"backend-api/resources/field_service/department/#create","text":"Creates a new department with specified parameters. required sub-user rights: employee_update .","title":"create"},{"location":"backend-api/resources/field_service/department/#update","text":"Updates existing department with a new specified parameters. required sub-user rights: employee_update .","title":"update"},{"location":"backend-api/resources/field_service/department/#delete","text":"Deletes department with the specified ID. required sub-user rights: employee_update .","title":"delete"},{"location":"backend-api/resources/field_service/employee/","text":"Working with employees and drivers \u00b6 Employees and drivers used to represent people working at one's organization. They can be linked with other entities such as trackers, vehicles, places, etc. Employee object \u00b6 { \"id\" : 222 , \"tracker_id\" : null , \"first_name\" : \"John\" , \"middle_name\" : \"Jane\" , \"last_name\" : \"Smith\" , \"email\" : \"smith@example.com\" , \"phone\" : \"442071111111\" , \"driver_license_number\" : \"SKIMP407952HJ9GK 06\" , \"driver_license_cats\" : \"C\" , \"driver_license_issue_date\" : \"2008-01-01\" , \"driver_license_valid_till\" : \"2018-01-01\" , \"hardware_key\" : null , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"department_id\" : null , \"location\" : { \"lat\" : 52.5 , \"lng\" : 13.4 , \"address\" : \"Engeldamm 18\" }, \"personnel_number\" : \"1059236\" , \"ssn\" : \"123-45-6789\" , \"tags\" : [ 1 , 2 ] } id - int. Internal ID. Can be passed as null only for \"create\" action. tracker_id - int. An ID of the tracker currently assigned to this employee or driver. null means no tracker assigned. first_name - string. First name. Cannot be empty. Max 100 characters. middle_name - string. Middle name. Can be empty, cannot be null. Max 100 characters. last_name - string. Last name. Can be empty, cannot be null. Max 100 characters. email - string. Employee's email. Must be valid email address. Can be empty, cannot be null. Max 100 characters. phone - string. Employee's phone without \"+\" sign. Can be empty, cannot be null. Max 32 characters. driver_license_number - string. Driver license number. Can be empty, cannot be null. Max 32 characters. driver_license_cats - string. Driver license categories. Max 32 characters. driver_license_issue_date - string date (yyyy-MM-dd). Issue date of a driver license. Can be null. driver_license_valid_till - string date (yyyy-MM-dd). Date till a driver license valid. Can be null. hardware_key - string. A hardware key. Can be null. Max 64 characters. icon_id - int. An icon ID. Can be null, can only be updated via avatar/assign . avatar_file_name - string. A name of the updated avatar file. Nullable, can only be updated via avatar/upload . department_id - int. An ID of the department to which employee assigned. Can be null. location - optional object. Location associated with this employee, should be valid or null. address - string. Address of the location. personnel_number - optional string. Max length is 15. ssn - optional string. Social Security number. Max length is 32. tags - int array. List of tag IDs. API actions \u00b6 API base path: /employee . list \u00b6 Gets all employees and drivers belonging to user. Parameters \u00b6 name description type limit Pagination. Maximum number of employee records to return. int offset Pagination. Get employee records starting from. int sort Optional. Set of sort options. Each option is a pair of property name and sorting direction, e.g. [\"first_name=desc\",\"object_label=asc\"] . Maximum 2 options in request. Available properties: - ID - first_name - object_label - department_label - personnel_number - hardware_key - phone - email - address - driver_license_number - driver_license_cats - driver_license_valid_till - driver_license_valid_till - ssn string array filter Get a list of employees filtered by properties, at least one property must contain the desired string. All properties from the sorting list are used in filtering. Maximum 100 characters or null. string Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/employee/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/employee/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [ <employee> ], \"count\" : 12 } list - a list of employees. count - int. Total number of employees (ignoring offset and limit). Errors \u00b6 General types only. create \u00b6 Creates a new employee/driver. required sub-user rights : employee_update . Parameters \u00b6 name description type employee An employee object without id field. Non-null. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/employee/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"employee\": {\"tracker_id\": 625987, \"first_name\": \"John\", \"middle_name\": \"Jane\", \"last_name\": \"Smith\", \"email\": \"smith@example.com\", \"phone\": \"442071111111\", \"driver_license_number\": \"SKIMP407952HJ9GK 06\", \"driver_license_cats\": \"C\", \"driver_license_valid_till\": \"2018-01-01\", \"hardware_key\": null, \"icon_id\" : 55, \"avatar_file_name\": null, \"department_id\": null, \"location\": {\"lat\": 52.5, \"lng\": 13.4, \"address\": \"Engeldamm 18\"}, \"personnel_number\": \"1059236\", \"tags\": [1,2]}' Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. An ID of the created employee (driver). Errors \u00b6 247 \u2013 Entity already exists, if tracker_id !=null and exists an employee that already bound to this tracker_id . read \u00b6 Gets employee/driver by his ID. Parameters \u00b6 name description type employee_id ID of an employee. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/employee/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"employee_id\": 111}' HTTP GET https://api.navixy.com/v2/employee/read?hash=a6aa75587e5c59c32d347da438505fc3&employee_id=111 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 222 , \"tracker_id\" : null , \"first_name\" : \"John\" , \"middle_name\" : \"Jane\" , \"last_name\" : \"Smith\" , \"email\" : \"smith@example.com\" , \"phone\" : \"442071111111\" , \"driver_license_number\" : \"SKIMP407952HJ9GK 06\" , \"driver_license_cats\" : \"C\" , \"driver_license_issue_date\" : \"2008-01-01\" , \"driver_license_valid_till\" : \"2018-01-01\" , \"hardware_key\" : null , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"department_id\" : null , \"location\" : { \"lat\" : 52.5 , \"lng\" : 13.4 , \"address\" : \"Engeldamm 18\" }, \"personnel_number\" : \"1059236\" , \"ssn\" : \"123-45-6789\" , \"tags\" : [ 1 , 2 ] } } value - an employee object. Errors \u00b6 201 \u2013 Not found in the database - if there is no employee/driver with such an ID. update \u00b6 Updates existing employee/driver. required sub-user rights : employee_update . Parameters \u00b6 name description type employee An employee object with id field. Non-null. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/employee/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"employee\": {\"employee_id\": 111, \"tracker_id\": 625987, \"first_name\": \"John\", \"middle_name\": \"Jane\", \"last_name\": \"Smith\", \"email\": \"smith@example.com\", \"phone\": \"442071111111\", \"driver_license_number\": \"SKIMP407952HJ9GK 06\", \"driver_license_cats\": \"C\", \"driver_license_valid_till\": \"2018-01-01\", \"hardware_key\": null, \"icon_id\" : 55, \"avatar_file_name\": null, \"department_id\": null, \"location\": {\"lat\": 52.5, \"lng\": 13.4, \"address\": \"Engeldamm 18\"}, \"personnel_number\": \"1059236\", \"tags\": [1,2]}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no employee/driver with such an ID. 247 \u2013 Entity already exists, if tracker_id !=null and exists an employee that already bound to this tracker_id . delete \u00b6 Deletes an employee/driver with the specified ID. required sub-user rights : employee_update . Parameters \u00b6 name description type employee_id ID of an employee (driver) to delete. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/employee/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"employee_id\": 111}' HTTP GET https://api.navixy.com/v2/employee/delete?hash=a6aa75587e5c59c32d347da438505fc3&employee_id=111 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no employee/driver with such an ID. batch_convert \u00b6 Converts batch of tab-delimited employees/drivers and returns list of checked employees/drivers with errors. Required sub-user rights: employee_update . Parameters \u00b6 name description type batch Batch of tab-delimited employees/drivers. string file_id Preloaded file ID. string fields Optional. Array of field names. Default is [\"first_name\", \"middle_name\", \"last_name\", \"email\", \"phone\"] . string array geocoder Geocoder type. string default_radius Optional. Radius for point in meters. Default is 100. int If file_id is set \u2013 batch parameter will be ignored. Response \u00b6 { \"success\" : true , \"list\" : [{ \"success\" : true , \"value\" : { \"id\" : 222 , \"tracker_id\" : null , \"first_name\" : \"John\" , \"middle_name\" : \"Jane\" , \"last_name\" : \"Smith\" , \"email\" : \"smith@example.com\" , \"phone\" : \"442071111111\" , \"driver_license_number\" : \"SKIMP407952HJ9GK 06\" , \"driver_license_cats\" : \"C\" , \"driver_license_issue_date\" : \"2008-01-01\" , \"driver_license_valid_till\" : \"2018-01-01\" , \"hardware_key\" : null , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"department_id\" : null , \"location\" : { \"lat\" : 52.5 , \"lng\" : 13.4 , \"address\" : \"Engeldamm 18\" }, \"personnel_number\" : \"1059236\" , \"ssn\" : \"123-45-6789\" , \"tags\" : [ 1 , 2 ], \"errors\" : <array_o f _objec ts > } }], \"limit_exceeded\" : false } list - list of checked employees/drivers. errors - optional array of errors. limit_exceeded - boolean. true if given batch constrained by a limit. Errors \u00b6 234 - Invalid data format.","title":"Index"},{"location":"backend-api/resources/field_service/employee/#working-with-employees-and-drivers","text":"Employees and drivers used to represent people working at one's organization. They can be linked with other entities such as trackers, vehicles, places, etc.","title":"Working with employees and drivers"},{"location":"backend-api/resources/field_service/employee/#employee-object","text":"{ \"id\" : 222 , \"tracker_id\" : null , \"first_name\" : \"John\" , \"middle_name\" : \"Jane\" , \"last_name\" : \"Smith\" , \"email\" : \"smith@example.com\" , \"phone\" : \"442071111111\" , \"driver_license_number\" : \"SKIMP407952HJ9GK 06\" , \"driver_license_cats\" : \"C\" , \"driver_license_issue_date\" : \"2008-01-01\" , \"driver_license_valid_till\" : \"2018-01-01\" , \"hardware_key\" : null , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"department_id\" : null , \"location\" : { \"lat\" : 52.5 , \"lng\" : 13.4 , \"address\" : \"Engeldamm 18\" }, \"personnel_number\" : \"1059236\" , \"ssn\" : \"123-45-6789\" , \"tags\" : [ 1 , 2 ] } id - int. Internal ID. Can be passed as null only for \"create\" action. tracker_id - int. An ID of the tracker currently assigned to this employee or driver. null means no tracker assigned. first_name - string. First name. Cannot be empty. Max 100 characters. middle_name - string. Middle name. Can be empty, cannot be null. Max 100 characters. last_name - string. Last name. Can be empty, cannot be null. Max 100 characters. email - string. Employee's email. Must be valid email address. Can be empty, cannot be null. Max 100 characters. phone - string. Employee's phone without \"+\" sign. Can be empty, cannot be null. Max 32 characters. driver_license_number - string. Driver license number. Can be empty, cannot be null. Max 32 characters. driver_license_cats - string. Driver license categories. Max 32 characters. driver_license_issue_date - string date (yyyy-MM-dd). Issue date of a driver license. Can be null. driver_license_valid_till - string date (yyyy-MM-dd). Date till a driver license valid. Can be null. hardware_key - string. A hardware key. Can be null. Max 64 characters. icon_id - int. An icon ID. Can be null, can only be updated via avatar/assign . avatar_file_name - string. A name of the updated avatar file. Nullable, can only be updated via avatar/upload . department_id - int. An ID of the department to which employee assigned. Can be null. location - optional object. Location associated with this employee, should be valid or null. address - string. Address of the location. personnel_number - optional string. Max length is 15. ssn - optional string. Social Security number. Max length is 32. tags - int array. List of tag IDs.","title":"Employee object"},{"location":"backend-api/resources/field_service/employee/#api-actions","text":"API base path: /employee .","title":"API actions"},{"location":"backend-api/resources/field_service/employee/#list","text":"Gets all employees and drivers belonging to user.","title":"list"},{"location":"backend-api/resources/field_service/employee/#create","text":"Creates a new employee/driver. required sub-user rights : employee_update .","title":"create"},{"location":"backend-api/resources/field_service/employee/#read","text":"Gets employee/driver by his ID.","title":"read"},{"location":"backend-api/resources/field_service/employee/#update","text":"Updates existing employee/driver. required sub-user rights : employee_update .","title":"update"},{"location":"backend-api/resources/field_service/employee/#delete","text":"Deletes an employee/driver with the specified ID. required sub-user rights : employee_update .","title":"delete"},{"location":"backend-api/resources/field_service/employee/#batch_convert","text":"Converts batch of tab-delimited employees/drivers and returns list of checked employees/drivers with errors. Required sub-user rights: employee_update .","title":"batch_convert"},{"location":"backend-api/resources/field_service/employee/avatar/","text":"Changing avatar \u00b6 Avatars can't be changed through /employee/update , you must use either assign (to set avatar to one of preset icons), or upload (to upload your own image). API actions \u00b6 API path: /employee/avatar . assign \u00b6 Assign icon_id (from standard icon set) to this employee/driver. The icon_id can be null \u2013 this means that uploaded avatar should be used instead of icon. required sub-user rights : employee_update . Parameters \u00b6 name description type employee_id ID of the employee/driver to whom the icon will assign. int icon_id ID of the icon. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/employee/avatar/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"employee_id\": 2132, \"icon_id\": 3654}' HTTP GET https://api.navixy.com/v2/employee/avatar/assign?hash=a6aa75587e5c59c32d347da438505fc3&employee_id=2132&icon_id=3654 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - when employee/driver with employee_id not found. upload \u00b6 Uploads avatar image for specified employee/driver. Then it will be available from /employee/avatars/ e.g. https://api.navixy.com/v2/static/employee/avatars/abcdef123456789.png . required sub-user rights : employee_update . avatar_file_name returned in response and will be returned from /employee/list . MUST be a POST multipart request (multipart/form-data), with one of the parts being an image file upload (with the name file ). File part mime type must be one of: image/jpeg image/pjpeg image/png image/gif image/webp Parameters \u00b6 name description type employee_id ID of the employee/driver to whom the icon will assign. int file Image file. string redirect_target Optional. URL to redirect. If passed returns redirect to ?response= . string Response \u00b6 { \"success\" : true , \"value\" : \"picture.png\" } value - string. Uploaded file name. Errors \u00b6 201 \u2013 Not found in the database - when employee/driver with employee_id not found. 233 \u2013 No data file - if file part not passed. 234 \u2013 Invalid data format - if passed file with unexpected mime type. 254 \u2013 Cannot save file - on some file system errors.","title":"Avatar"},{"location":"backend-api/resources/field_service/employee/avatar/#changing-avatar","text":"Avatars can't be changed through /employee/update , you must use either assign (to set avatar to one of preset icons), or upload (to upload your own image).","title":"Changing avatar"},{"location":"backend-api/resources/field_service/employee/avatar/#api-actions","text":"API path: /employee/avatar .","title":"API actions"},{"location":"backend-api/resources/field_service/employee/avatar/#assign","text":"Assign icon_id (from standard icon set) to this employee/driver. The icon_id can be null \u2013 this means that uploaded avatar should be used instead of icon. required sub-user rights : employee_update .","title":"assign"},{"location":"backend-api/resources/field_service/employee/avatar/#upload","text":"Uploads avatar image for specified employee/driver. Then it will be available from /employee/avatars/ e.g. https://api.navixy.com/v2/static/employee/avatars/abcdef123456789.png . required sub-user rights : employee_update . avatar_file_name returned in response and will be returned from /employee/list . MUST be a POST multipart request (multipart/form-data), with one of the parts being an image file upload (with the name file ). File part mime type must be one of: image/jpeg image/pjpeg image/png image/gif image/webp","title":"upload"},{"location":"backend-api/resources/field_service/employee/import/","text":"API actions \u00b6 API calls to import employees. API actions \u00b6 API path: /employee/import/ . start \u00b6 Starting the background process of importing employees. Parameters \u00b6 name description type filename Name of file preloaded with /data/spreadsheet/parse string headers List of files' headers, see available fields above string array user_headers Optional. List of user labels for headers string array Available fields: first_name middle_name last_name email phone driver_license_number driver_license_cats driver_license_issue_date driver_license_valid_till hardware_key address lat lng radius personnel_number ssn tracker_label tags undefined (if a meaning of a field is not known) Response \u00b6 { \"success\" : true , \"id\" : <i nt > } Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/employee/import/start\" \\ -H \"Content-Type: application/json\" \\ --data-binary @- << EOF { \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"filename\": \"tmp-sheet640571613016981796.tsv\", \"headers\": [\"label\", \"model\", \"max_speed\", \"type\", \"subtype\", \"reg_number\", \"fuel_grade\", \"fuel_tank_volume\", \"free_insurance_policy_number\", \"free_insurance_valid_till\", \"tracker_label\", \"tags\"], \"user_headers\": [ \"Model\", \"Max speed\", \"Type\", \"Subtype\", \"Reg. number\", \"Fuel grade\", \"Fuel tank volume\", \"Free insurance policy number\", \"Free insurance valid till\", \"Object\", \"Tags\"] } EOF Errors \u00b6 15 - Too many requests (rate limit exceeded) - if too many imports in progress 233 - No data file 234 - Invalid data format 247 - Entity already exists - there is another identical import with the same file read \u00b6 Returns an import process with specified ID. Parameters \u00b6 name description type process_id Process ID int Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : <i nt > , \"user_id\" : <i nt > , \"created\" : <da te > , \"type\" : \"Employee\" , \"params\" : { \"headers\" : [ <s tr i n g> , <s tr i n g> , ... ] // Lis t o f f iles' headers }, \"filename\" : <s tr i n g> , // Name o f preloaded TSV. \"status\" : <s tr i n g> , // crea te d | i n _progress | do ne | fa iled | f i n ished \"status_change_date\" : <da te > , \"progress\" : { \"imported\" : <i nt > , \"failed\" : <i nt > , \"percent\" : <i nt > , // approxima te perce nta ge o f processed \"processed_lines\" : <i nt > , \"warnings\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 \"errors\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 } } } Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/employee/import/read\" \\ -H \"Content-Type: application/json\" \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"process_id\": 1}' Errors \u00b6 201 \u2013 Not found in database (if import is not found) list \u00b6 Returns the list of the user's employee import processes. Response \u00b6 { \"success\" : true , \"list\" : [ { \"id\" : <i nt > , \"user_id\" : <i nt > , \"created\" : <da te > , \"type\" : \"Employee\" , \"params\" : { \"headers\" : [ <s tr i n g> , <s tr i n g> , ... ] // Lis t o f f iles' headers }, \"filename\" : <s tr i n g> , // Name o f preloaded TSV. \"status\" : <s tr i n g> , // crea te d | i n _progress | do ne | fa iled \"status_change_date\" : <da te > , \"progress\" : { \"imported\" : <i nt > , \"failed\" : <i nt > , \"percent\" : <i nt > , // approxima te perce nta ge o f processed \"processed_lines\" : <i nt > , \"warnings\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 \"errors\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 } }, ... ] } Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/employee/import/list\" \\ -H \"Content-Type: application/json\" \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' download_failed \u00b6 Retrieve a file with lines that contained errors and did not pass validation. Parameters \u00b6 name description type process_id Process ID int Response \u00b6 File (standard file download). Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/employee/import/download_failed\" \\ -H \"Content-Type: application/json\" \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"process_id\": 7}' Errors \u00b6 201 \u2013 Not found in database (if import is not found) 204 \u2013 Entity not found (if file is not found)","title":"Import"},{"location":"backend-api/resources/field_service/employee/import/#api-actions","text":"API calls to import employees.","title":"API actions"},{"location":"backend-api/resources/field_service/employee/import/#api-actions_1","text":"API path: /employee/import/ .","title":"API actions"},{"location":"backend-api/resources/field_service/employee/import/#start","text":"Starting the background process of importing employees.","title":"start"},{"location":"backend-api/resources/field_service/employee/import/#read","text":"Returns an import process with specified ID.","title":"read"},{"location":"backend-api/resources/field_service/employee/import/#list","text":"Returns the list of the user's employee import processes.","title":"list"},{"location":"backend-api/resources/field_service/employee/import/#download_failed","text":"Retrieve a file with lines that contained errors and did not pass validation.","title":"download_failed"},{"location":"backend-api/resources/field_service/form/","text":"About forms \u00b6 Forms used to provide additional information, such as user's name, phone, delivery date, etc. upon task completion or check-in from iOS/Android mobile tracker app. Forms can be attached to tasks. If form attached to task, this task cannot be completed without form submission. Each form must be created from template, read more at Templates For description of <form_field> and <field_value> , see Form fields and values Using web API, it's now possible to only attach/fill forms with tasks (checkin forms are created through Android/iOS tracker applications). See Task form actions to use forms with tasks. Find comprehinsive information on forms usage in our instructions . Form object \u00b6 { \"id\" : 2 , \"label\" : \"Order form\" , \"fields\" : [ { \"id\" : \"111-aaa-whatever\" , \"label\" : \"Name\" , \"description\" : \"Your full name\" , \"required\" : true , \"min_length\" : 5 , \"max_length\" : 255 , \"type\" : \"text\" } ], \"created\" : \"2017-03-15 12:36:27\" , \"submit_in_zone\" : true , \"task_id\" : 1 , \"template_id\" : 1 , \"values\" : { \"111-aaa-whatever\" : { \"type\" : \"text\" , \"value\" : \"John Doe\" } }, \"submitted\" : \"2017-03-21 18:40:54\" , \"submit_location\" : { \"lat\" : 11.0 , \"lng\" : 22.0 , \"address\" : \"Wall Street, NY\" } } id - int. Form unique ID. label - string. User-defined form label, from 1 to 100 characters. fields - array of multiple form_field objects. created - date/time . Date when this form created (or attached to the task). The read-only field. submit_in_zone - boolean. If true , form can be submitted only in task zone. task_id - int. An ID of the task to which this form attached. template_id - int. An ID of the form template on which this form based. Can be null if template deleted. values - a map with field IDs as keys and field_value objects as values. Can be null if form not filled. key - string. Key used to link field and its corresponding value. submitted - date/time . Date when form values last submitted. submit_location - location at which form values last submitted. Form file object \u00b6 { \"id\" : 16 , \"storage_id\" : 1 , \"user_id\" : 12203 , \"type\" : \"image\" , \"created\" : \"2017-09-06 11:54:28\" , \"uploaded\" : \"2017-09-06 11:55:14\" , \"name\" : \"lala.jpg\" , \"size\" : 72594 , \"mime_type\" : \"image/png\" , \"metadata\" : <me ta da ta _objec t > , \"state\" : \"uploaded\" , \"download_url\" : \"https://static.navixy.com/file/dl/1/0/1g/01gw2j5q7nm4r92dytolzd6koxy9e38v.png/lala.jpg\" } id - int. File ID. type - enum . Can be \"image\" or \"file\". created - date/time . Date when file created. uploaded - date/time . Date when file uploaded. Can be null if file not yet uploaded. name - string. A filename. size - int. Size in bytes. If file not uploaded, show maximum allowed size for the upload. metadata - nullable metadata object. state - enum . Can be \"created\" | \"in_progress\" | \"uploaded\" | \"deleted\". download_url - string. Actual URL at which file is available. Can be null if file not yet uploaded. API actions \u00b6 API path: /form . read \u00b6 Gets form by an ID. Parameters \u00b6 name description type id ID of the form. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/form/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"id\": 2}' HTTP GET https://api.navixy.com/v2/form/read?hash=a6aa75587e5c59c32d347da438505fc3&id=2 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 2 , \"label\" : \"Order form\" , \"fields\" : [ { \"id\" : \"111-aaa-whatever\" , \"label\" : \"Name\" , \"description\" : \"Your full name\" , \"required\" : true , \"min_length\" : 5 , \"max_length\" : 255 , \"type\" : \"text\" } ], \"created\" : \"2017-03-15 12:36:27\" , \"submit_in_zone\" : true , \"task_id\" : 1 , \"template_id\" : 1 , \"values\" : { \"111-aaa-whatever\" : { \"type\" : \"text\" , \"value\" : \"John Doe\" } }, \"submitted\" : \"2017-03-21 18:40:54\" , \"submit_location\" : { \"lat\" : 11.0 , \"lng\" : 22.0 , \"address\" : \"Wall Street, NY\" } }, \"files\" : [{ \"id\" : 16 , \"storage_id\" : 1 , \"user_id\" : 12203 , \"type\" : \"image\" , \"created\" : \"2017-09-06 11:54:28\" , \"uploaded\" : \"2017-09-06 11:55:14\" , \"name\" : \"lala.jpg\" , \"size\" : 72594 , \"mime_type\" : \"image/png\" , \"metadata\" : { \"orientation\" : 1 }, \"state\" : \"uploaded\" , \"download_url\" : \"https://static.navixy.com/file/dl/1/0/1g/01gw2j5q7nm4r92dytolzd6koxy9e38v.png/lala.jpg\" }] } value - A form object . files - list of form_file objects . Files used in values of this form. Can be null or empty. Errors \u00b6 201 \u2013 Not found in the database - if there is no form with such an ID. download \u00b6 Downloads form as a file by an ID. Parameters \u00b6 name description type id ID of the form. int format File format. Can be \"pdf\" or \"xlsx\". enum Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/form/download' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"id\": 2, \"format\": \"pdf\"}' HTTP GET https://api.navixy.com/v2/form/download?hash=a6aa75587e5c59c32d347da438505fc3&id=2&format=pdf Response \u00b6 Regular file download, or JSON with an error. Errors \u00b6 201 \u2013 Not found in the database - if there is no form with such an ID.","title":"About forms"},{"location":"backend-api/resources/field_service/form/#about-forms","text":"Forms used to provide additional information, such as user's name, phone, delivery date, etc. upon task completion or check-in from iOS/Android mobile tracker app. Forms can be attached to tasks. If form attached to task, this task cannot be completed without form submission. Each form must be created from template, read more at Templates For description of <form_field> and <field_value> , see Form fields and values Using web API, it's now possible to only attach/fill forms with tasks (checkin forms are created through Android/iOS tracker applications). See Task form actions to use forms with tasks. Find comprehinsive information on forms usage in our instructions .","title":"About forms"},{"location":"backend-api/resources/field_service/form/#form-object","text":"{ \"id\" : 2 , \"label\" : \"Order form\" , \"fields\" : [ { \"id\" : \"111-aaa-whatever\" , \"label\" : \"Name\" , \"description\" : \"Your full name\" , \"required\" : true , \"min_length\" : 5 , \"max_length\" : 255 , \"type\" : \"text\" } ], \"created\" : \"2017-03-15 12:36:27\" , \"submit_in_zone\" : true , \"task_id\" : 1 , \"template_id\" : 1 , \"values\" : { \"111-aaa-whatever\" : { \"type\" : \"text\" , \"value\" : \"John Doe\" } }, \"submitted\" : \"2017-03-21 18:40:54\" , \"submit_location\" : { \"lat\" : 11.0 , \"lng\" : 22.0 , \"address\" : \"Wall Street, NY\" } } id - int. Form unique ID. label - string. User-defined form label, from 1 to 100 characters. fields - array of multiple form_field objects. created - date/time . Date when this form created (or attached to the task). The read-only field. submit_in_zone - boolean. If true , form can be submitted only in task zone. task_id - int. An ID of the task to which this form attached. template_id - int. An ID of the form template on which this form based. Can be null if template deleted. values - a map with field IDs as keys and field_value objects as values. Can be null if form not filled. key - string. Key used to link field and its corresponding value. submitted - date/time . Date when form values last submitted. submit_location - location at which form values last submitted.","title":"Form object"},{"location":"backend-api/resources/field_service/form/#form-file-object","text":"{ \"id\" : 16 , \"storage_id\" : 1 , \"user_id\" : 12203 , \"type\" : \"image\" , \"created\" : \"2017-09-06 11:54:28\" , \"uploaded\" : \"2017-09-06 11:55:14\" , \"name\" : \"lala.jpg\" , \"size\" : 72594 , \"mime_type\" : \"image/png\" , \"metadata\" : <me ta da ta _objec t > , \"state\" : \"uploaded\" , \"download_url\" : \"https://static.navixy.com/file/dl/1/0/1g/01gw2j5q7nm4r92dytolzd6koxy9e38v.png/lala.jpg\" } id - int. File ID. type - enum . Can be \"image\" or \"file\". created - date/time . Date when file created. uploaded - date/time . Date when file uploaded. Can be null if file not yet uploaded. name - string. A filename. size - int. Size in bytes. If file not uploaded, show maximum allowed size for the upload. metadata - nullable metadata object. state - enum . Can be \"created\" | \"in_progress\" | \"uploaded\" | \"deleted\". download_url - string. Actual URL at which file is available. Can be null if file not yet uploaded.","title":"Form file object"},{"location":"backend-api/resources/field_service/form/#api-actions","text":"API path: /form .","title":"API actions"},{"location":"backend-api/resources/field_service/form/#read","text":"Gets form by an ID.","title":"read"},{"location":"backend-api/resources/field_service/form/#download","text":"Downloads form as a file by an ID.","title":"download"},{"location":"backend-api/resources/field_service/form/field-types/","text":"Form fields and values \u00b6 Every form (and form template) contains an ordered list of fields of various types. Field type defines how user input elements will look like, and how user input will be validated. Every field has a set of common parameters, which are the same for all field types, and type-specific parameters, which define specific style and validation constraints. Both common and type-specific parameters contained as fields in the JSON object. Field values for submitted form stored separately as JSON objects. The contents of value JSON objects are entirely field type-specific. common field parameters: \u00b6 { \"id\" : \"Text-1\" , \"label\" : \"Name\" , \"description\" : \"Your full name\" , \"required\" : true , \"type\" : \"text\" } id - arbitrary alphanumeric string (1 to 19 characters). Unique across current form's fields, used to link with values and its \"parent\" in template form. label - string. User-defined label, shown as field header, 1 to 100 printable characters. description - string. Field description, shown in smaller text under the header, 1 to 512 printable characters. required - boolean. If true , form cannot be submitted without filling this field with valid value. type - string. Determines field type. Text field \u00b6 type : text . Multiline auto-expanding text field. Note 1: when value contains empty string, it's considered empty, and thus valid when required: false, min_length != 0 . Note 2: combination required: true, min_length: 0 is not allowed. type-specific parameters: \u00b6 { \"min_length\" : 5 , \"max_length\" : 255 } min_length - int. Minimum allowed length, from 0 to 1024. max_length - int. Maximum allowed length 1 to 1024. value object: \u00b6 { \"type\" : \"text\" , \"value\" : \"text field value\" } value - string. What was entered the text field. Checkbox group \u00b6 type : checkbox_group . Group of checkboxes. Note 1: when zero checkboxes selected, values considered empty, and thus valid when required: false, min_checked != 0 . Note 2: combination required: true, min_checked: 0 is not allowed. type-specific parameters: \u00b6 { \"min_checked\" : 0 , \"max_checked\" : 3 , \"group\" : [{ \"label\" : \"I agree to TOS\" }] } min_checked - int. Minimum allowed checked positions, 0 to \"group\".size - 1. max_checked - int. Maximum allowed checked positions, 1 to \"group\".size - 1. value object: \u00b6 { \"type\" : \"checkbox_group\" , \"values\" : [ true ] } values - array of boolean. They are in the same order as fields in group . Dropdown field \u00b6 type : dropdown . Dropdown menu for choosing one option. type-specific parameters: \u00b6 { \"options\" : [ { \"label\" : \"John\" }, { \"label\" : \"Alice\" } ] } value object: \u00b6 { \"type\" : \"dropdown\" , \"value_index\" : 1 } value_index - int. Zero-based index of value from \"options\". Radio button group \u00b6 type : radio_group . A group of radio buttons. Only one option is selectable. type-specific parameters: \u00b6 { \"options\" : [ { \"label\" : \"John\" }, { \"label\" : \"Alice\" } ] } value object: \u00b6 { \"type\" : \"radio_group\" , \"value_index\" : 1 } value_index - int. Zero-based index of value from \"options\". Date picker \u00b6 type : date . A date picker. type-specific parameters: \u00b6 { \"disable_future\" : false , \"disable_past\" : true } disable_future - boolean. If true , date from the future cannot be selected. disable_past - boolean. If true , date from the past cannot be selected. value object: \u00b6 { \"type\" : \"date\" , \"value\" : \"2017-03-14\" } value - date/time . Rating \u00b6 type : rating . Rating with \"stars\". Zero stars not allowed. type-specific parameters: \u00b6 { \"max_stars\" : 5 } max_stars - int. Max number of stars to select from. value object: \u00b6 { \"type\" : \"rating\" , \"value\" : 3 } value - int. Number of stars selected. Cannot be more than max_stars . File \u00b6 type : file . File attachment. For example, document or spreadsheet. type-specific parameters: \u00b6 { \"max_file_size\" : 65536 , \"min_file_size\" : 128 , \"allowed_extensions\" : [ \"xls\" , \"doc\" ] } max_file_size - int. Max file size, bytes, no more than 16 Mb. min_file_size - int. Minimum file size, bytes. allowed_extensions - enum array. List of allowed file extensions, up to 16 items, cannot be empty, but can be null, which means \"no extension limits\". value object: \u00b6 { \"type\" : \"file\" , \"file_ids\" : [ 3345345 ] } file_ids - int array. IDs of the file which should be attached to this form field as value. Files must be uploaded before form submission. Photo \u00b6 type : photo . Photograph attachment. type-specific parameters: \u00b6 { \"max_files\" : 2 } max_files - int. Maximum number of photos to attach, up to 6. value object: \u00b6 { \"type\" : \"photo\" , \"file_ids\" : [ 3345345 , 534534534 ] } file_ids - int array. IDs of the files which should be attached to this form field as value. Files must be uploaded before form submission. Only image files allowed. Signature \u00b6 type : signature . A small image of customer's signature (usually obtained via writing on screen with a stylus). type-specific parameters: \u00b6 there are no type-specific parameters. value object: \u00b6 { \"type\" : \"file\" , \"file_id\" : 3345345 } file_id - int. An ID of the file which should be attached to this form field as value. File must be uploaded before form submission. Separator \u00b6 type : separator . Cosmetic, just to show header. Doesn't contain any actual value. Always filled and valid. Cannot be required.","title":"Form field types"},{"location":"backend-api/resources/field_service/form/field-types/#form-fields-and-values","text":"Every form (and form template) contains an ordered list of fields of various types. Field type defines how user input elements will look like, and how user input will be validated. Every field has a set of common parameters, which are the same for all field types, and type-specific parameters, which define specific style and validation constraints. Both common and type-specific parameters contained as fields in the JSON object. Field values for submitted form stored separately as JSON objects. The contents of value JSON objects are entirely field type-specific.","title":"Form fields and values"},{"location":"backend-api/resources/field_service/form/field-types/#text-field","text":"type : text . Multiline auto-expanding text field. Note 1: when value contains empty string, it's considered empty, and thus valid when required: false, min_length != 0 . Note 2: combination required: true, min_length: 0 is not allowed.","title":"Text field"},{"location":"backend-api/resources/field_service/form/field-types/#checkbox-group","text":"type : checkbox_group . Group of checkboxes. Note 1: when zero checkboxes selected, values considered empty, and thus valid when required: false, min_checked != 0 . Note 2: combination required: true, min_checked: 0 is not allowed.","title":"Checkbox group"},{"location":"backend-api/resources/field_service/form/field-types/#dropdown-field","text":"type : dropdown . Dropdown menu for choosing one option.","title":"Dropdown field"},{"location":"backend-api/resources/field_service/form/field-types/#radio-button-group","text":"type : radio_group . A group of radio buttons. Only one option is selectable.","title":"Radio button group"},{"location":"backend-api/resources/field_service/form/field-types/#date-picker","text":"type : date . A date picker.","title":"Date picker"},{"location":"backend-api/resources/field_service/form/field-types/#rating","text":"type : rating . Rating with \"stars\". Zero stars not allowed.","title":"Rating"},{"location":"backend-api/resources/field_service/form/field-types/#file","text":"type : file . File attachment. For example, document or spreadsheet.","title":"File"},{"location":"backend-api/resources/field_service/form/field-types/#photo","text":"type : photo . Photograph attachment.","title":"Photo"},{"location":"backend-api/resources/field_service/form/field-types/#signature","text":"type : signature . A small image of customer's signature (usually obtained via writing on screen with a stylus).","title":"Signature"},{"location":"backend-api/resources/field_service/form/field-types/#separator","text":"type : separator . Cosmetic, just to show header. Doesn't contain any actual value. Always filled and valid. Cannot be required.","title":"Separator"},{"location":"backend-api/resources/field_service/form/template/","text":"Form templates \u00b6 Form is a \"one-shot\" entity; after it was filled by someone, it cannot be reused. It's stored along with filled fields for future reference. Usually people need to fill forms with the same fields over an over again, so forms created on the basis of form templates. It's similar to paper forms: each paper form can be filled only once, but there's an electronic document, a template, on basis of which all paper forms printed. The reason for such API design is that template fields can be changed over time (deleted, removed, reordered, etc.) and it should not affect already filled forms. By separating filled forms and templates, one can always view filled form in exactly same state regardless of how template changed. User can assign form to the task or checkin by choosing template without the need to create all form fields every time. Form template object \u00b6 { \"id\" : 1 , \"label\" : \"Order form\" , \"fields\" :[{ \"id\" : \"Text-1\" , \"label\" : \"Name\" , \"description\" : \"Your full name\" , \"required\" : true , \"type\" : \"text\" , \"min_length\" : 5 , \"max_length\" : 255 }], \"created\" : \"2017-03-15 12:36:27\" , \"submit_in_zone\" : true , \"updated\" : \"2017-03-16 15:22:53\" , \"default\" : false } id - int. An ID of a template. label - string. User-defined template label, from 1 to 100 characters. fields - array of multiple form_field objects. created - date/time . Date when this template created. The read-only field. submit_in_zone - boolean. If true , form can be submitted only in task zone. updated - date/time . Date when this template last modified. The read-only field. default - boolean. This form will be chosen default for all new tasks with form if true . API actions \u00b6 API path: /form/template . list \u00b6 Gets all form templates belonging to current master user. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/form/template/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/form/template/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" :[{ \"id\" : 1 , \"label\" : \"Order form\" , \"fields\" :[{ \"id\" : \"Text-1\" , \"label\" : \"Name\" , \"description\" : \"Your full name\" , \"required\" : true , \"type\" : \"text\" , \"min_length\" : 5 , \"max_length\" : 255 }], \"created\" : \"2017-03-15 12:36:27\" , \"submit_in_zone\" : true , \"updated\" : \"2017-03-16 15:22:53\" , \"default\" : false }] } list - ordered array of form_template objects . Errors \u00b6 General types only. create \u00b6 Creates new form template. required sub-user rights : form_template_update . Parameters \u00b6 name description type template Non-null form template object without id , created , updated fields. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/form/template/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"template\": {\"label\": \"Order form\", \"fields\": [{\"id\": \"Text-1\", \"label\": \"Name\", \"description\": \"Your full name\", \"required\": true, \"type\": \"text\", \"min_length\": 5, \"max_length\": 255}], \"submit_in_zone\": true, \"default\": false}}' Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. An ID of the created form template. Errors \u00b6 101 \u2013 In demo mode this function disabled - if current user has \"demo\" flag. read \u00b6 Gets form template belonging to current master user by specified ID. Parameters \u00b6 name description type template_id ID of the form template. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/form/template/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"template_id\": 111}' HTTP GET https://api.navixy.com/v2/form/template/read?hash=a6aa75587e5c59c32d347da438505fc3&template_id=111 Response \u00b6 { \"success\" : true , \"list\" :[{ \"id\" : 1 , \"label\" : \"Order form\" , \"fields\" : [{ \"id\" : \"Text-1\" , \"label\" : \"Name\" , \"description\" : \"Your full name\" , \"required\" : true , \"type\" : \"text\" , \"min_length\" : 5 , \"max_length\" : 255 }], \"created\" : \"2017-03-15 12:36:27\" , \"submit_in_zone\" : true , \"updated\" : \"2017-03-16 15:22:53\" , \"default\" : false }] } list - ordered array of form_template objects . Errors \u00b6 201 \u2013 Not found in the database - if there is no template with such an ID. update \u00b6 Updates existing form template. required sub-user rights : form_template_update . Parameters \u00b6 name description type template Non-null form template object without created , updated fields. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/form/template/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"template\": {\"id\": 111, label\": \"Order form\", \"fields\": [{\"id\": \"Text-1\", \"label\": \"Name\", \"description\": \"Your full name\", \"required\": true, \"type\": \"text\", \"min_length\": 5, \"max_length\": 255}], \"submit_in_zone\": true, \"default\": false}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if template with the specified ID does not exist. 101 \u2013 In demo mode this function disabled - if current user has \"demo\" flag. delete \u00b6 Deletes form template. required sub-user rights : form_template_update . Parameters \u00b6 name description type template_id ID of the form template. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/form/template/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"template_id\": 111}' HTTP GET https://api.navixy.com/v2/form/template/delete?hash=a6aa75587e5c59c32d347da438505fc3&template_id=111 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if template with the specified ID does not exist. 101 \u2013 In demo mode this function disabled - if current user has \"demo\" flag. stats/read \u00b6 Returns template usage statistics. required sub-user rights : none. Parameters \u00b6 name description type template_id ID of the form template. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/form/template/stats/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"template_id\": 111}' HTTP GET https://api.navixy.com/v2/form/template/stats/read?hash=a6aa75587e5c59c32d347da438505fc3&template_id=111 Response \u00b6 { \"success\" : true , \"tasks\" : { \"unassigned\" : 0 , \"assigned\" : 6 , \"done\" : 0 , \"failed\" : 0 , \"delayed\" : 9 , \"arrived\" : 0 , \"faulty\" : 0 }, \"scheduled\" : 2 } tasks - maps task status to number of tasks with this status which use specified template. scheduled - int. Number of task schedules using this template. Errors \u00b6 201 \u2013 Not found in the database - if template with the specified ID does not exist.","title":"Form templates"},{"location":"backend-api/resources/field_service/form/template/#form-templates","text":"Form is a \"one-shot\" entity; after it was filled by someone, it cannot be reused. It's stored along with filled fields for future reference. Usually people need to fill forms with the same fields over an over again, so forms created on the basis of form templates. It's similar to paper forms: each paper form can be filled only once, but there's an electronic document, a template, on basis of which all paper forms printed. The reason for such API design is that template fields can be changed over time (deleted, removed, reordered, etc.) and it should not affect already filled forms. By separating filled forms and templates, one can always view filled form in exactly same state regardless of how template changed. User can assign form to the task or checkin by choosing template without the need to create all form fields every time.","title":"Form templates"},{"location":"backend-api/resources/field_service/form/template/#form-template-object","text":"{ \"id\" : 1 , \"label\" : \"Order form\" , \"fields\" :[{ \"id\" : \"Text-1\" , \"label\" : \"Name\" , \"description\" : \"Your full name\" , \"required\" : true , \"type\" : \"text\" , \"min_length\" : 5 , \"max_length\" : 255 }], \"created\" : \"2017-03-15 12:36:27\" , \"submit_in_zone\" : true , \"updated\" : \"2017-03-16 15:22:53\" , \"default\" : false } id - int. An ID of a template. label - string. User-defined template label, from 1 to 100 characters. fields - array of multiple form_field objects. created - date/time . Date when this template created. The read-only field. submit_in_zone - boolean. If true , form can be submitted only in task zone. updated - date/time . Date when this template last modified. The read-only field. default - boolean. This form will be chosen default for all new tasks with form if true .","title":"Form template object"},{"location":"backend-api/resources/field_service/form/template/#api-actions","text":"API path: /form/template .","title":"API actions"},{"location":"backend-api/resources/field_service/form/template/#list","text":"Gets all form templates belonging to current master user.","title":"list"},{"location":"backend-api/resources/field_service/form/template/#create","text":"Creates new form template. required sub-user rights : form_template_update .","title":"create"},{"location":"backend-api/resources/field_service/form/template/#read","text":"Gets form template belonging to current master user by specified ID.","title":"read"},{"location":"backend-api/resources/field_service/form/template/#update","text":"Updates existing form template. required sub-user rights : form_template_update .","title":"update"},{"location":"backend-api/resources/field_service/form/template/#delete","text":"Deletes form template. required sub-user rights : form_template_update .","title":"delete"},{"location":"backend-api/resources/field_service/form/template/#statsread","text":"Returns template usage statistics. required sub-user rights : none.","title":"stats/read"},{"location":"backend-api/resources/field_service/place/","text":"Working with points of interest (POI) \u00b6 \"Places\" are business-specific points of interest (POI) like shops, delivery points, warehouses, etc. - which are visited by user's employees. Place entities can be extended with custom fields to make them even more useful. In case an event happened at the POI, in various reports name of the POI will be specified after the address. If there's an employee assigned to a Mobile Tracker App ( Android / iOS ), and a POI has a custom field of type \"responsible employee\", such point of interest will be available in the mobile app to view. Thus, field employee/driver can view all points of interest assigned to him to visit them, etc. Working with POIs requires several actions so we described them in our guides . Place object \u00b6 { \"id\" : 1 , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"location\" : { \"lat\" : 52.366 , \"lng\" : 4.895 , \"address\" : \"730 5th Ave, New York, NY 10019, Unites States\" , \"radius\" : 500 }, \"fields\" : { \"131312\" : { \"type\" : \"text\" , \"value\" : \"I love text!\" } }, \"label\" : \"Crown Building\" , \"description\" : \"Here we buy our goods\" , \"tags\" : [ 1 , 2 ], \"external_id\" : \"1\" } id - int. An ID of a POI. icon_id - optional int. Can be 1 to 255. Can only be updated via avatar/assign . avatar_file_name - optional string. Name of the avatar file. Can be null. location - required information about place location. lat - required, float. The latitude. lng - required, float. The longitude. address - required, string, max length 255. The address of place. radius - required, int, 1..300000. The radius of place in meters. fields - optional object. A map, each key of which is a custom field ID as a string . See entity/fields label - string. POI name. description - optional string. POI description. tags - optional int array. A list of tag_ids. Non-empty. external_id - optional string. Max length 32. API actions \u00b6 API path: /place . read \u00b6 Gets POI by ID. Parameters \u00b6 name description type place_id ID of the POI. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/place/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"place_id\": 122304}' HTTP GET https://api.navixy.com/v2/place/read?hash=a6aa75587e5c59c32d347da438505fc3&place_id=122304 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 1 , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"location\" : { \"lat\" : 40.773998 , \"lng\" : -73.66003 , \"address\" : \"730 5th Ave, New York, NY 10019, Unites States\" , \"radius\" : 50 }, \"fields\" : { \"131312\" : { \"type\" : \"text\" , \"value\" : \"I love text!\" } }, \"label\" : \"Crown Building\" , \"description\" : \"Here we buy our goods\" , \"tags\" : [ 1 , 2 ], \"external_id\" : \"1\" } } Errors \u00b6 201 - Not found in the database \u2013 if there is no POI with such ID. list \u00b6 Get POIs belonging to user. Parameters \u00b6 name description type place_ids Optional. List of POI IDs. int array filter Optional. Filter for all built-in and custom fields. If used with conditions, both filter and conditions must match for every returned POI. string conditions Optional. Search conditions to apply to list. Array of search conditions, see Search conditions . array of objects order_by Optional. Built-in or custom field according to which output should be sorted. Entity field name, e.g \"label\" (builtin) or \"123\" (field ID as string, see entity/ . string ascending Optional. If false \u2013 descending order. boolean limit Optional. Limit. int offset Optional. offset, default is 0. int tag_ids Optional. Tag IDs assigned to the place. The places found must include all the tags from the list. int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/place/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/place/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [ { \"id\" : 1 , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"location\" : { \"lat\" : 40.773998 , \"lng\" : -73.66003 , \"address\" : \"730 5th Ave, New York, NY 10019, Unites States\" , \"radius\" : 50 }, \"fields\" : { \"131312\" : { \"type\" : \"text\" , \"value\" : \"I love text!\" } }, \"label\" : \"Crown Building\" , \"description\" : \"Here we buy our goods\" , \"tags\" : [ 1 , 2 ], \"external_id\" : \"1\" } ], \"count\" : 1 } count - int. Found POIs count. Errors \u00b6 General types only. create \u00b6 Creates a new POI. required sub-user rights: place_update . Parameters \u00b6 name description type place A place object without id field. JSON object ignore_missing_fields Optional (default is false). If true , POI can be created even without all required custom fields. boolean Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/place/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"place\": {\"icon_id\" : 55, \"avatar_file_name\": null, \"location\": {\"lat\": 40.773998, \"lng\": -73.66003, \"address\": \"730 5th Ave, New York, NY 10019, Unites States\", \"radius\": 50}, \"fields\": {\"131312\": {\"type\": \"text\", \"value\": \"I love text!\"}}, \"label\": \"Crown Building\", \"description\": \"Here we buy our goods\", \"tags\": [1, 2], \"external_id\": \"1\"}' Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. An ID of the created POI. Errors \u00b6 268 - Over quota \u2013 if the user's quota for POIs exceeded. search_location \u00b6 Gets all POI IDs and names within which a specified coordinates are located inside. Parameters \u00b6 name description type location Location coordinates (see: data types description section section). JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/place/search_location' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"location\": {\"lat\": 34.178868, \"lng\": -118.599672}}' Response \u00b6 { \"list\" : [ { \"id\" : 1201 , \"label\" : \"place 1\" }, { \"id\" : 3574 , \"label\" : \"place 2\" } ], \"success\" : true } id - int. Place ID that containing a searched location. label - string. Place name. update \u00b6 Updates existing POI. required sub-user rights: place_update . Parameters \u00b6 name description type place A place object. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/place/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"place\": {\"id\": 111, \"icon_id\" : 55, \"avatar_file_name\": null, \"location\": {\"lat\": 40.773998, \"lng\": -73.66003, \"address\": \"730 5th Ave, New York, NY 10019, Unites States\", \"radius\": 50}, \"fields\": {\"131312\": {\"type\": \"text\", \"value\": \"I love text!\"}}, \"label\": \"Crown Building\", \"description\": \"Here we buy our goods\", \"tags\": [1, 2], \"external_id\": \"1\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if there is no POI with such ID. delete \u00b6 Deletes POI with the specified ID. required sub-user rights: place_update . Parameters \u00b6 name description type place_id ID of the POI to delete. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/place/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"place_id\": 122304}' HTTP GET https://api.navixy.com/v2/place/delete?hash=a6aa75587e5c59c32d347da438505fc3&place_id=122304 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if there is no POI with such ID. batch_convert \u00b6 Converts batch of tab-delimited POIs and return list of checked POIs with errors. Required sub-user rights: place_update . Parameters \u00b6 name description type batch Batch of tab-delimited POIs. string file_id Preloaded file ID. string fields Optional. Array of field names, default is [\"label\", \"address\", \"lat\", \"lng\", \"radius\", \"description\", \"tags\"] . string array geocoder Geocoder type. string default_radius Optional. Radius for point in meters. Default is 100. int If file_id is set \u2013 batch parameter will be ignored. Response \u00b6 { \"success\" : true , \"list\" : [ { \"id\" : 1 , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"location\" : { \"lat\" : 40.773998 , \"lng\" : -73.66003 , \"address\" : \"730 5th Ave, New York, NY 10019, Unites States\" , \"radius\" : 50 }, \"fields\" : { \"131312\" : { \"type\" : \"text\" , \"value\" : \"I love text!\" } }, \"label\" : \"Crown Building\" , \"description\" : \"Here we buy our goods\" , \"tags\" : [ 1 , 2 ], \"external_id\" : \"1\" , \"errors\" : <array_o f _objec ts > , \"tag_names\" : <array_o f _s tr i n gs> } ], \"limit_exceeded\" : false } list - a list of objects. errors - optional array of objects. Errors found during check. tag_names - optional string array. Tag names of the POI. limit_exceeded - boolean. true if given batch constrained by a limit. Errors \u00b6 234 - Invalid data format. upload \u00b6 Upload POIs. Required sub-user rights : place_update . MUST be a POST multipart request (multipart/form-data), with one of the parts being a CSV file upload (with the name \"file\"). CSV column separator is ; , columns header required \u2013 label;address;lat;lng;radius;external_id;description . Parameters \u00b6 name description type file A CSV file upload containing POIs data. File upload error_policy ignore or fail . string duplicate_policy skip or update or fail , belongs only to external_id duplicates . string default_radius Optional, radius for point, meters, default is 100. int geocoder Geocoder type. string redirect_target Optional URL to redirect. If redirect_target passed return redirect to <redirect_target>?response=<urlencoded_response_json> . string Response \u00b6 { \"success\" : true , \"total\" : 1 , \"errors\" : 0 } Errors \u00b6 233 - No data file \u2013 if file part is missing. 234 - Invalid data format. 247 - Entity already exists \u2013 if uploaded POI contains external_id and POI with this ID already exists and duplicate_policy=fail . 268 - Over quota \u2013 if the user's quota for POIs exceeded.","title":"Index"},{"location":"backend-api/resources/field_service/place/#working-with-points-of-interest-poi","text":"\"Places\" are business-specific points of interest (POI) like shops, delivery points, warehouses, etc. - which are visited by user's employees. Place entities can be extended with custom fields to make them even more useful. In case an event happened at the POI, in various reports name of the POI will be specified after the address. If there's an employee assigned to a Mobile Tracker App ( Android / iOS ), and a POI has a custom field of type \"responsible employee\", such point of interest will be available in the mobile app to view. Thus, field employee/driver can view all points of interest assigned to him to visit them, etc. Working with POIs requires several actions so we described them in our guides .","title":"Working with points of interest (POI)"},{"location":"backend-api/resources/field_service/place/#place-object","text":"{ \"id\" : 1 , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"location\" : { \"lat\" : 52.366 , \"lng\" : 4.895 , \"address\" : \"730 5th Ave, New York, NY 10019, Unites States\" , \"radius\" : 500 }, \"fields\" : { \"131312\" : { \"type\" : \"text\" , \"value\" : \"I love text!\" } }, \"label\" : \"Crown Building\" , \"description\" : \"Here we buy our goods\" , \"tags\" : [ 1 , 2 ], \"external_id\" : \"1\" } id - int. An ID of a POI. icon_id - optional int. Can be 1 to 255. Can only be updated via avatar/assign . avatar_file_name - optional string. Name of the avatar file. Can be null. location - required information about place location. lat - required, float. The latitude. lng - required, float. The longitude. address - required, string, max length 255. The address of place. radius - required, int, 1..300000. The radius of place in meters. fields - optional object. A map, each key of which is a custom field ID as a string . See entity/fields label - string. POI name. description - optional string. POI description. tags - optional int array. A list of tag_ids. Non-empty. external_id - optional string. Max length 32.","title":"Place object"},{"location":"backend-api/resources/field_service/place/#api-actions","text":"API path: /place .","title":"API actions"},{"location":"backend-api/resources/field_service/place/#read","text":"Gets POI by ID.","title":"read"},{"location":"backend-api/resources/field_service/place/#list","text":"Get POIs belonging to user.","title":"list"},{"location":"backend-api/resources/field_service/place/#create","text":"Creates a new POI. required sub-user rights: place_update .","title":"create"},{"location":"backend-api/resources/field_service/place/#search_location","text":"Gets all POI IDs and names within which a specified coordinates are located inside.","title":"search_location"},{"location":"backend-api/resources/field_service/place/#update","text":"Updates existing POI. required sub-user rights: place_update .","title":"update"},{"location":"backend-api/resources/field_service/place/#delete","text":"Deletes POI with the specified ID. required sub-user rights: place_update .","title":"delete"},{"location":"backend-api/resources/field_service/place/#batch_convert","text":"Converts batch of tab-delimited POIs and return list of checked POIs with errors. Required sub-user rights: place_update .","title":"batch_convert"},{"location":"backend-api/resources/field_service/place/#upload","text":"Upload POIs. Required sub-user rights : place_update . MUST be a POST multipart request (multipart/form-data), with one of the parts being a CSV file upload (with the name \"file\"). CSV column separator is ; , columns header required \u2013 label;address;lat;lng;radius;external_id;description .","title":"upload"},{"location":"backend-api/resources/field_service/place/avatar/","text":"Changing POI avatar \u00b6 Avatars don't change through /place/update , you must use either assign (to set avatar to one of preset icons), or upload (to upload your own image). API actions \u00b6 upload \u00b6 Uploads avatar image for specified POI. required sub-user rights: place_update . Then it will be available from [api_base_url]/<api_static_uri>/place/avatars/<file_name> e.g. https://api.navixy.com/v2/static/place/avatars/abcdef123456789.png . avatar_file_name returned in response and will be returned from place/list . MUST be a POST multipart request (multipart/form-data), with one of the parts being an image file upload (with the name \"file\"). File part mime type must be one of: image/jpeg image/pjpeg image/png image/gif image/webp Parameters \u00b6 name description type place_id ID of the POI. int file Image file. File upload redirect_target Optional URL to redirect. If redirect_target passed return redirect to <redirect_target>?response=<urlencoded_response_json> . string Response \u00b6 { \"success\" : true , \"value\" : \"Avatar file name\" } value - string. Avatar file name. Errors \u00b6 201 - Not found in the database \u2013 when POI with place_id not found. 233 - No data file \u2013 if file part not passed. 234 - Invalid data format \u2013 if passed file with unexpected mime type. 254 - Cannot save file \u2013 on some file system errors. assign \u00b6 Assigns icon_id (from standard icon set) to this POI. icon_id can be null \u2013 this means that uploaded avatar should be used instead of icon. required sub-user rights: place_update . Parameters \u00b6 name description type place_id ID of the POI. int icon_id Optional. ID of the icon from standard icon set. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/place/avatar/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"place_id\": 122304, \"icon_id\": 1}' HTTP GET https://api.navixy.com/v2/place/avatar/assign?hash=a6aa75587e5c59c32d347da438505fc3&place_id=122304&icon_id=1 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 when POI with place_id not found.","title":"Avatar"},{"location":"backend-api/resources/field_service/place/avatar/#changing-poi-avatar","text":"Avatars don't change through /place/update , you must use either assign (to set avatar to one of preset icons), or upload (to upload your own image).","title":"Changing POI avatar"},{"location":"backend-api/resources/field_service/place/avatar/#api-actions","text":"","title":"API actions"},{"location":"backend-api/resources/field_service/place/avatar/#assign","text":"Assigns icon_id (from standard icon set) to this POI. icon_id can be null \u2013 this means that uploaded avatar should be used instead of icon. required sub-user rights: place_update .","title":"assign"},{"location":"backend-api/resources/field_service/task/","text":"Working with tasks \u00b6 You can assign task to any tracked device. If specified tracker visits task checkpoint at the specified time and meets other conditions such as filling form or staying in the task zone for the specified time, the task completed. Otherwise, the task either failed completely or completed with warnings. If task assigned to a Mobile Tracker App ( Android / iOS ), it's available for viewing by app user. User will also receive notifications of newly assigned tasks, task changes, etc. Find more guides on working with tasks there . Task object \u00b6 { \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 51.283546 , \"lng\" : 7.301086 , \"address\" : \"Fichtenstrasse 11\" , \"radius\" : 150 }, \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"arrival_date\" : \"2014-01-02 03:04:05\" , \"stay_duration\" : 0 , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"type\" : \"task\" , \"form\" : < f orm_objec t > , \"form_template_id\" : 13245 , \"fields\" : { \"131312\" : { \"type\" : \"text\" , \"value\" : \"I love text!\" } } } id - int. Primary key. Used in task/update, IGNORED in task/create. user_id - int. User ID. IGNORED in create/update. tracker_id - int. An ID of the tracker to which task assigned. Can be null. IGNORED in task/update. location - location associated with this task. Cannot be null. address - string. Address of the location. radius - int. Radius of location zone in meters. creation_date - date/time . When task created. IGNORED in create/update. from - date/time . Date AFTER which task zone must be visited. to - date/time . Date BEFORE which task zone must be visited. external_id - string. Used if task imported from external system. Arbitrary text string. Can be null. status - enum . Task status. IGNORED in create/update. Can have \"unassigned\" value (unassigned to any executor), \"assigned\", \"done\", \"failed\", \"delayed\", \"arrived\" (arrived to geofence but haven't done the task), \"faulty\" (with problems). status_change_date - date/time . When task status changed. IGNORED in create/update. max_delay - int. Maximum allowed task completion delay in minutes. min_stay_duration - int. Minimum duration of stay in task zone for task completion, minutes. arrival_date - date/time . When tracker has arrived to the task zone. IGNORED in create/update. stay_duration - int. Duration of stay in the task zone, seconds. origin - string. Task origin. IGNORED in create/update. tags - int array. List of tag IDs. form - form object . If present. form_template_id - int. An ID of form template. Used in create and update actions only if create_form parameter is true in them. fields - optional object. A map, each key of which is a custom field ID as a string . See entity/fields To associate the task with an address - this field should be added to the location object. API actions \u00b6 API base path: /task . assign \u00b6 (Re)assigns task to new tracker (or make it unassigned). required sub-user rights : task_update . Parameters \u00b6 name description type task_id ID of the task to assign. int tracker_id ID of the tracker. Tracker must belong to authorized user and not be blocked. If null, task will be assigned to no one. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task_id\": 23144, \"tracker_id\": 132421}' HTTP GET https://api.navixy.com/v2/task/assign?hash=a6aa75587e5c59c32d347da438505fc3&task_id=23144&tracker_id=132421 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database (if there is no task with such an ID). 204 \u2013 Entity not found (if there is no tracker with such ID belonging to authorized user). 208 \u2013 Device blocked (if tracker exists but was blocked due to tariff restrictions or some other reason). 255 \u2013 Invalid task state (if current task state is not \"unassigned\" or \"assigned\"). 236 \u2013 Feature unavailable due to tariff restrictions (if device's tariff does not allow usage of tasks). batch_convert \u00b6 Converts batch of tab-delimited tasks and return list of checked tasks with errors. required sub-user rights : task_update . Parameters \u00b6 name description type batch Batch of tab-delimited tasks. string fields Optional. Array of field names, default is [\"label\", \"from\", \"to\", \"address\", \"lat\", \"lng\", \"description\"] . string array geocoder Geocoder type. enum default_radius Optional. Radius for point, default is 100. int default_max_delay Optional. Max delay for tasks, default is 0. int default_duration Optional. Duration for task in minutes, default is 60. int default_min_stay_duration Optional. Minimal stay duration for task in minutes, default is 0. int location_check_mode Optional. One of \"no_check\", \"entity_location\", \"parent_location\" enum employee_ids Optional. List of employee IDs to automatic assign int array vehicle_ids Optional. List of vehicle IDs to automatic assign int array In case of location_check_mode==entity_location \u2013 vehicle_ids will be ignored. Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 51.283546 , \"lng\" : 7.301086 , \"address\" : \"Fichtenstrasse 11\" , \"radius\" : 150 }, \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"arrival_date\" : \"2014-01-02 03:04:05\" , \"stay_duration\" : 0 , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"type\" : \"task\" , \"form\" : < f orm_objec t > , \"errors\" : [ <error_objec t > ] }], \"limit_exceeded\" : false } list - list of checked task objects that contain all fields from task and field errors . errors - array of objects. Optional. List of errors. limit_exceeded - boolean. true if given batch constrained by a limit. Errors \u00b6 General types only. count \u00b6 Returns total number of tasks belonging to current user. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/count' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/task/count?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"count\" : 111 } count - int. Number of tasks. create \u00b6 Creates a new task. required sub-user rights : task_update . Parameters \u00b6 name description type task task object without fields which are IGNORED JSON object create_form If true then check additional form_template_id field in task object and create form if it is not null. Default value is false for backward compatibility. boolean Minimal JSON object to create a new task must contain: { \"tracker_id\" : 22 , \"location\" : { \"lat\" : 34.178868 , \"lng\" : -118.599672 , \"radius\" : 150 }, \"label\" : \"Name\" , \"description\" : \"Description example\" , \"from\" : \"2020-02-03 04:05:06\" , \"to\" : \"2020-03-04 05:06:07\" } tracker_id - int. Optional. if the field specified then the task will be assigned to the employee associated with the tracker, otherwise it won't be assigned to anybody. location - area (circle geofence), entering and leaving of geofence will be controlled. lat - float. Latitude. lng - float. Longitude. radius - int. Radius in meters. label - string. Task name, length 1-200 characters. description - string. Task description, length 0-1024 characters. from - date/time . Start date of the interval - when the specified location has to be visited (in the user's time zone). to - date/time . End date of the interval - when the specified location has to be visited (in the user's time zone). Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task\": {\"tracker_id\": 22, \"location\": {\"lat\": 34.178868, \"lng\": -118.599672, \"radius\": 150}, \"label\": \"Name\", \"description\": \"Description example\", \"from\": \"2020-02-03 04:05:06\", \"to\": \"2020-03-04 05:06:07\"}, \"create_form\": false}' task/create call returns the identifier of the created task. A returned object also can include \"external_id_counts\" field see task/route/create method description . Response \u00b6 { \"success\" : true , \"id\" : 111 , \"external_id_counts\" : [{ \"external_id\" : \"456\" , \"count\" : 2 }] } id - int. An ID of the created task. Note: The \"id\" parameter is unique, it is automatically generated by the server when you create a task. Therefore, if you call task/create two times with the same parameters, every time the new task will be created. These two tasks will differ only by an ID. Respectively, if the created task has to be connected to a certain record in external system, you have to remember the ID of this record to use it in future when you want to change/delete the associated task in our system. Errors \u00b6 201 \u2013 Not found in the database (if task.tracker_id is not null and belongs to nonexistent tracker). 236 \u2013 Feature unavailable due to tariff restrictions (if device's tariff does not allow usage of tasks). delete \u00b6 Deletes the task with the specified ID. required sub-user rights : task_update . Parameters \u00b6 name description type task_id ID of the task to delete. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task_id\": 23144}' HTTP GET https://api.navixy.com/v2/task/delete?hash=a6aa75587e5c59c32d347da438505fc3&task_id=23144 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database (if there is no task with such an ID). list \u00b6 Gets all task belonging to user with optional filtering. Parameters \u00b6 name description type external_id Optional. External task ID for search. string statuses Optional. Default all. List of task statuses, e.g. [\"unassigned\",\"failed\"] . string array trackers Optional. IDs of the trackers to which task assigned. int array from Optional. Show tasks which are actual AFTER this date, e.g. \"2020-07-01 00:00:00\". date/time to Optional. Show tasks which are actual BEFORE this date, e.g. \"2020-07-01 00:00:00\". date/time conditions Optional. Search conditions to apply to list. Array of search conditions. array of SearchCondition filter Optional. Filter for all built-in and custom fields. If used with conditions, both filter and conditions must match for every returned task. string filters Optional. Filters for task label, description or address. string array tag_ids Optional. Tag IDs assigned to the task. int array location Optional. Location with radius, inside which task zone centers must reside. Example: { \"lat\": 34.178868, \"lng\": -118.599672, \"radius\": 350 } Location JSON offset Optional. Offset from start of the found tasks for pagination. int limit Optional. Limit of the found tasks for pagination. int condition fields \u00b6 Name Type Comment id int employee int ID status string label string location string address from date/time to date/time status_change_date date/time arrival_date date/time stay_duration Seconds description string external_id string form number template's ID If external_id , trackers , filters , from , to or tag_ids is not passed or null then appropriate condition not used to filter results. If offset or limit is null then restrictions for pagination will not be applied. sort: string[]? \u00b6 set of sort options. Each option is a pair of column name and sorting direction, e.g. [\"label=asc\", \"address=desc\", \"employee=desc\"]. sort fields \u00b6 Name Type Comment id int employee string full name or tracker label status string label string location string address from date/time to date/time status_change_date date/time arrival_date date/time stay_duration Seconds description string external_id string form string label If external_id , trackers , filters , from , to or tag_ids is not passed or null then appropriate condition not used to filter results. cURL curl -X POST 'https://api.navixy.com/v2/task/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/task/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 48.210857 , \"lng\" : 16.369329 , \"address\" : \"Schulhof 2, Wien, Austria\" , \"radius\" : 150 }, \"label\" : \"Name\" , \"description\" : \"Description example\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2020-02-03 04:05:06\" , \"to\" : \"2020-03-04 05:06:07\" , \"external_id\" : \"01234567\" , \"status\" : \"assigned\" , \"status_change_date\" : \"2020-01-02 03:04:05\" , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"arrival_date\" : \"2020-01-02 03:04:05\" , \"stay_duration\" : 10 , \"origin\" : \"manual\" , \"type\" : \"task\" }], \"count\" : 1 } list - array of task objects. id - int. Task ID. user_id - int. User ID (office). An unchangeable parameter. tracker_id - int. Tracker ID. Indicator ID by which the implementation of this task will be controlled. location - area (circle geofence), entering and leaving of geofence will be controlled. label - string. Task name, length 1-200 characters. description - string. Task description, length 0-1024 characters. creation_date - date/time . Date of creation of a task, unchangeable field. from - date/time . Start date of the interval - when the specified location has to be visited (in the user's time zone). to - date/time . End date of the interval - when the specified location has to be visited (in the user's time zone). external_id - string. Text field for tracking of communication of the task with certain external systems (for example, number of the order). Is for reference only. status - enum . Current status of a task, can have \"unassigned\" value (unassigned to any executor), \"assigned\", \"done\", \"failed\", \"delayed\", \"arrived\" (arrived to geofence but haven't done the task), \"faulty\" (with problems). status_change_date - date/time . Date of the last change of the status of a task. max_delay - int. The maximum time delay of the execution of the task, in minutes. min_stay_duration - int. The minimum stay time in the area of the task in which the task has to be done, in minutes. arrival_date - date/time . Date and time of arrival in the area of the task. Can be null. If the executor has not visited it yet. stay_duration - int. Number of seconds spent inside task zone. origin - enum . The way of creation of a task. Can be \"manual\", \"scheduled\" or \"imported\" (from excel). type - string. Reserved. count - int. count of the all found tasks. Errors \u00b6 General types only. read \u00b6 Gets task, checkpoint, or route with checkpoints by specified ID. Parameters \u00b6 name description type task_id ID of the task, route or checkpoint. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task_id\": 23144}' HTTP GET https://api.navixy.com/v2/task/read?hash=a6aa75587e5c59c32d347da438505fc3&task_id=23144 Response \u00b6 { \"success\" : true , \"value\" : < tas k or checkpoi nt or rou te > , \"checkpoints\" : [ <checkpoi nt 1 > , <checkpoi nt 2 > ] } value - JSON object. task described here . checkpoints - only returned if entity with specified ID is a route. Contains all checkpoints of this route. checkpoint object described here . Errors \u00b6 201 \u2013 Not found in the database (if there is no task with such an ID). transmute \u00b6 Converts task into a route checkpoint. required sub-user rights : task_update . Parameters \u00b6 name description type task_id ID of the task to convert. int route_id ID of the route to attach to. int order Zero-based index at which checkpoint should be inserted into route. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/transmute' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task_id\": 23144, \"route_id\": 12334, \"order\": 0}' HTTP GET https://api.navixy.com/v2/task/transmute?hash=a6aa75587e5c59c32d347da438505fc3&task_id=23144&route_id=12334&order=0 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database (if there is no task or route with such an ID, or tracker to which checkpoint assigned is unavailable to current sub-user). 255 \u2013 Invalid task state (if task or any of the checkpoints are not in unassigned or assigned state). update \u00b6 Updates existing task. Note that you cannot change task owner using this method. required sub-user rights : task_update . Parameters \u00b6 name description type task task object without fields which are IGNORED . JSON object create_form If true then check additional form_template_id field in task object and create, replace or delete task's form. Default value is false for backward compatibility. boolean Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task\": {\"id\": 22379, \"location\": {\"lat\": 34.178868, \"lng\": -118.599672, \"radius\": 150}, \"label\": \"Name\", \"description\": \"Description example\", \"from\": \"2020-02-03 04:05:06\", \"to\": \"2020-03-04 05:06:07\"}, \"create_form\": false}' A returned object also can include \"external_id_counts\" field see task/route/create method description . Response \u00b6 { \"success\" : true , \"external_id_counts\" : [{ \"external_id\" : \"456\" , \"count\" : 2 }] } Errors \u00b6 201 \u2013 Not found in the database (if there is no task with such an ID). 255 \u2013 Invalid task state (if current task state is not \"unassigned\" or \"assigned\").","title":"Working with tasks"},{"location":"backend-api/resources/field_service/task/#working-with-tasks","text":"You can assign task to any tracked device. If specified tracker visits task checkpoint at the specified time and meets other conditions such as filling form or staying in the task zone for the specified time, the task completed. Otherwise, the task either failed completely or completed with warnings. If task assigned to a Mobile Tracker App ( Android / iOS ), it's available for viewing by app user. User will also receive notifications of newly assigned tasks, task changes, etc. Find more guides on working with tasks there .","title":"Working with tasks"},{"location":"backend-api/resources/field_service/task/#task-object","text":"{ \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 51.283546 , \"lng\" : 7.301086 , \"address\" : \"Fichtenstrasse 11\" , \"radius\" : 150 }, \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"arrival_date\" : \"2014-01-02 03:04:05\" , \"stay_duration\" : 0 , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"type\" : \"task\" , \"form\" : < f orm_objec t > , \"form_template_id\" : 13245 , \"fields\" : { \"131312\" : { \"type\" : \"text\" , \"value\" : \"I love text!\" } } } id - int. Primary key. Used in task/update, IGNORED in task/create. user_id - int. User ID. IGNORED in create/update. tracker_id - int. An ID of the tracker to which task assigned. Can be null. IGNORED in task/update. location - location associated with this task. Cannot be null. address - string. Address of the location. radius - int. Radius of location zone in meters. creation_date - date/time . When task created. IGNORED in create/update. from - date/time . Date AFTER which task zone must be visited. to - date/time . Date BEFORE which task zone must be visited. external_id - string. Used if task imported from external system. Arbitrary text string. Can be null. status - enum . Task status. IGNORED in create/update. Can have \"unassigned\" value (unassigned to any executor), \"assigned\", \"done\", \"failed\", \"delayed\", \"arrived\" (arrived to geofence but haven't done the task), \"faulty\" (with problems). status_change_date - date/time . When task status changed. IGNORED in create/update. max_delay - int. Maximum allowed task completion delay in minutes. min_stay_duration - int. Minimum duration of stay in task zone for task completion, minutes. arrival_date - date/time . When tracker has arrived to the task zone. IGNORED in create/update. stay_duration - int. Duration of stay in the task zone, seconds. origin - string. Task origin. IGNORED in create/update. tags - int array. List of tag IDs. form - form object . If present. form_template_id - int. An ID of form template. Used in create and update actions only if create_form parameter is true in them. fields - optional object. A map, each key of which is a custom field ID as a string . See entity/fields To associate the task with an address - this field should be added to the location object.","title":"Task object"},{"location":"backend-api/resources/field_service/task/#api-actions","text":"API base path: /task .","title":"API actions"},{"location":"backend-api/resources/field_service/task/#assign","text":"(Re)assigns task to new tracker (or make it unassigned). required sub-user rights : task_update .","title":"assign"},{"location":"backend-api/resources/field_service/task/#batch_convert","text":"Converts batch of tab-delimited tasks and return list of checked tasks with errors. required sub-user rights : task_update .","title":"batch_convert"},{"location":"backend-api/resources/field_service/task/#count","text":"Returns total number of tasks belonging to current user.","title":"count"},{"location":"backend-api/resources/field_service/task/#create","text":"Creates a new task. required sub-user rights : task_update .","title":"create"},{"location":"backend-api/resources/field_service/task/#delete","text":"Deletes the task with the specified ID. required sub-user rights : task_update .","title":"delete"},{"location":"backend-api/resources/field_service/task/#list","text":"Gets all task belonging to user with optional filtering.","title":"list"},{"location":"backend-api/resources/field_service/task/#read","text":"Gets task, checkpoint, or route with checkpoints by specified ID.","title":"read"},{"location":"backend-api/resources/field_service/task/#transmute","text":"Converts task into a route checkpoint. required sub-user rights : task_update .","title":"transmute"},{"location":"backend-api/resources/field_service/task/#update","text":"Updates existing task. Note that you cannot change task owner using this method. required sub-user rights : task_update .","title":"update"},{"location":"backend-api/resources/field_service/task/checkpoint/","text":"Checkpoints \u00b6 Every route consists of checkpoints. Using these actions, you can manipulate checkpoints individually. Checkpoint object \u00b6 { \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 51.283546 , \"lng\" : 7.301086 , \"address\" : \"Fichtenstrasse 11\" , \"radius\" : 150 }, \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"arrival_date\" : \"2014-01-02 03:04:05\" , \"stay_duration\" : 0 , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"type\" : \"checkpoint\" , \"form\" : < f orm_objec t > , \"form_template_id\" : 13245 } id - int. Primary key. Used in checkpoint/update. IGNORED in checkpoint/create. user_id - int. User ID. IGNORED in checkpoint/create, checkpoint/update. tracker_id - int. An ID of the tracker to which task assigned. Can be null. IGNORED in checkpoint/update. location - location associated with this checkpoint. cannot be null. address - string. Address of the location. radius - int. Radius of location zone in meters. creation_date - date/time . When checkpoint created. IGNORED in checkpoint/create, checkpoint/update. from - date/time . Date AFTER which checkpoint zone must be visited. to - date/time . Date BEFORE which checkpoint zone must be visited. external_id - int. Used if task imported from external system. Arbitrary text string. Can be null. status - enum . Checkpoint status. IGNORED in checkpoint/create, checkpoint/update. status_change_date - date/time . When checkpoint status changed. IGNORED in checkpoint/create and checkpoint/update. max_delay - int. Maximum allowed checkpoint completion delay in minutes. min_stay_duration - int. Minimum duration of stay in checkpoint zone for checkpoint completion, minutes. arrival_date - date/time . Wen tracker has arrived to the checkpoint zone. IGNORED in checkpoint/create, checkpoint/update. stay_duration - int. Duration of stay in the checkpoint zone, seconds. origin - string. Checkpoint origin. IGNORED in checkpoint/create, checkpoint/update. tags - int array. List of tag IDs. form - form object . If present. form_template_id - int. An ID of form template. Used in create and update actions only if create_form parameter is true in them. To associate the task with an address - this field should be added to the location object. API actions \u00b6 API base path: /task/checkpoint . create \u00b6 Creates a new checkpoint. required sub-user rights : task_update . Parameters \u00b6 name description type checkpoint A checkpoint object without fields which are IGNORED . JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/checkpoint/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"43c37b8d023272c5fd1b27d21244b\", \"checkpoint\": {\"tracker_id\": 10179999, \"label\": \"Shop 1\", \"description\": \"Description\", \"parent_id\": 352665, \"order\": 0, \"location\": { \"lat\": 9.861999, \"lng\": -83.948999, \"radius\": 150}, \"max_delay\" : 5, \"min_stay_duration\": 0, \"min_arrival_duration\": 0, \"from\": \"2022-12-14 11:00:00\", \"to\": \"2022-12-14 11:30:00\", \"duration\": 60, \"tags\": [1, 2], \"form_template_id\": 1}}' Response \u00b6 Inserts the specified checkpoint at the specified position ( order ) in the parent route checkpoints list. Shifts the checkpoint currently at that position (if any) and any subsequent checkpoints to the right (adds one to their orders). Call returns the identifier of the created task in the form of JSON. The returned object also can include \"external_id_counts\" field see task/route/create method description . { \"success\" : true , \"id\" : 222 , \"external_id_counts\" : [{ \"external_id\" : \"456\" , \"count\" : 2 }] } Errors \u00b6 201 \u2013 Not found in the database - if task.tracker_id is not null and belongs to nonexistent tracker. 236 \u2013 Feature unavailable due to tariff restrictions - if device's tariff does not allow usage of tasks. delete \u00b6 Deletes a checkpoint with the specified ID. required sub-user rights : task_update . Parameters \u00b6 name description type checkpoint_id ID of the checkpoint to delete. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/checkpoint/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"checkpoint_id\": 23144}' HTTP GET https://api.navixy.com/v2/task/checkpoint/delete?hash=a6aa75587e5c59c32d347da438505fc3&checkpoint_id=23144 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no checkpoint with such an ID. list \u00b6 Get checkpoints belonging to user with given IDs Parameters \u00b6 name description type checkpoint_ids IDs of checkpoints, e.g. [1,2] . int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/checkpoint/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"checkpoint_ids\": [1,2]}' HTTP GET https://api.navixy.com/v2/task/checkpoint/list?hash=a6aa75587e5c59c32d347da438505fc3&checkpoint_ids=[1,2] Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 51.283546 , \"lng\" : 7.301086 , \"address\" : \"Fichtenstrasse 11\" , \"radius\" : 150 }, \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"arrival_date\" : \"2014-01-02 03:04:05\" , \"stay_duration\" : 0 , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"type\" : \"checkpoint\" }] } Errors \u00b6 General types only. read \u00b6 Gets route checkpoint by specified ID. Parameters \u00b6 name description type checkpoint_id ID of the checkpoint. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/checkpoint/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"checkpoint_id\": 111}' HTTP GET https://api.navixy.com/v2/task/checkpoint/read?hash=a6aa75587e5c59c32d347da438505fc3&checkpoint_id=111 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 51.283546 , \"lng\" : 7.301086 , \"address\" : \"Fichtenstrasse 11\" , \"radius\" : 150 }, \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"arrival_date\" : \"2014-01-02 03:04:05\" , \"stay_duration\" : 0 , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"type\" : \"checkpoint\" , \"form\" : < f orm_objec t > } } value - checkpoint object described here . Errors \u00b6 201 \u2013 Not found in the database - if there is no checkpoint with such an ID. transmute \u00b6 Convert route checkpoint into a standalone task. If it's the only checkpoint in the route, the route deleted. required sub-user rights : task_update . Parameters \u00b6 name description type checkpoint_id ID of the checkpoint. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/checkpoint/transmute' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"checkpoint_id\": 111}' HTTP GET https://api.navixy.com/v2/task/checkpoint/transmute?hash=a6aa75587e5c59c32d347da438505fc3&checkpoint_id=111 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no checkpoint with such an ID, or tracker to which checkpoint assigned is unavailable to current sub-user. 255 \u2013 Invalid task state - if any of checkpoints are not in unassigned or assigned state. update \u00b6 Updates existing checkpoint. required sub-user rights : task_update . Parameters \u00b6 name description type checkpoint A checkpoint object without fields which are IGNORED . JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/checkpoint/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"checkpoint\": {\"id\": 111, \"tracker_id\": 10179999, \"label\": \"Shop 1\", \"description\": \"Description\", \"parent_id\": 352665, \"order\": 0, \"location\": { \"lat\": 9.861999, \"lng\": -83.948999, \"radius\": 150}, \"max_delay\" : 5, \"min_stay_duration\": 0, \"min_arrival_duration\": 0, \"from\": \"2022-12-14 11:00:00\", \"to\": \"2022-12-14 11:30:00\", \"duration\": 60, \"tags\": [1, 2], \"form_template_id\": 1}}' Changing order reorders all other checkpoints. Response \u00b6 { \"success\" : true , \"external_id_counts\" : [{ \"external_id\" : \"456\" , \"count\" : 2 }] } external_id_counts - array of objects. Optional. A returned object also can include \"external_id_counts\" field see task/route/create method description . Errors \u00b6 201 \u2013 Not found in the database - if there is no task with such an ID. 255 \u2013 Invalid task state - if current task state is not \"unassigned\" or \"assigned\".","title":"Checkpoints"},{"location":"backend-api/resources/field_service/task/checkpoint/#checkpoints","text":"Every route consists of checkpoints. Using these actions, you can manipulate checkpoints individually.","title":"Checkpoints"},{"location":"backend-api/resources/field_service/task/checkpoint/#checkpoint-object","text":"{ \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 51.283546 , \"lng\" : 7.301086 , \"address\" : \"Fichtenstrasse 11\" , \"radius\" : 150 }, \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"arrival_date\" : \"2014-01-02 03:04:05\" , \"stay_duration\" : 0 , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"type\" : \"checkpoint\" , \"form\" : < f orm_objec t > , \"form_template_id\" : 13245 } id - int. Primary key. Used in checkpoint/update. IGNORED in checkpoint/create. user_id - int. User ID. IGNORED in checkpoint/create, checkpoint/update. tracker_id - int. An ID of the tracker to which task assigned. Can be null. IGNORED in checkpoint/update. location - location associated with this checkpoint. cannot be null. address - string. Address of the location. radius - int. Radius of location zone in meters. creation_date - date/time . When checkpoint created. IGNORED in checkpoint/create, checkpoint/update. from - date/time . Date AFTER which checkpoint zone must be visited. to - date/time . Date BEFORE which checkpoint zone must be visited. external_id - int. Used if task imported from external system. Arbitrary text string. Can be null. status - enum . Checkpoint status. IGNORED in checkpoint/create, checkpoint/update. status_change_date - date/time . When checkpoint status changed. IGNORED in checkpoint/create and checkpoint/update. max_delay - int. Maximum allowed checkpoint completion delay in minutes. min_stay_duration - int. Minimum duration of stay in checkpoint zone for checkpoint completion, minutes. arrival_date - date/time . Wen tracker has arrived to the checkpoint zone. IGNORED in checkpoint/create, checkpoint/update. stay_duration - int. Duration of stay in the checkpoint zone, seconds. origin - string. Checkpoint origin. IGNORED in checkpoint/create, checkpoint/update. tags - int array. List of tag IDs. form - form object . If present. form_template_id - int. An ID of form template. Used in create and update actions only if create_form parameter is true in them. To associate the task with an address - this field should be added to the location object.","title":"Checkpoint object"},{"location":"backend-api/resources/field_service/task/checkpoint/#api-actions","text":"API base path: /task/checkpoint .","title":"API actions"},{"location":"backend-api/resources/field_service/task/checkpoint/#create","text":"Creates a new checkpoint. required sub-user rights : task_update .","title":"create"},{"location":"backend-api/resources/field_service/task/checkpoint/#delete","text":"Deletes a checkpoint with the specified ID. required sub-user rights : task_update .","title":"delete"},{"location":"backend-api/resources/field_service/task/checkpoint/#list","text":"Get checkpoints belonging to user with given IDs","title":"list"},{"location":"backend-api/resources/field_service/task/checkpoint/#read","text":"Gets route checkpoint by specified ID.","title":"read"},{"location":"backend-api/resources/field_service/task/checkpoint/#transmute","text":"Convert route checkpoint into a standalone task. If it's the only checkpoint in the route, the route deleted. required sub-user rights : task_update .","title":"transmute"},{"location":"backend-api/resources/field_service/task/checkpoint/#update","text":"Updates existing checkpoint. required sub-user rights : task_update .","title":"update"},{"location":"backend-api/resources/field_service/task/history/","text":"Task history \u00b6 Our platform tracks changes to task fields and state for your convenience. Contains API calls to get this information. History entry \u00b6 { \"id\" : 22 , \"user_id\" : 3 , \"task_id\" : 1 , \"event_date\" : \"2014-08-05 10:54:55\" , \"operation\" : \"assign\" , \"payload\" : { \"tracker_id\" : 2470 } } id - int. Entry ID. user_id - int. User ID. task_id - int. An ID of the task with which this entry associated. event_date - date/time . Date when history event happened. operation - enum . Operation which happened. Can be \"create\", \"update\", \"assign\" or \"status_change\". payload - depends on operation. Typically, contains fields which were changed during operation. API actions \u00b6 API base path: task/history . list \u00b6 Returns history for the task with the specified ID. Parameters \u00b6 name description type task_id ID of the task. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/checkpoint/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"checkpoint_id\": 23144}' HTTP GET https://api.navixy.com/v2/task/checkpoint/delete?hash=a6aa75587e5c59c32d347da438505fc3&checkpoint_id=23144 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 22 , \"user_id\" : 3 , \"task_id\" : 1 , \"event_date\" : \"2014-08-05 10:54:55\" , \"operation\" : \"assign\" , \"payload\" : { \"tracker_id\" : 2470 } }] } Errors \u00b6 General types only.","title":"Task history"},{"location":"backend-api/resources/field_service/task/history/#task-history","text":"Our platform tracks changes to task fields and state for your convenience. Contains API calls to get this information.","title":"Task history"},{"location":"backend-api/resources/field_service/task/history/#history-entry","text":"{ \"id\" : 22 , \"user_id\" : 3 , \"task_id\" : 1 , \"event_date\" : \"2014-08-05 10:54:55\" , \"operation\" : \"assign\" , \"payload\" : { \"tracker_id\" : 2470 } } id - int. Entry ID. user_id - int. User ID. task_id - int. An ID of the task with which this entry associated. event_date - date/time . Date when history event happened. operation - enum . Operation which happened. Can be \"create\", \"update\", \"assign\" or \"status_change\". payload - depends on operation. Typically, contains fields which were changed during operation.","title":"History entry"},{"location":"backend-api/resources/field_service/task/history/#api-actions","text":"API base path: task/history .","title":"API actions"},{"location":"backend-api/resources/field_service/task/history/#list","text":"Returns history for the task with the specified ID.","title":"list"},{"location":"backend-api/resources/field_service/task/form/","text":"Working with task forms \u00b6 Forms can be attached to tasks to be filled by field employees using Mobile Tracker App ( Android / iOS ). This document describes API actions specific to working with task forms (except task/form/list which can return all kinds of forms). For <form_field> and <form_value> object description, see form fields and values . For <form> object description, see forms . Contains API calls related to forms associated with tasks. API actions \u00b6 API path: /task/form . create \u00b6 Attaches new form to the existing task or checkpoint. Form always created on the basis of form template. required sub-user rights : task_update . Parameters \u00b6 name description type task_id An ID of the task to assign. int template_id An ID of the form template. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/form/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task_id\": 11231, \"template_id\": 12548}' HTTP GET https://api.navixy.com/v2/task/form/create?hash=a6aa75587e5c59c32d347da438505fc3&task_id=11231&template_id=12548 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no task or template with such an ID, or task has the \"route\" type. 247 \u2013 Entity already exists - if task already has form attached to it. 255 \u2013 Invalid task state - if current task state is not unassigned , assigned or arrived . delete \u00b6 Deletes a form (detach it from the task). All form data will be lost! required sub-user rights : task_update . Parameters \u00b6 name description type task_id An ID of the task to which form is attached. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/form/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task_id\": 11231}' HTTP GET https://api.navixy.com/v2/task/form/delete?hash=a6aa75587e5c59c32d347da438505fc3&task_id=11231 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no task with such an ID, or task has the \"route\" type, or it has no form attached. 255 \u2013 Invalid task state - if current task state is not unassigned , assigned or arrived . download \u00b6 Retrieves attached form as file. Parameters \u00b6 name description type task_id An ID of the task. int format Format of the download file. Can be \"xls\", \"csv\" or \"pdf\". enum Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/form/download' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task_id\": 11231, \"format\": \"pdf\"}' HTTP GET https://api.navixy.com/v2/task/form/download?hash=a6aa75587e5c59c32d347da438505fc3&task_id=11231&format=pdf Response \u00b6 A form rendered to file (standard file download). Errors \u00b6 201 \u2013 Not found in the database - if task does not exist or does not have attached form. list \u00b6 Returns descriptions of forms, created on the basis of specified form template. In addition to the data on the forms, the list contains data on the objects related to each form \u2013 tracker / vehicle / employee, task. Parameters \u00b6 template_id ( integer, optional ). The returned list will contain forms, related to that template. warning: at least one of template_id and task_ids parameters must be not null. task_ids ( list of integers, optional ). Maximum size of list is 5000 elements. List of task IDs. The returned list will contain forms, related to tasks, which IDs specified in this parameter. warning: at least one of template_id and task_ids parameters must not be null. order_by ( optional, default = submitted ). Data field for list sorting. Available values: task_id created submitted task_address submit_address employee_full_name vehicle_label tracker_label task_label task_creation_date task_from task_to task_arrival_date task_completion_date form_label form_description ascending ( boolean, required ). Sorting direction (ascending / descending). include_unsubmitted ( boolean, required ). If true, unsubmitted forms shall be included in the list. filters ( object, optional ). Specifies the criteria for filtering the list based on the values of the data fields. Conditions are combined by logical AND.\\Filters object contains following optional elements: { \"employee_full_name\" : \"John Dow\" , // a seque n ce o f charac ters f or par t ial ma t chi n g (agai nst t he na me o f t he associa te d employee) \"form_description\" : \"Description\" , \"form_label\" : \"Form Label\" , \"submit_address\" : \"Submit Address\" , \"task_id\" : 123 , // s tr ic t ma t ch \"task_address\" : \"Task Address\" , \"task_label\" : \"Task Label\" , \"tracker_label\" : \"Tracker label\" , \"vehicle_label\" : \"Vehicle label\" , } submit_period ( period_object, optional ). task_creation_period ( period_object, optional ). task_from_period ( period_object, optional ). task_to_period ( period_object, optional ). task_arrival_period ( period_object, optional ). task_completion_period ( period_object, optional ). where period_object is: { \"from\" : \"2020-02-03 03:00:00\" , // s tr i n g <da te / t ime> \"to\" : \"2020-02-03 08:00:00\" // s tr i n g <da te / t ime> } offset, limit ( integers, optional ). Specify which subset of elements from all matching results will be included in the returned list. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/form/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"ascending\": true, \"include_unsubmitted\": true}' HTTP GET https://api.navixy.com/v2/task/form/list?hash=a6aa75587e5c59c32d347da438505fc3&ascending=true&include_unsubmitted=true Response \u00b6 { \"success\" : true , \"count\" : 2 , \"list\" : [{ \"employee\" : { \"id\" : 13 , \"first_name\" : \"John\" , \"middle_name\" : \"\" , \"last_name\" : \"Dow\" }, \"task\" : { \"id\" : 7867 , \"label\" : \"My task 3\" , \"from\" : \"2017-07-27 15:00:00\" , \"to\" : \"2017-07-28 14:59:59\" , \"creation_date\" : \"2017-07-27 12:12:23\" , \"arrival_date\" : \"2017-07-27 15:14:07\" , \"address\" : \"Moltkestrasse 32\" , \"status\" : \"done\" , \"completion_date\" : \"2017-07-28 14:36:28\" , \"fact_duration\" : \"PT22M21S\" }, \"tracker\" : { \"id\" : 15620 , \"label\" : \"Navixy A6\" }, \"vehicle\" : null , \"form\" : { \"id\" : 1012 , \"label\" : \"A form\" , \"description\" : \"\" , \"fields\" : [], \"created\" : \"2017-07-28 03:48:06\" , \"submit_in_zone\" : false , \"task_id\" : 7867 , \"template_id\" : 449 , \"values\" : null , \"submitted\" : \"2017-03-21 18:40:54\" , \"submit_location\" : { \"lat\" : 26.826762 , \"lng\" : 20.5947311 , \"address\" : \"Partizan st., 4\" } }, \"submit_places\" : { \"location\" : { \"lat\" : 26.826762 , \"lng\" : 20.5947311 , \"address\" : \"Partizan st., 4\" }, \"places\" : [{ \"id\" : 38 , \"label\" : \"Office sweet office\" }], \"zones\" : [{ \"id\" : 18404 , \"label\" : \"Zone 51\" }] } } ]} count - int. Total number of forms matching the query. form - form object , non-null. submit_places - additional info about places/zones related to form submission, can be null. places - list of places associated with zone submission location. Can be empty. zones - list of zones associated with zone submission location. Can be empty. Errors \u00b6 204 \u2013 Not found - if there is no form template with such ID belonging to authorized user. General types of errors. read \u00b6 Gets form associated with the specified task. Parameters \u00b6 name description type task_id An ID of the task. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/form/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task_id\": 12546}' HTTP GET https://api.navixy.com/v2/task/form/read?hash=a6aa75587e5c59c32d347da438505fc3&task_id=12546 Response \u00b6 { \"success\" : true , \"value\" : < f orm> , \"files\" : [ { \"id\" : 16 , \"storage_id\" : 1 , \"user_id\" : 12203 , \"type\" : \"image\" , \"created\" : \"2020-09-06 11:54:28\" , \"uploaded\" : \"2020-09-06 11:55:14\" , \"name\" : \"lala.jpg\" , \"size\" : 72594 , \"mime_type\" : \"image/png\" , \"metadata\" : { \"orientation\" : 1 }, \"state\" : \"uploaded\" , \"download_url\" : \"https://static.navixy.com/file/dl/1/0/1g/01gw2j5q7nm4r92dytolzd6koxy9e38v.png/lala.jpg\" , \"bindings\" : { \"form_field\" : { \"form_id\" : 40 , \"field_id\" : \"2222\" , \"submitted\" : false } }, \"previews\" : [ { \"download_url\" : \"https://localhost:8084/file/preview/1/0/1g/01gw2j5q7nm4r92dytolzd6koxy9e38v.png/lala.jpg\" } ] } ] } value - form object , or null if no form attached. files - list of files, both submitted and unsubmitted, associated with this form's fields. id - int. File ID. type - enum . Can be \"image\" or \"file\". created - date/time . Date when file created. uploaded - date/time . Date when file uploaded, can be null if file not yet uploaded. name - string. Filename. size - int. Size in bytes. If file not uploaded, show maximum allowed size for the upload. metadata - metadata object. orientation - int. Image exif orientation. state - enum . Can be \"created\", \"in_progress\", \"uploaded\", \"deleted\". download_url - string. Actual URL at which file is available. Can be null if file not yet uploaded. bindings - all entities to which this file linked. previews - available preview images for the file. Can be null or empty for any file in any state. Errors \u00b6 201 \u2013 Not found in the database - if there is no task with such an ID, or task assigned to tracker unavailable to current sub-user.","title":"Task form actions"},{"location":"backend-api/resources/field_service/task/form/#working-with-task-forms","text":"Forms can be attached to tasks to be filled by field employees using Mobile Tracker App ( Android / iOS ). This document describes API actions specific to working with task forms (except task/form/list which can return all kinds of forms). For <form_field> and <form_value> object description, see form fields and values . For <form> object description, see forms . Contains API calls related to forms associated with tasks.","title":"Working with task forms"},{"location":"backend-api/resources/field_service/task/form/#api-actions","text":"API path: /task/form .","title":"API actions"},{"location":"backend-api/resources/field_service/task/form/#create","text":"Attaches new form to the existing task or checkpoint. Form always created on the basis of form template. required sub-user rights : task_update .","title":"create"},{"location":"backend-api/resources/field_service/task/form/#delete","text":"Deletes a form (detach it from the task). All form data will be lost! required sub-user rights : task_update .","title":"delete"},{"location":"backend-api/resources/field_service/task/form/#download","text":"Retrieves attached form as file.","title":"download"},{"location":"backend-api/resources/field_service/task/form/#list","text":"Returns descriptions of forms, created on the basis of specified form template. In addition to the data on the forms, the list contains data on the objects related to each form \u2013 tracker / vehicle / employee, task.","title":"list"},{"location":"backend-api/resources/field_service/task/form/#read","text":"Gets form associated with the specified task.","title":"read"},{"location":"backend-api/resources/field_service/task/form/file/","text":"Attaching files \u00b6 When submitting form values of type file , photo or signature , you need to provide file ID. To obtain it, first you create a file entry, then upload a file using provided credentials. File must adhere to limitations specified in the form field. Note that each file consumes space and contributes to file storage limit associated with user's account. API actions \u00b6 API path: /task/form/file . create \u00b6 Creates a new file entry associated with form's field. By making this call you basically \"request permission\" to upload a file. In return, you are provided with upload credentials (URL, form fields, etc.). Note that in order to actually \"include\" file as form field's value, creating and uploading file is not enough. You must then submit a form with file ID as a value of corresponding form field. If file created but not uploaded, it will be deleted after date/time specified in \"expires\" response field. If file uploaded but not included as form field's value, it will be deleted on next form submission. required sub-user rights : task_update . Parameters \u00b6 name description type task_id ID of the task to which form attached. int field_id ID of the form's field to which a new file should be attached. string size Maximum size in bytes for the file which will be uploaded. This is needed to \"reserve\" the space for a file in user's disk space quota. int filename Optional. If specified, uploaded file will have the specified name. If not, name will be taken from actual file upload form. string metadata Optional. Metadata object (for images only). JSON object Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/form/file' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task_id\": 11231, \"field_id\": \"file1\", \"size\": 10}' HTTP GET https://api.navixy.com/v2/task/form/file?hash=a6aa75587e5c59c32d347da438505fc3&task_id=11231&field_id=file1&size=10 Response \u00b6 when using internal storage: { \"success\" : true , \"value\" : { \"file_id\" : 111 , \"url\" : \"http://bla.org/bla\" , \"expires\" : \"2020-02-03 03:04:00\" , \"file_field_name\" : \"file\" , \"fields\" : { \"token\" : \"a43f43ed4340b86c808ac\" } } } when using the Amazon S3: { \"success\" : true , \"value\" : { \"file_id\" : 111 , \"url\" : \"https://bla.s3.amazonaws.com/\" , \"expires\" : \"2020-02-03 03:04:00\" , \"file_field_name\" : \"file\" , \"fields\" : { \"policy\" : \"<Base64-encoded policy string>\" , \"key\" : \"user/user1/${filename}\" , \"success_action_status\" : \"200\" , \"x-amz-algorithm\" : \"AWS4-HMAC-SHA256\" , \"x-amz-credential\" : \"AKIAIOSFODNN7EXAMPLE/20151229/us-east-1/s3/aws4_request\" , \"x-amz-date\" : \"20151229T000000Z\" , \"x-amz-signature\" : \"<signature-value>\" , \"x-amz-server-side-encryption\" : \"AES256\" , \"content-type\" : \"image/png\" } } } file_id - int. This value will be submitted as form's field value. url - string. A URL to which POST form-data with file contents should be executed. expires - date/time. After this date file record wil expire and upload requests will be rejected. file_field_name - string. Name for file field in POST upload request. fields - these fields should be passed as additional fields in POST multipart upload request, field with a file must be the last one. How to upload file data \u00b6 Here's an example of upload you must make after receiving such response (assuming you uploading image named actual_file_name.png ): Internal storage example: POST /bla HTTP / 1.1 Host : bla.org Content-Length : 1325 Origin : http://bla.org ... other headers ... Content-Type : multipart/form-data; boundary=WebAppBoundary --WebAppBoundary Content-Disposition: form-data; name=\"token\" a43f43ed4340b86c808ac --WebAppBoundary Content-Disposition: form-data; name=\"file\"; filename=\"actual_file_name.png\" Content-Type: image/png ... contents of file goes here ... --WebAppBoundary-- Amazon S3 example: POST / HTTP / 1.1 Host : https://bla.s3.amazonaws.com Content-Length : 1972 Origin : https://bla.s3.amazonaws.com/ ... other headers ... Content-Type : multipart/form-data; boundary=WebAppBoundary --WebAppBoundary Content-Disposition: form-data; name=\"policy\" Content-Type: text/plain eyJleHBpcmF0aW9uIjogIjIwMjMtMDMtMjdUMjE6MTU6MzYuMDczWiIsImNvbmRpdGlvbnMiOiNbeyJidWNrZXQiOiAibmF2aXh5LWZpbGVzLXRlc3QtZXUifSxbInN0YXJ0cy13aXRoIiwgIiRrZXkiLCAiIl0seyJzdWNjZXNzX2FjdGlvbl9zdGF0dXMiOiAiMjAwIn0seyJ4LWFtei1hbGdvcml0aG0iOiAiQVdTNC1ITUFDLVNIQTI1NiJ9LHsieC1hbXotY3JlZGVudGlhbCI6ICJBS0lBSUJRNlNSQjY1RVZTU1JNQS8yMDIzMDMyNy9ldS1jZW50cmFsLTEvczMvYXdzNF9yZXF1ZXN0In0seyJ4LWFtei1kYXRlIjogIjIwMjMwMzI3VDIxMDAzNloifSx7IngtYW16LXNlcnZlci1zaWRlLWVuY3J5cHRpb24iOiAiQUVTMjU2In1dfQ== --WebAppBoundary Content-Disposition: form-data; name=\"key\" Content-Type: text/plain nj9relv6m52qp01t0wv47wyk1ozd309g/${filename} --WebAppBoundary Content-Disposition: form-data; name=\"success_action_status\" Content-Type: text/plain 200 --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-algorithm\" Content-Type: text/plain AWS4-HMAC-SHA256 --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-credential\" Content-Type: text/plain AKIAIBQ6SRB65EVSSRMA/20230327/eu-central-1/s3/aws4_request --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-date\" Content-Type: text/plain 20230327T210036Z --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-signature\" Content-Type: text/plain 2df7efa0c0e0c5b97d0d9483acd77c9ec37360df921b019a4c4a93180a6136ad --WebAppBoundary Content-Disposition: form-data; name=\"x-amz-server-side-encryption\" Content-Type: text/plain AES256 --WebAppBoundary Content-Disposition: form-data; name=\"file\"; filename=\"actual_file_name.png\" Content-Type: image/png ... contents of file goes here ... --WebAppBoundary-- Errors \u00b6 201 \u2013 Not found in the database - if there is no task with such an ID, or task doesn't have form, or form has no field with such a field_id. 231 \u2013 Entity type mismatch - if form field is not file-based, i.e. doesn't use file ID as its value. 255 \u2013 Invalid task state - if current task state is not \"unassigned\", \"assigned\" or \"arrived\", or if task's form not submitted at least once. 267 \u2013 Too many entities - if there are 6 or more unsubmitted files already associated with this form's field. 268 \u2013 File cannot be created due to quota violation. 271 - File size is larger than the maximum allowed (by default 16 MB).","title":"Attaching files"},{"location":"backend-api/resources/field_service/task/form/file/#attaching-files","text":"When submitting form values of type file , photo or signature , you need to provide file ID. To obtain it, first you create a file entry, then upload a file using provided credentials. File must adhere to limitations specified in the form field. Note that each file consumes space and contributes to file storage limit associated with user's account.","title":"Attaching files"},{"location":"backend-api/resources/field_service/task/form/file/#api-actions","text":"API path: /task/form/file .","title":"API actions"},{"location":"backend-api/resources/field_service/task/form/file/#create","text":"Creates a new file entry associated with form's field. By making this call you basically \"request permission\" to upload a file. In return, you are provided with upload credentials (URL, form fields, etc.). Note that in order to actually \"include\" file as form field's value, creating and uploading file is not enough. You must then submit a form with file ID as a value of corresponding form field. If file created but not uploaded, it will be deleted after date/time specified in \"expires\" response field. If file uploaded but not included as form field's value, it will be deleted on next form submission. required sub-user rights : task_update .","title":"create"},{"location":"backend-api/resources/field_service/task/form/values/","text":"Updating task form values \u00b6 Task form values can only be submitted using the web API if there was a previous submission using the Mobile Tracker App ( Android / iOS ). The purpose of this feature is to correct any incorrectly filled data that was accidentally submitted. It is not intended for filling out an empty form from scratch. This action can only be used if the task status is \"assigned,\" and the device must not be deleted. It will not work for any other task statuses. API actions \u00b6 API path: /task/form/values . update \u00b6 Updates existing form values of given task. required sub-user rights : task_update . Parameters \u00b6 name description type task_id An ID of the task. int values Map of field_id-value object. JSON object where values object is: { \"text1\" : { \"type\" : \"text\" , \"value\" : \"text field value\" } } For value object description, see form/form-fields-and-values/ . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/form/values/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"task_id\": 12546, \"value\": {\"text1\": {\"type\": \"text\", \"value\": \"text field value\"}}}' Response \u00b6 { \"success\" : true } Errors \u00b6 101 \u2013 In demo mode this function disabled - if current user has \"demo\" flag. 201 \u2013 Not found in the database - if task with the specified ID does not exist. 255 \u2013 Invalid task state - if task has already done or failed or no values submitted. 242 \u2013 There were errors during content validation - if given values are invalid for the form. Example: { \"success\" : false , \"status\" : { \"code\" : 242 , \"description\" : \"There were errors during content validation\" }, \"errors\" : [ { \"field_id\" : \"111-aaa-whatever\" , \"code\" : 5 , \"error\" : \"text length constraints are not met\" } ] } Validation error codes: 1 \u2013 field required but has no value. 2 \u2013 field value type doesn't match field type. 3 \u2013 field value is null. 4 \u2013 value index out of bounds. 5 \u2013 invalid value size. 6 \u2013 value less than minimum. 7 \u2013 value more than maximum. 8 \u2013 field contains invalid references. 9 \u2013 invalid file type. 10 \u2013 invalid file state.","title":"Updating task form values"},{"location":"backend-api/resources/field_service/task/form/values/#updating-task-form-values","text":"Task form values can only be submitted using the web API if there was a previous submission using the Mobile Tracker App ( Android / iOS ). The purpose of this feature is to correct any incorrectly filled data that was accidentally submitted. It is not intended for filling out an empty form from scratch. This action can only be used if the task status is \"assigned,\" and the device must not be deleted. It will not work for any other task statuses.","title":"Updating task form values"},{"location":"backend-api/resources/field_service/task/form/values/#api-actions","text":"API path: /task/form/values .","title":"API actions"},{"location":"backend-api/resources/field_service/task/form/values/#update","text":"Updates existing form values of given task. required sub-user rights : task_update .","title":"update"},{"location":"backend-api/resources/field_service/task/route/","text":"Routes \u00b6 Routes basically named and ordered set of checkpoints. Each checkpoint is essentially a task with an additional link to the parent route. Route completed if all the checkpoints completed and visited in the specified order. Otherwise, it is considered completed with warnings or failed. Route object \u00b6 { \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 222653 , \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"checkpoint_ids\" : [ 2977 , 2978 ], \"type\" : \"route\" } id - int. Primary key used in route/update, IGNORED in route/create. user_id - int. User ID. IGNORED in route/create and route/update. tracker_id - int. An ID of the tracker to which route assigned. Can be null. IGNORED in route/update. creation_date - date/time . When route created. IGNORED in route/create, route/update. from - date/time . Date AFTER which first checkpoint zone must be visited, depends on first checkpoint from , IGNORED in route/create, route/update. to - date/time . Date BEFORE which last checkpoint zone must be visited, depends on last checkpoint to , IGNORED in route/create, route/update. external_id - string. Used if route imported from external system. arbitrary text string. Can be null. status - string. A route status. IGNORED in route/create, route/update. status_change_date - date/time . When route status changed. IGNORED in route/create, route/update. origin - string. A route origin. IGNORED in route/create, route/update. tags - int array. List of tag IDs. checkpoint_ids - int array. List of route checkpoint IDs in order of execution. IGNORED in route/create. API actions \u00b6 API base path: /task/route . assign \u00b6 (Re)assigns route to a new tracker (or make it unassigned). required sub-user rights : task_update . Parameters \u00b6 name description type route_id ID of the route to assign. int tracker_id ID of the tracker. Tracker must belong to authorized user and not be blocked. If null, task will be assigned to none. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/route/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"route_id\": 11231, \"tracker_id\": 223465}' HTTP GET https://api.navixy.com/v2/task/route/assign?hash=a6aa75587e5c59c32d347da438505fc3&route_id=11231&tracker_id=223465 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no task with such an ID. 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 255 \u2013 Invalid task state - if current task state is not \"unassigned\" or \"assigned\". 236 \u2013 Feature unavailable due to tariff restrictions - if device's tariff does not allow usage of tasks. create \u00b6 Creates a new route. One of checkpoints can have ID (in this case it must be a task) - it will be transmuted from task to checkpoint. required sub-user rights : task_update . Parameters \u00b6 name description type route Route object without fields which are IGNORED . JSON object checkpoints Array of checkpoint objects without fields which are IGNORED . array of JSON objects create_form If true then check additional form_template_id field in every checkpoint object and create form if it is not null. Default value is false for backward compatibility. boolean Minimal route object to create a new route must contain: { \"tracker_id\" : 223652 , \"label\" : \"Name\" , \"description\" : \"Description example\" } Also, need checkpoints list in order of execution, checkpoints from and to must be agreed with each other i.e. checkpoint to cannot be before 'from' of preceding items. { \"tracker_id\" : 223652 , \"location\" : { \"lat\" : 34.178868 , \"lng\" : -118.599672 , \"radius\" : 150 }, \"label\" : \"Name\" , \"description\" : \"Description example\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" } tracker_id - int. Optional. If the field specified then the task will be assigned to the employee associated with the tracker, otherwise it won't be assigned to anybody. location - area (circle geofence), entering and leaving of geofence will be controlled. lat - float. Latitude. lng - float. Longitude. radius - int. Radius in meters. label - string. Task name, length 1-200 characters. description - string. Task description, length 0-1024 characters. from - date/time . Start date of the interval - when the specified location has to be visited (in the user's time zone). to - date/time . End date of the interval - when the specified location has to be visited (in the user's time zone). Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/route/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"route\": {\"tracker_id\": 669673, \"label\": \"Products delivery\", \"description\": \"12 trackers of model 1 and 37 trackers of model 2\", \"from\": \"2020-03-18 10:00:00\", \"to\": \"2020-03-18 16:00:00\"}, \"checkpoints\": [{\"tracker_id\": 669673, \"location\": {\"lat\": 34.178868, \"lng\": -118.599672, \"radius\": 100}, \"label\": \"Company1\", \"description\": \"5 trackers of model 1 and 15 trackers of model 2\", \"from\": \"2021-03-18 10:00:00\", \"to\": \"2021-03-18 12:00:00\", \"external_id\": \"10100\", \"max_delay\": 0, \"min_stay_duration\": 10, \"tags\": [1, 4], \"form_template_id\": 132985}, {\"tracker_id\": 669673, \"location\": {\"lat\": 31.738386, \"lng\": -106.453854, \"radius\": 100}, \"label\": \"Company2\", \"description\": \"4 trackers of model 1 and 12 trackers of model 2\", \"from\": \"2021-03-18 10:00:00\", \"to\": \"2021-03-18 14:00:00\", \"external_id\": \"10101\", \"max_delay\": 0, \"min_stay_duration\": 10, \"tags\": [2, 4], \"form_template_id\": 132985}], \"create_form\": false}' Response \u00b6 Call returns JSON object of the created route. In response there will be external IDs which have count greater than zero. There can be multiple external IDs in response because you can specify different external IDs in a task's checkpoint. If there is nothing to return, then parameter \"external_id_counts\" will not be present in response. { \"success\" : true , \"result\" : { \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"origin\" : \"manual\" , \"checkpoint_ids\" : [ 2977 , 2978 ], \"type\" : \"route\" }, \"external_id_counts\" : [{ \"external_id\" : \"456\" , \"count\" : 2 }] } checkpoint_ids - int array. A list of route checkpoint IDs in order of execution. external_id_counts - optional object. Count of external IDs. Errors \u00b6 201 \u2013 Not found in the database - if task.tracker_id is not null and belongs to nonexistent tracker. 236 \u2013 Feature unavailable due to tariff restrictions - if device's tariff does not allow usage of tasks. delete \u00b6 Deletes route (and its checkpoints) with the specified ID. required sub-user rights : task_update . Parameters \u00b6 name description type route_id ID of the route to delete. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/route/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"route_id\": 23144}' HTTP GET https://api.navixy.com/v2/task/route/delete?hash=a6aa75587e5c59c32d347da438505fc3&route_id=23144 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no route with such an ID. list \u00b6 Get all routes belonging to user with optional filtering. Parameters \u00b6 name description type statuses Optional. List of task statuses, e.g. [\"unassigned\",\"failed\"] . Default all. enum array trackers Optional. List of tracker_id to which task assigned. int array from Optional. Show tasks which are actual AFTER this date, e.g. \"2020-06-01 00:00:00\". date/time to Optional. Show tasks which are actual BEFORE this date, e.g. \"2020-07-01 00:00:00\". date/time filter Optional. Filter for task label and description. If trackers , filter , from or to is not passed or null then appropriate condition not used to filter results. string Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/route/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/task/route/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 222653 , \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"checkpoint_ids\" : [ 2977 , 2978 ], \"type\" : \"route\" }] } Errors \u00b6 General types only. read \u00b6 Gets route by specified ID. Parameters \u00b6 name description type route_id ID of the route. int Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 222653 , \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"checkpoint_ids\" : [ 2977 , 2978 ], \"type\" : \"route\" } } value - route object described here . Errors \u00b6 201 \u2013 Not found in the database - if there is no route with such an ID. update \u00b6 Updates existing route. Note that you cannot change task owner using this method. Reordering checkpoint IDs in the checkpoint_ids array changes order of execution. required sub-user rights : task_update . Parameters \u00b6 name description type route Route object without fields which are IGNORED . JSON object checkpoints List of checkpoint objects objects. Should be null if route 's field checkpoint_ids is null, otherwise should be not null. If entry contains ID, then update existing checkpoint, else create a new one. Present route's checkpoints, which are not included in this array, will be deleted. array of objects create_form If true then check additional form_template_id field in every checkpoint object and create, replace or delete checkpoint's form. Default value is false for backward compatibility. boolean Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/route/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"route\": {\"id\": 23785, \"label\": \"Products delivery\", \"description\": \"12 trackers of model 1 and 37 trackers of model 2\", \"from\": \"2020-03-18 10:00:00\", \"to\": \"2020-03-18 16:00:00\"}, \"checkpoints\": [{\"id\": 123, \"tracker_id\": 669673, \"location\": {\"lat\": 34.178868, \"lng\": -118.599672, \"radius\": 100}, \"label\": \"Company1\", \"description\": \"5 trackers of model 1 and 15 trackers of model 2\", \"from\": \"2021-03-18 10:00:00\", \"to\": \"2021-03-18 12:00:00\", \"external_id\": \"10100\", \"max_delay\": 0, \"min_stay_duration\": 10, \"tags\": [1, 4], \"form_template_id\": 132985}, {\"id\": 124, \"tracker_id\": 669673, \"location\": {\"lat\": 31.738386, \"lng\": -106.453854, \"radius\": 100}, \"label\": \"Company2\", \"description\": \"4 trackers of model 1 and 12 trackers of model 2\", \"from\": \"2021-03-18 10:00:00\", \"to\": \"2021-03-18 14:00:00\", \"external_id\": \"10101\", \"max_delay\": 0, \"min_stay_duration\": 10, \"tags\": [2, 4], \"form_template_id\": 132985}], \"create_form\": false}' Response \u00b6 JSON object of the updated route with checkpoint_id s { \"success\" : true , \"result\" : { \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"origin\" : \"manual\" , \"checkpoint_ids\" : [ 2977 , 2978 ], \"type\" : \"route\" } } Errors \u00b6 201 \u2013 Not found in the database - if there is no task with such an ID. 255 \u2013 Invalid task state - if current task state is not \"unassigned\" or \"assigned\".","title":"Index"},{"location":"backend-api/resources/field_service/task/route/#routes","text":"Routes basically named and ordered set of checkpoints. Each checkpoint is essentially a task with an additional link to the parent route. Route completed if all the checkpoints completed and visited in the specified order. Otherwise, it is considered completed with warnings or failed.","title":"Routes"},{"location":"backend-api/resources/field_service/task/route/#route-object","text":"{ \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 222653 , \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"checkpoint_ids\" : [ 2977 , 2978 ], \"type\" : \"route\" } id - int. Primary key used in route/update, IGNORED in route/create. user_id - int. User ID. IGNORED in route/create and route/update. tracker_id - int. An ID of the tracker to which route assigned. Can be null. IGNORED in route/update. creation_date - date/time . When route created. IGNORED in route/create, route/update. from - date/time . Date AFTER which first checkpoint zone must be visited, depends on first checkpoint from , IGNORED in route/create, route/update. to - date/time . Date BEFORE which last checkpoint zone must be visited, depends on last checkpoint to , IGNORED in route/create, route/update. external_id - string. Used if route imported from external system. arbitrary text string. Can be null. status - string. A route status. IGNORED in route/create, route/update. status_change_date - date/time . When route status changed. IGNORED in route/create, route/update. origin - string. A route origin. IGNORED in route/create, route/update. tags - int array. List of tag IDs. checkpoint_ids - int array. List of route checkpoint IDs in order of execution. IGNORED in route/create.","title":"Route object"},{"location":"backend-api/resources/field_service/task/route/#api-actions","text":"API base path: /task/route .","title":"API actions"},{"location":"backend-api/resources/field_service/task/route/#assign","text":"(Re)assigns route to a new tracker (or make it unassigned). required sub-user rights : task_update .","title":"assign"},{"location":"backend-api/resources/field_service/task/route/#create","text":"Creates a new route. One of checkpoints can have ID (in this case it must be a task) - it will be transmuted from task to checkpoint. required sub-user rights : task_update .","title":"create"},{"location":"backend-api/resources/field_service/task/route/#delete","text":"Deletes route (and its checkpoints) with the specified ID. required sub-user rights : task_update .","title":"delete"},{"location":"backend-api/resources/field_service/task/route/#list","text":"Get all routes belonging to user with optional filtering.","title":"list"},{"location":"backend-api/resources/field_service/task/route/#read","text":"Gets route by specified ID.","title":"read"},{"location":"backend-api/resources/field_service/task/route/#update","text":"Updates existing route. Note that you cannot change task owner using this method. Reordering checkpoint IDs in the checkpoint_ids array changes order of execution. required sub-user rights : task_update .","title":"update"},{"location":"backend-api/resources/field_service/task/route/optimize/","text":"Optimizing routes \u00b6 To reduce transit time and costs, it may be helpful to rearrange route checkpoints so that the total travel time between them is minimized. Our platform offers a way to perform this optimization. You don't even need to create a route and checkpoints; you simply provide the necessary data for optimization, and the algorithm returns the order in which the points should be visited. API actions \u00b6 API path: /task/route/points/optimize . optimize \u00b6 The suggested order for the given route points will correspond to the time windows (from and to) of each point. Points with earlier time windows will have lower ordinal numbers. If time windows overlap, the order of such points may vary to maximize the overall efficiency of the route. The maximum distance per route optimization is 5000 kilometers. When using APIs, the maximum number of points per route optimization is 49 points to visit, plus 1 start point. required sub-user rights : task_update . Parameters \u00b6 start_point - (object) the coordinates of the location from where the performer will depart. The departure time is optional parameter. { \"lat\" : 15.233 , \"lng\" : -5.554 , \"departure\" : \"2024-03-19 13:30:00\" } route_points - (array of objects) the points that the performer must visit, and the count of points must be within the range of 2 to 49. For example: [ { \"location\" : { \"lat\" : 11.111 , \"lng\" : 11.111 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, { \"location\" : { \"lat\" : 22.222 , \"lng\" : -2.222 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, { \"location\" : { \"lat\" : -3.333 , \"lng\" : 33.333 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, { \"location\" : { \"lat\" : -4.444 , \"lng\" : -4.444 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, { \"location\" : { \"lat\" : 55.555 , \"lng\" : 55.555 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" } ] Response \u00b6 { \"success\" : true , \"result\" : [ 2 , 0 , 1 ] } The result will return the order in which the points should be visited. If for route points: [ {route_point_0}, // index in list = 0 {route_point_1}, // index in list = 1 {route_point_2} // index in list = 2 ] this action returns: [2, 0, 1] it means \"change points order as following\": point at index 2 move to index 0, point at index 0 move to index 1, point at index 1 move to index 0 or with a more tangible example with 5 points. You have the next points to be reordered [ { \"location\" : { \"lat\" : 38.81673961922754 , \"lng\" : -77.15569496154785 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, // i t has i n dex 0 { \"location\" : { \"lat\" : 38.82767290746902 , \"lng\" : -77.1445369720459 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, // i t has i n dex 1 { \"location\" : { \"lat\" : 38.834760258479704 , \"lng\" : -77.14093208312988 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, // t his o ne wi t h i n dex 2 { \"location\" : { \"lat\" : 38.81583679562883 , \"lng\" : -77.14814186096191 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, // t his wi t h i n dex 3 { \"location\" : { \"lat\" : 38.81031929163279 , \"lng\" : 7.15582370758057 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" } // a n d t his o ne has i n dex 4 ] The API request will be cURL curl -X POST 'https://api.navixy.com/v2/task/route/points/optimize' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"start_point\": {\"lat\": 38.81476676765485, \"lng\": -77.1608018875122}, \"route_points\": [{\"location\": {\"lat\": 38.81673961922754,\"lng\": -77.15569496154785}, \"from\": \"2024-03-19 00:00:00\", \"to\": \"2024-03-19 23:59:00\"}, {\"location\": {\"lat\": 38.82767290746902,\"lng\": -77.1445369720459}, \"from\": \"2024-03-19 00:00:00\", \"to\": \"2024-03-19 23:59:00\"}, {\"location\": {\"lat\": 38.834760258479704,\"lng\": -77.14093208312988}, \"from\": \"2024-03-19 00:00:00\", \"to\": \"2024-03-19 23:59:00\"}, {\"location\": {\"lat\": 38.81583679562883,\"lng\": -77.14814186096191}, \"from\": \"2024-03-19 00:00:00\", \"to\": \"2024-03-19 23:59:00\"}, {\"location\": {\"lat\": 38.81031929163279,\"lng\":7.15582370758057}, \"from\": \"2024-03-19 00:00:00\", \"to\": \"2024-03-19 23:59:00\"}]}' The platform will reply to you with: { \"result\" : [ 4 , 0 , 3 , 1 , 2 ], \"success\" : true } So the optimized route with start point from \"lat\": 38.81476676765485, \"lng\": -77.1608018875122 should be: [ { \"location\" : { \"lat\" : 38.81031929163279 , \"lng\" : 7.15582370758057 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, // t his o ne had i n dex 4 , n ow i t is t he f irs t poi nt t o visi t { \"location\" : { \"lat\" : 38.81673961922754 , \"lng\" : -77.15569496154785 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, // i t had i n dex 0 , n ow i t is t he seco n d poi nt t o visi t { \"location\" : { \"lat\" : 38.81583679562883 , \"lng\" : -77.14814186096191 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, // t his wi t h i n dex 3 becomes t he t hird poi nt t o visi t { \"location\" : { \"lat\" : 38.82767290746902 , \"lng\" : -77.1445369720459 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" }, // i t had i n dex 1 , n ow i t is t he f our t h poi nt t o visi t { \"location\" : { \"lat\" : 38.834760258479704 , \"lng\" : -77.14093208312988 }, \"from\" : \"2024-03-19 00:00:00\" , \"to\" : \"2024-03-19 23:59:00\" } // a n d t his o ne wi t h i n dex 2 , n ow i t is t he las t f i ft h poi nt t o visi t ] Errors \u00b6 7 - Invalid parameters. 210 - Path distance exceeds the max distance limit - if the overal route distance is more than 5000 km. 264 - Timeout not reached - too high api call rate.","title":"Optimize"},{"location":"backend-api/resources/field_service/task/route/optimize/#optimizing-routes","text":"To reduce transit time and costs, it may be helpful to rearrange route checkpoints so that the total travel time between them is minimized. Our platform offers a way to perform this optimization. You don't even need to create a route and checkpoints; you simply provide the necessary data for optimization, and the algorithm returns the order in which the points should be visited.","title":"Optimizing routes"},{"location":"backend-api/resources/field_service/task/route/optimize/#api-actions","text":"API path: /task/route/points/optimize .","title":"API actions"},{"location":"backend-api/resources/field_service/task/route/optimize/#optimize","text":"The suggested order for the given route points will correspond to the time windows (from and to) of each point. Points with earlier time windows will have lower ordinal numbers. If time windows overlap, the order of such points may vary to maximize the overall efficiency of the route. The maximum distance per route optimization is 5000 kilometers. When using APIs, the maximum number of points per route optimization is 49 points to visit, plus 1 start point. required sub-user rights : task_update .","title":"optimize"},{"location":"backend-api/resources/field_service/task/schedule/","text":"Recurring tasks \u00b6 Some tasks happen on regular basis, and it's tedious to create them by hand every time. Task schedules is the way to automate this process. At the beginning of each day (moments after 00:00 AM according to user's timezone setting ), schedule checked and if there are tasks which start at this day, they are created and assigned to employees (if assignee specified). Schedule entries are very similar to tasks, main difference is that from and to containing specific date and time replaced with from_time , duration and parameters . Task schedule entry object \u00b6 { \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 53.787154 , \"lng\" : 9.757980 , \"address\" : \"Moltkestrasse 32\" , \"radius\" : 150 }, \"label\" : \"Shop\" , \"description\" : \"Buy things\" , \"from_time\" : \"12:34:00\" , \"duration\" : 60 , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"min_arrival_duration\" : 0 , \"parameters\" : { \"type\" : \"weekdays\" , \"weekdays\" : [ 1 , 5 , 6 ] }, \"tags\" : [ 1 , 2 ], \"form_template_id\" : 1 } id - int. Primary key. Used in the update call, IGNORED in create. user_id - int. User ID. IGNORED in create/update. tracker_id - int. An ID of the tracker to which all generated tasks assigned. Nullable. location - location associated with this task. Cannot be null. address - string. Address of the location. radius - int. Radius of location zone in meters. from_time - string time. Time of day which defines start of the task within the days. duration - int. Total duration in minutes between \"from\" and \"to\" for generated tasks. max_delay - int. Maximum allowed task completion delay in minutes. min_stay_duration - int. Minimum duration of stay in task zone for task completion, minutes. min_arrival_duration - int. Visits less than these values will be ignored, minutes. parameters - schedule parameters can be \"weekdays\" or \"month_days\". Described below. tags - int array. List of tag IDs. form_template_id - int. Form template ID. Nullable. API actions \u00b6 API base path: task/schedule . create \u00b6 Creates new task schedule entry. required sub-user rights : task_update . Parameters \u00b6 name description type schedule schedule_entry object without fields which are IGNORED . JSON object Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/schedule/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"schedule\": {\"tracker_id\": 22, \"location\": {\"lat\": 53.787154, \"lng\": 9.757980, \"address\": \"Moltkestrasse 32\", \"radius\": 150}, \"label\": \"Shop\", \"description\": \"Buy things\", \"from_time\": \"12:34:00\", \"duration\": 60, \"max_delay\" : 5, \"min_stay_duration\": 0, \"min_arrival_duration\": 0, \"parameters\": {\"type\": \"weekdays\", \"weekdays\": [1, 5, 6]}, \"tags\": [1, 2], \"form_template_id\": 1}' Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. An ID of the created schedule entry. Errors \u00b6 201 \u2013 Not found in the database - if schedule.tracker_id belongs to nonexistent tracker. 204 \u2013 Entity not found - if schedule.form_template_id belongs to nonexistent form template. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 236 \u2013 Feature unavailable due to tariff restrictions - if device's tariff does not allow usage of tasks. delete \u00b6 Delete task schedule with the specified ID. required sub-user rights : task_update . Parameters \u00b6 name description type schedule_id ID of the task schedule to delete. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/schedule/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"schedule_id\": 23144}' HTTP GET https://api.navixy.com/v2/task/schedule/delete?hash=a6aa75587e5c59c32d347da438505fc3&schedule_id=23144 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no task schedule with such an ID. list \u00b6 Get all task or route schedules belonging to user with optional filtering. Also this call returns all unassigned task schedules. Parameters \u00b6 name description type trackers Optional. IDs of the trackers to which task schedule is assigned. int array filter Optional. Filter for task schedule label and description. string tag_ids Optional. Tag IDs assigned to the task schedule. The schedules found must include all the tags from the list. int array types Optional. Tasks of specific type will be returned in the list. Can be task or route . Default is task . string array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/schedule/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/task/schedule/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 53.787154 , \"lng\" : 9.757980 , \"address\" : \"Moltkestrasse 32\" , \"radius\" : 150 }, \"label\" : \"Shop\" , \"description\" : \"Buy things\" , \"from_time\" : \"12:34:00\" , \"duration\" : 60 , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"min_arrival_duration\" : 0 , \"parameters\" : { \"type\" : \"weekdays\" , \"weekdays\" : [ 1 , 5 , 6 ] }, \"tags\" : [ 1 , 2 ], \"form_template_id\" : 1 }] } Errors \u00b6 General types only. read \u00b6 Gets task, route or checkpoint schedule by specified ID. Parameters \u00b6 name description type id An ID of task, route or checkpoint schedule. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/schedule/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"id\": 12314}' HTTP GET https://api.navixy.com/v2/task/schedule/read?hash=a6aa75587e5c59c32d347da438505fc3&id=12314 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"label\" : \"Shop\" , \"description\" : \"Buy things\" , \"parameters\" : { \"type\" : \"weekdays\" , \"weekdays\" : [ 1 , 5 , 6 ] } }, \"checkpoints\" : [{ \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"label\" : \"Shop\" , \"description\" : \"Buy things\" , \"parent_id\" : 1 , \"order\" : 0 , \"location\" : { \"lat\" : 53.787154 , \"lng\" : 9.757980 , \"address\" : \"Moltkestrasse 32\" , \"radius\" : 150 }, \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"min_arrival_duration\" : 0 , \"from_time\" : \"12:34:00\" , \"duration\" : 60 , \"tags\" : [ 1 , 2 ], \"form_template_id\" : 1 }] } value - object. checkpoints - if value is . Errors \u00b6 General types only. update \u00b6 Updates existing task schedule. required sub-user rights : task_update . Parameters \u00b6 name description type schedule schedule_entry object without fields which are IGNORED . JSON object Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/schedule/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"schedule\": {\"tracker_id\": 22, \"location\": {\"lat\": 53.787154, \"lng\": 9.757980, \"address\": \"Moltkestrasse 32\", \"radius\": 150}, \"label\": \"Shop\", \"description\": \"Buy things\", \"from_time\": \"12:34:00\", \"duration\": 60, \"max_delay\" : 5, \"min_stay_duration\": 0, \"min_arrival_duration\": 0, \"parameters\": {\"type\": \"weekdays\", \"weekdays\": [1, 5, 6]}, \"tags\": [1, 2], \"form_template_id\": 1}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if schedule.tracker_id belongs to nonexistent tracker. 204 \u2013 Entity not found - if there is no task schedule with specified ID. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 236 \u2013 Feature unavailable due to tariff restrictions - if device's tariff does not allow usage of tasks.","title":"Recurring tasks"},{"location":"backend-api/resources/field_service/task/schedule/#recurring-tasks","text":"Some tasks happen on regular basis, and it's tedious to create them by hand every time. Task schedules is the way to automate this process. At the beginning of each day (moments after 00:00 AM according to user's timezone setting ), schedule checked and if there are tasks which start at this day, they are created and assigned to employees (if assignee specified). Schedule entries are very similar to tasks, main difference is that from and to containing specific date and time replaced with from_time , duration and parameters .","title":"Recurring tasks"},{"location":"backend-api/resources/field_service/task/schedule/#task-schedule-entry-object","text":"{ \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 53.787154 , \"lng\" : 9.757980 , \"address\" : \"Moltkestrasse 32\" , \"radius\" : 150 }, \"label\" : \"Shop\" , \"description\" : \"Buy things\" , \"from_time\" : \"12:34:00\" , \"duration\" : 60 , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"min_arrival_duration\" : 0 , \"parameters\" : { \"type\" : \"weekdays\" , \"weekdays\" : [ 1 , 5 , 6 ] }, \"tags\" : [ 1 , 2 ], \"form_template_id\" : 1 } id - int. Primary key. Used in the update call, IGNORED in create. user_id - int. User ID. IGNORED in create/update. tracker_id - int. An ID of the tracker to which all generated tasks assigned. Nullable. location - location associated with this task. Cannot be null. address - string. Address of the location. radius - int. Radius of location zone in meters. from_time - string time. Time of day which defines start of the task within the days. duration - int. Total duration in minutes between \"from\" and \"to\" for generated tasks. max_delay - int. Maximum allowed task completion delay in minutes. min_stay_duration - int. Minimum duration of stay in task zone for task completion, minutes. min_arrival_duration - int. Visits less than these values will be ignored, minutes. parameters - schedule parameters can be \"weekdays\" or \"month_days\". Described below. tags - int array. List of tag IDs. form_template_id - int. Form template ID. Nullable.","title":"Task schedule entry object"},{"location":"backend-api/resources/field_service/task/schedule/#api-actions","text":"API base path: task/schedule .","title":"API actions"},{"location":"backend-api/resources/field_service/task/schedule/#create","text":"Creates new task schedule entry. required sub-user rights : task_update .","title":"create"},{"location":"backend-api/resources/field_service/task/schedule/#delete","text":"Delete task schedule with the specified ID. required sub-user rights : task_update .","title":"delete"},{"location":"backend-api/resources/field_service/task/schedule/#list","text":"Get all task or route schedules belonging to user with optional filtering. Also this call returns all unassigned task schedules.","title":"list"},{"location":"backend-api/resources/field_service/task/schedule/#read","text":"Gets task, route or checkpoint schedule by specified ID.","title":"read"},{"location":"backend-api/resources/field_service/task/schedule/#update","text":"Updates existing task schedule. required sub-user rights : task_update .","title":"update"},{"location":"backend-api/resources/field_service/task/schedule/checkpoint/","text":"Task schedule checkpoints \u00b6 These actions allow manipulating schedule checkpoint entries similarly to regular route checkpoints. API actions \u00b6 API path: /task/schedule/checkpoint . delete \u00b6 Deletes a checkpoint from route and reorder others. If route has two checkpoints then use transmute on the other checkpoint, because route must have at least two checkpoints. Parameters \u00b6 name description type checkpoint_id Checkpoint ID. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/schedule/checkpoint/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"checkpoint_id\": 11231}' HTTP GET https://api.navixy.com/v2/task/schedule/checkpoint/delete?hash=a6aa75587e5c59c32d347da438505fc3&checkpoint_id=11231 Response \u00b6 { \"success\" : true } Errors \u00b6 General types only. transmute \u00b6 Transmutes a checkpoint to task and delete its route and other checkpoints in the route. Parameters \u00b6 name description type checkpoint_id Checkpoint ID. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/schedule/checkpoint/transmute' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"checkpoint_id\": 11231}' HTTP GET https://api.navixy.com/v2/task/schedule/checkpoint/transmute?hash=a6aa75587e5c59c32d347da438505fc3&checkpoint_id=11231 Response \u00b6 { \"success\" : true } Errors \u00b6 General types only.","title":"Checkpoints"},{"location":"backend-api/resources/field_service/task/schedule/checkpoint/#task-schedule-checkpoints","text":"These actions allow manipulating schedule checkpoint entries similarly to regular route checkpoints.","title":"Task schedule checkpoints"},{"location":"backend-api/resources/field_service/task/schedule/checkpoint/#api-actions","text":"API path: /task/schedule/checkpoint .","title":"API actions"},{"location":"backend-api/resources/field_service/task/schedule/checkpoint/#delete","text":"Deletes a checkpoint from route and reorder others. If route has two checkpoints then use transmute on the other checkpoint, because route must have at least two checkpoints.","title":"delete"},{"location":"backend-api/resources/field_service/task/schedule/checkpoint/#transmute","text":"Transmutes a checkpoint to task and delete its route and other checkpoints in the route.","title":"transmute"},{"location":"backend-api/resources/field_service/task/schedule/proposal/","text":"Schedule proposals \u00b6 Schedule proposals are \"preview\" of what tasks and routes will be created at the specified date range. API actions \u00b6 API base path: /task/schedule/proposal . list \u00b6 Get all tasks and routes that will be created by schedule. Parameters \u00b6 name description type trackers Optional. IDs of the trackers to which task is assigned. int array from Show tasks that will be created AFTER this date, e.g. \"2014-07-01 00:00:00\", should not before now. date/time to Show tasks will be created BEFORE this date, e.g. \"2014-07-01 00:00:00\", should not before from . date/time filter Optional. Filter for task schedule label and description. string types Optional. Tasks or routes. For example: [\"task\", \"route\"] . enum array If trackers , filter , from or to is not passed or null then appropriate condition not used to filter results. Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/schedule/proposal/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"from\": \"2020-11-24 00:00:00\", \"to\": \"2020-11-25 00:00:00\"}' Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 51.283546 , \"lng\" : 7.301086 , \"address\" : \"Fichtenstrasse 11\" , \"radius\" : 150 }, \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"arrival_date\" : \"2014-01-02 03:04:05\" , \"stay_duration\" : 0 , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"type\" : \"task\" , \"form\" : < f orm_objec t > }] } Errors \u00b6 General types only.","title":"Schedule proposals"},{"location":"backend-api/resources/field_service/task/schedule/proposal/#schedule-proposals","text":"Schedule proposals are \"preview\" of what tasks and routes will be created at the specified date range.","title":"Schedule proposals"},{"location":"backend-api/resources/field_service/task/schedule/proposal/#api-actions","text":"API base path: /task/schedule/proposal .","title":"API actions"},{"location":"backend-api/resources/field_service/task/schedule/proposal/#list","text":"Get all tasks and routes that will be created by schedule.","title":"list"},{"location":"backend-api/resources/field_service/task/schedule/route/","text":"Scheduling routes \u00b6 These actions allow creating scheduled routes similarly to regular routes. Route schedule entry \u00b6 ```json { \"id\": 111, \"user_id\": 3, \"tracker_id\": 22, \"label\": \"Shop\", \"description\": \"Buy things\", \"parameters\": { \"type\": \"month_days\", \"month_days\": [1, 10, 31] } } * `id` - int. Primary key. Used in the update call, *IGNORED* in create. * `user_id` - int. User id. *IGNORED* in create/update. * `tracker_id` - int. An ID of the tracker to which all generated tasks assigned. Nullable. * `parameters` - schedule parameters can be \"weekdays\" or \"month_days\". Described below. ## Checkpoint schedule entry ```json { \"id\": 111, \"user_id\": 3, \"tracker_id\": 22, \"label\": \"Shop\", \"description\": \"Buy things\", \"parent_id\": 1, \"order\": 0, \"location\": { \"lat\": 53.787154, \"lng\": 9.757980, \"address\": \"Moltkestrasse 32\", \"radius\": 150 }, \"max_delay\" : 5, \"min_stay_duration\": 0, \"min_arrival_duration\": 0, \"from_time\": \"12:34:00\", \"duration\": 60, \"tags\": [1, 2], \"form_template_id\": 1 } id - int. Primary key. Used in the update call, IGNORED in create. user_id - int. User id. IGNORED in create/update. tracker_id - int. An ID of the tracker to which all generated tasks assigned. Nullable. location - location associated with this task. Cannot be null. address - string. Address of the location. radius - int. Radius of location zone in meters. max_delay - int. Maximum allowed task completion delay in minutes. min_stay_duration - int. Minimum duration of stay in task zone for task completion, minutes. min_arrival_duration - int. Visits less than these values will be ignored, minutes. from_time - string time. Time of day which defines start of the task within the days. duration - int. Total duration in minutes between \"from\" and \"to\" for generated tasks. tags - int array. List of tag IDs. form_template_id - int. Form template id. Nullable. <schedule_parameters> can be one of the following: weekdays - task creation based on week day. { \"type\" : \"weekdays\" , \"weekdays\" : [ 1 , 5 , 6 ] } * `weekdays` - int array. Week days on which tasks will be created (1 = Monday, ... 7 = Sunday) month_days - task creation based on day of month. { \"type\" : \"month_days\" , \"month_days\" : [ 1 , 10 , 31 ] } * `month_days` - int array. Days of month on which tasks will be created (1..31). API actions \u00b6 API base path: /task/schedule/route . create \u00b6 Creates route schedule with checkpoints. Parameters \u00b6 name description type route Route schedule entry without fields which are IGNORED . JSON object checkpoints Array of route's checkpoints without fields which are IGNORED . JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/schedule/route/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"route\": {\"tracker_id\": 22, \"label\": \"Shop\", \"description\": \"Buy things\", \"parameters\": {\"type\": \"month_days\",\"month_days\": [1, 10, 31]}}, \"checkpoints\": [{\"tracker_id\": 22, \"label\": \"Shop\", \"description\": \"Buy things\", \"parent_id\": 1, \"order\": 0, \"location\": { \"lat\": 53.787154, \"lng\": 9.757980, \"address\": \"Moltkestrasse 32\", \"radius\": 150}, \"max_delay\" : 5, \"min_stay_duration\": 0, \"min_arrival_duration\": 0, \"from_time\": \"12:34:00\", \"duration\": 60, \"tags\": [1, 2], \"form_template_id\": 1}]}' Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. An ID of the created route schedule entry. Errors \u00b6 General types. delete \u00b6 Deletes route schedule with checkpoints. Parameters \u00b6 name description type id Route schedule ID. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/schedule/route/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"id\": 23144}' HTTP GET https://api.navixy.com/v2/task/schedule/route/delete?hash=a6aa75587e5c59c32d347da438505fc3&id=23144 Response \u00b6 { \"success\" : true } Errors \u00b6 General types. update \u00b6 Updates route schedule with checkpoints. If checkpoint is being created, then it should have no id. If checkpoint is being updated, then it should have an ID. If old checkpoint is not present in request, then it will be deleted. Parameters \u00b6 name description type route Route schedule entry without fields which are IGNORED . JSON object checkpoints Array of route's checkpoints without fields which are IGNORED . JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/task/schedule/route/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"route\": {\"id\": 111, \"tracker_id\": 22, \"label\": \"Shop\", \"description\": \"Buy things\", \"parameters\": {\"type\": \"month_days\",\"month_days\": [1, 10, 31]}}, \"checkpoints\": {\"id\": 111, \"tracker_id\": 22, \"label\": \"Shop\", \"description\": \"Buy things\", \"parent_id\": 1, \"order\": 0, \"location\": { \"lat\": 53.787154, \"lng\": 9.757980, \"address\": \"Moltkestrasse 32\", \"radius\": 150}, \"max_delay\" : 5, \"min_stay_duration\": 0, \"min_arrival_duration\": 0, \"from_time\": \"12:34:00\", \"duration\": 60, \"tags\": [1, 2], \"form_template_id\": 1}}' Response \u00b6 { \"success\" : true } Errors \u00b6 General types.","title":"Scheduling routes"},{"location":"backend-api/resources/field_service/task/schedule/route/#scheduling-routes","text":"These actions allow creating scheduled routes similarly to regular routes.","title":"Scheduling routes"},{"location":"backend-api/resources/field_service/task/schedule/route/#route-schedule-entry","text":"```json { \"id\": 111, \"user_id\": 3, \"tracker_id\": 22, \"label\": \"Shop\", \"description\": \"Buy things\", \"parameters\": { \"type\": \"month_days\", \"month_days\": [1, 10, 31] } } * `id` - int. Primary key. Used in the update call, *IGNORED* in create. * `user_id` - int. User id. *IGNORED* in create/update. * `tracker_id` - int. An ID of the tracker to which all generated tasks assigned. Nullable. * `parameters` - schedule parameters can be \"weekdays\" or \"month_days\". Described below. ## Checkpoint schedule entry ```json { \"id\": 111, \"user_id\": 3, \"tracker_id\": 22, \"label\": \"Shop\", \"description\": \"Buy things\", \"parent_id\": 1, \"order\": 0, \"location\": { \"lat\": 53.787154, \"lng\": 9.757980, \"address\": \"Moltkestrasse 32\", \"radius\": 150 }, \"max_delay\" : 5, \"min_stay_duration\": 0, \"min_arrival_duration\": 0, \"from_time\": \"12:34:00\", \"duration\": 60, \"tags\": [1, 2], \"form_template_id\": 1 } id - int. Primary key. Used in the update call, IGNORED in create. user_id - int. User id. IGNORED in create/update. tracker_id - int. An ID of the tracker to which all generated tasks assigned. Nullable. location - location associated with this task. Cannot be null. address - string. Address of the location. radius - int. Radius of location zone in meters. max_delay - int. Maximum allowed task completion delay in minutes. min_stay_duration - int. Minimum duration of stay in task zone for task completion, minutes. min_arrival_duration - int. Visits less than these values will be ignored, minutes. from_time - string time. Time of day which defines start of the task within the days. duration - int. Total duration in minutes between \"from\" and \"to\" for generated tasks. tags - int array. List of tag IDs. form_template_id - int. Form template id. Nullable. <schedule_parameters> can be one of the following: weekdays - task creation based on week day. { \"type\" : \"weekdays\" , \"weekdays\" : [ 1 , 5 , 6 ] } * `weekdays` - int array. Week days on which tasks will be created (1 = Monday, ... 7 = Sunday) month_days - task creation based on day of month. { \"type\" : \"month_days\" , \"month_days\" : [ 1 , 10 , 31 ] } * `month_days` - int array. Days of month on which tasks will be created (1..31).","title":"Route schedule entry"},{"location":"backend-api/resources/field_service/task/schedule/route/#api-actions","text":"API base path: /task/schedule/route .","title":"API actions"},{"location":"backend-api/resources/field_service/task/schedule/route/#create","text":"Creates route schedule with checkpoints.","title":"create"},{"location":"backend-api/resources/field_service/task/schedule/route/#delete","text":"Deletes route schedule with checkpoints.","title":"delete"},{"location":"backend-api/resources/field_service/task/schedule/route/#update","text":"Updates route schedule with checkpoints. If checkpoint is being created, then it should have no id. If checkpoint is being updated, then it should have an ID. If old checkpoint is not present in request, then it will be deleted.","title":"update"},{"location":"backend-api/resources/fleet/garage/","text":"Garage \u00b6 Contains garage object and API calls to interact with it. Depot (garage object) contains name, address, name of the mechanic, name of the dispatcher and others. This data can be used for more convenient and efficient maintenance and task management. Garage object \u00b6 { \"id\" : 222 , \"location\" : { \"lat\" : 40.4 , \"lng\" : -3.6 , \"address\" : \"Calle Salitre, 58\" , \"radius\" : 150 }, \"mechanic_name\" : \"Martinez\" , \"dispatcher_name\" : \"Velasquez\" , \"organization_name\" : \"Bankia\" } id - int. Depot ID. location - location object. Valid location or null. mechanic_name - string. Mechanic name or null. dispatcher_name - string. Dispatcher name or null. organization_name - string. Organization name or null. API actions \u00b6 API path: /garage . list \u00b6 Gets all depots belonging to user. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/garage/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/garage/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 222 , \"location\" : { \"lat\" : 40.4 , \"lng\" : -3.6 , \"address\" : \"Calle Salitre, 58\" , \"radius\" : 150 }, \"mechanic_name\" : \"Martinez\" , \"dispatcher_name\" : \"Velasquez\" , \"organization_name\" : \"Bankia\" }] } Errors \u00b6 General types only. create \u00b6 Creates a new depot. required sub-user rights : vehicle_update . Parameters \u00b6 name description type garage An garage object without id field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/garage/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"garage\": {\"location\": {\"lat\": 40.4, \"lng\": -3.6, \"address\": \"Calle Salitre, 58\", \"radius\": 150}, \"mechanic_name\": \"Martinez\", \"dispatcher_name\": \"Velasquez\", \"organization_name\": \"Bankia\"}}' Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. An ID of a created depot. Errors \u00b6 General types only. update \u00b6 Updates existing depot with the specified ID. required sub-user rights : vehicle_update . Parameters \u00b6 name description type garage An garage object with id field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/garage/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"garage\": {\"id\": 222, location\": {\"lat\": 40.4, \"lng\": -3.6, \"address\": \"Calle Salitre, 58\", \"radius\": 150}, \"mechanic_name\": \"Martinez\", \"dispatcher_name\": \"Velasquez\", \"organization_name\": \"Bankia\"}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no depot with such an ID. delete \u00b6 Deletes a depot with the specified ID. required sub-user rights : vehicle_update . Parameters \u00b6 name description type garage_id ID of the depot to delete. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/garage/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"garage_id\": 111}' HTTP GET https://api.navixy.com/v2/garage/delete?hash=a6aa75587e5c59c32d347da438505fc3&garage_id=111 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no depot with such an ID.","title":"Garage"},{"location":"backend-api/resources/fleet/garage/#garage","text":"Contains garage object and API calls to interact with it. Depot (garage object) contains name, address, name of the mechanic, name of the dispatcher and others. This data can be used for more convenient and efficient maintenance and task management.","title":"Garage"},{"location":"backend-api/resources/fleet/garage/#garage-object","text":"{ \"id\" : 222 , \"location\" : { \"lat\" : 40.4 , \"lng\" : -3.6 , \"address\" : \"Calle Salitre, 58\" , \"radius\" : 150 }, \"mechanic_name\" : \"Martinez\" , \"dispatcher_name\" : \"Velasquez\" , \"organization_name\" : \"Bankia\" } id - int. Depot ID. location - location object. Valid location or null. mechanic_name - string. Mechanic name or null. dispatcher_name - string. Dispatcher name or null. organization_name - string. Organization name or null.","title":"Garage object"},{"location":"backend-api/resources/fleet/garage/#api-actions","text":"API path: /garage .","title":"API actions"},{"location":"backend-api/resources/fleet/garage/#list","text":"Gets all depots belonging to user.","title":"list"},{"location":"backend-api/resources/fleet/garage/#create","text":"Creates a new depot. required sub-user rights : vehicle_update .","title":"create"},{"location":"backend-api/resources/fleet/garage/#update","text":"Updates existing depot with the specified ID. required sub-user rights : vehicle_update .","title":"update"},{"location":"backend-api/resources/fleet/garage/#delete","text":"Deletes a depot with the specified ID. required sub-user rights : vehicle_update .","title":"delete"},{"location":"backend-api/resources/fleet/driver_journal/entry/","text":"Driver journal entry \u00b6 Contains driver journal entry object description and API calls to work with it. Using the driver journal, you can monitor trips and categorize them by status to see the full picture of transport usage. Driver Entry is an already categorized trip. To get information on how-to work with driver journals refer to our instructions . Driver journal entry object \u00b6 { \"id\" : 127722 , \"tracker_id\" : 1 , \"start_date\" : \"2020-10-13 07:03:39\" , \"end_date\" : \"2020-10-14 08:05:02\" , \"employee_id\" : 1 , \"type\" : \"work\" , \"comment\" : \"comment string\" , \"start_location\" : { \"lat\" : 11.0 , \"lng\" : 22.0 , \"address\" : \"address value\" }, \"end_location\" : { \"lat\" : 11.0 , \"lng\" : 22.0 , \"address\" : \"address value\" }, \"length\" : 1.44 , \"start_odometer\" : 1.34 , \"end_odometer\" : 5.34 } id - int. An ID of an entry. tracker_id - int. An ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. start_date - date/time . Start date of a journal entry. end_date - date/time . End date of a journal entry. employee_id - nullable int. An ID of employee (driver). type - enum . Type of journal entry. Can be \"work\", \"personal\", \"other\". comment - nullable string. Comment for entry. start_location - location object. Where entry starts. end_location - location object. Where entry ends. length - float. Length of the trip km. start_odometer - nullable float. Odometer's value at the start. end_odometer - nullable float. Odometer's value at the end. API actions \u00b6 API path: /driver/journal/entry . list \u00b6 Gets driver journal entries. There are two ways to get entries: by their IDs or by specifying date range. If there are no entry_ids in request, entries will be selected by intersecting their date range with date range from request ( from and to parameters). Parameters \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int from Include tracks which end after this date, e.g. \"2020-10-13 00:00:00\". date/time to Include tracks which end after this date, e.g. \"2020-10-14 00:00:00\". date/time entry_ids Optional. Array of entry IDs. int array types Optional. Types of the driver journal entry, e.g. [\"work\", \"personal\", \"other\"] . string array sort Optional. Set of sort options. Each option is a pair of column name and sorting direction, e.g. [\"start_date=asc\", \"type=desc\"] . string array Possible columns of sort parameter: start_date - Sort only by date, not considering time part. start_datetime - Just raw column value. end_date - Sort only by date, not considering time part. end_datetime - Just raw column value. start_address - Sort only by start address. end_address - Sort only by the end address. driver - Sort by last+first+middle driver name, not by driver ID. type - Sort by type. If no sort param is specified, then sort option will be \"start_date=asc\". Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/driver/journal/entry/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 123456, \"from\": \"2020-10-13 00:00:00\", \"to\": \"2020-10-14 00:00:00\"}' Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 127722 , \"tracker_id\" : 1 , \"start_date\" : \"2020-10-13 07:03:39\" , \"end_date\" : \"2020-10-14 08:05:02\" , \"employee_id\" : 1 , \"type\" : \"work\" , \"comment\" : null , \"start_location\" : { \"lat\" : 23.25658 , \"lng\" : 21.89892 , \"address\" : \"address\" }, \"end_location\" : { \"lat\" : 23.26227 , \"lng\" : 21.59321 , \"address\" : \"address\" }, \"length\" : 1.44 , \"start_odometer\" : 1.34 , \"end_odometer\" : 5.34 }] } Errors \u00b6 General types only. create \u00b6 Creates driver journal entries. Parameters \u00b6 name description type entries Array of driver_journal_entry objects without id field. array of objects Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/driver/journal/entry/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"entries\": [{\"tracker_id\": 1, \"start_date\": \"2020-10-13 07:03:39\", \"end_date\": \"2020-10-14 08:05:02\", \"employee_id\": 1, \"type\": \"work\", \"comment\": \"comment string\", \"start_location\": {\"lat\": 11.0, \"lng\": 22.0, \"address\": \"address value\"}, \"end_location\": {\"lat\": 11.0, \"lng\": 22.0, \"address\": \"address value\"}, \"length\": 1.44, \"start_odometer\": 1.34, \"end_odometer\": 5.34}]}' Response \u00b6 { \"success\" : true } Errors \u00b6 General types. update \u00b6 Updates driver journal entry. Only two fields type and comment are available to update. Parameters \u00b6 name description type entry driver_journal_entry_update_request type. See below. JSON object driver_journal_entry_update_request object: { \"id\" : 1 , \"type\" : \"work\" , \"comment\" : \"new comment\" } id - int. An ID of the driver journal entry. type - enum . Type of journal entry. Can be \"work\", \"personal\", \"other\". comment - string. New comment of the driver journal entry. Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/driver/journal/entry/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"entry\": {\"id\": 1, \"type\": \"work\", \"comment\": \"new comment\"}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 if tracker not found 204 - if entry not found. General types only. delete \u00b6 Deletes driver journal entries. Parameters \u00b6 name description type entry_ids Array of driver journal entries' IDs. int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/driver/journal/entry/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"entry_ids\": [127722, 127724]}' HTTP GET https://api.navixy.com/v2/driver/journal/entry/delete?hash=a6aa75587e5c59c32d347da438505fc3&entry_id=[127722, 127724] Response \u00b6 { \"success\" : true } Errors \u00b6 General types only. download \u00b6 Gets driver journal entries. Entries selected by intersecting their date range with date range from request ( from and to parameters). Parameters \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int from Include tracks which end after this date, e.g. \"2020-10-13 00:00:00\". date/time to Include tracks which end after this date, e.g. \"2020-10-14 00:00:00\". date/time entry_ids Optional. Array of entry IDs. int array types Optional. Types of the driver journal entry, e.g. [\"work\", \"personal\", \"other\"] . string array sort Optional. Set of sort options . Each option is a pair of column name and sorting direction, e.g. [\"start_date=asc\", \"type=desc\"] . string array add_filename_header If true then Content-Disposition header will be appended to the response. Default value is true . boolean format File format: \"pdf\", \"xls\" and \"xlsx\". string group_by Optional. If specified, grouped entries will be in different sections of the table. string Possible values of group_by parameter: type - group entries by entry type. date - group entries by start_date per day. Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/driver/journal/entry/download' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 123456, \"from\": \"2020-10-13 00:00:00\", \"to\": \"2020-10-14 00:00:00\", \"add_filename_header\": true, \"format\": \"pdf\"}' Response \u00b6 A driver journal report file (standard file download). Errors \u00b6 General types only.","title":"Entry"},{"location":"backend-api/resources/fleet/driver_journal/entry/#driver-journal-entry","text":"Contains driver journal entry object description and API calls to work with it. Using the driver journal, you can monitor trips and categorize them by status to see the full picture of transport usage. Driver Entry is an already categorized trip. To get information on how-to work with driver journals refer to our instructions .","title":"Driver journal entry"},{"location":"backend-api/resources/fleet/driver_journal/entry/#driver-journal-entry-object","text":"{ \"id\" : 127722 , \"tracker_id\" : 1 , \"start_date\" : \"2020-10-13 07:03:39\" , \"end_date\" : \"2020-10-14 08:05:02\" , \"employee_id\" : 1 , \"type\" : \"work\" , \"comment\" : \"comment string\" , \"start_location\" : { \"lat\" : 11.0 , \"lng\" : 22.0 , \"address\" : \"address value\" }, \"end_location\" : { \"lat\" : 11.0 , \"lng\" : 22.0 , \"address\" : \"address value\" }, \"length\" : 1.44 , \"start_odometer\" : 1.34 , \"end_odometer\" : 5.34 } id - int. An ID of an entry. tracker_id - int. An ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. start_date - date/time . Start date of a journal entry. end_date - date/time . End date of a journal entry. employee_id - nullable int. An ID of employee (driver). type - enum . Type of journal entry. Can be \"work\", \"personal\", \"other\". comment - nullable string. Comment for entry. start_location - location object. Where entry starts. end_location - location object. Where entry ends. length - float. Length of the trip km. start_odometer - nullable float. Odometer's value at the start. end_odometer - nullable float. Odometer's value at the end.","title":"Driver journal entry object"},{"location":"backend-api/resources/fleet/driver_journal/entry/#api-actions","text":"API path: /driver/journal/entry .","title":"API actions"},{"location":"backend-api/resources/fleet/driver_journal/entry/#list","text":"Gets driver journal entries. There are two ways to get entries: by their IDs or by specifying date range. If there are no entry_ids in request, entries will be selected by intersecting their date range with date range from request ( from and to parameters).","title":"list"},{"location":"backend-api/resources/fleet/driver_journal/entry/#create","text":"Creates driver journal entries.","title":"create"},{"location":"backend-api/resources/fleet/driver_journal/entry/#update","text":"Updates driver journal entry. Only two fields type and comment are available to update.","title":"update"},{"location":"backend-api/resources/fleet/driver_journal/entry/#delete","text":"Deletes driver journal entries.","title":"delete"},{"location":"backend-api/resources/fleet/driver_journal/entry/#download","text":"Gets driver journal entries. Entries selected by intersecting their date range with date range from request ( from and to parameters).","title":"download"},{"location":"backend-api/resources/fleet/driver_journal/proposal/","text":"Trip proposal for driver journal \u00b6 Contains API call to get the list of driver journal proposal. Proposal objects - trips per specified period that could be used for driver journal entry creation. To get information on how-to work with driver journals refer to our instructions . API actions \u00b6 API path: /driver/journal/proposal . list \u00b6 Gets proposal trips that could be used for driver journal entry creation. Proposal objects created by a track's division by driver changes. If there was no driver change on the track, then the track will be returned entirely. Tracks selected by intersecting their date range with date range from request ( from and to parameters). Parameters \u00b6 name description type from Include tracks which end after this date. string to Include tracks which start before this date. string tracker_id ID of the tracker. int Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/driver/journal/proposal/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 123456, \"from\": \"2020-10-13 00:00:00\", \"to\": \"2020-10-14 00:00:00\"}' Response \u00b6 { \"success\" : true , \"list\" : [{ \"tracker_id\" : 1 , \"employee_id\" : 1 , \"start_date\" : \"2020-10-14 07:03:39\" , \"end_date\" : \"2020-10-15 08:05:02\" , \"start_location\" : { \"lat\" : 11.111111 , \"lng\" : 22.222222 , \"address\" : \"Address string\" }, \"end_location\" : { \"lat\" : 33.333333 , \"lng\" : 44.444444 , \"address\" : \"Address string\" }, \"length\" : 2.1 , \"start_odometer\" : 50.2 , \"end_odometer\" : 52.0 , \"overlapped\" : false }] } tracker_id - int. An ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. employee_id - nullable int. An ID of employee (driver). start_date - date/time . Start date of a journal entry. end_date - date/time . End date of a journal entry. start_location - location object. Where entry starts. end_location - location object. Where entry ends. length - float. Length of the trip km. start_odometer - nullable float. Odometer's value at the start. end_odometer - nullable float. Odometer's value at the end. overlapped - boolean. true if there is already driver journal entry with date range which is intersecting this proposal object's date range. Errors \u00b6 General types only.","title":"Proposal"},{"location":"backend-api/resources/fleet/driver_journal/proposal/#trip-proposal-for-driver-journal","text":"Contains API call to get the list of driver journal proposal. Proposal objects - trips per specified period that could be used for driver journal entry creation. To get information on how-to work with driver journals refer to our instructions .","title":"Trip proposal for driver journal"},{"location":"backend-api/resources/fleet/driver_journal/proposal/#api-actions","text":"API path: /driver/journal/proposal .","title":"API actions"},{"location":"backend-api/resources/fleet/driver_journal/proposal/#list","text":"Gets proposal trips that could be used for driver journal entry creation. Proposal objects created by a track's division by driver changes. If there was no driver change on the track, then the track will be returned entirely. Tracks selected by intersecting their date range with date range from request ( from and to parameters).","title":"list"},{"location":"backend-api/resources/fleet/vehicle/","text":"Vehicle \u00b6 Contains the vehicle object and API calls to interact with it. This object is used to describe vehicle's information like VIN, speed, consumption and other. Vehicle object should be assigned to tracker object. Vehicle object \u00b6 { \"id\" : 222 , \"tracker_id\" : 1 , \"tracker_label\" : \"Jimi LL301\" , \"label\" : \"AGV\" , \"max_speed\" : 90 , \"model\" : \"Renault KERAX\" , \"type\" : \"truck\" , \"subtype\" : \"tractor\" , \"garage_id\" : 1 , \"garage_organization_name\" : \"Fleet Systems\" , \"trailer\" : \"trailer1\" , \"manufacture_year\" : 2001 , \"color\" : \"some color\" , \"additional_info\" : \"additional info\" , \"reg_number\" : \"\u0410001\u0410\u041096\" , \"vin\" : \"TMBJF25LXC6080000\" , \"chassis_number\" : \"\" , \"frame_number\" : \"\" , \"payload_weight\" : 32000 , \"payload_height\" : 1.2 , \"payload_length\" : 1.0 , \"payload_width\" : 1.0 , \"passengers\" : 4 , \"gross_weight\" : null , \"fuel_type\" : \"petrol\" , \"fuel_grade\" : \"\u0410-80\" , \"norm_avg_fuel_consumption\" : 9.0 , \"fuel_tank_volume\" : 50 , \"fuel_cost\" : 100.3 , \"wheel_arrangement\" : \"4x2\" , \"tyre_size\" : \"255/65 R16\" , \"tyres_number\" : 4 , \"liability_insurance_policy_number\" : \"12345\" , \"liability_insurance_valid_till\" : \"2020-10-15\" , \"free_insurance_policy_number\" : \"\" , \"free_insurance_valid_till\" : null , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"tags\" : [ 1 , 2 ] } id - int. An ID of a vehicle. tracker_id - int. An ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. tracker_label - optional string. Tracker's label. label - string. Vehicle's label. max_speed - int. Maximum speed of a vehicle. model - string. Vehicle's model. type enum . Vehicle's type. Can be \"truck\" | \"car\" | \"bus\" | \"special\". subtype - optional enum . Depends on type, null means undefined. Possible subtypes listed below. garage_id - nullable int. An ID of a garage. garage_organization_name - optional string. Garage organization name. trailer - optional string. Information about a trailer. manufacture_year - optional int. Manufacture year of a vehicle. color - optional string. Not RGB. A color of a vehicle. additional_info - optional string. Additional info about a vehicle. reg_number - string. Reg number/ license plate of a vehicle. vin - string. VIN of a vehicle. chassis_number - string. Chassis number of a vehicle. frame_number - optional string. Frame number of a vehicle. payload_weight - int. Payload weight in kilograms. payload_height - decimal. Payload height in millimeters. payload_length - decimal. Payload length in millimeters. payload_width - decimal. Payload width in millimeters. passengers - int. A maximum count of passengers. gross_weight - optional int. Gross weight in kilograms. fuel_type - enum . Can be \"petrol\" | \"diesel\" | \"gas\". fuel_grade - string. Grade of fuel used in a vehicle. norm_avg_fuel_consumption - decimal. Normal average fuel consumption in liters per 100 km. fuel_tank_volume - int. Fuel tank capacity in liters. fuel_cost - optional decimal. Cost of fuel used in a vehicle per liter. wheel_arrangement - string. Wheel arrangement of a vehicle. tyre_size - string. Tyre size. tyres_number - int. Number of tyres. liability_insurance_policy_number - string. Liability insurance policy number. liability_insurance_valid_till - string date. The date till liability insurance valid. free_insurance_policy_number - string. Free insurance policy number. free_insurance_valid_till - string date. The date till free insurance valid. icon_id - nullable int. Can only be updated via avatar/assign . avatar_file_name - string. File name. tags - int array. List of tag IDs. Subtypes: Type: \"car\" Subtypes: \"sedan\", \"universal\", \"hatchback\", \"liftback\", \"limousine\", \"pickup\", \"minivan\", \"coupe\", \"coupe4d\", \"muscle\", \"convertible\", \"phaeton\", \"lando\", \"crossover\", \"roadster\", \"suv\" Type: \"truck\" Subtypes: \"tipper\", \"board\", \"covered\", \"awning\", \"mixer\", \"tanker\", \"refrigerator\", \"transporter\", \"container\", \"tractor\" Type: \"bus\" Subtypes: \"city\", \"shuttle\", \"platform\", \"school\", \"intercity\", \"sightseeing\" Type: \"special\" Subtypes: \"mobile_crane\", \"racing\", \"buggy\", \"ambulance\", \"firefighter\", \"hearse\", \"shop\", \"harvester\", \"snowplow\", \"tractor\", \"grader\", \"excavator\", \"bulldozer\", \"armored\", \"amphibian\", \"boat\" API actions \u00b6 API path: /vehicle . create \u00b6 Creates a new vehicle. required sub-user rights : vehicle_update Parameters \u00b6 name description type vehicle A vehicle object without id field. JSON object force_reassign Optional. Default is true . Will reassign the device to created vehicle even if it was assign to another one. boolean Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"vehicle\": {\"additional_info\": null, \"avatar_file_name\": null, \"chassis_number\": \"\", \"color\": null, \"frame_number\": \"\", \"free_insurance_policy_number\": \"\", \"free_insurance_valid_till\": null, \"fuel_cost\": null, \"fuel_grade\": \"\", \"fuel_tank_volume\": null, \"fuel_type\": null, \"garage_id\": null, \"gross_weight\": null, \"icon_color\": \"1E96DC\", \"icon_id\": null, \"label\": \"Vehicle\", \"liability_insurance_policy_number\": \"\", \"liability_insurance_valid_till\": null, \"manufacture_year\": 2020, \"max_speed\": 160, \"model\": \"\", \"norm_avg_fuel_consumption\": null, \"passengers\": 1, \"payload_height\": 1868, \"payload_length\": 2820, \"payload_weight\": null, \"payload_width\": 1972, \"reg_number\": \"AB234D\", \"subtype\": \"sedan\", \"tags\": [], \"tracker_id\": null, \"trailer\": null, \"type\": \"car\", \"tyre_size\": \"\", \"tyres_number\": null, \"vin\": \"45468743418579751\", \"wheel_arrangement\": null}}' Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. An ID of the created vehicle. Errors \u00b6 247 \u2013 Entity already exists, if tracker_id!=null and exists a vehicle that already bound to this tracker_id. delete \u00b6 Deletes a vehicles with the specified IDs. Only one of the following parameters must be specified. required sub-user rights : vehicle_update . Parameters \u00b6 name description type vehicle_id ID of the vehicle to delete. int vehicle_ids An array of vehicle IDs to delete. int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"vehicle_id\": 127722}' HTTP GET https://api.navixy.com/v2/vehicle/delete?hash=a6aa75587e5c59c32d347da438505fc3&vehicle_id=127722 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no vehicle with such an ID. This error will not occur if the vehicle_ids parameter is specified, deletion is silent in this case. list \u00b6 Gets all vehicles belonging to user. Parameters \u00b6 name description type limit Pagination. Maximum number of vehicle records to return. int offset Pagination. Get vehicles starting from. int sort Optional. Set of sort options. Each option is a pair of property name and sorting direction, e.g. [\"type=desc\",\"label=asc\"] . Maximum 2 options in request. Available properties: - id - label - reg_number - model - type - garage_organization_name - vin - tracker_label - fuel_type - fuel_grade - norm_avg_fuel_consumption - fuel_tank_volume - payload_weight - chassis_number - subtype - wheel_arrangement - tyres_number - tyres_size - max_speed - passengers string array filter Optional. Filter vehicles by VIN, reg_number or label. Maximum 100 characters or null. string Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/vehicle/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 222 , \"tracker_id\" : 1 , \"tracker_label\" : \"Jimi LL301\" , \"label\" : \"AGV\" , \"max_speed\" : 90 , \"model\" : \"Renault KERAX\" , \"type\" : \"truck\" , \"subtype\" : \"tractor\" , \"garage_id\" : 1 , \"garage_organization_name\" : \"Fleet Systems\" , \"trailer\" : \"trailer1\" , \"manufacture_year\" : 2001 , \"color\" : \"some color\" , \"additional_info\" : \"additional info\" , \"reg_number\" : \"\u0410001\u0410\u041096\" , \"vin\" : \"TMBJF25LXC6080000\" , \"chassis_number\" : \"\" , \"frame_number\" : \"\" , \"payload_weight\" : 32000 , \"payload_height\" : 1.2 , \"payload_length\" : 1.0 , \"payload_width\" : 1.0 , \"passengers\" : 4 , \"gross_weight\" : null , \"fuel_type\" : \"petrol\" , \"fuel_grade\" : \"\u0410-80\" , \"norm_avg_fuel_consumption\" : 9.0 , \"fuel_tank_volume\" : 50 , \"fuel_cost\" : 100.3 , \"wheel_arrangement\" : \"4x2\" , \"tyre_size\" : \"255/65 R16\" , \"tyres_number\" : 4 , \"liability_insurance_policy_number\" : \"12345\" , \"liability_insurance_valid_till\" : \"2020-10-15\" , \"free_insurance_policy_number\" : \"\" , \"free_insurance_valid_till\" : null , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"tags\" : [ 1 , 2 ] }] } Errors \u00b6 General types only. read \u00b6 Gets vehicle by specified ID. Parameters \u00b6 name description type vehicle_id ID of a vehicle. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"vehicle_id\": 127722}' HTTP GET https://api.navixy.com/v2/vehicle/read?hash=a6aa75587e5c59c32d347da438505fc3&vehicle_id=127722 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 222 , \"tracker_id\" : 1 , \"label\" : \"AGV\" , \"max_speed\" : 90 , \"model\" : \"Renault KERAX\" , \"type\" : \"truck\" , \"subtype\" : \"tractor\" , \"garage_id\" : null , \"trailer\" : \"trailer1\" , \"manufacture_year\" : 2001 , \"color\" : \"some color\" , \"additional_info\" : \"additional info\" , \"reg_number\" : \"\u0410001\u0410\u041096\" , \"vin\" : \"TMBJF25LXC6080000\" , \"chassis_number\" : \"\" , \"frame_number\" : \"\" , \"payload_weight\" : 32000 , \"payload_height\" : 1.2 , \"payload_length\" : 1.0 , \"payload_width\" : 1.0 , \"passengers\" : 4 , \"gross_weight\" : null , \"fuel_type\" : \"petrol\" , \"fuel_grade\" : \"\u0410-80\" , \"norm_avg_fuel_consumption\" : 9.0 , \"fuel_tank_volume\" : 50 , \"fuel_cost\" : 100.3 , \"wheel_arrangement\" : \"4x2\" , \"tyre_size\" : \"255/65 R16\" , \"tyres_number\" : 4 , \"liability_insurance_policy_number\" : \"12345\" , \"liability_insurance_valid_till\" : \"2020-10-15\" , \"free_insurance_policy_number\" : \"\" , \"free_insurance_valid_till\" : null , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"tags\" : [ 1 , 2 ] } } A vehicle object . Errors \u00b6 201 \u2013 Not found in the database - if there is no vehicle with such an ID. update \u00b6 Updates existing vehicle. required sub-user rights : vehicle_update . Parameters \u00b6 name description type vehicle A vehicle object . JSON object force_reassign Optional. Default is true . Will reassign the device to created vehicle even if it was assign to another one. boolean Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"vehicle\": {\"additional_info\": null, \"avatar_file_name\": null, \"chassis_number\": \"\", \"color\": null, \"frame_number\": \"\", \"free_insurance_policy_number\": \"\", \"free_insurance_valid_till\": null, \"fuel_cost\": null, \"fuel_grade\": \"\", \"fuel_tank_volume\": null, \"fuel_type\": null, \"garage_id\": null, \"gross_weight\": null, \"icon_color\": \"1E96DC\", \"icon_id\": null, \"id\": 223155, \"label\": \"Vehicle\", \"liability_insurance_policy_number\": \"\", \"liability_insurance_valid_till\": null, \"manufacture_year\": 2020, \"max_speed\": 160, \"model\": \"\", \"norm_avg_fuel_consumption\": null, \"passengers\": 1, \"payload_height\": 1868, \"payload_length\": 2820, \"payload_weight\": null, \"payload_width\": 1972, \"reg_number\": \"AB234D\", \"subtype\": \"sedan\", \"tags\": [], \"tracker_id\": null, \"trailer\": null, \"type\": \"car\", \"tyre_size\": \"\", \"tyres_number\": null, \"vin\": \"45468743418579751\", \"wheel_arrangement\": null}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no vehicle with such an ID. 247 \u2013 Entity already exists, if tracker_id!=null and exists a vehicle that already bound to this tracker_id. 261 \u2013 Entity has external links - when tracker_id changes and there are some service tasks associated with this vehicle. batch_convert \u00b6 Convert batch of tab-delimited vehicles and return list of checked vehicles with errors. required sub-user rights: vehicle_update . Parameters \u00b6 name description type batch Batch of tab-delimited vehicles. string file_id Preloaded file ID. string fields Optional, array of field names, default is [\"label\", \"model\", \"reg_number\", \"fuel_grade\"] . string array geocoder Geocoder type. string If file_id is set \u2013 batch parameter will be ignored. Response \u00b6 { \"success\" : true , \"list\" : [ <checked_vehicle> ], \"limit_exceeded\" : false } limit_exceeded - true if given batch constrained by limit. where checked_vehicle is: { \"id\" : 222 , \"tracker_id\" : 1 , \"label\" : \"AGV\" , \"max_speed\" : 90 , \"model\" : \"Renault KERAX\" , \"type\" : \"truck\" , \"subtype\" : \"tractor\" , \"garage_id\" : null , \"trailer\" : \"trailer1\" , \"manufacture_year\" : 2001 , \"color\" : \"some color\" , \"additional_info\" : \"additional info\" , \"reg_number\" : \"\u0410001\u0410\u041096\" , \"vin\" : \"TMBJF25LXC6080000\" , \"chassis_number\" : \"\" , \"frame_number\" : \"\" , \"payload_weight\" : 32000 , \"payload_height\" : 1.2 , \"payload_length\" : 1.0 , \"payload_width\" : 1.0 , \"passengers\" : 4 , \"gross_weight\" : null , \"fuel_type\" : \"petrol\" , \"fuel_grade\" : \"\u0410-80\" , \"norm_avg_fuel_consumption\" : 9.0 , \"fuel_tank_volume\" : 50 , \"fuel_cost\" : 100.3 , \"wheel_arrangement\" : \"4x2\" , \"tyre_size\" : \"255/65 R16\" , \"tyres_number\" : 4 , \"liability_insurance_policy_number\" : \"12345\" , \"liability_insurance_valid_till\" : \"2020-10-15\" , \"free_insurance_policy_number\" : \"\" , \"free_insurance_valid_till\" : null , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"tags\" : [ 1 , 2 ], \"errors\" : <array_o f _objec ts > } errors - optional array of objects. Errors \u00b6 234 - Invalid data format.","title":"Index"},{"location":"backend-api/resources/fleet/vehicle/#vehicle","text":"Contains the vehicle object and API calls to interact with it. This object is used to describe vehicle's information like VIN, speed, consumption and other. Vehicle object should be assigned to tracker object.","title":"Vehicle"},{"location":"backend-api/resources/fleet/vehicle/#vehicle-object","text":"{ \"id\" : 222 , \"tracker_id\" : 1 , \"tracker_label\" : \"Jimi LL301\" , \"label\" : \"AGV\" , \"max_speed\" : 90 , \"model\" : \"Renault KERAX\" , \"type\" : \"truck\" , \"subtype\" : \"tractor\" , \"garage_id\" : 1 , \"garage_organization_name\" : \"Fleet Systems\" , \"trailer\" : \"trailer1\" , \"manufacture_year\" : 2001 , \"color\" : \"some color\" , \"additional_info\" : \"additional info\" , \"reg_number\" : \"\u0410001\u0410\u041096\" , \"vin\" : \"TMBJF25LXC6080000\" , \"chassis_number\" : \"\" , \"frame_number\" : \"\" , \"payload_weight\" : 32000 , \"payload_height\" : 1.2 , \"payload_length\" : 1.0 , \"payload_width\" : 1.0 , \"passengers\" : 4 , \"gross_weight\" : null , \"fuel_type\" : \"petrol\" , \"fuel_grade\" : \"\u0410-80\" , \"norm_avg_fuel_consumption\" : 9.0 , \"fuel_tank_volume\" : 50 , \"fuel_cost\" : 100.3 , \"wheel_arrangement\" : \"4x2\" , \"tyre_size\" : \"255/65 R16\" , \"tyres_number\" : 4 , \"liability_insurance_policy_number\" : \"12345\" , \"liability_insurance_valid_till\" : \"2020-10-15\" , \"free_insurance_policy_number\" : \"\" , \"free_insurance_valid_till\" : null , \"icon_id\" : 55 , \"avatar_file_name\" : null , \"tags\" : [ 1 , 2 ] } id - int. An ID of a vehicle. tracker_id - int. An ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. tracker_label - optional string. Tracker's label. label - string. Vehicle's label. max_speed - int. Maximum speed of a vehicle. model - string. Vehicle's model. type enum . Vehicle's type. Can be \"truck\" | \"car\" | \"bus\" | \"special\". subtype - optional enum . Depends on type, null means undefined. Possible subtypes listed below. garage_id - nullable int. An ID of a garage. garage_organization_name - optional string. Garage organization name. trailer - optional string. Information about a trailer. manufacture_year - optional int. Manufacture year of a vehicle. color - optional string. Not RGB. A color of a vehicle. additional_info - optional string. Additional info about a vehicle. reg_number - string. Reg number/ license plate of a vehicle. vin - string. VIN of a vehicle. chassis_number - string. Chassis number of a vehicle. frame_number - optional string. Frame number of a vehicle. payload_weight - int. Payload weight in kilograms. payload_height - decimal. Payload height in millimeters. payload_length - decimal. Payload length in millimeters. payload_width - decimal. Payload width in millimeters. passengers - int. A maximum count of passengers. gross_weight - optional int. Gross weight in kilograms. fuel_type - enum . Can be \"petrol\" | \"diesel\" | \"gas\". fuel_grade - string. Grade of fuel used in a vehicle. norm_avg_fuel_consumption - decimal. Normal average fuel consumption in liters per 100 km. fuel_tank_volume - int. Fuel tank capacity in liters. fuel_cost - optional decimal. Cost of fuel used in a vehicle per liter. wheel_arrangement - string. Wheel arrangement of a vehicle. tyre_size - string. Tyre size. tyres_number - int. Number of tyres. liability_insurance_policy_number - string. Liability insurance policy number. liability_insurance_valid_till - string date. The date till liability insurance valid. free_insurance_policy_number - string. Free insurance policy number. free_insurance_valid_till - string date. The date till free insurance valid. icon_id - nullable int. Can only be updated via avatar/assign . avatar_file_name - string. File name. tags - int array. List of tag IDs. Subtypes: Type: \"car\" Subtypes: \"sedan\", \"universal\", \"hatchback\", \"liftback\", \"limousine\", \"pickup\", \"minivan\", \"coupe\", \"coupe4d\", \"muscle\", \"convertible\", \"phaeton\", \"lando\", \"crossover\", \"roadster\", \"suv\" Type: \"truck\" Subtypes: \"tipper\", \"board\", \"covered\", \"awning\", \"mixer\", \"tanker\", \"refrigerator\", \"transporter\", \"container\", \"tractor\" Type: \"bus\" Subtypes: \"city\", \"shuttle\", \"platform\", \"school\", \"intercity\", \"sightseeing\" Type: \"special\" Subtypes: \"mobile_crane\", \"racing\", \"buggy\", \"ambulance\", \"firefighter\", \"hearse\", \"shop\", \"harvester\", \"snowplow\", \"tractor\", \"grader\", \"excavator\", \"bulldozer\", \"armored\", \"amphibian\", \"boat\"","title":"Vehicle object"},{"location":"backend-api/resources/fleet/vehicle/#api-actions","text":"API path: /vehicle .","title":"API actions"},{"location":"backend-api/resources/fleet/vehicle/#create","text":"Creates a new vehicle. required sub-user rights : vehicle_update","title":"create"},{"location":"backend-api/resources/fleet/vehicle/#delete","text":"Deletes a vehicles with the specified IDs. Only one of the following parameters must be specified. required sub-user rights : vehicle_update .","title":"delete"},{"location":"backend-api/resources/fleet/vehicle/#list","text":"Gets all vehicles belonging to user.","title":"list"},{"location":"backend-api/resources/fleet/vehicle/#read","text":"Gets vehicle by specified ID.","title":"read"},{"location":"backend-api/resources/fleet/vehicle/#update","text":"Updates existing vehicle. required sub-user rights : vehicle_update .","title":"update"},{"location":"backend-api/resources/fleet/vehicle/#batch_convert","text":"Convert batch of tab-delimited vehicles and return list of checked vehicles with errors. required sub-user rights: vehicle_update .","title":"batch_convert"},{"location":"backend-api/resources/fleet/vehicle/avatar/","text":"Vehicle avatar \u00b6 API calls to upload and assign avatar to the vehicle. API actions \u00b6 API path: /vehicle/avatar . assign \u00b6 Assigns icon_id (from standard icon set) to specified vehicle. required sub-user rights : vehicle_update Parameters \u00b6 name description type vehicle_id ID of the vehicle. int icon_id ID of the icon. int icon_id can be null \u2013 this means that uploaded avatar should be used instead of icon. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/avatar/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"vehicle_id\": 127722, \"icon_id\": 1342}' HTTP GET https://api.navixy.com/v2/vehicle/avatar/assign?hash=a6aa75587e5c59c32d347da438505fc3&vehicle_id=127722&icon_id=1342 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - when vehicle with vehicle_id not found. upload \u00b6 Uploads avatar image for specified vehicle. Then it will be available from [api_base_url]/<api_static_path>/vehicle/avatars/<file_name> e.g. https://api.navixy.com/v2/static/vehicle/avatars/abcdef123456789.png . required sub-user rights : vehicle_update avatar_file_name returned in response and will be returned from /vehicle/list . MUST be a POST multipart request (multipart/form-data), with one of the parts being an image file upload (with the name \"file\"). File part mime type must be one of : image/jpeg image/pjpeg image/png image/gif image/webp Parameters \u00b6 name description type vehicle_id Vehicle ID. int file Image file. string redirect_target Optional. URL to redirect. string If redirect_target passed a return redirect to response=<urlencoded response json> . Response \u00b6 { \"success\" : true , \"value\" : \"abcdef123456789.png\" } value - string. Avatar file name. Errors \u00b6 201 \u2013 Not found in the database - when vehicle with vehicle_id not found. 233 \u2013 No data file - if file part not passed. 234 \u2013 Invalid data format - if passed file with unexpected mime type. 254 \u2013 Cannot save file - on some file system errors.","title":"Avatar"},{"location":"backend-api/resources/fleet/vehicle/avatar/#vehicle-avatar","text":"API calls to upload and assign avatar to the vehicle.","title":"Vehicle avatar"},{"location":"backend-api/resources/fleet/vehicle/avatar/#api-actions","text":"API path: /vehicle/avatar .","title":"API actions"},{"location":"backend-api/resources/fleet/vehicle/avatar/#assign","text":"Assigns icon_id (from standard icon set) to specified vehicle. required sub-user rights : vehicle_update","title":"assign"},{"location":"backend-api/resources/fleet/vehicle/avatar/#upload","text":"Uploads avatar image for specified vehicle. Then it will be available from [api_base_url]/<api_static_path>/vehicle/avatars/<file_name> e.g. https://api.navixy.com/v2/static/vehicle/avatars/abcdef123456789.png . required sub-user rights : vehicle_update avatar_file_name returned in response and will be returned from /vehicle/list . MUST be a POST multipart request (multipart/form-data), with one of the parts being an image file upload (with the name \"file\"). File part mime type must be one of : image/jpeg image/pjpeg image/png image/gif image/webp","title":"upload"},{"location":"backend-api/resources/fleet/vehicle/import/","text":"API actions \u00b6 API calls to import vehicles. API actions \u00b6 API path: /vehicle/import/ . start \u00b6 Starting the background process of importing vehicles. Parameters \u00b6 name description type filename Name of file preloaded with /data/spreadsheet/parse string headers List of files' headers, see available fields above string array user_headers Optional. List of user labels for headers string array Available fields: label model max_speed type subtype garage trailer manufacture_year color additional_info trailer_reg_number reg_number chassis_number frame_number vin passengers payload_weight payload_height payload_width payload_length gross_weight fuel_grade fuel_tank_volume fuel_cost norm_avg_fuel_consumption fuel_type tyre_size tyres_number wheel_arrangement free_insurance_policy_number liability_insurance_policy_number free_insurance_valid_till liability_insurance_valid_till tracker_label tags undefined (if a meaning of a field is not known) Response \u00b6 { \"success\" : true , \"id\" : <i nt > } Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/vehicle/import/start\" \\ -H \"Content-Type: application/json\" \\ --data-binary @- << EOF { \"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"filename\": \"tmp-sheet640571613016981796.tsv\", \"headers\": [\"label\", \"model\", \"max_speed\", \"type\", \"subtype\", \"reg_number\", \"fuel_grade\", \"fuel_tank_volume\", \"free_insurance_policy_number\", \"free_insurance_valid_till\", \"tracker_label\", \"tags\"], \"user_headers\": [ \"Model\", \"Max speed\", \"Type\", \"Subtype\", \"Reg. number\", \"Fuel grade\", \"Fuel tank volume\", \"Free insurance policy number\", \"Free insurance valid till\", \"Object\", \"Tags\"] } EOF Errors \u00b6 15 - Too many requests (rate limit exceeded) - if too many imports in progress 233 - No data file 234 - Invalid data format 247 - Entity already exists - there is another identical import with the same file read \u00b6 Returns an import process with specified ID. Parameters \u00b6 name description type process_id Process ID int Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : <i nt > , \"user_id\" : <i nt > , \"created\" : <da te > , \"type\" : \"Vehicle\" , \"params\" : { \"headers\" : [ <s tr i n g> , <s tr i n g> , ... ] // Lis t o f f iles' headers }, \"filename\" : <s tr i n g> , // Name o f preloaded TSV. \"status\" : <s tr i n g> , // crea te d | i n _progress | do ne | fa iled | f i n ished \"status_change_date\" : <da te > , \"progress\" : { \"imported\" : <i nt > , \"failed\" : <i nt > , \"percent\" : <i nt > , // approxima te perce nta ge o f processed \"processed_lines\" : <i nt > , \"warnings\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 \"errors\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 } } } Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/vehicle/import/read\" \\ -H \"Content-Type: application/json\" \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"process_id\": 1}' Errors \u00b6 201 \u2013 Not found in database (if import is not found) list \u00b6 Returns the list of the user's vehicle import processes. Response \u00b6 { \"success\" : true , \"list\" : [ { \"id\" : <i nt > , \"user_id\" : <i nt > , \"created\" : <da te > , \"type\" : \"Vehicle\" , \"params\" : { \"headers\" : [ <s tr i n g> , <s tr i n g> , ... ] // Lis t o f f iles' headers }, \"filename\" : <s tr i n g> , // Name o f preloaded TSV. \"status\" : <s tr i n g> , // crea te d | i n _progress | do ne | fa iled \"status_change_date\" : <da te > , \"progress\" : { \"imported\" : <i nt > , \"failed\" : <i nt > , \"percent\" : <i nt > , // approxima te perce nta ge o f processed \"processed_lines\" : <i nt > , \"warnings\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 \"errors\" : [{ li ne : <i nt > , error : <s tr i n g> }], // f irs t 25 } }, ... ] } Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/vehicle/import/list\" \\ -H \"Content-Type: application/json\" \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' download_failed \u00b6 Retrieve a file with lines that contained errors and did not pass validation. Parameters \u00b6 name description type process_id Process ID int Response \u00b6 File (standard file download). Example \u00b6 cURL curl -X POST \"https://api.navixy.com/v2/vehicle/import/download_failed\" \\ -H \"Content-Type: application/json\" \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"process_id\": 7}' Errors \u00b6 201 \u2013 Not found in database (if import is not found) 204 \u2013 Entity not found (if file is not found)","title":"Import"},{"location":"backend-api/resources/fleet/vehicle/import/#api-actions","text":"API calls to import vehicles.","title":"API actions"},{"location":"backend-api/resources/fleet/vehicle/import/#api-actions_1","text":"API path: /vehicle/import/ .","title":"API actions"},{"location":"backend-api/resources/fleet/vehicle/import/#start","text":"Starting the background process of importing vehicles.","title":"start"},{"location":"backend-api/resources/fleet/vehicle/import/#read","text":"Returns an import process with specified ID.","title":"read"},{"location":"backend-api/resources/fleet/vehicle/import/#list","text":"Returns the list of the user's vehicle import processes.","title":"list"},{"location":"backend-api/resources/fleet/vehicle/import/#download_failed","text":"Retrieve a file with lines that contained errors and did not pass validation.","title":"download_failed"},{"location":"backend-api/resources/fleet/vehicle/service_task/file/","text":"Vehicle service work file \u00b6 Contains call for creation the service work file. API actions \u00b6 API path: /vehicle/service_task/file . create \u00b6 Creates a file to specify its ID in service work later. Parameters \u00b6 name description type filename Optional. If specified, uploaded file will have the specified name. If not, name will be taken from actual file upload form. string size Maximum size in bytes for the file which will be uploaded. This is needed to \"reserve\" the space for file in user's disk space quota. int metadata Optional. Metadata object. See task/form . JSON object type Can be \"image\" or \"file\". Default is \"file\". enum Response \u00b6 { \"success\" : true , \"value\" : { \"file_id\" : 111 , \"url\" : \"http://example.com\" , \"expires\" : \"2016-02-03 03:04:00\" , \"file_field_name\" : \"file\" , \"fields\" : { \"token\" : \"skrjsokqsi21lskkwl1783sl2k5\" } } } file_field_name - string. Name for file field in POST upload request. fields - object. These fields should be passed as additional fields in POST upload request, field with a file must be the last one. token - string. Used for authentication of upload.","title":"File"},{"location":"backend-api/resources/fleet/vehicle/service_task/file/#vehicle-service-work-file","text":"Contains call for creation the service work file.","title":"Vehicle service work file"},{"location":"backend-api/resources/fleet/vehicle/service_task/file/#api-actions","text":"API path: /vehicle/service_task/file .","title":"API actions"},{"location":"backend-api/resources/fleet/vehicle/service_task/file/#create","text":"Creates a file to specify its ID in service work later.","title":"create"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/","text":"Vehicle service work \u00b6 Contains service task object description and API calls to interact with vehicle service works that is used for vehicle maintenance. Vehicle maintenance feature helps to make sure that any scheduled maintenance or urgent repair is carried out in a timely manner. Described step-by-step about service task APIs in our guides . Service task object \u00b6 { \"id\" : 725 , \"vehicle_id\" : 222 , \"status\" : \"created\" , \"prediction\" : { \"end_date\" : \"2015-05-03 09:35:00\" , \"wear_percentage\" : 40 }, \"description\" : \"Service work\" , \"comment\" : \"\" , \"cost\" : 100500.0 , \"completion\" : { \"mileage\" : 31 , \"date\" : \"2014-03-16 00:00:00\" , \"engine_hours\" : 140 }, \"conditions\" : { \"mileage\" : { \"limit\" : 100 , \"notification_interval\" : 10 }, \"date\" : { \"end\" : \"2015-05-08 09:35:00\" , \"notification_interval\" : 3 , \"repeat_interval\" : 42 }, \"engine_hours\" : { \"limit\" : 100 , \"notification_interval\" : 10 } }, \"start\" : { \"mileage\" : 1230 , \"date\" : \"2015-05-01 17:46:44\" , \"engine_hours\" : 50 }, \"notifications\" : { \"sms_phones\" : [ \"79221234567\" , \"79227654321\" ], \"emails\" : [ \"email@domain.tld\" , \"email@mail.com\" ], \"push_enabled\" : true }, \"completion_date\" : \"2014-03-16 00:00:00\" , \"repeat\" : true , \"unplanned\" : false , \"file_ids\" : [ 1 , 2 ] } id - int. An ID of created task. vehicle_label - string. Vehicle label. status - enum . Status . prediction - optional object. Legacy field, is not used anymore. check return_prediction parameter. end_date - date/time . Predicted end date. wear_percentage - int. Wear percentage. completion - object. Date and counter's values when the task marked as done. Non-editable. completion_date - date/time . Date when a service work completed. current_position - object. Current position values. mileage - int. Current mileage. date - date/time . Current date. engine_hours - int. Current engine hours. start - object. Consists initial values. mileage - int. Initial odometer value for tasks with mileage condition. date - date/time . Task creation date for tasks with date condition. engine_hours - int. Initial engine hours value for tasks with engine hours condition. vehicle_id - int. An ID of associated vehicle. description - string. Name of a service work. Max 255 characters. comment - string. Comment for a task. Max 255 characters. cost - float. Cost in the currency of the user. For information only. conditions - task end conditions. At least one of fields (\"mileage\" or \"date\" or \"engine_hours\") must be passed. mileage - optional object. Mileage condition. limit - int. Task limit in kilometers. notification_interval - int. Notify about task in specified number of kilometers. repeat_interval - int. Interval in kilometers to set limit for a new repeatable task when current one is completed. If this parameter is not set, the initial limit value will be used. date - optional date condition object. end - date/time . Task end date. notification_interval - int. Notify about task in specified number of days. repeat_interval - int. Interval in days to calculate a new end date for repeatable tasks when they are completed. If this parameter is not specified, the interval will be calculated as the difference between the start date and the end date. engine_hours - optional engine hours condition object. limit - int. Task limit in hours. notification_interval - int. Notify about task in specified number of hours. repeat_interval - int. Interval in hours to set limit for a new repeatable task when current one is completed. If this parameter is not set, the initial limit value will be used. notifications - notifications object. sms_phones - string array. Phones where sms notifications should be sent. In the international format wo + sign. emails - string array. Email addresses where sms notifications should be sent. push_enabled - boolean. If true push notifications enabled. repeat - boolean. If true then new task will be created when current task done. unplanned - boolean. If true service work is unplanned. For information only. file_ids - int array. One file will be specified in many service works. If one of the tasks will be deleted, then file will remain in others. File will be deleted only when the last task with it will be deleted. Task status \u00b6 Task status may be one of: created \u2013 initial state of task. notified \u2013 one of conditions exceed notification limit. expired \u2013 one of conditions exceeded. done \u2013 user set task as \"done\". API actions \u00b6 API path: /vehicle/service_task . batch_create \u00b6 Creates multiple service works. Parameters \u00b6 name description type vehicle_ids List of vehicle IDs. Task will be created for every vehicle. int array task Service work to create. vehicle_id field in these objects should not be specified. JSON object A task object is: { \"description\" : \"Service work\" , \"comment\" : \"\" , \"cost\" : 10050.0000 , \"conditions\" : { \"mileage\" : { \"limit\" : 100 , \"notification_interval\" : 10 }, \"date\" : { \"end\" : \"2015-05-08 09:35:00\" , \"notification_interval\" : 3 }, \"engine_hours\" : { \"limit\" : 100 , \"notification_interval\" : 10 } }, \"notifications\" : { \"sms_phones\" : [ \"79221234567\" , \"79227654321\" ], \"emails\" : [ \"email@domain.tld\" , \"email@mail.com\" ], \"push_enabled\" : true }, \"repeat\" : false , \"unplanned\" : false , \"file_ids\" : [ 1 , 2 ] } description - string. Name of a service work. Max 255 characters. comment - string. Comment for a task. Max 255 characters. cost - float. Cost in the currency of the user. For information only. conditions - task end conditions. At least one of fields (\"mileage\" or \"date\" or \"engine_hours\") must be passed. mileage - optional object. Mileage condition. limit - int. Task limit in kilometers. notification_interval - int. Notify about task in specified number of kilometers. date - optional date condition object. end - date/time . Task end date. notification_interval - int. Notify about task in specified number of days. engine_hours - optional engine hours condition object. limit - int. Task limit in hours. notification_interval - int. Notify about task in specified number of hours. notifications - notifications object. sms_phones - string array. Phones where sms notifications should be sent. In the international format without + sign. emails - string array. Email addresses where sms notifications should be sent. push_enabled - boolean. If true push notifications enabled. repeat - boolean. If true then new task will be created when current task done. unplanned - boolean. If true service work is unplanned. For information only. file_ids - int array. One file will be specified in many service works. If one of the tasks will be deleted, then file will remain in others. File will be deleted only when the last task with it will be deleted. Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/service_task/batch/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"vehicle_ids\": [76801, 76449], \"task\": {\"comment\": \"\", \"conditions\": {\"date\": {\"end\": \"2020-12-10 23:59:59\", \"notification_interval\": 3}}, \"cost\": 100, \"description\": \"service1\", \"file_ids\": [], \"notifications\": {\"sms_phones\": [], \"emails\": [], \"push_enabled\": true}, \"repeat\": false, \"unplanned\": false}' Response \u00b6 { \"success\" : true } Errors \u00b6 General types only. create \u00b6 Creates a new vehicle service work. For vehicles with associated tracker only. Parameters \u00b6 name description type task Service work to create. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/service_task/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"task\": {\"vehicle_id\": 76801, \"comment\": \"\", \"conditions\": {\"date\": {\"end\": \"2020-12-10 23:59:59\", \"notification_interval\": 3}}, \"cost\": 100, \"description\": \"service1\", \"file_ids\": [], \"notifications\": {\"sms_phones\": [], \"emails\": [], \"push_enabled\": true}, \"repeat\": false, \"unplanned\": false}' Response \u00b6 { \"success\" : true , \"id\" : 33777 } id - int. An ID of created task. Errors \u00b6 201 - Not found in the database \u2013 vehicle or tracker not found. 214 - Requested operation or parameters not supported by the device \u2013 engine hours condition passed but tracker hasn't ignition sensor. delete \u00b6 Deletes a vehicle service work. Parameters \u00b6 name description type task_id Optional. ID of service work. int task_ids Optional. IDs of service works. int array Either task_id or task_ids should be specified. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/service_task/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"task_id\": 33777}' HTTP GET https://api.navixy.com/v2/vehicle/service_task/delete?hash=a6aa75587e5c59c32d347da438505fc3&task_id=33777 Response \u00b6 { \"success\" : true } Errors \u00b6 General types only. download \u00b6 Downloads pdf report of service works. Parameters \u00b6 name description type order_by Sort option. Possible values listed below. enum ascending Optional. Default is true . Sort direction. boolean group_by Optional. Group by option. Can be \"vehicle\" or \"status\". enum order_by possible values: \"vehicle\" - order by vehicle_id . \"description\" - order by description . \"status\" - order by status . \"cost\" - order by cost . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/service_task/download' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"order_by\": \"vehicle\", \"group_by\": \"status\"}' HTTP GET https://api.navixy.com/v2/vehicle/service_task/download?hash=a6aa75587e5c59c32d347da438505fc3&order_by=vehicle&group_by=status Response \u00b6 Report file. Errors \u00b6 General types only. list \u00b6 List all service works of all user vehicles. Parameters \u00b6 name description type return_prediction Include legacy prediction field or not. boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/service_task/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"return_prediction\": false}' HTTP GET https://api.navixy.com/v2/vehicle/service_task/list?hash=a6aa75587e5c59c32d347da438505fc3&return_prediction=false Response \u00b6 { \"success\" : true , \"list\" : [ { \"id\" : 725 , \"vehicle_id\" : 222 , \"vehicle_label\" : \"AGV\" , \"status\" : \"created\" , \"prediction\" : { \"end_date\" : \"2015-05-03 09:35:00\" , \"wear_percentage\" : 40 }, \"description\" : \"Service work\" , \"cost\" : 10050.0 , \"completion\" : { \"mileage\" : 31 , \"date\" : \"2014-03-16 00:00:00\" , \"engine_hours\" : 140 }, \"completion_date\" : \"2014-03-16 00:00:00\" , \"conditions\" : { \"mileage\" : { \"limit\" : 100 , \"notification_interval\" : 10 }, \"date\" : { \"end\" : \"2015-05-08 09:35:00\" , \"notification_interval\" : 3 }, \"engine_hours\" : { \"limit\" : 100 , \"notification_interval\" : 10 } }, \"current_position\" : { \"mileage\" : 11 , \"date\" : \"2012-03-06 15:55:03\" , \"engine_hours\" : 100 }, \"start\" : { \"mileage\" : 1230 , \"date\" : \"2015-05-01 17:46:44\" , \"engine_hours\" : 50 }, \"repeat\" : false , \"unplanned\" : false , \"file_ids\" : [ 2 , 3 ] } ] } list - array of vehicle objects described here . Errors \u00b6 201 - Not found in the database \u2013 vehicle or tracker not found. read \u00b6 Get service work info by its id. Parameters \u00b6 name description type task_id ID of service work. int return_prediction Include legacy prediction field or not. boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/service_task/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"task_id\": 37577, \"return_prediction\": false}' HTTP GET https://api.navixy.com/v2/vehicle/service_task/read?hash=a6aa75587e5c59c32d347da438505fc3&task_id=37577&return_prediction=false Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 725 , \"vehicle_id\" : 222 , \"status\" : \"created\" , \"prediction\" : { \"end_date\" : \"2015-05-03 09:35:00\" , \"wear_percentage\" : 40 }, \"description\" : \"Service work\" , \"comment\" : \"\" , \"cost\" : 100500.0 , \"completion\" : { \"mileage\" : 31 , \"date\" : \"2014-03-16 00:00:00\" , \"engine_hours\" : 140 }, \"conditions\" : { \"mileage\" : { \"limit\" : 100 , \"notification_interval\" : 10 }, \"date\" : { \"end\" : \"2015-05-08 09:35:00\" , \"notification_interval\" : 3 }, \"engine_hours\" : { \"limit\" : 100 , \"notification_interval\" : 10 } }, \"start\" : { \"mileage\" : 1230 , \"date\" : \"2015-05-01 17:46:44\" , \"engine_hours\" : 50 }, \"notifications\" : { \"sms_phones\" : [ \"79221234567\" , \"79227654321\" ], \"emails\" : [ \"email@domain.tld\" , \"email@mail.com\" ], \"push_enabled\" : true }, \"completion_date\" : \"2014-03-16 00:00:00\" , \"repeat\" : false , \"unplanned\" : false , \"file_ids\" : [ 1 , 2 ] }, \"files\" : [ < f ile_objec t > ] } All parameters described here . Errors \u00b6 201 Not found in the database \u2013 does not exist one of tracker's counters which required to determine status. 204 Entity not found \u2013 when vehicle or service work not found. set_status \u00b6 Updates task status, and saved (on done status ) current date and values of used (in condition) counters for \"freeze\" wearing percent. Parameters \u00b6 name description type task_id ID of service work. int status A new task status. Only done status allowed for now. enum Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/service_task/set_status' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"task_id\": 37577, \"status\": \"done\"}' HTTP GET https://api.navixy.com/v2/vehicle/service_task/set_status?hash=a6aa75587e5c59c32d347da438505fc3&task_id=37577&status=done Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 does not exist one of tracker's counters which required to determine status. 204 - Entity not found \u2013 when vehicle or service work not found. update \u00b6 Updates information fields and notification settings of vehicle service work. Parameters \u00b6 name description type task Service work to create. JSON object A task object described in a task create. Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/service_task/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"task\": {\"vehicle_id\": 76801, \"comment\": \"\", \"conditions\": {\"date\": {\"end\": \"2020-12-10 23:59:59\", \"notification_interval\": 3}}, \"cost\": 100, \"description\": \"service1\", \"file_ids\": [], \"notifications\": {\"sms_phones\": [], \"emails\": [], \"push_enabled\": true}, \"repeat\": false, \"unplanned\": false}' Response \u00b6 { \"success\" : true } Errors \u00b6 204 - Entity not found \u2013 when vehicle or service work not found. 214 - Requested operation or parameters not supported by the device \u2013 engine hours condition passed but tracker hasn't ignition sensor.","title":"Service Task"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#vehicle-service-work","text":"Contains service task object description and API calls to interact with vehicle service works that is used for vehicle maintenance. Vehicle maintenance feature helps to make sure that any scheduled maintenance or urgent repair is carried out in a timely manner. Described step-by-step about service task APIs in our guides .","title":"Vehicle service work"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#service-task-object","text":"{ \"id\" : 725 , \"vehicle_id\" : 222 , \"status\" : \"created\" , \"prediction\" : { \"end_date\" : \"2015-05-03 09:35:00\" , \"wear_percentage\" : 40 }, \"description\" : \"Service work\" , \"comment\" : \"\" , \"cost\" : 100500.0 , \"completion\" : { \"mileage\" : 31 , \"date\" : \"2014-03-16 00:00:00\" , \"engine_hours\" : 140 }, \"conditions\" : { \"mileage\" : { \"limit\" : 100 , \"notification_interval\" : 10 }, \"date\" : { \"end\" : \"2015-05-08 09:35:00\" , \"notification_interval\" : 3 , \"repeat_interval\" : 42 }, \"engine_hours\" : { \"limit\" : 100 , \"notification_interval\" : 10 } }, \"start\" : { \"mileage\" : 1230 , \"date\" : \"2015-05-01 17:46:44\" , \"engine_hours\" : 50 }, \"notifications\" : { \"sms_phones\" : [ \"79221234567\" , \"79227654321\" ], \"emails\" : [ \"email@domain.tld\" , \"email@mail.com\" ], \"push_enabled\" : true }, \"completion_date\" : \"2014-03-16 00:00:00\" , \"repeat\" : true , \"unplanned\" : false , \"file_ids\" : [ 1 , 2 ] } id - int. An ID of created task. vehicle_label - string. Vehicle label. status - enum . Status . prediction - optional object. Legacy field, is not used anymore. check return_prediction parameter. end_date - date/time . Predicted end date. wear_percentage - int. Wear percentage. completion - object. Date and counter's values when the task marked as done. Non-editable. completion_date - date/time . Date when a service work completed. current_position - object. Current position values. mileage - int. Current mileage. date - date/time . Current date. engine_hours - int. Current engine hours. start - object. Consists initial values. mileage - int. Initial odometer value for tasks with mileage condition. date - date/time . Task creation date for tasks with date condition. engine_hours - int. Initial engine hours value for tasks with engine hours condition. vehicle_id - int. An ID of associated vehicle. description - string. Name of a service work. Max 255 characters. comment - string. Comment for a task. Max 255 characters. cost - float. Cost in the currency of the user. For information only. conditions - task end conditions. At least one of fields (\"mileage\" or \"date\" or \"engine_hours\") must be passed. mileage - optional object. Mileage condition. limit - int. Task limit in kilometers. notification_interval - int. Notify about task in specified number of kilometers. repeat_interval - int. Interval in kilometers to set limit for a new repeatable task when current one is completed. If this parameter is not set, the initial limit value will be used. date - optional date condition object. end - date/time . Task end date. notification_interval - int. Notify about task in specified number of days. repeat_interval - int. Interval in days to calculate a new end date for repeatable tasks when they are completed. If this parameter is not specified, the interval will be calculated as the difference between the start date and the end date. engine_hours - optional engine hours condition object. limit - int. Task limit in hours. notification_interval - int. Notify about task in specified number of hours. repeat_interval - int. Interval in hours to set limit for a new repeatable task when current one is completed. If this parameter is not set, the initial limit value will be used. notifications - notifications object. sms_phones - string array. Phones where sms notifications should be sent. In the international format wo + sign. emails - string array. Email addresses where sms notifications should be sent. push_enabled - boolean. If true push notifications enabled. repeat - boolean. If true then new task will be created when current task done. unplanned - boolean. If true service work is unplanned. For information only. file_ids - int array. One file will be specified in many service works. If one of the tasks will be deleted, then file will remain in others. File will be deleted only when the last task with it will be deleted.","title":"Service task object"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#task-status","text":"Task status may be one of: created \u2013 initial state of task. notified \u2013 one of conditions exceed notification limit. expired \u2013 one of conditions exceeded. done \u2013 user set task as \"done\".","title":"Task status"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#api-actions","text":"API path: /vehicle/service_task .","title":"API actions"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#batch_create","text":"Creates multiple service works.","title":"batch_create"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#create","text":"Creates a new vehicle service work. For vehicles with associated tracker only.","title":"create"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#delete","text":"Deletes a vehicle service work.","title":"delete"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#download","text":"Downloads pdf report of service works.","title":"download"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#list","text":"List all service works of all user vehicles.","title":"list"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#read","text":"Get service work info by its id.","title":"read"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#set_status","text":"Updates task status, and saved (on done status ) current date and values of used (in condition) counters for \"freeze\" wearing percent.","title":"set_status"},{"location":"backend-api/resources/fleet/vehicle/service_task/service_task/#update","text":"Updates information fields and notification settings of vehicle service work.","title":"update"},{"location":"backend-api/resources/fleet/vehicle/status_listing/listing/","text":"Vehicle status listing \u00b6 Deprecated This API action deprecated and should not be used. Contains vehicle status listing object and API calls to interact with it. Vehicle status listing object \u00b6 { \"id\" : 1 , \"order\" : 0 , \"label\" : \"label123\" , \"color\" : \"FFFFFF\" } id - int. An ID of the status. order - int. Position of the status. Ignored when update because statuses already have position in an array. label - string. Status name (description). color - string. RGB-color. API actions \u00b6 API path: /vehicle/status/listing . read \u00b6 Gets all of user's vehicle statuses. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/status/listing/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/vehicle/status/listing/read?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 1 , \"order\" : 0 , \"label\" : \"label123\" , \"color\" : \"FFFFFF\" }] } Errors \u00b6 General types only. update \u00b6 Updates user's vehicle statuses. Parameters \u00b6 name description type statuses List of vehicle_status_entry objects. If status ID is not null, then update, else create new vehicle status. array of objects Old vehicle statuses, which are not present in statuses array, will be deleted. Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/vehicle/status/listing/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"statuses\": [{\"id\": 1, \"order\": 0, \"label\": \"label123\", \"color\": \"FFFFFF\"}]}' Response \u00b6 { \"success\" : true } Errors \u00b6 General types only.","title":"Listing"},{"location":"backend-api/resources/fleet/vehicle/status_listing/listing/#vehicle-status-listing","text":"Deprecated This API action deprecated and should not be used. Contains vehicle status listing object and API calls to interact with it.","title":"Vehicle status listing"},{"location":"backend-api/resources/fleet/vehicle/status_listing/listing/#vehicle-status-listing-object","text":"{ \"id\" : 1 , \"order\" : 0 , \"label\" : \"label123\" , \"color\" : \"FFFFFF\" } id - int. An ID of the status. order - int. Position of the status. Ignored when update because statuses already have position in an array. label - string. Status name (description). color - string. RGB-color.","title":"Vehicle status listing object"},{"location":"backend-api/resources/fleet/vehicle/status_listing/listing/#api-actions","text":"API path: /vehicle/status/listing .","title":"API actions"},{"location":"backend-api/resources/fleet/vehicle/status_listing/listing/#read","text":"Gets all of user's vehicle statuses.","title":"read"},{"location":"backend-api/resources/fleet/vehicle/status_listing/listing/#update","text":"Updates user's vehicle statuses.","title":"update"},{"location":"backend-api/resources/tracking/apn_settings/","text":"APN settings \u00b6 API call to get APN settings by device's phone number. API actions \u00b6 API base path: /apn_settings . read \u00b6 Gets the APN name/user/password and mobile operator for registered device by phone number. Parameters \u00b6 name description type format phone string representing valid international phone number without + sign. string \"1234567890\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/apn_settings/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"phone\": \"1234567890\"}' HTTP GET https://api.navixy.com/v2/apn_settings/read?hash=a6aa75587e5c59c32d347da438505fc3&phone=1234567890 Response \u00b6 { \"success\" : true , \"value\" : { \"name\" : \"internet\" , \"user\" : \"\" , \"password\" : \"\" , \"operator_name\" : \"Deutsche Telekom\" } } Errors \u00b6 201 \u2013 The phone number not found in the database.","title":"APN Settings"},{"location":"backend-api/resources/tracking/apn_settings/#apn-settings","text":"API call to get APN settings by device's phone number.","title":"APN settings"},{"location":"backend-api/resources/tracking/apn_settings/#api-actions","text":"API base path: /apn_settings .","title":"API actions"},{"location":"backend-api/resources/tracking/apn_settings/#read","text":"Gets the APN name/user/password and mobile operator for registered device by phone number.","title":"read"},{"location":"backend-api/resources/tracking/delivery/","text":"Delivery info \u00b6 API calls to get delivery states and tasks by IDs. API actions \u00b6 API base path: /delivery . read \u00b6 Returns info sufficient for tracking certain task state, and the tracker assigned to it. Search conducted only among tasks and checkpoints, which have start date less than or equal now and have statuses: arrived, assigned or delayed. If multiple tasks or checkpoints found, then return first task, otherwise checkpoint. session types: \u00b6 In addition to standard user session, this call supports special DELIVERY session type. Parameters \u00b6 name description type format external_id An external ID of task. int 259876 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/delivery/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"external_id\": 259876}' HTTP GET https://api.navixy.com/v2/delivery/read?hash=a6aa75587e5c59c32d347da438505fc3&external_id=259876 Response \u00b6 { \"success\" : true , \"user_id\" : 3 , \"task\" : { < tas k_objec t > }, \"tracker\" : { < tra cker_objec t > }, \"restrictions\" : { <res tr ic t io ns _objec t > }, \"first_name\" : \"John\" , \"middle_name\" : \"Micheel\" , \"last_name\" : \"Johnson\" , \"vehicle_label\" : \"Service car 002\" , \"estimated_time\" : 1122 } user_id - master ID of the user to which the task belongs to. task - a task object, for more info see /task object structure. tracker - corresponding tracker object, for more info see tracker/ object structure. restrictions - tariff restrictions object, for more info see user/get_tariff_restrictions . first_name - string. The first name of employee assigned to the task, or null if missing. middle_name - string. The middle name of employee assigned to the task, or null if missing. last_name - string. The last name of employee assigned to the task, or null if missing. vehicle_label - string. A label of the vehicle assigned to the task, or null if missing. estimated_time - int. Estimated time of arrival in seconds, or null if unavailable. Errors \u00b6 201 \u2013 Not found in the database - when there is no task or checkpoint with specified conditions. list \u00b6 External_id can be repeated, so this request will return all matching delivery. Returns info sufficient for tracking certain task state, and the tracker assigned to it. Search conducted only among tasks and checkpoints, which have start date less than or equal now and have statuses: arrived, assigned or delayed. session types: \u00b6 in addition to standard user session, this call supports special DELIVERY session type. Parameters \u00b6 name description type format external_id An external ID of task. int 259876 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/delivery/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"external_id\": 259876}' HTTP GET https://api.navixy.com/v2/delivery/list?hash=a6aa75587e5c59c32d347da438505fc3&external_id=259876 Response \u00b6 { \"success\" : true , \"list\" : [{ \"task\" : { \"id\" : 111 , \"user_id\" : 3 , \"tracker_id\" : 22 , \"location\" : { \"lat\" : 51.283546 , \"lng\" : 7.301086 , \"address\" : \"Fichtenstrasse 11\" , \"radius\" : 150 }, \"label\" : \"Deliver parcels\" , \"description\" : \"Quickly\" , \"creation_date\" : \"2014-01-02 03:04:05\" , \"from\" : \"2014-02-03 04:05:06\" , \"to\" : \"2014-03-04 05:06:07\" , \"external_id\" : null , \"status\" : \"assigned\" , \"status_change_date\" : \"2014-01-02 03:04:05\" , \"max_delay\" : 5 , \"min_stay_duration\" : 0 , \"arrival_date\" : \"2014-01-02 03:04:05\" , \"stay_duration\" : 0 , \"origin\" : \"imported\" , \"tags\" : [ 1 , 2 ], \"type\" : \"task\" , }, \"tracker\" : { \"id\" : 123456 , \"label\" : \"tracker label\" , \"clone\" : false , \"group_id\" : 167 , \"avatar_file_name\" : \"file name\" , \"source\" : { \"id\" : 234567 , \"device_id\" : 9999999988888 , \"model\" : \"telfmb920\" , \"blocked\" : false , \"tariff_id\" : 345678 , \"status_listing_id\" : null , \"creation_date\" : \"2011-09-21\" , \"tariff_end_date\" : \"2016-03-24\" , \"phone\" : \"+71234567890\" }, \"tag_bindings\" : [{ \"tag_id\" : 456789 , \"ordinal\" : 4 }] }, \"first_name\" : \"John\" , \"middle_name\" : \"Micheel\" , \"last_name\" : \"Johnson\" , \"vehicle_label\" : \"Service car 002\" , \"estimated_time\" : 1122 }], \"user_id\" : 3 , \"restrictions\" : { \"restrictions_object\" :} } task - a task object, for more info see /task object structure. tracker - corresponding tracker object, for more info see tracker/ object structure. first_name - string. The first name of employee assigned to the task, or null if missing. middle_name - string. The middle name of employee assigned to the task, or null if missing. last_name - string. The last name of employee assigned to the task, or null if missing. vehicle_label - string. A label of the vehicle assigned to the task, or null if missing. estimated_time - int. Estimated time of arrival in seconds, or null if unavailable. user_id - master ID of the user to which the task belongs to. restrictions - tariff restrictions object, for more info see user/get_tariff_restrictions . Errors \u00b6 201 \u2013 Not found in the database - when there is no task or checkpoint with specified conditions.","title":"Delivery"},{"location":"backend-api/resources/tracking/delivery/#delivery-info","text":"API calls to get delivery states and tasks by IDs.","title":"Delivery info"},{"location":"backend-api/resources/tracking/delivery/#api-actions","text":"API base path: /delivery .","title":"API actions"},{"location":"backend-api/resources/tracking/delivery/#read","text":"Returns info sufficient for tracking certain task state, and the tracker assigned to it. Search conducted only among tasks and checkpoints, which have start date less than or equal now and have statuses: arrived, assigned or delayed. If multiple tasks or checkpoints found, then return first task, otherwise checkpoint.","title":"read"},{"location":"backend-api/resources/tracking/delivery/#list","text":"External_id can be repeated, so this request will return all matching delivery. Returns info sufficient for tracking certain task state, and the tracker assigned to it. Search conducted only among tasks and checkpoints, which have start date less than or equal now and have statuses: arrived, assigned or delayed.","title":"list"},{"location":"backend-api/resources/tracking/geocoder/","text":"Geocoder \u00b6 API calls to search address and location using geocoder. Geocoder types \u00b6 google. yandex. progorod. osm. locationiq. API actions \u00b6 API path: /geocoder . search_address \u00b6 Performs a forward geocoding. Returns a list of locations matching the given address. Items in the list sorted by relevance. Parameters \u00b6 name description type format q Address (or place) or coordinates to geocode. string/location \"750 Avenue E,San Francisco,CA 94130,USA\" geocoder Optional. Geocoder type that will be preferably used for searching. Google geocoder is always used for users with the premium GIS. enum \"google\" bounds Optional. JSON object. The bounding box, specified by coordinates of northwest and southeast corners. Geocoder will preferably return results from within these bounds. That is the parameter influences the priority of results, so if more relevant results exist outside of bounds, they may be included. bounds_object {\"nw\":{\"lat\":37.9,\"lng\":-122.4},\"se\":{\"lat\":37.8,\"lng\":-122.3}} lang Optional. Language in which results should be. ISO 639 language code . enum \"en_US\" with_details Optional. If true then the response will contain details. boolean true Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/geocoder/search_address' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"q\": \"750 Avenue E,San Francisco,CA 94130,USA\", \"lang\": \"en\", \"geocoder\": \"google\"}' Response \u00b6 { \"success\" : true , \"locations\" : [{ \"lat\" : 37.825014712963565 , \"lng\" : -122.37202062079945 , \"address\" : \"750 Avenue E,San Francisco\" , \"details\" : { \"country\" : \"USA\" , \"province\" : \"CA\" , \"locality\" : \"San Francisco\" , \"street\" : \"Avenue E\" , \"house\" : \"750\" , \"postcode\" : \"94130\" , \"bounds\" : { \"nw\" :{ \"lat\" : 37.825064712964 , \"lng\" : -122.3720706208 }, \"se\" :{ \"lat\" : 37.824964712964 , \"lng\" : -122.3719706208 } } } }] } lat - double. Latitude. lng - double. Longitude. address - string. Address. details - details object. country - optional string. province - optional string. locality - optional string. street - optional string. house - optional string. postcode - optional string. bounds - optional object, the bounding box which can fully contain the returned result. nw - North West corner. se - South East corner. search_location \u00b6 Search address by location using geocoder. Parameters \u00b6 name description type format location Location coordinates (see: data types description section section). location {\"lat\": , \"lng\": } geocoder Optional. Geocoder type that will be preferably used for searching. Google geocoder is always used for users with the premium GIS. enum \"google\" lang Optional. ISO 639 language code . enum \"en_US\" with_details Optional. If true then the response will contain details. boolean true goal Helps to choose the target geocoder. Now supported ui , ui_user_action . Use ui_user_action for requests initiated by user, otherwise ui . enum \"ui\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/geocoder/search_location' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"location\": \"{\"lat\": 37.825429, \"lng\": -122.371982}}' Response \u00b6 { \"success\" : true , \"value\" : \"750 Avenue E,San Francisco,CA 94130,USA\" , \"details\" : { \"country\" : \"USA\" , \"province\" : \"CA\" , \"locality\" : \"San Francisco\" , \"street\" : \"Avenue E\" , \"house\" : \"750\" , \"postcode\" : \"94130\" , \"bounds\" : { \"nw\" :{ \"lat\" : 37.825064712964 , \"lng\" : -122.3720706208 }, \"se\" :{ \"lat\" : 37.824964712964 , \"lng\" : -122.3719706208 } } } } value - string. Address. details - optional details object. country - optional string. province - optional string. locality - optional string. street - optional string. house - optional string. postcode - optional string. bounds - optional object, the bounding box which can fully contain the returned result. nw - North West corner. se - South East corner.","title":"Geocoder"},{"location":"backend-api/resources/tracking/geocoder/#geocoder","text":"API calls to search address and location using geocoder.","title":"Geocoder"},{"location":"backend-api/resources/tracking/geocoder/#geocoder-types","text":"google. yandex. progorod. osm. locationiq.","title":"Geocoder types"},{"location":"backend-api/resources/tracking/geocoder/#api-actions","text":"API path: /geocoder .","title":"API actions"},{"location":"backend-api/resources/tracking/geocoder/#search_address","text":"Performs a forward geocoding. Returns a list of locations matching the given address. Items in the list sorted by relevance.","title":"search_address"},{"location":"backend-api/resources/tracking/geocoder/#search_location","text":"Search address by location using geocoder.","title":"search_location"},{"location":"backend-api/resources/tracking/map_layer/","text":"Map layer \u00b6 Contains map layer object structure and API calls to interact with it. Map layer object structure: \u00b6 { \"id\" : 123456 , \"label\" : \"test\" } id - int. Map layer entity ID. label - string. Map layer name. API actions \u00b6 API path: /map_layer . read \u00b6 Reads the body of the specified layer. Parameters \u00b6 name description type format id ID of the map layer. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/map_layer/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"id\": 123456}' HTTP GET https://api.navixy.com/v2/map_layer/read?hash=a6aa75587e5c59c32d347da438505fc3&id=123456 Response \u00b6 Layer body with content-type: application/vnd.google-earth.kml+xml; charset=utf-8 . Errors \u00b6 201 - Not found in the database \u2013 if there is no map layer with such ID belonging to current user. list \u00b6 Returns metadata for all map layers for the user. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/map_layer/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/map_layer/listd?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 123456 , \"label\" : \"test\" }] } Errors \u00b6 No specific errors. upload \u00b6 Uploads new map layer. MUST be a POST multipart request (multipart/form-data), with one of the parts being a KML file upload (with the name \"file\"). Parameters \u00b6 name description type label Label for a new map layer. string file A KML file upload containing map_layer data. File upload redirect_target Optional. URL to redirect. If redirect_target passed return redirect to <redirect_target>?response=<urlencoded_response_json> string Response \u00b6 { \"success\" : true , \"id\" : 163 } id - int. ID of the created layer. Errors \u00b6 233 - No data file \u2013 if file part is missing. 234 - Invalid data format \u2013 if file has wrong mime type. 242 - Validation error \u2013 if uploaded file is not valid KML. 268 - Over quota \u2013 if the user's quota for map layers exceeded. update \u00b6 Updates metadata for the specified map layer. Parameters \u00b6 name description type layer Map layer object described here JSON object Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if there is no map layer with such ID belonging to current user. delete \u00b6 Deletes specified layer. Parameters \u00b6 name description type format id ID of the map layer. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/map_layer/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"id\": 123456}' HTTP GET https://api.navixy.com/v2/map_layer/delete?hash=a6aa75587e5c59c32d347da438505fc3&id=123456 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if there is no map layer with such ID belonging to current user.","title":"Map Layer"},{"location":"backend-api/resources/tracking/map_layer/#map-layer","text":"Contains map layer object structure and API calls to interact with it.","title":"Map layer"},{"location":"backend-api/resources/tracking/map_layer/#map-layer-object-structure","text":"{ \"id\" : 123456 , \"label\" : \"test\" } id - int. Map layer entity ID. label - string. Map layer name.","title":"Map layer object structure:"},{"location":"backend-api/resources/tracking/map_layer/#api-actions","text":"API path: /map_layer .","title":"API actions"},{"location":"backend-api/resources/tracking/map_layer/#read","text":"Reads the body of the specified layer.","title":"read"},{"location":"backend-api/resources/tracking/map_layer/#list","text":"Returns metadata for all map layers for the user.","title":"list"},{"location":"backend-api/resources/tracking/map_layer/#upload","text":"Uploads new map layer. MUST be a POST multipart request (multipart/form-data), with one of the parts being a KML file upload (with the name \"file\").","title":"upload"},{"location":"backend-api/resources/tracking/map_layer/#update","text":"Updates metadata for the specified map layer.","title":"update"},{"location":"backend-api/resources/tracking/map_layer/#delete","text":"Deletes specified layer.","title":"delete"},{"location":"backend-api/resources/tracking/retranslator/","text":"Retranslator \u00b6 Retranslator and retranslator protocol objects and CRUD actions for retranslators. They can be used to redirect the data that comes from a device to the platform to some third-party application specified by the user. Retranslator protocol object \u00b6 { \"id\" : 123456 , \"name\" : \"protocol\" , \"has_login\" : true , \"has_password\" : false , \"fake_device_id_pattern\" : \"id_pattern\" , \"required_login\" : true , \"required_password\" : false } id - int. Protocol ID. name - string. Protocol name. has_login - boolean. true if this protocol use login. has_password - boolean. true if this protocol use password. fake_device_id_pattern - optional string. Regex pattern for fake_device_id validation. required_login - boolean. true if for this protocol login required. required_password - boolean. true if for this protocol password required. Retranslator object \u00b6 { \"id\" : 1 , \"name\" : \"Some server\" , \"protocol_id\" : 123456 , \"address\" : \"127.0.0.1\" , \"port\" : 15000 , \"login\" : \"login\" , \"password\" : \"password\" , \"enabled\" : true } id - int. Retranslator ID. name - string. Zone label. protocol_id - int. Protocol ID. address - string. Network address, e.g. 127.0.0.1 or localhost . port - int. Port number. login - optional string. password - optional string. enabled - boolean. Status. API actions \u00b6 API path: /retranslator . create \u00b6 Creates new retranslator. required sub-user rights : admin (available only to master users). Parameters \u00b6 name description type retranslator Retranslator object without id field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/retranslator/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"retranslator\": {\"name\": \"Some server\", \"protocol_id\": 123456, \"address\": \"127.0.0.1\", \"port\": 15000, \"login\": \"proto\", \"password\": \"qewtyr\", \"enabled\": true}}' Response \u00b6 { \"success\" : true , \"id\" : 123456 } id - int. ID of the created retranslator. Errors \u00b6 247 - Entity already exists - if retranslator with this address, port and login already exists. 7 - Invalid parameters - if retranslator have required fields (login or password), but was send empty. 268 - Over quota \u2013 if the user's quota for retranslators exceeded. delete \u00b6 Deletes user's retranslator with specified retranslator_id . required sub-user rights : admin (available only to master users). Parameters \u00b6 name description type format retranslator_id ID of the retranslator that will be deleted. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/retranslator/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"retranslator_id\": 123456}' HTTP GET https://api.navixy.com/v2/retranslator/delete?hash=a6aa75587e5c59c32d347da438505fc3&retranslator_id=123456 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database. list \u00b6 Get all users' retranslators. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/retranslator/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/retranslator/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 1 , \"name\" : \"Some server\" , \"protocol_id\" : 123456 , \"address\" : \"127.0.0.1\" , \"port\" : 15000 , \"login\" : \"login\" , \"password\" : \"password\" , \"enabled\" : true }] } id - int. Retranslator ID. name - string. Zone label. protocol_id - int. Protocol ID. address - string. Network address, e.g. 127.0.0.1 or localhost . port - int. Port number. login - optional string. password - optional string. enabled - boolean. Status. update \u00b6 Updates retranslator parameters for the specified retranslator. Note that retranslator must exist, and must belong to the current user. required sub-user rights : admin (available only to master users). Parameters \u00b6 name description type retranslator Retranslator object without id field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/retranslator/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"retranslator\": {\"name\": \"Some server\", \"protocol_id\": 123456, \"address\": \"127.0.0.1\", \"port\": 15000, \"login\": \"proto\", \"password\": \"qewtyr\", \"enabled\": true}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if retranslator with the specified ID cannot be found or belongs to another user. 247 - Entity already exists \u2013 if retranslator with this address, port and login already exists. protocol/list \u00b6 Returns all available retranslator protocols. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/retranslator/protocol/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/retranslator/protocol/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 123456 , \"name\" : \"protocol\" , \"has_login\" : true , \"has_password\" : false , \"fake_device_id_pattern\" : \"id_pattern\" , \"required_login\" : true , \"required_password\" : false }] } id - int. Protocol ID. name - string. Protocol name. has_login - boolean. true if this protocol use login. has_password - boolean. true if this protocol use password. fake_device_id_pattern - optional string. Regex pattern for fake_device_id validation. required_login - boolean. true if for this protocol login required. required_password - boolean. true if for this protocol password required.","title":"Retranslator"},{"location":"backend-api/resources/tracking/retranslator/#retranslator","text":"Retranslator and retranslator protocol objects and CRUD actions for retranslators. They can be used to redirect the data that comes from a device to the platform to some third-party application specified by the user.","title":"Retranslator"},{"location":"backend-api/resources/tracking/retranslator/#retranslator-protocol-object","text":"{ \"id\" : 123456 , \"name\" : \"protocol\" , \"has_login\" : true , \"has_password\" : false , \"fake_device_id_pattern\" : \"id_pattern\" , \"required_login\" : true , \"required_password\" : false } id - int. Protocol ID. name - string. Protocol name. has_login - boolean. true if this protocol use login. has_password - boolean. true if this protocol use password. fake_device_id_pattern - optional string. Regex pattern for fake_device_id validation. required_login - boolean. true if for this protocol login required. required_password - boolean. true if for this protocol password required.","title":"Retranslator protocol object"},{"location":"backend-api/resources/tracking/retranslator/#retranslator-object","text":"{ \"id\" : 1 , \"name\" : \"Some server\" , \"protocol_id\" : 123456 , \"address\" : \"127.0.0.1\" , \"port\" : 15000 , \"login\" : \"login\" , \"password\" : \"password\" , \"enabled\" : true } id - int. Retranslator ID. name - string. Zone label. protocol_id - int. Protocol ID. address - string. Network address, e.g. 127.0.0.1 or localhost . port - int. Port number. login - optional string. password - optional string. enabled - boolean. Status.","title":"Retranslator object"},{"location":"backend-api/resources/tracking/retranslator/#api-actions","text":"API path: /retranslator .","title":"API actions"},{"location":"backend-api/resources/tracking/retranslator/#create","text":"Creates new retranslator. required sub-user rights : admin (available only to master users).","title":"create"},{"location":"backend-api/resources/tracking/retranslator/#delete","text":"Deletes user's retranslator with specified retranslator_id . required sub-user rights : admin (available only to master users).","title":"delete"},{"location":"backend-api/resources/tracking/retranslator/#list","text":"Get all users' retranslators.","title":"list"},{"location":"backend-api/resources/tracking/retranslator/#update","text":"Updates retranslator parameters for the specified retranslator. Note that retranslator must exist, and must belong to the current user. required sub-user rights : admin (available only to master users).","title":"update"},{"location":"backend-api/resources/tracking/retranslator/#protocollist","text":"Returns all available retranslator protocols.","title":"protocol/list"},{"location":"backend-api/resources/tracking/beacon/","text":"BLE beacon data \u00b6 Methods for obtaining collected BLE beacon data. BLE beacon data is data about radio tags (BLE beacons) visible to a tracker, e.g. iBeacon, Teltonika EYE Beacon\\Sensor, Eddystone. BLE beacon data entry \u00b6 { \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:14:42\" , \"latitude\" : 50.3487321 , \"longitude\" : 7.58238 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } } tracker_id - int. An ID of the tracker (aka \"object_id\"). hardware_id - string. An ID of the beacon. rssi - int. RSSI stands for received signal strength indicator and represents the power of received signal on a device. According to it, you can understand how far away the beacon is from the tracker. get_time - date/time . When this data received. latitude - float. Latitude. longitude - float. Longitude. ext_data - object. Additional beacon data. API actions \u00b6 API path: /beacon/data/read . read \u00b6 List of beacon data history between from date/time and to date/time sorted by get_time field. Parameters \u00b6 name description type from Start date/time for searching. string date/time to End date/time for searching. Must be after \"from\" date. string date/time trackers Optional. Default: null. List of trackers. int array beacons Optional. Default: null. List of beacons IDs. All IDs must not be empty and not more than 64 characters. string array Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/beacon/data/read' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\":\"59be129c1855e34ea9eb272b1e26ef1d\", \"from\": \"2023-04-17 17:00:00\", \"to\": \"2023-04-17 18:00:00\", \"beacons\": [\"ffffffffd86f4f75868d55aa831afa1f\", \"7cf9501df3d6924e423cabcde4c924ff\"], \"trackers\": [10181654] }' Response \u00b6 { \"list\" : [ { \"tracker_id\" : 10181654 , \"hardware_id\" : \"ffffffffd86f4f75868d55aa831afa1f\" , \"rssi\" : -96 , \"get_time\" : \"2023-04-17 17:14:20\" , \"latitude\" : 50.3487301 , \"longitude\" : 7.58207 , \"ext_data\" : { \"minor\" : \"0055\" , \"major\" : \"3138\" } }, { \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:14:42\" , \"latitude\" : 50.3487321 , \"longitude\" : 7.58238 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } } ], \"success\" : true } list - list of zero or more beacon_data_entry objects which is described in Beacon data entry . API path: /beacon/data/last_values . last values \u00b6 List of last BLE beacon data visible on the trackers. Parameters \u00b6 name description type trackers Optional. Default: null. List of trackers. int array skip_older_than_seconds Optional. Default: 3600. Skip entries older than the specified number of seconds. int Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/beacon/data/last_values' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\":\"59be129c1855e34ea9eb272b1e26ef1d\", \"trackers\": [10181654], \"skip_older_than_seconds\": 3600 }' Response \u00b6 { \"list\" : [ { \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:14:42\" , \"latitude\" : 50.3487321 , \"longitude\" : 7.58238 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } } ], \"success\" : true } list - list of zero or more beacon_data_entry objects which is described in Beacon data entry .","title":"BLE Beacon Data"},{"location":"backend-api/resources/tracking/beacon/#ble-beacon-data","text":"Methods for obtaining collected BLE beacon data. BLE beacon data is data about radio tags (BLE beacons) visible to a tracker, e.g. iBeacon, Teltonika EYE Beacon\\Sensor, Eddystone.","title":"BLE beacon data"},{"location":"backend-api/resources/tracking/beacon/#ble-beacon-data-entry","text":"{ \"tracker_id\" : 10181654 , \"hardware_id\" : \"7cf9501df3d6924e423cabcde4c924ff\" , \"rssi\" : -101 , \"get_time\" : \"2023-04-17 17:14:42\" , \"latitude\" : 50.3487321 , \"longitude\" : 7.58238 , \"ext_data\" : { \"voltage\" : 3.075 , \"temperature\" : 24.0 } } tracker_id - int. An ID of the tracker (aka \"object_id\"). hardware_id - string. An ID of the beacon. rssi - int. RSSI stands for received signal strength indicator and represents the power of received signal on a device. According to it, you can understand how far away the beacon is from the tracker. get_time - date/time . When this data received. latitude - float. Latitude. longitude - float. Longitude. ext_data - object. Additional beacon data.","title":"BLE beacon data entry"},{"location":"backend-api/resources/tracking/beacon/#api-actions","text":"API path: /beacon/data/read .","title":"API actions"},{"location":"backend-api/resources/tracking/beacon/#read","text":"List of beacon data history between from date/time and to date/time sorted by get_time field.","title":"read"},{"location":"backend-api/resources/tracking/beacon/#last-values","text":"List of last BLE beacon data visible on the trackers.","title":"last values"},{"location":"backend-api/resources/tracking/route/","text":"Getting route \u00b6 API call for getting the route to destination point. API actions \u00b6 API path: /route . get \u00b6 Gets route points via specified route provider. Parameters \u00b6 name description type start Location JSON object. Start of route. JSON object end Location JSON object. End of route. JSON object waypoints Optional. List of transitional points. [{locationA},{locationN}] . array of JSON objects point_limit Optional. If specified, the returned route will be simplified to contain this number of points (or less). Min=2. int provider_type Optional. If not specified, the default user provider is used. One of \"progorod\", or \"google\", \"osrm\". enum location object described in data types description section . Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/route/get' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"start\": {\"lat\": 34.178868, \"lng\": -118.599672}, \"end\": {\"lat\": 31.738386, \"lng\": -106.453854}}' Response \u00b6 { \"success\" : true , \"distance\" : 1340584 , \"time\" : 43500 , \"list\" : [{ \"lat\" : 34.178868 , \"lng\" : -118.599672 }, { \"lat\" : 31.738386 , \"lng\" : -106.453854 }], \"key_points\" : [{ \"id\" : 123 , \"lat\" : 35.365948 , \"lng\" : -108.112104 }] } distance - int. Length in meters. time - int. Duration in seconds. list - list of route points. Location objects. key_points - list of points corresponding to start point, waypoints and end point (in that sequence). id - int. index in points list . lat - float. Latitude. lng - float. Longitude. Errors \u00b6 215 - External service error. 218 - Malformed external service parameters. 236 - Feature unavailable due to tariff restrictions \u2013 if there is at least one tracker without \"routing\" tariff feature.","title":"Index"},{"location":"backend-api/resources/tracking/route/#getting-route","text":"API call for getting the route to destination point.","title":"Getting route"},{"location":"backend-api/resources/tracking/route/#api-actions","text":"API path: /route .","title":"API actions"},{"location":"backend-api/resources/tracking/route/#get","text":"Gets route points via specified route provider.","title":"get"},{"location":"backend-api/resources/tracking/route/route_google/","text":"Getting the route with Google \u00b6 API call for getting the route to destination point using Google Directions API . API actions \u00b6 API path: /route/google . get \u00b6 Gets route points using Google Directions API. Parameters \u00b6 name description type start Location JSON object. Start of route. JSON object end Location JSON object. End of route. JSON object waypoints Optional. List of transitional points. [{locationA},{locationN}] . array of JSON objects point_limit Optional. If specified, the returned route will be simplified to contain this number of points (or less). Min=2. int Where location described in data types description section . Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/route/google/get' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"start\": {\"lat\": 34.178868, \"lng\": -118.599672}, \"end\": {\"lat\": 31.738386, \"lng\": -106.453854}}' Response \u00b6 { \"success\" : true , \"distance\" : 1340584 , \"time\" : 43500 , \"list\" : [{ \"lat\" : 34.178868 , \"lng\" : -118.599672 }, { \"lat\" : 31.738386 , \"lng\" : -106.453854 }], \"key_points\" : [{ \"id\" : 123 , \"lat\" : 35.365948 , \"lng\" : -108.112104 , \"distance\" : 1052511 , \"time\" : 37800 }] } distance - int. Length in meters. time - int. Duration in seconds. list - list of route points. Location objects. key_points - list of points corresponding to start point, waypoints and end point (in that sequence). id - int. index in points list . lat - float. Latitude. lng - float. Longitude. distance - int. Length of full path from start in meters (0 for start point). time - int. Duration of full path from start in seconds (0 for start point). Errors \u00b6 215 - External service error. { \"success\" : false , \"status\" : { \"code\" : 215 , \"description\" : \"External service error\" }, \"errors\" : [ \"OVER_QUERY_LIMIT\" ] } errors - enum array. Status. OVER_QUERY_LIMIT \u2013 indicates the service has received too many requests from your application within the allowed time period. REQUEST_DENIED \u2013 indicates that the service denied use of the directions service by your application. UNKNOWN_ERROR \u2013 indicates directions request could not be processed due to a server error. The request may succeed if you try again. 218 - Malformed external service parameters. { \"success\" : false , \"status\" : { \"code\" : 218 , \"description\" : \"Malformed external service parameters\" }, \"errors\" : [ \"NOT_FOUND\" ] } errors - enum array. Status. NOT_FOUND \u2013 indicates at least one of the locations specified in the request's origin, destination, or waypoints could not be geocoded. ZERO_RESULTS \u2013 indicates no route could be found between the origin and destination. MAX_WAYPOINTS_EXCEEDED \u2013 indicates that too many waypoints provided in the request. The maximum allowed waypoints is 8, plus the origin, and destination. Google Maps API for Business customers may contain requests with up to 23 waypoints. INVALID_REQUEST \u2013 indicates that the provided request was invalid. Common causes of this status include an invalid parameter or parameter value. 236 - Feature unavailable due to tariff restrictions \u2013 if there is at least one tracker without \"routing\" tariff feature.","title":"Route Google"},{"location":"backend-api/resources/tracking/route/route_google/#getting-the-route-with-google","text":"API call for getting the route to destination point using Google Directions API .","title":"Getting the route with Google"},{"location":"backend-api/resources/tracking/route/route_google/#api-actions","text":"API path: /route/google .","title":"API actions"},{"location":"backend-api/resources/tracking/route/route_google/#get","text":"Gets route points using Google Directions API.","title":"get"},{"location":"backend-api/resources/tracking/route/route_osrm/","text":"Getting route with OSRM \u00b6 API call for getting the route to destination point using OSRM API . API actions \u00b6 API path: /route/osrm . get \u00b6 Gets route points via OSRM API. Parameters \u00b6 name description type start Location JSON object. Start of route. JSON object end Location JSON object. End of route. JSON object waypoints Optional. List of transitional points. [{locationA},{locationN}] . array of JSON objects point_limit Optional. If specified, the returned route will be simplified to contain this number of points (or less). Min=2. int Where location described in data types description section . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/route/osrm/get' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"start\": {34.178868, \"lng\": -118.599672}, \"end\": {35.365948, \"lng\": -108.112104}}' Response \u00b6 { \"success\" : true , \"distance\" : 1340584 , \"time\" : 43500 , \"list\" : [{ \"lat\" : 34.178868 , \"lng\" : -118.599672 }, { \"lat\" : 31.738386 , \"lng\" : -106.453854 }], \"key_points\" : [{ \"id\" : 123 , \"lat\" : 35.365948 , \"lng\" : -108.112104 }] } distance - int. Length in meters. time - int. Duration in seconds. list - list of route points. Location objects. key_points - list of points corresponding to start point, waypoints and end point (in that sequence). id - int. index in points list . lat - float. Latitude. lng - float. Longitude. Errors \u00b6 215 - External service error. 218 - Malformed external service parameters. { \"success\" : false , \"status\" : { \"code\" : 218 , \"description\" : \"Malformed external service parameters\" }, \"errors\" : [ { \"status\" : \"NOT_FOUND\" , \"status_code\" : 207 , \"message\" : \"Cannot find route between points\" } ] } status - enum . NOT_FOUND \u2013 indicates at least one of the locations specified in the request's origin, destination, or waypoints could not be geocoded, or OSRM cannot find route. UNKNOWN_ERROR \u2013 unexpected OSRM error code. status_code - int. OSRM status code (don't rely on it). message - string. OSRM error message (don't rely on it). 236 - Feature unavailable due to tariff restrictions \u2013 if there is at least one tracker without \"routing\" tariff feature.","title":"Route Osrm"},{"location":"backend-api/resources/tracking/route/route_osrm/#getting-route-with-osrm","text":"API call for getting the route to destination point using OSRM API .","title":"Getting route with OSRM"},{"location":"backend-api/resources/tracking/route/route_osrm/#api-actions","text":"API path: /route/osrm .","title":"API actions"},{"location":"backend-api/resources/tracking/route/route_osrm/#get","text":"Gets route points via OSRM API.","title":"get"},{"location":"backend-api/resources/tracking/route/route_progorod/","text":"Getting route with Progorod \u00b6 API call for getting the route to destination point using Progorod router . API actions \u00b6 API path: /route/progorod . get \u00b6 Gets route points using Progorod router. Parameters \u00b6 name description type start Location JSON object. Start of route. JSON object end Location JSON object. End of route. JSON object waypoints Optional. List of transitional points. [{locationA},{locationN}] . array of JSON objects point_limit Optional. If specified, the returned route will be simplified to contain this number of points (or less). Min=2. int minsize Optional. Default=5. Smoothing parameter in conventional meters. Not recommended to set it less than distance between two neighbouring pixels on current zoom. double use_traffic Optional. Default= false If it is false then use mode=optimal and use traffic=0, else mode=comfort and use traffic=1. boolean Where location described in data types description section . Order of waypoints may be changed. Response \u00b6 { \"success\" : true , \"distance\" : 1340584 , \"time\" : 43500 , \"list\" : [{ \"lat\" : 34.178868 , \"lng\" : -118.599672 }, { \"lat\" : 31.738386 , \"lng\" : -106.453854 }], \"key_points\" : [{ \"id\" : 123 , \"lat\" : 35.365948 , \"lng\" : -108.112104 }] } distance - int. Length in meters. time - int. Duration in seconds. list - list of route points. Location objects. key_points - list of points corresponding to start point, waypoints and end point (in that sequence). id - int. index in points list . lat - float. Latitude. lng - float. Longitude. Errors \u00b6 215 - External service error. 218 - Malformed external service parameters \u2013 Contains info about error: { \"success\" : false , \"status\" : { \"code\" : 218 , \"description\" : \"Malformed external service parameters\" }, \"errors\" : [{ \"type\" : \"malformed\" , \"point\" : \"start\" , \"index\" : 3 }] } type - enum . Type of error. One of: \"not_set\", \"malformed\" and \"isolated\". point - enum . Error point. One of: \"start\", \"end\", \"waypoint\" and \"all\". index - int. Passed only for a waypoint. Index of bad point in waypoints array.","title":"Route Progorod"},{"location":"backend-api/resources/tracking/route/route_progorod/#getting-route-with-progorod","text":"API call for getting the route to destination point using Progorod router .","title":"Getting route with Progorod"},{"location":"backend-api/resources/tracking/route/route_progorod/#api-actions","text":"API path: /route/progorod .","title":"API actions"},{"location":"backend-api/resources/tracking/route/route_progorod/#get","text":"Gets route points using Progorod router.","title":"get"},{"location":"backend-api/resources/tracking/status/","text":"Working status \u00b6 Contains status object and API calls to interact with them. Working statuses used to track current activity for employees (in fact, of tracking devices owned by employees). The simplest example is \"busy\" | \"not busy\". This is a status listing consisting of two elements. Different trackers can be assigned different status lists. Find details on working status usage in our guides . Status object structure \u00b6 { \"id\" : 5 , \"label\" : \"Busy\" , \"color\" : \"E57373\" } id - int. A unique identifier of the working status. Read-only. label - string. Human-readable label for the working status. color - string. Hex-representation of RGB color used to display this working status. API actions \u00b6 API base path: /status/ . create \u00b6 Creates new possible working status for the specified working status list. required sub-user rights: tracker_update . Parameters \u00b6 name description type listing_id ID of the list for this working status to attach to. int status Status object without ID field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"listing_id\": 12345, \"status\": {\"label\": \"Busy\", \"color\": \"E57373\"}}' Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. ID of the created working status. Errors \u00b6 201 - Not found in the database \u2013 if listing with the specified ID does not exist. 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available. 268 - Over quota \u2013 if the user's quota for working statuses exceeded. delete \u00b6 Deletes working status entry. required sub-user rights: tracker_update . Parameters \u00b6 name description type status_id ID of the working status belonging to authorized user. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"status_id\": 123}' HTTP GET https://api.navixy.com/v2/status/delete?hash=a6aa75587e5c59c32d347da438505fc3&status_id=123 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if working status with the specified ID does not exist. 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available. list \u00b6 Gets working statuses belonging to the specified status list. Parameters \u00b6 name description type listing_id ID of the list for this working status to attach to. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"listing_id\": 12345}' HTTP GET https://api.navixy.com/v2/status/list?hash=a6aa75587e5c59c32d347da438505fc3&listing_id=12345 Response \u00b6 { \"success\" : true , \"list\" :[{ \"id\" : 5 , \"label\" : \"Busy\" , \"color\" : \"E57373\" },{ \"id\" : 6 , \"label\" : \"Free\" , \"color\" : \"A27373\" }] } list - ordered array of objects. Errors \u00b6 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available. update \u00b6 Updates working status properties. required sub-user rights: tracker_update . Parameters \u00b6 name description type status Status object with ID field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"status\": {\"id\": 5, \"label\": \"Busy\", \"color\": \"E57373\"}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if working status with the specified ID does not exist. 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available.","title":"Index"},{"location":"backend-api/resources/tracking/status/#working-status","text":"Contains status object and API calls to interact with them. Working statuses used to track current activity for employees (in fact, of tracking devices owned by employees). The simplest example is \"busy\" | \"not busy\". This is a status listing consisting of two elements. Different trackers can be assigned different status lists. Find details on working status usage in our guides .","title":"Working status"},{"location":"backend-api/resources/tracking/status/#status-object-structure","text":"{ \"id\" : 5 , \"label\" : \"Busy\" , \"color\" : \"E57373\" } id - int. A unique identifier of the working status. Read-only. label - string. Human-readable label for the working status. color - string. Hex-representation of RGB color used to display this working status.","title":"Status object structure"},{"location":"backend-api/resources/tracking/status/#api-actions","text":"API base path: /status/ .","title":"API actions"},{"location":"backend-api/resources/tracking/status/#create","text":"Creates new possible working status for the specified working status list. required sub-user rights: tracker_update .","title":"create"},{"location":"backend-api/resources/tracking/status/#delete","text":"Deletes working status entry. required sub-user rights: tracker_update .","title":"delete"},{"location":"backend-api/resources/tracking/status/#list","text":"Gets working statuses belonging to the specified status list.","title":"list"},{"location":"backend-api/resources/tracking/status/#update","text":"Updates working status properties. required sub-user rights: tracker_update .","title":"update"},{"location":"backend-api/resources/tracking/status/tracker/","text":"Tracker's working status \u00b6 This resource contains methods to read and assign working status of a particular tracker. API actions \u00b6 API base path: /status/tracker/ . assign \u00b6 Assign a working status to the tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 new_status_id ID of the working status. Must belong to status list assigned to this tracker. int 5 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/tracker/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"new_status_id\": 5}' HTTP GET https://api.navixy.com/v2/status/tracker/assign?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&new_status_id=5 Response \u00b6 { \"success\" : true , \"last_change\" : { \"id\" : 11 , \"old_status_id\" : null , \"new_status_id\" : 2 , \"location\" : { \"lat\" : 11.0 , \"lng\" : 22.0 , \"address\" : \"Jones st, 4\" }, \"changed\" : \"2015-11-22 02:02:02\" , \"origin\" : \"supervisor\" } } last_change - object describing last change of the status. May be null. old_status_id - int. Previous status ID. May be null. new_status_id - int. Current status ID. May be null. location - object. Location and address at which status change occurred. lat - int. Latitude. lng - int. Longitude. address - string. Address of last change. changed - date/time . Change date and time. origin - enum . Origin \u2013 who changed the status (\"employee\" or \"supervisor\"). Errors \u00b6 13 - Operation not permitted \u2013 if status list does not allow for a supervisor to change status. 201 - Not found in the database \u2013 if there is no tracker with such ID belonging to authorized user. 204 - Entity not found \u2013 if there is no status list assigned to this tracker containing with such ID. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions or some other reason. 219 - Not allowed for clones of the device \u2013 if specified tracker is a clone. 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available. 263 - No change needed, old and new values are the same \u2013 if new status is equal to current status of tracker. list \u00b6 Gets current assigned statuses for the specified trackers. Parameters \u00b6 name description type format trackers List of the tracker's IDs belonging to authorized user. int array [123456, 234567] Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"trackers\": [123456,234567]}' Response \u00b6 { \"success\" : true , \"value\" : { \"5344\" : { \"current_status\" : { \"id\" : 66 , \"label\" : \"Busy\" , \"color\" : \"FFC107\" }, \"last_change\" : { \"id\" : 441 , \"old_status_id\" : 65 , \"new_status_id\" : 66 , \"location\" : { \"lat\" : 35.365948 , \"lng\" : -108.112104 , \"address\" : \"Navajo Nation Off-Reservation Trust Land, Chinle, NM, USA\" }, \"changed\" : \"2017-05-02 07:40:39\" , \"origin\" : \"supervisor\" } }, \"15595\" : { \"current_status\" : null , \"last_change\" : { \"id\" : 123 , \"old_status_id\" : 67 , \"new_status_id\" : null , \"location\" : { \"lat\" : 34.178868 , \"lng\" : -118.599672 , \"address\" : \"\" }, \"changed\" : \"2016-03-14 04:58:32\" , \"origin\" : \"employee\" } } } } value - Map with a tracker's IDs as keys. current_status - Status object showing current status of tracker. May be null. last_change - Object describing last change of the status. May be null. old_status_id - int. Previous status ID. May be null. new_status_id - int. Current status ID. May be null. location - Location and address at which status change occurred. changed - date/time . Date and time of change. origin - enum . Origin \u2013 who changed the status (\"employee\" or \"supervisor\"). Errors \u00b6 217 - List contains nonexistent entities - if one or more of tracker IDs belong to nonexistent tracker (or to a tracker belonging to different user). 221 - Device limit exceeded \u2013 if device limit set for the user's dealer has been exceeded. 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available. read \u00b6 Gets current assigned working status of the tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/tracker/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456}' HTTP GET https://api.navixy.com/v2/status/tracker/read?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456 Response \u00b6 { \"success\" : true , \"current_status\" : { \"id\" : 2 , \"label\" : \"On duty\" , \"color\" : \"FFFF99\" }, \"last_change\" : { \"id\" : 11 , \"old_status_id\" : null , \"new_status_id\" : 2 , \"location\" : { \"lat\" : 11.0 , \"lng\" : 22.0 , \"address\" : \"Jones st, 4\" }, \"changed\" : \"2015-11-22 02:02:02\" , \"origin\" : \"supervisor\" } } current_status - status object showing current status of tracker. May be null. last_change - object describing last change of the status. May be null. old_status_id - int. Previous status ID. May be null. new_status_id - int. Current status ID. May be null. location - Location and address at which status change occurred. changed - date/time . Date and time of change. origin - enum . Origin \u2013 who changed the status (\"employee\" or \"supervisor\"). Errors \u00b6 201 - Not found in the database \u2013 if there is no tracker with such ID belonging to authorized user. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions, or some other reason. 219 - Not allowed for clones of the device \u2013 if specified tracker is a clone. 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available.","title":"Tracker"},{"location":"backend-api/resources/tracking/status/tracker/#trackers-working-status","text":"This resource contains methods to read and assign working status of a particular tracker.","title":"Tracker's working status"},{"location":"backend-api/resources/tracking/status/tracker/#api-actions","text":"API base path: /status/tracker/ .","title":"API actions"},{"location":"backend-api/resources/tracking/status/tracker/#assign","text":"Assign a working status to the tracker.","title":"assign"},{"location":"backend-api/resources/tracking/status/tracker/#list","text":"Gets current assigned statuses for the specified trackers.","title":"list"},{"location":"backend-api/resources/tracking/status/tracker/#read","text":"Gets current assigned working status of the tracker.","title":"read"},{"location":"backend-api/resources/tracking/status/listing/","text":"Working status list \u00b6 Contains status listing object and API calls to interact with status listings. Status listings are lists of possible statuses that can be assigned to trackers. Status listing object structure \u00b6 { \"id\" : 1 , \"label\" : \"Taxi driver statuses\" , \"employee_controlled\" : true , \"supervisor_controlled\" : false , \"entries\" : [ 5 , 2 , 1 , 4 , 6 ] } id - int. A unique identifier of this working status list. Read-only. label - string. Human-readable label for the working status list. employee_controlled - boolean. If true employees can change their own working status, e.g. using mobile tracking app. supervisor_controlled - boolean. If true supervisors can change working status, e.g. using mobile monitoring app. entries - int array. List of IDs of working statuses which belong to this list. Order matters, and is preserved. API actions \u00b6 API base path: /status/listing/ . create \u00b6 Creates new empty working status list. required sub-user rights: tracker_update . Parameters \u00b6 name description type listing status_listing object without \"id\" and \"entries\" fields. JSON object Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/listing/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"listing\": {\"label\": \"Taxi driver statuses\", \"employee_controlled\": false, \"supervisor_controlled\": true}' Response \u00b6 { \"success\" : true , \"id\" : 111 } id - int. ID of the created working status list. Errors \u00b6 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available. 268 - Over quota \u2013 if the user's quota for working status lists exceeded. delete \u00b6 Deletes working status list. required sub-user rights: tracker_update . Parameters \u00b6 name description type listing_id ID of the working status list for this status to attach to. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/listing/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"listing_id\": 12345}' HTTP GET https://api.navixy.com/v2/status/listing/delete?hash=a6aa75587e5c59c32d347da438505fc3&listing_id=12345 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if working status list with the specified ID does not exist. 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available. list \u00b6 Gets working status lists belonging to authorized user. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/listing/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/status/listing/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" :[{ \"id\" : 1 , \"label\" : \"Taxi driver statuses\" , \"employee_controlled\" : true , \"supervisor_controlled\" : false , \"entries\" : [ 5 , 2 , 1 , 4 , 6 ] }] } list - ordered array of status_listing objects. Errors \u00b6 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available. update \u00b6 Updates working status list properties. required sub-user rights: tracker_update . entries field allows changing order of statuses attached to this working status list. Parameters \u00b6 name description type listing status_listing object with \"id\" and \"entries\" fields. JSON object Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/listing/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"listing\": {\"id\": 12345, \"label\": \"Taxi driver statuses\", \"employee_controlled\": false, \"supervisor_controlled\": true, \"entries\": [ 5, 2, 1, 4, 6]}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if working status list with the specified ID does not exist. 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available. 262 - Entries list is missing some entries or contains nonexistent entries \u2013 if entries does not contain full set of status IDs associated with this working status list, or if it contains nonexistent status IDs.","title":"Index"},{"location":"backend-api/resources/tracking/status/listing/#working-status-list","text":"Contains status listing object and API calls to interact with status listings. Status listings are lists of possible statuses that can be assigned to trackers.","title":"Working status list"},{"location":"backend-api/resources/tracking/status/listing/#status-listing-object-structure","text":"{ \"id\" : 1 , \"label\" : \"Taxi driver statuses\" , \"employee_controlled\" : true , \"supervisor_controlled\" : false , \"entries\" : [ 5 , 2 , 1 , 4 , 6 ] } id - int. A unique identifier of this working status list. Read-only. label - string. Human-readable label for the working status list. employee_controlled - boolean. If true employees can change their own working status, e.g. using mobile tracking app. supervisor_controlled - boolean. If true supervisors can change working status, e.g. using mobile monitoring app. entries - int array. List of IDs of working statuses which belong to this list. Order matters, and is preserved.","title":"Status listing object structure"},{"location":"backend-api/resources/tracking/status/listing/#api-actions","text":"API base path: /status/listing/ .","title":"API actions"},{"location":"backend-api/resources/tracking/status/listing/#create","text":"Creates new empty working status list. required sub-user rights: tracker_update .","title":"create"},{"location":"backend-api/resources/tracking/status/listing/#delete","text":"Deletes working status list. required sub-user rights: tracker_update .","title":"delete"},{"location":"backend-api/resources/tracking/status/listing/#list","text":"Gets working status lists belonging to authorized user.","title":"list"},{"location":"backend-api/resources/tracking/status/listing/#update","text":"Updates working status list properties. required sub-user rights: tracker_update . entries field allows changing order of statuses attached to this working status list.","title":"update"},{"location":"backend-api/resources/tracking/status/listing/tracker/","text":"Tracker's working status list \u00b6 Contains api call which link together trackers and working status lists. API actions \u00b6 API base path: /status/listing/tracker . assign \u00b6 Assigns a working status list (or remove assignment) to the tracker. required sub-user rights: tracker_update . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 listing_id ID of the working status list. Omit this parameter completely, if you want remove the assignment. int 12345 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/status/listing/tracker/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"listing_id\": 12345}' HTTP GET https://api.navixy.com/v2/status/listing/tracker/assign?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&listing_id=12345 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if there is no tracker with such ID belonging to authorized user. 204 - Entity not found \u2013 if there is no working status list with such ID. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions or some other reason. 219 - Not allowed for clones of the device \u2013 if specified tracker is a clone. 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"statuses\" tariff feature available.","title":"Tracker"},{"location":"backend-api/resources/tracking/status/listing/tracker/#trackers-working-status-list","text":"Contains api call which link together trackers and working status lists.","title":"Tracker's working status list"},{"location":"backend-api/resources/tracking/status/listing/tracker/#api-actions","text":"API base path: /status/listing/tracker .","title":"API actions"},{"location":"backend-api/resources/tracking/status/listing/tracker/#assign","text":"Assigns a working status list (or remove assignment) to the tracker. required sub-user rights: tracker_update .","title":"assign"},{"location":"backend-api/resources/tracking/track/","text":"Track \u00b6 This section includes API calls that allow you to interact with tracks and retrieve track points. Learn more about the track API by following our instructions . API actions \u00b6 API path: /track . download \u00b6 This method allows you to download track points as a KML/KMZ file which can be used in other apps to show tracks. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). The tracker must be associated with the user whose hash is being used for the request, and not tariff-blocked. int 123456 from The start date/time for your KML file's track points. The file begins with the next point after this time. date/time \"2020-09-23 03:24:00\" to An end date/time for your KML file's track points. The file concludes with the last point before this time. Ensure this date is later than the \"from\" date. date/time \"2020-09-23 06:24:00\" track_ids Optional. If specified, the file will only contain points from selected tracks. If not, it includes all valid points between the \"from\" and \"to\" times. int array [123456, 234567] include_gsm_lbs Optional. If set to false without specified track_ids, GSM LBS points will be excluded. Default is true. boolean true simplify Optional. If set to true , tracks in the returned file will be simplified with fewer points, optimized for uploading to other apps. Default is true . boolean true point_limit Optional. If it is specified and simplify=true , the returned tracks in a file will be reduced to contain that specified number of points. The minimum value is 2, and the maximum is 3000. If it is not specified, the server's default settings for simplifying tracks will be applied. This is not a strict limit; the returned file can potentially contain more points than specified. int 300 filter Optional. If this is set to true , the returned tracks in a file will be filtered. This is currently only applicable to LBS tracks. boolean true format File format can be \"kml\" or \"kmz\". Default is \"kml\". enum \"kml\" split If set to true , tracks in the file will be split by stops into folders with start/end markers. Default is false . boolean false Example \u00b6 Let's consider an example, where we're looking for a KML file for a tracker with ID 1683258 that doesn't break down by stops. The data should cover trips starting from 3:24 AM to 6:24 AM on November 19, 2023, according to the user's local time. cURL curl -X POST 'https://api.navixy.com/v2/track/download' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 1683258, \"from\": \"2023-11-19 03:24:00\", \"to\": \"2023-11-19 06:24:00\", \"format\": \"kml\", \"split\": false}' Response \u00b6 In case the available storage period is not exceeded, you will get the file. !!!+ example \"KML file example with two points\" ```xml <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:xal=\"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0\"> <Document> <name>track-John (Scania) 2023-11-19 03:24:00</name> <Placemark> <name>point #1</name> <visibility>1</visibility> <description>2023-11-19 03:24:03</description> <TimeStamp> <when>2023-11-19T03:24:03.000-06:00</when> </TimeStamp> <ExtendedData> <Data name=\"speed\"> <value>37</value> </Data> <Data name=\"heading\"> <value>27</value> </Data> </ExtendedData> <Point> <coordinates>-78.768105,43.1172216</coordinates> </Point> </Placemark> <Placemark> <name>point #2</name> <visibility>1</visibility> <description>2023-11-19 03:27:11</description> <TimeStamp> <when>2023-11-19T03:27:11.000-06:00</when> </TimeStamp> <ExtendedData> <Data name=\"speed\"> <value>57</value> </Data> <Data name=\"heading\"> <value>13</value> </Data> </ExtendedData> <Point> <coordinates>-78.7549233,43.1356483</coordinates> </Point> </Placemark> </Document> </kml> ``` For example, if the device's plan has maximum available storage period 3 months (default value) and we request data from 6 months, the response will contain JSON with the next information: { \"list\" : [], \"limit_exceeded\" : true , \"success\" : true } Errors \u00b6 201 - Not found in database \u2013 the tracker ID in your request may not match any trackers linked to the user account with this session hash. Ensure the correct tracker_id and hash of an appropriate user are used. 208 - Device blocked \u2013 if a tracker exists under this user account but is currently inactive due to tariff plan restrictions or any other reason. 211 - Requested time span is too big \u2013 If the interval between the \"from\" and \"to\" dates is too large, it may exceed the maximum value defined in the API configuration. list \u00b6 This method retrieves a list of tracks for a given tracker within a specified time period. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). The tracker must be associated with the user whose hash is being used for the request, and not tariff-blocked. int 123456 from The start date/time for trips. The response begins with the next trip point after this time. date/time \"2020-09-23 03:24:00\" to An end date/time for trips. The response concludes with the last point before this time. Ensure this date is later than the \"from\" date. date/time \"2020-09-23 06:24:00\" filter Optional. Default is true . If set to true , any tracks that are deemed too short, based on their length and number of points, will be excluded from the final list. boolean true split Optional. Default is true . If set to false , all the tracks will be combined into one single track within the period. boolean true include_gsm_lbs Optional. Default is true . If set to false , GSM LBS points will be excluded. boolean true cluster_single_reports Optional. Default is false . If set to true , trips consisting of a single point will be grouped together based on their coordinates. boolean false count_events Optional. Default is false . If set to true , the system will return the count of events that occurred during each track that isn't a single point. boolean false omit_addresses Optional. Default is false . If set to true , address parameters will be empty. boolean false with_points Optional. Default is false . If set to true , track point lists will be included. boolean false point_limit Optional. If specified, the returned data will be reduced to contain that specified number of points. The minimum value is 2, and the maximum is 3000. If it is not specified, the server's default settings for simplifying tracks will be applied. This is not a strict limit; the returned data can potentially contain more points than specified. int 300 Example \u00b6 For example, if we need to retrieve all trips for tracker 1683258 in November, without applying smart filter, including LBS points recorded, without clustering, separated by parkings, while also counting the number of events that occur during each trip, we only need to specify the \"filter\" and \"count_events\" from optional parameters. This is because the other optional settings will provide us with necessary info by default. cURL curl -X POST 'https://api.navixy.com/v2/track/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 1683258, \"from\": \"2023-11-01 03:24:00\", \"to\": \"2023-11-30 06:24:00\", \"filter\": false, \"count_events\": true}' Response \u00b6 { \"success\" : true , \"limit_exceeded\" : false , \"list\" : [ tra ck_i nf o ] } limit_exceeded - boolean. It will be true if the requested time period surpasses the limit set in the tracker's tariff. For instance, if the device's plan has a maximum storage period of three months (the default value), and we request trips for six months. list - an array of JSON objects containing track information. It consists of zero or more JSON objects. Zero objects indicates that there were no trips based on the track options or the device didn't supply any points to the platform. where track_info is either regular , single_report , merged or cluster : regular object: { \"id\" : 123456 , \"start_date\" : \"2023-11-23 03:39:44\" , \"start_address\" : \"1255 6th Ave, New York, NY 10020, USA\" , \"max_speed\" : 62 , \"end_date\" : \"2023-11-23 06:39:44\" , \"end_address\" : \"888 5th Ave, New York, NY 10021, USA\" , \"length\" : 5.5 , \"points\" : 327 , \"avg_speed\" : 49 , \"event_count\" : 3 , \"norm_fuel_consumed\" : 1.07 , \"type\" : \"regular\" , \"gsm_lbs\" : false , \"points_list\" : [ poi nt _i nf o ], \"bounds\" : { \"nw\" : { \"lat\" : 57.151005 , \"lng\" : 59.92729333 }, \"se\" : { \"lat\" : 56.47945333 , \"lng\" : 61.19021833 } } } id - int. Track id. start_date - date/time . Track start date, in user's timezone. start_address - string. Track start address. max_speed - int. Maximum speed registered during track in km/h. end_date - date/time . Track end date, in user's timezone. end_address - string. Track end address. length - float. Track length in kilometers. points - int. Total number of points in a track. avg_speed - int. Average speed in km/h. event_count - int. Number of events recorded during this track. This field will not be present if \"count_events\" is set to false . norm_fuel_consumed - float. Amount of fuel consumed during the track, measured in litres. This field will not be present if there's no vehicle_object linked to the tracker or if \"normAvgFuelConsumption\" is not defined for the linked vehicle object. type - enum : regular , single_report , merged , cluster . Track type. gsm_lbs - optional boolean. GSM LBS point flag. points_list - array of JSON objects. A list of point info . bounds - object. North-west and south-east coordinates of the bounding box that contains all points. single_report object is returned when the device operates in \"interval\" mode or only one point per track is provided (for example, an M7 tracker operating in interval mode): { \"id\" : 123456 , \"start_date\" : \"2023-11-24 03:39:44\" , \"start_address\" : \"1255 6th Ave, New York, NY 10020, USA\" , \"avg_speed\" : 34 , \"gsm_lbs\" : false , \"type\" : \"single_report\" , \"precision\" : 10 , \"points_list\" : [ poi nt _i nf o ] } id - int. Track id. start_date - date/time . Date when the tracker registered the point, in user's timezone. start_address - string. Point address. avg_speed - int. Average speed in km/h. gsm_lbs - optional boolean. GSM LBS point flag. type - enum : regular , single_report , merged , cluster . Track type. precision - optional int. Precision of the location in meters. Its presence relies on the device model. points_list - array of JSON objects. A list of point info . merged object. Only returned if \"split\" is set to false : { \"start_date\" : \"2023-11-24 03:39:44\" , \"start_address\" : \"1255 6th Ave, New York, NY 10020, USA\" , \"max_speed\" : 62 , \"end_date\" : \"2023-11-24 06:39:44\" , \"end_address\" : \"888 5th Ave, New York, NY 10021, USA\" , \"length\" : 5.5 , \"points\" : 327 , \"avg_speed\" : 49 , \"event_count\" : 3 , \"norm_fuel_consumed\" : 1.07 , \"type\" : \"merged\" , \"gsm_lbs\" : false , \"points_list\" : [ poi nt _i nf o ], \"bounds\" : { \"nw\" : { \"lat\" : 57.151005 , \"lng\" : 59.92729333 }, \"se\" : { \"lat\" : 56.47945333 , \"lng\" : 61.19021833 } } } start_date - date/time . Track start date, in user's timezone. It signifies the initial point identified as a track for a specified time period. start_address - string. Track start address. max_speed - int. Maximum speed registered during period in km/h. end_date - date/time . Track end date, in user's timezone. It signifies the last point identified as a track for a specified time period. end_address - string. Track end address. length - float. Track length in kilometers. points - int. Total number of points in a track. avg_speed - int. Average speed in km/h. event_count - int. Number of events recorded during period. This field will not be present if \"count_events\" is set to false . norm_fuel_consumed - float. Amount of fuel consumed during period, measured in litres. This field will not be present if there's no vehicle_object linked to the tracker or if \"normAvgFuelConsumption\" is not defined for the linked vehicle object. type - enum : regular , single_report , merged , cluster . Track type. gsm_lbs - optional boolean. GSM LBS point flag. points_list - array of JSON objects. A list of point info . bounds - object. North-west and south-east coordinates of the bounding box that contains all points. cluster object. Can be returned only if \"split\" is set to true : { \"start_date\" : \"2023-11-24 03:39:44\" , \"start_address\" : \"1255 6th Ave, New York, NY 10020, USA\" , \"end_date\" : \"2020-09-24 06:39:44\" , \"precision\" : 500 , \"points\" : [ { \"lat\" : 34.178868 , \"lng\" : -118.599672 }, { \"lat\" : 31.738386 , \"lng\" : -106.453854 } ], \"bounds\" : { \"nw\" : { \"lat\" : 57.151005 , \"lng\" : 59.92729333 }, \"se\" : { \"lat\" : 56.47945333 , \"lng\" : 61.19021833 } }, \"type\" : \"cluster\" , \"gsm_lbs\" : false } start_date - date/time . Track start date, in user's timezone. start_address - string. Track start address. end_date - date/time . Track end date, in user's timezone. precision - optional int. Precision of the location in meters. Its presence relies on the device model. points - array of point objects in a cluster. type - enum : regular , single_report , merged , cluster . Track type. gsm_lbs - optional boolean. GSM LBS flag. true if a cluster contains only GSM LBS points. bounds - object. North-west and south-east coordinates of the bounding box that contains all points. Errors \u00b6 201 - Not found in database \u2013 the tracker ID in your request may not match any trackers linked to the user account with this session hash. Ensure the correct tracker_id and hash of an appropriate user are used. 208 - Device blocked \u2013 if a tracker exists under this user account but is currently inactive due to tariff plan restrictions or any other reason. 211 - Requested time span is too big \u2013 If the interval between the \"from\" and \"to\" dates is too large, it may exceed the maximum value defined in the API configuration. read \u00b6 This method fetches all track points that a GPS tracker has recorded and sent to the platform within a specified time frame. The timestamp for each point corresponds to when the tracker recorded the point, adjusted to the user's time zone. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). The tracker must be associated with the user whose hash is being used for the request, and not tariff-blocked. int 123456 from The start date/time for trips. The response begins with the next trip point after this time. date/time \"2020-09-23 03:24:00\" to An end date/time for trips. The response concludes with the last point before this time. Ensure this date is later than the \"from\" date. date/time \"2020-09-23 06:24:00\" track_id Optional. If a specific track is identified, only points related to that track will be provided. If no track is specified, all valid track points recorded within the specified \"from\" and \"to\" timeframe will be returned. int 234567 include_gsm_lbs Optional. Default is true . If the value is false && a track_id is not provided, the GSM LBS points will be excluded from the results. boolean true simplify Optional. Default is true . If set to true , the returned data will be simplified, resulting in fewer points. boolean true point_limit Optional. If it is specified and simplify=true , the returned data will be reduced to contain that specified number of points. The minimum value is 2, and the maximum is 3000. If it is not specified, the server's default settings for simplifying tracks will be applied. This is not a strict limit; the returned data can potentially contain more points than specified. int 300 filter Optional. If this is set to true , the returned tracks will be filtered. This is currently only applicable to LBS tracks. If set to false , the response will include parking points. boolean false Example \u00b6 For instance, if we need to obtain track points for tracker 1683258 that fall within November 1, and are solely part of track ID 923150, without applying a smart filter, LBS points and simplifier. Since these optional parameters by default are true , we should list them in our request. cURL curl -X POST 'https://api.navixy.com/v2/track/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 1683258, \"track_id\": 923150, \"from\": \"2023-11-01 00:00:00\", \"to\": \"2023-11-01 23:59:59\", \"filter\": false, \"simplify\": false, \"include_gsm_lbs\": false}' Response \u00b6 { \"success\" : true , \"limit_exceeded\" : true , \"list\" : [ poi nt _i nf o ] } limit_exceeded - boolean. It will be true if the requested time period surpasses the limit set in the tracker's tariff. For instance, if the device's plan has a maximum storage period of three months (the default value), and we request trips for six months. list - array of JSON objects. A list of point info . point info \u00b6 { \"lat\" : 43.0375133 , \"lng\" : -79.226505 , \"alt\" : 0 , \"satellites\" : 10 , \"mileage\" : 43.93 , \"get_time\" : \"2023-11-01 04:38:39\" , \"address\" : \"Kottmeier Road, Thorold, Golden Horseshoe, Ontario, Canada, L3B 5N6\" , \"heading\" : 280 , \"speed\" : 53 , \"precision\" : 100 , \"gsm_lbs\" : false , \"parking\" : false , \"buffered\" : true } lat - float. Represents latitude. lng - float. Represents longitude. alt - int. Indicates the altitude in meters. satellites - int. Shows the number of GPS satellites used to determine this point. mileage - float. Represents mileage. get_time - date/time . This is the GPS timestamp of the point, adjusted to the user's timezone. address - string. Represents the location's address. Will be \"\" if no address recorded. If no address has been recorded, it will appear as \"\". An address is recorded when it marks the beginning or end of a trip, or when an event occurs. heading - int. A value that represents the direction in degrees, with a range of 0 to 360. 0 corresponds to North. speed - int. A value representing speed in kilometers per hour. precision - optional int. A value indicating precision in meters. Its presence relies on the device model. gsm_lbs - optional boolean. It returns true if the location was detected by GSM LBS. parking - optional boolean. It will return true if the point does not correspond to a trip. Parking detection feature on the platform influences the categorization of points as either trip or parking states. buffered - optional boolean. It will return true if the point was initially saved in the device's memory and then sent to the server later. This parameter may vary based on the tracker model. Errors \u00b6 201 - Not found in database \u2013 the tracker ID in your request may not match any trackers linked to the user account with this session hash. Ensure the correct tracker_id and hash of an appropriate user are used. 208 - Device blocked \u2013 if a tracker exists under this user account but is currently inactive due to tariff plan restrictions or any other reason. 211 - Requested time span is too big \u2013 If the interval between the \"from\" and \"to\" dates is too large, it may exceed the maximum value defined in the API configuration. visit/list \u00b6 This method fetches IDs of zones and places that contain at least one track point. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). The tracker must be associated with the user whose hash is being used for the request, and not tariff-blocked. int 123456 from Start date/time for searching. date/time \"2024-01-10 00:00:00\" to End date/time for searching. Must be after from date. date/time \"2024-01-20 00:00:00\" include_zones Optional. Default is true . If the value is false , zones IDs will be excluded. boolean true include_places Optional. Default is true . If the value is false , places IDs will be excluded. boolean true Example \u00b6 For instance, if we need to obtain IDs of zones and places that contain at least one track point related to tracker 1683258 in January. cURL curl -X POST 'https://api.navixy.com/v2/track/visit/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 1683258, \"from\": \"2024-01-01 00:00:00\", \"to\": \"2024-01-31 00:00:00\"}' Response \u00b6 { \"success\" : true , \"value\" : { \"zones\" : [ 54865 , 35284 ], \"places\" : [ 18404 ] } } zones - int array. List of zones IDs. places - int array. List of places IDs. Errors \u00b6 204 - Entity not found \u2013 the tracker ID in your request may not match any trackers linked to the user account with this session hash. Ensure the correct tracker_id and hash of an appropriate user are used.","title":"Track"},{"location":"backend-api/resources/tracking/track/#track","text":"This section includes API calls that allow you to interact with tracks and retrieve track points. Learn more about the track API by following our instructions .","title":"Track"},{"location":"backend-api/resources/tracking/track/#api-actions","text":"API path: /track .","title":"API actions"},{"location":"backend-api/resources/tracking/track/#download","text":"This method allows you to download track points as a KML/KMZ file which can be used in other apps to show tracks.","title":"download"},{"location":"backend-api/resources/tracking/track/#list","text":"This method retrieves a list of tracks for a given tracker within a specified time period.","title":"list"},{"location":"backend-api/resources/tracking/track/#read","text":"This method fetches all track points that a GPS tracker has recorded and sent to the platform within a specified time frame. The timestamp for each point corresponds to when the tracker recorded the point, adjusted to the user's time zone.","title":"read"},{"location":"backend-api/resources/tracking/track/#visitlist","text":"This method fetches IDs of zones and places that contain at least one track point.","title":"visit/list"},{"location":"backend-api/resources/tracking/track/waybill/","text":"Waybill \u00b6 This resource contains information to download waybill report for tracks. API actions \u00b6 API path: /track/waybill . download \u00b6 Downloads a waybill report DOCX file for tracks of the specified tracker and time period. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 from From date/time. date/time \"2020-09-23 03:24:00\" to To date/time. Specified date must be after \"from\" date. date/time \"2020-09-23 06:24:00\" filter Optional, default= true . If true , tracks which are too short (in terms of length and number of points) will be omitted from resulting list. boolean true split Optional, default= true . If false , all tracks will be merged into single one. boolean false include_gsm_lbs Optional, default= true . If false , GSM LBS tracks will be filtered out. boolean false cluster_single_reports Optional, default= false . If true , single point reports will be clustered by its coordinates. boolean false type Should be one of \"form3\", \"form3ext\", \"form4c\". enum \"form4c\" fill_history If false , only basic info about driver/garage/vehicle will be filled (no trips or parkings). boolean false fill_odometer Optional, default= false . If true , mileage readings will be inserted in appropriate fields of the document. boolean false series Optional. Waybill series. string \"A-1\" number Waybill number. string \"123456789\" Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/track/waybill/download' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"from\": \"2020-09-23 03:24:00\", \"to\": \"2020-09-23 06:24:00\", \"type\": \"form4c\", \"fill_history\": false, \"number\": \"1234567\"}' Response \u00b6 A docx file with the waybill. Errors \u00b6 236 - Feature unavailable due to tariff restrictions \u2013 if one of the trackers has tariff without \"app_fleet\" feature.","title":"Index"},{"location":"backend-api/resources/tracking/track/waybill/#waybill","text":"This resource contains information to download waybill report for tracks.","title":"Waybill"},{"location":"backend-api/resources/tracking/track/waybill/#api-actions","text":"API path: /track/waybill .","title":"API actions"},{"location":"backend-api/resources/tracking/track/waybill/#download","text":"Downloads a waybill report DOCX file for tracks of the specified tracker and time period.","title":"download"},{"location":"backend-api/resources/tracking/track/waybill/settings/","text":"Waybill settings \u00b6 Contains API call to get the last waybill number. Waybill number saved when new waybill had downloaded. If it had only digits, then it was incremented before saving. API actions \u00b6 API base path: track/waybill/settings/ . read \u00b6 Gets last waybill number. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/track/waybill/settings/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/track/waybill/settings/read?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"value\" : { \"number\" : \"test123\" } } Errors \u00b6 201 - Not found in the database \u2013 if user have never downloaded a waybill.","title":"Settings"},{"location":"backend-api/resources/tracking/track/waybill/settings/#waybill-settings","text":"Contains API call to get the last waybill number. Waybill number saved when new waybill had downloaded. If it had only digits, then it was incremented before saving.","title":"Waybill settings"},{"location":"backend-api/resources/tracking/track/waybill/settings/#api-actions","text":"API base path: track/waybill/settings/ .","title":"API actions"},{"location":"backend-api/resources/tracking/track/waybill/settings/#read","text":"Gets last waybill number.","title":"read"},{"location":"backend-api/resources/tracking/tracker/","text":"Working with trackers \u00b6 This document contains tracker object structure and API calls to interact with it. Tracker is one of the key entities in our API. It represents tracking device registered in our GPS monitoring system. Lots of API calls created for manipulation of tracker and/or its properties. Tracker object structure \u00b6 { \"id\" : 123456 , \"label\" : \"tracker label\" , \"clone\" : false , \"group_id\" : 167 , \"avatar_file_name\" : \"file name\" , \"source\" : { \"id\" : 234567 , \"device_id\" : 9999999988888 , \"model\" : \"telfmb920\" , \"blocked\" : false , \"tariff_id\" : 345678 , \"status_listing_id\" : null , \"creation_date\" : \"2011-09-21\" , \"tariff_end_date\" : \"2016-03-24\" , \"phone\" : \"71234567890\" }, \"tag_bindings\" : [{ \"tag_id\" : 456789 , \"ordinal\" : 4 }] } id - int. Tracker ID aka object_id. label - string. Tracker label. clone - boolean. true if this tracker is clone. group_id - int. Tracker group ID, 0 when no group. avatar_file_name - string. Optional. Passed only if present. source - object. id - int. Source ID. device_id - string. Device ID aka source_imei . model - string. Tracker model name from \"models\" table. blocked - boolean. true if tracker blocked due to tariff end. tariff_id - int. An ID of tracker tariff from \"main_tariffs\" table. status_listing_id - int. An ID of the status listing associated with this tracker, or null. creation_date - date/time . Date when the tracker registered. tariff_end_date - date/time . Date of next tariff prolongation, or null. phone - string. Phone of the device. Can be null or empty if device has no GSM module or uses bundled SIM which number hidden from the user. tag_binding - object. List of attached tags. Appears only for tracker/list call. tag_id - int. An ID of tag. Must be unique for a tracker. ordinal - int. Number that can be used as ordinal or kind of tag. Must be unique for a tracker. Max value is 5. API actions \u00b6 API base path: /tracker . read \u00b6 Gets tracker info by ID. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\") int 999199 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 123456}' HTTP GET https://api.navixy.com/v2/tracker/read?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 123456 , \"label\" : \"Object 1\" , \"group_id\" : 0 , \"source\" : { \"id\" : 10021901 , \"device_id\" : \"123456789009876\" , \"model\" : \"atrack_ak11\" , \"blocked\" : false , \"tariff_id\" : 1294 , \"phone\" : \"79161234533\" , \"status_listing_id\" : null , \"creation_date\" : \"2021-09-20\" , \"tariff_end_date\" : \"2021-09-24\" }, \"tag_bindings\" : [], \"clone\" : false } } See tracker object structure description here . Errors \u00b6 201 - Not found in the database \u2013 if tracker not found. list \u00b6 Gets user's trackers with optional filtering by labels. We described this API call in the guide . Parameters \u00b6 name description type format labels Optional. List of tracker label filters. If specified, only trackers that labels contains any of the given filter will be returned. string array [\"aa\", \"b\"] Constraints for labels: Labels array size: minimum 1, maximum 1024. No null items. No duplicate items. Item length: minimum 1, maximum 60. For example, we have trackers with labels \"aa1\", \"bb2\", \"cc3\", if we pass labels=[\"aa\",\"b\"] only trackers containing \"aa1\" and \"bb2\" will be returned. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 123456 , \"label\" : \"tracker label\" , \"clone\" : false , \"group_id\" : 167 , \"avatar_file_name\" : \"file name\" , \"source\" : { \"id\" : 234567 , \"device_id\" : 9999999988888 , \"model\" : \"telfmb920\" , \"blocked\" : false , \"tariff_id\" : 345678 , \"status_listing_id\" : null , \"creation_date\" : \"2011-09-21\" , \"tariff_end_date\" : \"2016-03-24\" , \"phone\" : \"+71234567890\" }, \"tag_bindings\" : [{ \"tag_id\" : 456789 , \"ordinal\" : 4 }] }] } See tracker object structure description here . Errors \u00b6 General types only. corrupt \u00b6 Marks tracker as deleted and corrupt its source, device_id and phone. required sub-user rights : tracker_register . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/corrupt' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/corrupt?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 Operation not permitted \u2013 if tracker already connected to server, or if user has insufficient rights. 243 \u2013 Device already connected. 201 \u2013 Not found in the database - if tracker not found. 219 \u2013 Not allowed for clones of the device - if source tracker is clone itself. 252 \u2013 Device already corrupted. 208 \u2013 Device blocked. delete \u00b6 Deletes a tracker if it is \"clone\". Will not work if specified ID of the original tracker. required sub-user rights : admin (available only to master users). Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/delete?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if tracker not found. 249 - Operation available for clones only \u2013 if tracker is not clone. 203 - Delete entity associated with \u2013 if there are some rules or vehicles associated with tracker. { \"success\" : false , \"status\" : { \"code\" : 203 , \"description\" : \"Delete entity associated with\" }, \"rules\" : [ 10 ] } or { \"success\" : false , \"status\" : { \"code\" : 203 , \"description\" : \"Delete entity associated with\" }, \"vehicles\" : [ 11 ] } rules - list of associated rule IDs. vehicles - list of associated vehicle IDs. change_phone \u00b6 Changes tracker's phone and setup new apn. required sub-user rights: tracker_configure . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 phone The phone number of the sim card inserted into device in international format without \"+\" sign. string \"6156680000\" apn_name The name of GPRS APN of the sim card inserted into device. Max length 40. string \"fast.tmobile.com\" apn_ user The user of GPRS APN of the sim card inserted into device. Max length 40, can be empty. string \"tmobile\" apn_password The password of GPRS APN of the sim card inserted into device. Max length 40, can be empty. sting \"tmobile\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/change_phone' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489, \"phone\": \"6156680000\", \"apn_name\": \"fast.tmobile.com\", \"apn_user\": \"tmobile\", \"apn_password\": \"tmobile\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if tracker not found. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 219 \u2013 Not allowed for clones of the device - if specified tracker is a clone. 214 \u2013 Requested operation or parameters are not supported by the device - if device does not have GSM module. 223 \u2013 Phone number already in use - if specified phone number already used in another device. 241 \u2013 Cannot change phone to bundled sim. Contact tech support. If specified phone number belongs tp sim card bundled with the device. get_diagnostics \u00b6 Gets last CAN and OBD sensors and states values received from the device. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/get_diagnostics' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/get_diagnostics?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"success\" : true , \"user_time\" : \"2021-05-20 13:49:09\" , \"inputs\" : [{ \"label\" : \"OBD: RPM\" , \"units\" : \"\" , \"name\" : \" obd_rpm\" , \"type\" : \"rpm\" , \"value\" : 889.0 , \"units_type\" : \"custom\" , \"converted_units_type\" : null , \"converted_value\" : null }], \"states\" : { \"obd_vin\" : \"123\" , \"obd_mil_status\" : \"0\" }, \"update_time\" : \"2021-05-20 13:48:02\" } user_time - date/time . Current time in user's timezone. inputs - list of sensor value objects. label - string. Sensor's label. E.g. \"Sensor #1 \". name - enum . Name of sensor's raw input. type - enum . Type of quantity, measured by a sensor. value - float. Reading's value, measured in units from an eponymous field. E.g. 100.0. units_type - enum . Unit of measurement of input to the sensor. units - string. User label for sensor's units. converted_units_type - enum . Unit of measurement system preferred by current user (according to user/settings), suitable for this sensor. Can be null, if there is no need in conversion (unit of sensor's input (field units_type ) belongs to user's measurement system). converted_value - float. Reading's value in units from field converted_units_type . Can be null if there is no need in conversion. states - map of last state values or null (see below). update_time - date/time . Date and time when the data updated. List of available sensor's input names for the object sensor value : obd_consumption . obd_rpm . obd_fuel . obd_coolant_t . obd_intake_air_t . obd_throttle . obd_speed . obd_engine_load . obd_absolute_load_value (normalised value of air mass per intake stroke in percents). obd_control_module_voltage (in volts). obd_time_since_engine_start (run time since engine start in seconds). obd_mil_run_time (in minutes). can_engine_temp . can_engine_hours . can_mileage . can_throttle . can_consumption . can_rpm . can_speed . can_r_prefix . can_coolant_t . can_intake_air_t . can_engine_load . can_adblue_level . can_fuel_rate (instant fuel consumption liter/hour). raw_can_x (range for x: [1 \u2013 16]). can_axle_load_x (range for x: [1 \u2013 15]). List of state names for the field states : obd_vin (value type: string). obd_dtc_number (DTC codes number; value type: integer). obd_dtc_codes (DTC codes; value type: string). obd_dtc_cleared_distance (distance traveled since codes cleared in km; value type: double). obd_mil_activated_distance (distance traveled with MIL on in km; value type: double). hardware_key (driver identification key; value type: string). external_power_state (connected/disconnected; value type: string). driver_ident_state (identified/not identified; value type: string). tacho_vin (value type: string). tacho_card1_sn (value type: string). tacho_card2_sn (value type: string). tacho_vin_last_download (value type: string). tacho_card1_last_download (value type: string). tacho_card2_last_download (value type: string). can_hood_state (value type: string, 0 or 1 means \"close\" or \"open\"). can_airbag_state (value type: string, 0 or 1 means \"normal\" or \"malfunction\"). can_trunk_state (value type: string, 0 or 1 means \"close\" or \"open\"). can_seat_belt_driver_state (value type: string, 0 or 1 means \"untied\" or \"tied\"). can_seat_belt_passenger_state (value type: string, 0 or 1 means \"untied\" or \"tied\"). can_door_state (value type: string, 0 or 1 means \"close\" or \"open\"). can_door_driver_state (value type: string, 0 or 1 means \"close\" or \"open\"). can_door_passenger_state (value type: string, 0 or 1 means \"close\" or \"open\"). You can locate all inputs, states, and definitions by utilizing the tracker/sensor/input_name/list API call. Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. get_fuel \u00b6 Gets current fuel level (in liters) of tracker's fuel tanks. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/get_fuel' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/get_fuel?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"success\" : true , \"user_time\" : \"2021-05-20 13:49:09\" , \"inputs\" : [{ \"label\" : \"Sensor #1\" , \"name\" : \"can_fuel\" , \"type\" : \"fuel\" , \"value\" : 100.0 , \"units_type\" : \"litre\" , \"units\" : \"litres\" , \"converted_units_type\" : null , \"converted_value\" : null }], \"update_time\" : \"2021-05-20 13:48:02\" } user_time - date/time . Current time in user's timezone. inputs - array of last readings of fuel-related sensors. Items are object listed below. List of available sensor's input names for the object sensor value : fuel_level . fuel_frequency . lls_level_x (range for x: [1 \u2013 16]). fuel_consumption . rs232_x (range for x: [1 \u2013 6]). can_fuel (fuel level in percents or in unknown units). can_fuel_2 (fuel level in percents or in unknown units). can_fuel_litres (fuel level in litres). can_fuel_economy (fuel economy in km/litres). update_time - date/time . Date and time when the data updated. Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. get_inputs \u00b6 Gets current state of tracker's digital inputs and \"semantic\" inputs (ignition, buttons, car alarms, etc.) bound to them (if any). Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/get_inputs' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/get_inputs?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"success\" : true , \"user_time\" : \"2021-05-20 13:49:09\" , \"inputs\" : [ true , true , false ], \"states\" : [ { \"type\" : \"ignition\" , \"name\" : \"DIN1\" , \"status\" : true , \"input_number\" : 1 } ], \"update_time\" : \"2021-05-20 13:48:02\" } user_time - date/time . Current time in user's timezone. inputs - array (boolean) of states of all digital inputs. [true, true, false] means input 1 is on, input 2 is on, input 3 is off. states - array of state objects. type - enum . One of predefined semantic input types (see below). name - string. User-defined name for semantic input, or null if not specified. status - boolean. True if input is active, false otherwise. input_number - int. Number of the associated discrete input. update_time - date/time . Date and time when the data updated. List of input types : ignition - Car's ignition. There can be only one sensor of this type. engine - Engine's working status. mass - Car's \"ground\". car_alarm - Expected to be \"on\" when car alarm triggered. sos_button - An emergency \"red\" button. hood - \"on\" if engine's hood is open. door - \"on\" if car's door is open. car_lock - \"on\" if car's central lock is open. custom - user-defined type. In general, should have non-empty \"name\" field. Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. get_last_gps_point \u00b6 Gets last point of the tracker located by GPS. Points located by GSM LBS are excluded from consideration. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/get_last_gps_point' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/get_last_gps_point?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"success\" : true , \"value\" : { \"get_time\" : \"2012-03-05 12:00:00\" , \"heading\" : 11 , \"lat\" : 22.0 , \"lng\" : 33.0 , \"satellites\" : 5 , \"speed\" : 20 , \"precision\" : 100 } } value - track point object. get_time - date/time . GPS timestamp of the point, in user's timezone. heading - int. Direction bearing in degrees (0-360). lat - float. Latitude. lng - float. Longitude. satellites - int. Number of satellites used in fix for this point. speed - int. Speed in km/h. precision - int. Optional. Exists if not equal to 0. Precision in meters. Errors \u00b6 201 - Not found in the database \u2013 if there is no tracker with such ID belonging to authorized user. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions or some other reason. get_readings \u00b6 Gets last sensor values for sensors that are: metering . not can- or obd-based . not \"fuel\" sensors . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/get_readings' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/get_readings?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"success\" : true , \"user_time\" : \"2021-05-20 13:49:09\" , \"inputs\" :[{ \"label\" : \"Board voltage\" , \"units\" : \"V\" , \"name\" : \"board_voltage\" , \"type\" : \"power\" , \"value\" : 13.562 , \"units_type\" : \"custom\" , \"converted_units_type\" : null , \"converted_value\" : null }], \"update_time\" : \"2021-05-20 13:48:02\" } user_time - date/time . Current time in user's timezone. inputs - list of sensor value objects. See below. label - string. Sensor's label. E.g. \"Sensor #1 \". name - enum . Name of sensor's raw input. type - enum . Type of quantity, measured by a sensor. value - float. Reading's value, measured in units from an eponymous field. E.g. 100.0. units_type - enum . Unit of measurement of input to the sensor. units - string. User label for sensor's units. converted_units_type - enum . Unit of measurement system preferred by current user (according to user/settings), suitable for this sensor. Can be null, if there is no need in conversion (unit of sensor's input (field units_type ) belongs to user's measurement system). converted_value - float. Reading's value in units from field converted_units_type . Can be null if there is no need in conversion. update_time - date/time . Date and time when the data updated. List of available sensor's input names for the object sensor value : composite . input_status . analog_x (range for x: [1 \u2013 8]). freq_x (range for x: [1 \u2013 8]). impulse_counter_x (range for x: [1 \u2013 8]). fuel_temperature . lls_temperature_x (range for x: [1 \u2013 16]). rs232_x (range for x: [1 \u2013 6]). board_voltage . temp_sensor . ext_temp_sensor_x (range for x: [1 \u2013 10]). Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. get_state \u00b6 Gets current tracker state (gps, gsm, outputs, etc.). name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/get_state' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/get_state?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"user_time\" : \"2022-08-31 13:47:13\" , \"state\" :{ \"source_id\" : 545139 , \"gps\" :{ \"updated\" : \"2022-08-31 13:47:09\" , \"signal_level\" : 100 , \"location\" :{ \"lat\" : 42.82769 , \"lng\" : -78.26290833333333 }, \"heading\" : 45 , \"speed\" : 0 , \"alt\" : 0 }, \"connection_status\" : \"active\" , \"movement_status\" : \"parked\" , \"gsm\" : { \"updated\" : \"2022-08-31 13:47:09\" , \"signal_level\" : 100 , \"network_name\" : \"Mobile\" , \"roaming\" : false }, \"last_update\" : \"2022-08-31 13:47:09\" , \"battery_level\" : 97 , \"battery_update\" : \"2022-08-31 13:47:09\" , \"inputs\" :[ false , false , false ], \"inputs_update\" : \"2022-08-31 13:47:09\" , \"outputs\" :[ true , false ], \"outputs_update\" : \"2022-08-31 13:47:09\" , \"additional\" :{ \"hardware_key\" :{ \"value\" : \"20910998202956382057\" , \"updated\" : \"2022-08-31 10:47:09\" }}, \"actual_track_update\" : \"2022-08-31 13:40:44\" }, \"success\" : true } user_time - date/time . Current time in user's timezone. source_id - int. Tracker data source ID (from \"sources\" table). gps - gps object. updated - date/time . Date of last gps coordinates update in a timezone of the user or null if there are no updates. signal_level - int. GPS signal level in percent, e.g. 25, or null if device cannot provide such info. lat - float. Latitude. lng - float. Longitude. heading int. Direction bearing in degrees (0-360). speed - int. Speed in km/h, e.g. 20. alt - int. Altitude in meters, e.g. 10. precision - int. Optional. Precision in meters. gsm_lbs - boolean. Optional. True if location detected by GSM LBS. connection_status - enum . Device connection status, possible values: \"signal_lost\", \"just_registered\", \"offline\", \"idle\", \"active\". movement_status - enum . Movement status, possible values: \"moving\", \"stopped\", \"parked\". gsm - object. Can be null if device does not support transmission of gsm info. updated - date/time . Date of last gsm status update in a timezone of the user or null if there are no updates. signal_level - int. GSM signal level in percent, e.g. 25, or null if device cannot provide such info. network_name - string. GSM network name, e.g. \"T-MOBILE\", or null if device cannot provide such info. roaming - boolean. Roaming state, or null if device cannot provide such info. last_update - date/time . Date of last device state update in a timezone of the user or null if there are no updates. battery_level - int. Battery level in percent, e.g. 25, or null if device cannot provide such info. battery_update - date/time . Date of last battery update in a timezone of the user or null if there are no updates. inputs - array of boolean. States of all digital inputs. [true, true, false] means input 1 is on, input 2 is on, input 3 is off. inputs_update - date/time . Date of last inputs update in a timezone of the user or null if there are no updates. outputs - array of boolean. States of all digital outputs. [true, true, false] means output 1 is on, output 2 is on, output 3 is off. outputs_update - date/time . Date of last outputs update in a timezone of the user or null if there are no updates. additional - object. map of additional states, keys depends on tracker model. hardware_key - last scanned hardware key object. value - int. Hardware key. updated - date/time . Date of last hardware key update in a timezone of the user or null if there are no updates. actual_track_update - date/time . When the last track was updated last time, when device last time moved. Errors \u00b6 201 \u2013 Not found in the database (if there is no tracker with such ID belonging to authorized user). 208 \u2013 Device blocked (if tracker exists but was blocked due to tariff restrictions or some other reason). get_states \u00b6 Gets current states (gps, gsm, outputs, etc.) for several trackers. Parameters \u00b6 name description type format trackers ID of trackers (aka \"object_id\"). Trackers must belong to authorized user and not be blocked. int array [999119, 999199] list_blocked Optional. If true call returns list of blocked tracker IDs instead of error 208. Default is false . boolean true/false allow_not_exist Optional. If true call returns list of nonexistent tracker IDs instead of error 217 or 201. Default is false . boolean true/false Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/get_states' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"trackers\": [999119, 999199, 9991911]}' Response \u00b6 { \"success\" : true , \"user_time\" : \"2014-07-09 07:50:58\" , \"states\" : { \"999119\" : { \"source_id\" : 65894 , \"gps\" : { \"updated\" : \"2013-02-19 10:48:08\" , \"signal_level\" : 25 , \"location\" : { \"lat\" : 34.178868 , \"lng\" : -118.599672 }, \"heading\" : 45 , \"speed\" : 20 , \"alt\" : 10 , \"precision\" : 50 , \"gsm_lbs\" : false }, \"connection_status\" : \"active\" , \"movement_status\" : \"moving\" , \"gsm\" : { \"updated\" : \"2013-02-19 10:48:08\" , \"signal_level\" : 70 , \"network_name\" : \"T-MOBILE\" , \"roaming\" : false }, \"last_update\" : \"2013-02-19 10:48:08\" , \"battery_level\" : 100 , \"battery_update\" : \"2013-02-19 10:48:08\" , \"inputs\" : [ true , true , false ], \"inputs_update\" : \"2013-02-19 10:48:08\" , \"outputs\" : [ true , true , false ], \"outputs_update\" : \"2013-02-19 10:48:08\" , \"additional\" : { \"hardware_key\" : { \"value\" : 564648745158875 , \"updated\" : \"2013-02-19 10:48:08\" } } } }, \"blocked\" : [ 999199 ], \"not_exist\" : [ 9991911 ] } user_time - date/time . Current time in user's timezone. states - object. A map containing state objects for requested trackers, where the key is the tracker ID and the value is the state (see state object description in tracker/get_state response). blocked - array of tracker IDs. Returned only if list_blocked= true . not_exist - array of tracker IDs. Returned only if allow_not_exist= true . Errors \u00b6 201 \u2013 Not found in the database (if tracker corrupted and allow_not_exist = false ). 208 \u2013 Device blocked (if list_blocked = false and tracker exists but was blocked due to tariff restrictions or some other reason). 217 \u2013 List contains nonexistent entities (if allow_not_exist = false and there are nonexistent trackers belonging to an authorized user). list_models \u00b6 Gets all integrated tracker models (from \"models\" table). Parameters \u00b6 name description type format compact_view Optional. true to compact view. Default is false . boolean true/false compact_index Optional. true to compact view the indexed inputs: returns only input with max index. Default is false , but this value is deprecated. boolean true/false codes Optional. Array of model codes. If passed only given models will be returned. string array [model_1, model_2, ...] Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/list_models' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"compact_index\": true}' HTTP GET https://api.navixy.com/v2/tracker/list_models?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"id\" : 166 , \"code\" : \"tt1_wp\" , \"type\" : \"vehicle\" , \"name\" : \"WondeProud TT1\" , \"id_type\" : \"10,2\" , \"has_phone\" : true , \"has_apn_settings\" : true , \"register\" : true , \"battery\" : { \"min_charge\" : 3.4 , \"low_charge\" : 3.7 , \"max_charge\" : 4.1 }, \"altitude\" : true , \"satellites\" : true , \"gsm_level\" : true , \"gsm_network\" : true , \"gsm_roaming\" : true , \"has_detach_button\" : false , \"has_fuel_input\" : true , \"analog_inputs\" : 2 , \"digital_inputs\" : 4 , \"rs232_inputs\" : 0 , \"digital_outputs\" : 4 , \"track_control\" : \"tt1\" , \"output_control\" : \"default\" , \"special_control\" : \"none\" , \"vendor\" : \"WondeProud\" , \"rules\" : [ \"offline\" , \"input_change\" , \"sos\" , \"sensor_range\" , \"speedup\" , \"route\" , \"track_change\" , \"inoutzone\" , \"battery_off\" ], \"inputs\" : [ \"analog_2\" ], \"state_fields\" : [], \"special_settings\" : [ \"none\" ], \"sms_control\" : [], \"has_led_control\" : false , \"has_location_request\" : true , \"has_gsm_lbs_location_request\" : true , \"has_chat\" : false , \"check_bundle\" : false , \"has_odometer\" : true } id - int. Model ID. vendor - string. Vendor name. parent_code - string. Can be null. type - enum . Can be \"logger\", \"portable\", \"vehicle\", or \"personal\". name - string. Model name. has_auto_registration - boolean. If true device may register by automatic commands from the platform. battery - object. An internal device's battery. low_charge - float. Charge level for the \"low battery\" rule triggers. analog_inputs - int. Number of analog inputs. digital_inputs - int. Number of digital inputs. digital_outputs - int. Number of digital outputs. rs232_inputs - int. Number of RS232 inputs. inputs - array of enum . All available input types. rules - array of enum . Supported rules. has_led_control - boolean. true if a switching LED supported by this tracker. has_location_request - boolean. true if the tracker has an opportunity to request a location with a command by SMS. has_gprs_location_request - boolean. true if the tracker has an opportunity to request a location with a command over a GPRS connection. has_gsm_lbs_location_request - boolean. true if the tracker has an opportunity to request a location by LBS with a command over a GPRS connection. has_chat - boolean. true if chat available for the device. has_odometer - boolean. true if the tracker has an integrated odometer. has_lbs - boolean. true if the tracker sends information about cell info. has_motion_sensor - boolean. true if the tracker has an integrated motion sensor. has_hardware_key - boolean. true if the tracker has an opportunity for identification of a driver by a hardware key. additional_fields - optional. List of descriptions of special fields using for control trackers that users fill on time of registration. ID type \u00b6 An ID type used to determine the information needed to register device in our system (see tracker/register ). Possible values are: imei \u2013 means device uses IMEI as its identifier, e.g. \"356938035643809\". See Wikipedia article . When needed, you should pass only digits of IMEI, no spaces, minus signs, etc. meid means device uses MEID consisting of 14 HEX digits as its identifier, e.g. \"A10000009296F2\". See Wikipedia article . id,n \u2013 means device uses n-digit identifier (factory ID with length N), for example, \"id,7\" means that you must pass 7-digit number, for example \"1234567\". n,m \u2013 n-digit generated ID starting with M. This means that device has configurable ID and our platform generates and configures it automatically. You don't need to pass any identifier during device registration in this case. Errors \u00b6 General types only. tags/set \u00b6 Set tags for a tracker. Tags must be created. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 tag_bindings List of tag_binding objects. array of Json objects [{\"tag_id\" : 1, \"ordinal\" : 1}, {\"tag_id\" : 2, \"ordinal\" : 2}] Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/tags/set' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 123456, \"tag_bindings\": \"[{\"tag_id\" : 1, \"ordinal\" : 1}, {\"tag_id\" : 2, \"ordinal\" : 2}]\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 General types only. location_request \u00b6 Execute this command to get current position of the device. The device must support requesting function. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 type Optional. Default type sms . enum \"sms\" Request types: sms \u2013 GNSS data via SMS. Will send an SMS to request location. SMS gateway must be installed for the panel. gsm \u2013 GSM LBS data via GPRS. Device must have online or GPS not updated status. gprs \u2013 GNSS data via GPRS. Device must have online or GPS not updated status. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/location_request' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 123456}' HTTP GET https://api.navixy.com/v2/tracker/location_request?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 213 \u2013 Cannot perform action: the device is offline. 214 \u2013 Requested operation or parameters are not supported by the device. 256 \u2013 Location already actual. register \u00b6 Registers a new tracker device. During registration, device linked with current API user's account and automatically configured to send data to our servers (if device model supports it). The panel must have installed SMS gateway. Find detailed instructions on tracker registration there . required sub-user rights: tracker_register . Parameters \u00b6 Important Because of the variety of tracker models and business applications, there are different ways to register tracker in our system. They are called Registration plugins . Each of registration plugins has its own set of additional parameters. In addition to parameters specified in this section, pass all parameters which are required by the plugin you have chosen. See example below. Common parameters are: name description type format label User-defined label for this tracker. Must consist of printable characters and have length between 1 and 60. string \"Courier\" group_id Tracker group ID, 0 if tracker does not belong to any group. The specified group must exist. See group/list . int 0 model A code of one of the supported models. See tracker/list_models . string \"pt10\" plugin_id An ID of a registration plugin which will be used to register the device. See Registration plugins . int 37 device_id Must be specified if device model uses fixed device ID. See tracker/list_models . string \"4568005588562\" send_register_commands Indicates send or not to send activation commands to device (via SMS or GPRS channel). If parameter is not specified or equals null will be used the platform settings. Default: null . boolean true or false Examples \u00b6 In this example we use plugin ID = 37 (see Plugin description ) to register Queclink GV55Lite. We chose to include the device to default group, so group ID is 0. As this device identified by IMEI, we include it as device ID (123451234512346). Also, we include phone , apn_name , apn_user , apn_password of the sim card installed in device and activation_code since these parameters required by the plugin. cURL curl -X POST 'https://api.navixy.com/v2/tracker/register' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"label\": \"Courier\", \"group_id\": 0, \"plugin_id\": 37, \"model\": \"qlgv55lite\", \"phone\": \"79123122312\", \"activation_code\": \"123123123\", \"device_id\": \"123451234512346\", \"apn_name\": \"fast.tmobile.com\", \"apn_user\": \"tmobile\", \"apn_password\": \"tmobile\"}' HTTP GET https://api.navixy.com/v2/tracker/register?hash=a6aa75587e5c59c32d347da438505fc3&label=Courier&group_id=0&plugin_id=37&model=qlgv55lite&phone=79123122312&activation_code=123123123&device_id=123451234512346&apn_name=fast.tmobile.com&apn_user=tmobile&apn_password=tmobile Response \u00b6 { \"success\" : true , \"value\" :{ \"id\" : 833389 , \"label\" : \"Courier\" , \"group_id\" : 0 , \"source\" :{ \"id\" : 526383 , \"device_id\" : \"123451234512346\" , \"model\" : \"qlgv55lite\" , \"blocked\" : false , \"tariff_id\" : 12163 , \"phone\" : \"79123122312\" , \"status_listing_id\" : null , \"creation_date\" : \"2021-06-03\" , \"tariff_end_date\" : \"2021-06-17\" }, \"clone\" : false } } For tracker object structure, see tracker/ . Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 204 \u2013 Entity not found - if specified group does not exist. See group/list . 220 \u2013 Unknown device model - if specified device model does not exist. 221 \u2013 Device limit exceeded - if device limit set for the user's dealer has been exceeded. 222 \u2013 Plugin not found - if specified plugin not found or is not supported by device model. 223 \u2013 Phone number already in use - if specified phone number already used in another device. 224 \u2013 Device ID already in use - if specified device ID already registered in the system. 225 \u2013 Not allowed for this legal type - if tariff of the new device is not compatible with user's legal type. 226 \u2013 Wrong ICCID. Plugin specific: if specified ICCID was not found. 227 \u2013 Wrong activation code. Plugin specific: if specified activation code not found or is already activated. 258 \u2013 Bundle not found. Plugin specific: if bundle not found for specified device ID. register_retry \u00b6 Resends registration commands to the device. The panel must have installed SMS gateway. required sub-user rights: tracker_register . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 device_id Optional. Device ID that was used to register, e.g. IMEI. It can be used instead of tracker_id for models with a fixed ID. string \"4568005588562\" apn_name The name of GPRS APN of this sim card inserted into device. Max length 40. string \"fast.tmobile.com\" apn_user The user of GPRS APN of this sim card inserted into device. Max length 40, can be empty. string \"tmobile\" apn_password The password of GPRS APN of the sim card inserted into device. Max length 40, can be empty. string \"tmobile\" send_register_commands Indicates send or not to send activation commands to device (via SMS or GPRS channel). If parameter is not specified or equals null will be used the platform settings. Default: null . boolean true or false Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/register_retry' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 999119, \"apn_name\": \"fast.tmobile.com\", \"apn_user\": \"tmobile\", \"apn_password\": \"tmobile\", \"send_register_commands\": true}' HTTP GET https://api.navixy.com/v2/tracker/register_retry?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=999119&apn_name=fast.tmobile.com&apn_user=tmobile&apn_password=tmobile&send_register_commands=true Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 123456 , \"label\" : \"tracker label\" , \"clone\" : false , \"group_id\" : 167 , \"avatar_file_name\" : \"file name\" , \"source\" : { \"id\" : 234567 , \"device_id\" : 9999999988888 , \"model\" : \"telfmb920\" , \"blocked\" : false , \"tariff_id\" : 345678 , \"status_listing_id\" : null , \"creation_date\" : \"2011-09-21\" , \"tariff_end_date\" : \"2016-03-24\" , \"phone\" : \"+71234567890\" }, \"tag_bindings\" : [{ \"tag_id\" : 456789 , \"ordinal\" : 4 }] } } For tracker object structure, see tracker/ . Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 219 \u2013 Not allowed for clones of the device - if specified tracker is a clone. 214 \u2013 Requested operation or parameters are not supported by the device - if device does not have GSM module. 242 \u2013 Device already connected - if tracker connected to the server. register_quick \u00b6 Registers a new tracker using only IMEI. Automatic SMS commands will not be sent for a register. The device must be preconfigured. This API call can be used only for bundles. required sub-user rights: tracker_register . Parameters \u00b6 name description type format label User-defined label for this tracker. Must consist of printable characters and have length between 1 and 60. string \"Courier\" group_id Tracker group ID, 0 if tracker does not belong to any group. The specified group must exist. See group/list . int 0 imei Tracker's IMEI. string \"35645587458999\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/register_quick' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"label\": \"Courier\", \"group_id\": 0, \"imei\": \"35645587458999\"}' HTTP GET https://api.navixy.com/v2/tracker/register_quick?hash=a6aa75587e5c59c32d347da438505fc3&label=Courier&group_id=0&imei=35645587458999 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 123456 , \"label\" : \"tracker label\" , \"clone\" : false , \"group_id\" : 167 , \"avatar_file_name\" : \"file name\" , \"source\" : { \"id\" : 234567 , \"device_id\" : 9999999988888 , \"model\" : \"telfmb920\" , \"blocked\" : false , \"tariff_id\" : 345678 , \"status_listing_id\" : null , \"creation_date\" : \"2011-09-21\" , \"tariff_end_date\" : \"2016-03-24\" , \"phone\" : \"71234567890\" }, \"tag_bindings\" : [{ \"tag_id\" : 456789 , \"ordinal\" : 4 }] } } For tracker object structure, see tracker/ . Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 201 \u2013 Not found in the database - if there is no bundle with such IMEI. 204 \u2013 Entity not found - if specified group does not exist. 220 \u2013 Unknown device model - if specified device model does not exist. 221 \u2013 Device limit exceeded - if device limit set for the user's dealer has been exceeded. 222 \u2013 Plugin not found - if specified plugin not found or is not supported by device model. 223 \u2013 Phone number already in use - if specified phone number already used in another device. 224 \u2013 Device ID already in use - if specified device ID already registered in the system. 225 \u2013 Not allowed for this legal type - if tariff of the new device is not compatible with user's legal type. 226 \u2013 Wrong ICCID - if specified ICCID was not found. 227 \u2013 Wrong activation code - if specified activation code not found or is already activated. replace \u00b6 Lets to replace the device without losing its history and some of its settings. Replacement allows you to register a new device with history, sensors (optional), and rules (optional) of the current tracker saved. required sub-user rights: tracker_configure . Parameters \u00b6 Important Because of the variety of tracker models and business applications, there are different ways to register a new tracker in our system. They are called Registration plugins . Each of registration plugins has its own set of additional parameters. In addition to parameters specified in this section, pass all parameters which are required by the plugin you have chosen. See example below. Common parameters are: name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int model A code of one of the supported models. See tracker/list_models . string \"pt10\" device_id Must be specified if device model uses fixed device ID. See tracker/list_models . string \"4568005588562\" plugin_id An ID of a registration plugin which will be used to register the device. See Registration plugins . int 37 send_register_commands Indicates send or not to send activation commands to a new device (via SMS or GPRS channel). If parameter is not specified or equals null will be used the platform settings. Default: null . boolean true/false Examples \u00b6 In this example we use plugin ID = 37 (see Plugin description ) to replace device with Queclink GV55Lite. As this device identified by IMEI, we include it as device ID (123451234512346). Also, we include phone , apn_name , apn_user , apn_password of the sim card installed in device. Activation code is not used when replacing a device. cURL curl -X POST 'https://api.navixy.com/v2/tracker/replace' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 123456, \"plugin_id\": 37, \"model\": \"qlgv55lite\", \"phone\": \"79123122312\", \"device_id\": \"123451234512346\", \"apn_name\": \"fast.tmobile.com\", \"apn_user\": \"tmobile\", \"apn_password\": \"tmobile\"}' HTTP GET https://api.navixy.com/v2/tracker/replace?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&plugin_id=37&model=qlgv55lite&phone=79123122312&device_id=123451234512346&apn_name=fast.tmobile.com&apn_user=tmobile&apn_password=tmobile Response \u00b6 { \"success\" : true , \"value\" :{ \"id\" : 833389 , \"label\" : \"Courier\" , \"group_id\" : 0 , \"source\" :{ \"id\" : 526383 , \"device_id\" : \"123451234512346\" , \"model\" : \"qlgv55lite\" , \"blocked\" : false , \"tariff_id\" : 12163 , \"phone\" : \"79123122312\" , \"status_listing_id\" : null , \"creation_date\" : \"2021-06-03\" , \"tariff_end_date\" : \"2021-06-17\" }, \"clone\" : false } } For tracker object structure, see tracker/ . Errors \u00b6 7 \u2013 Invalid parameters - if fields violate restrictions described above or one of the models is a mobile app. 13 \u2013 Operation not permitted - if user has insufficient rights. 204 \u2013 Entity not found - if specified group does not exist. See group/list . 220 \u2013 Unknown device model - if specified device model does not exist. 221 \u2013 Device limit exceeded - if device limit set for the user's dealer has been exceeded. 222 \u2013 Plugin not found - if specified plugin not found or is not supported by device model. 223 \u2013 Phone number already in use - if specified phone number already used in another device. 224 \u2013 Device ID already in use - if specified device ID already registered in the system. 225 \u2013 Not allowed for this legal type - if tariff of the new device is not compatible with user's legal type. 226 \u2013 Wrong ICCID. Plugin specific: if specified ICCID was not found. 258 \u2013 Bundle not found. Plugin specific: if bundle not found for specified device ID. 266 \u2013 Cannot perform action for the device in current status: if the device is not activated yet replace_quick \u00b6 Replaces a device using only IMEI. Automatic SMS commands will not be sent for an activation. The replacement device must be preconfigured. This API call can be used only for bundles. required sub-user rights: tracker_configure . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int imei IMEI of the new device string \"35645587458999\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/replace_quick' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 123456, \"imei\": \"35645587458999\"}' HTTP GET https://api.navixy.com/v2/tracker/replace_quick?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&imei=35645587458999 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 123456 , \"label\" : \"tracker label\" , \"clone\" : false , \"group_id\" : 167 , \"avatar_file_name\" : \"file name\" , \"source\" : { \"id\" : 234567 , \"device_id\" : 9999999988888 , \"model\" : \"telfmb920\" , \"blocked\" : false , \"tariff_id\" : 345678 , \"status_listing_id\" : null , \"creation_date\" : \"2011-09-21\" , \"tariff_end_date\" : \"2016-03-24\" , \"phone\" : \"71234567890\" }, \"tag_bindings\" : [{ \"tag_id\" : 456789 , \"ordinal\" : 4 }] } } For tracker object structure, see tracker/ . Errors \u00b6 7 \u2013 Invalid parameters - if fields violate restrictions described above or one of the models is a mobile app. 13 \u2013 Operation not permitted - if user has insufficient rights. 201 \u2013 Not found in the database - if there is no bundle with such IMEI. 204 \u2013 Entity not found - if specified group does not exist. 220 \u2013 Unknown device model - if specified device model does not exist. 221 \u2013 Device limit exceeded - if device limit set for the user's dealer has been exceeded. 222 \u2013 Plugin not found - if specified plugin not found or is not supported by device model. 223 \u2013 Phone number already in use - if specified phone number already used in another device. 224 \u2013 Device ID already in use - if specified device ID already registered in the system. 225 \u2013 Not allowed for this legal type - if tariff of the new device is not compatible with user's legal type. 226 \u2013 Wrong ICCID - if specified ICCID was not found. 266 \u2013 Cannot perform action for the device in current status: if the device is not activated yet replace_retry \u00b6 Resends registration commands to the new device. The panel must have installed SMS gateway. required sub-user rights: tracker_configure . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 apn_name The name of GPRS APN of this sim card inserted into device. string \"fast.tmobile.com\" apn_user The user of GPRS APN of this sim card inserted into device. string \"tmobile\" apn_password The password of GPRS APN of the sim card inserted into device. string \"tmobile\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/register_retry' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 999119, \"apn_name\": \"fast.tmobile.com\", \"apn_user\": \"tmobile\", \"apn_password\": \"tmobile\"}' HTTP GET https://api.navixy.com/v2/tracker/register_retry?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=999119&apn_name=fast.tmobile.com&apn_user=tmobile&apn_password=tmobile Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 123456 , \"label\" : \"tracker label\" , \"clone\" : false , \"group_id\" : 167 , \"avatar_file_name\" : \"file name\" , \"source\" : { \"id\" : 234567 , \"device_id\" : 9999999988888 , \"model\" : \"telfmb920\" , \"blocked\" : false , \"tariff_id\" : 345678 , \"status_listing_id\" : null , \"creation_date\" : \"2011-09-21\" , \"tariff_end_date\" : \"2016-03-24\" , \"phone\" : \"+71234567890\" }, \"tag_bindings\" : [{ \"tag_id\" : 456789 , \"ordinal\" : 4 }] } } For tracker object structure, see tracker/ . Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 219 \u2013 Not allowed for clones of the device - if specified tracker is a clone. 214 \u2013 Requested operation or parameters are not supported by the device - if device does not have GSM module. 242 \u2013 Device already connected - if tracker connected to the server. 266 \u2013 Cannot perform action for the device in current status: if the old device is not activated yet send_command \u00b6 Sends command to tracker for performing special control, determined with special_control field of tracker model. required sub-user rights: tracker_configure , tracker_set_output . common command format is: { \"command\" : { \"name\" : \"command name\" , \"some_parameter1\" : 12 , \"some_parameter2\" : \"parameter\" , \"special_settings\" : { \"type\" : \"settings type\" , \"some_field1\" : 10 , \"some_field2\" : 32 } } } name - Command name. some_parameter - Parameters depend on certain command. special_settings - optional field. Its structure defined with special_control field of tracker model. Certain commands which can be used is defined with special_control field of tracker model and corresponds the table below: special control available commands jointech_lock_password electronic_lock_command, set_special_settings_command hhd_lock_password electronic_lock_command, set_special_settings_command vg_lock_password electronic_lock_command, set_special_settings_command any other special control set_special_settings_command command types \u00b6 electronic_lock_command This command used to seal/unseal electronic lock. { \"name\" : \"electronic_lock_command\" , \"command_code\" : \"unseal\" , \"special_settings\" : { <special se tt i n gs JSON objec t > } } command_code - enum . Can be \"seal\" or \"unseal\". special_settings - This command is equivalent to API call tracker/settings/special/update . { \"name\" : \"set_special_settings_command\" , \"special_settings\" : { <special se tt i n gs JSON objec t > } } See special settings JSON object Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119 command Command that will be sent to device. Not Null. JSON object See format above Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/send_command' \\ -H 'Content-Type: application/json' \\ -d '\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 999119, \"command\": {name: \"electronic_lock_command\", command_code: \"unseal\", special_settings:{\"type\":\"electronic_lock_password\", \"password\": \"345892\", \"remember_password\": true}}}' Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 123456 , \"label\" : \"tracker label\" , \"clone\" : false , \"group_id\" : 167 , \"avatar_file_name\" : \"file name\" , \"source\" : { \"id\" : 234567 , \"device_id\" : 1234567890 , \"model\" : \"telfmb920\" , \"blocked\" : false , \"tariff_id\" : 345678 , \"status_listing_id\" : null , \"creation_date\" : \"2011-09-21\" , \"tariff_end_date\" : \"2016-03-24\" , \"phone\" : \"+71234567890\" }, \"tag_bindings\" : [{ \"tag_id\" : 456789 , \"ordinal\" : 4 }] } ] } For tracker object structure, see tracker/ . Errors \u00b6 General types only. raw_command/send \u00b6 Sends the GPRS command to the device, processing it in a protocol-dependent manner beforehand. Find more information about this API call usage in our instructions . required sub-user rights: tracker_configure , tracker_set_output . Parameters \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int command Text or hexadecimal representation of the command. string type Optional. text or hex format. Default is text . string reliable Optional. false if the command does not need to be resent when the device is disconnected or if no acknowledgment is received. Default is true . boolean Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/raw_command/send' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489, \"command\": \"AT+GTRTO=gv200,A,,,,,,0001$\", \"type\": \"text\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 7 - Invalid parameters. 201 - Not found in the database \u2013 if there is no tracker with such device ID belonging to authorized user. Example response with an error: \u00b6 { \"success\" : false , \"status\" : { \"code\" : 7 , \"description\" : \"Invalid parameters\" }, \"errors\" : [ { \"parameter\" : \"command\" , \"error\" : \"Non-hex string\" } ] }","title":"Index"},{"location":"backend-api/resources/tracking/tracker/#working-with-trackers","text":"This document contains tracker object structure and API calls to interact with it. Tracker is one of the key entities in our API. It represents tracking device registered in our GPS monitoring system. Lots of API calls created for manipulation of tracker and/or its properties.","title":"Working with trackers"},{"location":"backend-api/resources/tracking/tracker/#tracker-object-structure","text":"{ \"id\" : 123456 , \"label\" : \"tracker label\" , \"clone\" : false , \"group_id\" : 167 , \"avatar_file_name\" : \"file name\" , \"source\" : { \"id\" : 234567 , \"device_id\" : 9999999988888 , \"model\" : \"telfmb920\" , \"blocked\" : false , \"tariff_id\" : 345678 , \"status_listing_id\" : null , \"creation_date\" : \"2011-09-21\" , \"tariff_end_date\" : \"2016-03-24\" , \"phone\" : \"71234567890\" }, \"tag_bindings\" : [{ \"tag_id\" : 456789 , \"ordinal\" : 4 }] } id - int. Tracker ID aka object_id. label - string. Tracker label. clone - boolean. true if this tracker is clone. group_id - int. Tracker group ID, 0 when no group. avatar_file_name - string. Optional. Passed only if present. source - object. id - int. Source ID. device_id - string. Device ID aka source_imei . model - string. Tracker model name from \"models\" table. blocked - boolean. true if tracker blocked due to tariff end. tariff_id - int. An ID of tracker tariff from \"main_tariffs\" table. status_listing_id - int. An ID of the status listing associated with this tracker, or null. creation_date - date/time . Date when the tracker registered. tariff_end_date - date/time . Date of next tariff prolongation, or null. phone - string. Phone of the device. Can be null or empty if device has no GSM module or uses bundled SIM which number hidden from the user. tag_binding - object. List of attached tags. Appears only for tracker/list call. tag_id - int. An ID of tag. Must be unique for a tracker. ordinal - int. Number that can be used as ordinal or kind of tag. Must be unique for a tracker. Max value is 5.","title":"Tracker object structure"},{"location":"backend-api/resources/tracking/tracker/#api-actions","text":"API base path: /tracker .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/#read","text":"Gets tracker info by ID.","title":"read"},{"location":"backend-api/resources/tracking/tracker/#list","text":"Gets user's trackers with optional filtering by labels. We described this API call in the guide .","title":"list"},{"location":"backend-api/resources/tracking/tracker/#corrupt","text":"Marks tracker as deleted and corrupt its source, device_id and phone. required sub-user rights : tracker_register .","title":"corrupt"},{"location":"backend-api/resources/tracking/tracker/#delete","text":"Deletes a tracker if it is \"clone\". Will not work if specified ID of the original tracker. required sub-user rights : admin (available only to master users).","title":"delete"},{"location":"backend-api/resources/tracking/tracker/#change_phone","text":"Changes tracker's phone and setup new apn. required sub-user rights: tracker_configure .","title":"change_phone"},{"location":"backend-api/resources/tracking/tracker/#get_diagnostics","text":"Gets last CAN and OBD sensors and states values received from the device.","title":"get_diagnostics"},{"location":"backend-api/resources/tracking/tracker/#get_fuel","text":"Gets current fuel level (in liters) of tracker's fuel tanks.","title":"get_fuel"},{"location":"backend-api/resources/tracking/tracker/#get_inputs","text":"Gets current state of tracker's digital inputs and \"semantic\" inputs (ignition, buttons, car alarms, etc.) bound to them (if any).","title":"get_inputs"},{"location":"backend-api/resources/tracking/tracker/#get_last_gps_point","text":"Gets last point of the tracker located by GPS. Points located by GSM LBS are excluded from consideration.","title":"get_last_gps_point"},{"location":"backend-api/resources/tracking/tracker/#get_readings","text":"Gets last sensor values for sensors that are: metering . not can- or obd-based . not \"fuel\" sensors .","title":"get_readings"},{"location":"backend-api/resources/tracking/tracker/#get_state","text":"Gets current tracker state (gps, gsm, outputs, etc.). name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999119","title":"get_state"},{"location":"backend-api/resources/tracking/tracker/#get_states","text":"Gets current states (gps, gsm, outputs, etc.) for several trackers.","title":"get_states"},{"location":"backend-api/resources/tracking/tracker/#list_models","text":"Gets all integrated tracker models (from \"models\" table).","title":"list_models"},{"location":"backend-api/resources/tracking/tracker/#tagsset","text":"Set tags for a tracker. Tags must be created.","title":"tags/set"},{"location":"backend-api/resources/tracking/tracker/#location_request","text":"Execute this command to get current position of the device. The device must support requesting function.","title":"location_request"},{"location":"backend-api/resources/tracking/tracker/#register","text":"Registers a new tracker device. During registration, device linked with current API user's account and automatically configured to send data to our servers (if device model supports it). The panel must have installed SMS gateway. Find detailed instructions on tracker registration there . required sub-user rights: tracker_register .","title":"register"},{"location":"backend-api/resources/tracking/tracker/#register_retry","text":"Resends registration commands to the device. The panel must have installed SMS gateway. required sub-user rights: tracker_register .","title":"register_retry"},{"location":"backend-api/resources/tracking/tracker/#register_quick","text":"Registers a new tracker using only IMEI. Automatic SMS commands will not be sent for a register. The device must be preconfigured. This API call can be used only for bundles. required sub-user rights: tracker_register .","title":"register_quick"},{"location":"backend-api/resources/tracking/tracker/#replace","text":"Lets to replace the device without losing its history and some of its settings. Replacement allows you to register a new device with history, sensors (optional), and rules (optional) of the current tracker saved. required sub-user rights: tracker_configure .","title":"replace"},{"location":"backend-api/resources/tracking/tracker/#replace_quick","text":"Replaces a device using only IMEI. Automatic SMS commands will not be sent for an activation. The replacement device must be preconfigured. This API call can be used only for bundles. required sub-user rights: tracker_configure .","title":"replace_quick"},{"location":"backend-api/resources/tracking/tracker/#replace_retry","text":"Resends registration commands to the new device. The panel must have installed SMS gateway. required sub-user rights: tracker_configure .","title":"replace_retry"},{"location":"backend-api/resources/tracking/tracker/#send_command","text":"Sends command to tracker for performing special control, determined with special_control field of tracker model. required sub-user rights: tracker_configure , tracker_set_output . common command format is: { \"command\" : { \"name\" : \"command name\" , \"some_parameter1\" : 12 , \"some_parameter2\" : \"parameter\" , \"special_settings\" : { \"type\" : \"settings type\" , \"some_field1\" : 10 , \"some_field2\" : 32 } } } name - Command name. some_parameter - Parameters depend on certain command. special_settings - optional field. Its structure defined with special_control field of tracker model. Certain commands which can be used is defined with special_control field of tracker model and corresponds the table below: special control available commands jointech_lock_password electronic_lock_command, set_special_settings_command hhd_lock_password electronic_lock_command, set_special_settings_command vg_lock_password electronic_lock_command, set_special_settings_command any other special control set_special_settings_command","title":"send_command"},{"location":"backend-api/resources/tracking/tracker/#raw_commandsend","text":"Sends the GPRS command to the device, processing it in a protocol-dependent manner beforehand. Find more information about this API call usage in our instructions . required sub-user rights: tracker_configure , tracker_set_output .","title":"raw_command/send"},{"location":"backend-api/resources/tracking/tracker/alarm_mode/","text":"Alarm mode for tracker \u00b6 Contains API calls to read and set alarm mode of device. API actions \u00b6 API base path: /tracker/alarm_mode . read \u00b6 Gets the state of alarm mode of device. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/alarm_mode/read' \\ -H 'Content-Type: application/json' \\ -d '{\"tracker_id\": 123456, \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/alarm_mode/read?tracker_id=123456&hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"enabled\" : true } enabled - true if alarm mode enabled. Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 214 \u2013 Requested operation or parameters are not supported by the device - if device does not support alarm mode. set \u00b6 Changes the state of alarm mode of device. The device must be online. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 enabled true if alarm mode should be enabled. boolean true/false Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/alarm_mode/set' \\ -H 'Content-Type: application/json' \\ -d '{\"tracker_id\": 123456, \"enabled\": true, \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/alarm_mode/set?tracker_id=123456&enabled=true&hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true } Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 213 \u2013 Cannot perform action: the device is offline - if corresponding tracker is not connected to the server. 214 \u2013 Requested operation or parameters are not supported by the device - if device does not support alarm mode. 219 \u2013 Not allowed for clones of the device - if tracker is clone.","title":"Alarm Mode"},{"location":"backend-api/resources/tracking/tracker/alarm_mode/#alarm-mode-for-tracker","text":"Contains API calls to read and set alarm mode of device.","title":"Alarm mode for tracker"},{"location":"backend-api/resources/tracking/tracker/alarm_mode/#api-actions","text":"API base path: /tracker/alarm_mode .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/alarm_mode/#read","text":"Gets the state of alarm mode of device.","title":"read"},{"location":"backend-api/resources/tracking/tracker/alarm_mode/#set","text":"Changes the state of alarm mode of device. The device must be online.","title":"set"},{"location":"backend-api/resources/tracking/tracker/apn_settings/","text":"APN settings by tracker ID \u00b6 This resource contains API call to get APN settings by tracker ID. APN is short of Access Point Name and provides a device with the information needed to connect to wireless service. API actions \u00b6 API base path: /tracker/apn_settings . read \u00b6 Gets the APN name/user/password and mobile operator of device by a tracker_id . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/apn_settings/read' \\ -H 'Content-Type: application/json' \\ -d '{\"tracker_id\": 123456, \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/apn_settings/read?tracker_id=123456&hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"value\" : { \"name\" : \"fast.tmobile.com\" , \"user\" : \"tmobile\" , \"password\" : \"tmobile\" } } Errors \u00b6 201 \u2013 Not found in the database - if tracker or APN settings not found. 208 \u2013 Device blocked. 214 \u2013 Requested operation not supported by the device - if the tracker does not have a GSM module or uses a bundled SIM card, the number of which is hidden from the user.","title":"APN Settings"},{"location":"backend-api/resources/tracking/tracker/apn_settings/#apn-settings-by-tracker-id","text":"This resource contains API call to get APN settings by tracker ID. APN is short of Access Point Name and provides a device with the information needed to connect to wireless service.","title":"APN settings by tracker ID"},{"location":"backend-api/resources/tracking/tracker/apn_settings/#api-actions","text":"API base path: /tracker/apn_settings .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/apn_settings/#read","text":"Gets the APN name/user/password and mobile operator of device by a tracker_id .","title":"read"},{"location":"backend-api/resources/tracking/tracker/avatar/","text":"Avatar for the tracker \u00b6 Contains API call to upload avatar for the tracker. API actions \u00b6 API base path: /tracker/avatar . upload \u00b6 Uploads avatar image for specified tracker. Then it will be available from https://api.navixy.com/v2/[api_static_path]/tracker/avatars/<file_name> e.g. https://api.navixy.com/v2/static/tracker/avatars/abcdef123456789.png . required sub-user rights: tracker_update . MUST be a POST multipart request (multipart/form-data), with one of the parts being an image file upload (with the name \"file\"). File part mime type must be one of (see: [source:api-server/src/main/java/com/navixy/common/util/ImageFormats.java ImageFormats.IMAGE_FORMATS]): image/jpeg image/pjpeg image/png image/gif image/webp Parameters \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int file image file. string redirect_target Optional. URL to redirect If redirect_target passed return redirect to ?response= . URL Response \u00b6 { \"success\" : true , \"value\" : \"file name\" } value - avatar file name. Errors \u00b6 201 \u2013 Not found in the database - when tracker with a tracker_id not found in the database. 208 \u2013 Device blocked. 233 \u2013 No data file - if file part not passed. 234 \u2013 Invalid data format - if passed file with unexpected mime type. 254 \u2013 Cannot save file - on some file system errors.","title":"Avatar"},{"location":"backend-api/resources/tracking/tracker/avatar/#avatar-for-the-tracker","text":"Contains API call to upload avatar for the tracker.","title":"Avatar for the tracker"},{"location":"backend-api/resources/tracking/tracker/avatar/#api-actions","text":"API base path: /tracker/avatar .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/avatar/#upload","text":"Uploads avatar image for specified tracker. Then it will be available from https://api.navixy.com/v2/[api_static_path]/tracker/avatars/<file_name> e.g. https://api.navixy.com/v2/static/tracker/avatars/abcdef123456789.png . required sub-user rights: tracker_update . MUST be a POST multipart request (multipart/form-data), with one of the parts being an image file upload (with the name \"file\"). File part mime type must be one of (see: [source:api-server/src/main/java/com/navixy/common/util/ImageFormats.java ImageFormats.IMAGE_FORMATS]): image/jpeg image/pjpeg image/png image/gif image/webp","title":"upload"},{"location":"backend-api/resources/tracking/tracker/chat/","text":"Chat \u00b6 API calls to work with chat module. A chat module allows remote employees and supervisors quickly exchange their ideas and feedback, as well as helps employers to boost team culture. This can prove to be a useful communication tool. API actions \u00b6 API base path: /tracker/chat . list \u00b6 Gets a list of chat messages. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 from Optional. Start date/time of searching. Default value is now minus 7 days. date/time yyyy-MM-dd HH:mm:ss to Optional. End date/time for searching. Default value is now. date/time yyyy-MM-dd HH:mm:ss limit Optional. Limit of messages in list. Default and max limit is 1024. int 1024 ascending Optional. Ascending order direction from the first message to last. Default value is true . boolean true/false Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/chat/list' \\ -H 'Content-Type: application/json' \\ -d '{\"tracker_id\": 123456, \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/chat/list?tracker_id=123456&hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ <message 1 > }, { <message 2 > }] } list - array of messages. Where message object is: { \"id\" : 1 , \"submit_time\" : \"2014-04-15 09:02:24\" , \"update_time\" : null , \"text\" : \"text of message\" , \"type\" : \"INCOMING\" , \"status\" : \"PENDING\" , \"employee_id\" : 123456 } submit_time - time when the message submitted. update_time - delivering time for outgoing messages. type - INCOMING or OUTGOING . status - PENDING or DELIVERED . employee_id - optional, nullable employee identifier. Errors \u00b6 201 \u2013 Not found in the database (if there is no tracker with such ID belonging to authorized user). 208 \u2013 Device blocked (if tracker exists but was blocked due to tariff restrictions or some other reason). 214 \u2013 Requested operation or parameters are not supported by the device. 236 \u2013 Feature unavailable due to tariff restrictions (if one of the trackers has tariff without \"chat\" feature). mark_read_all \u00b6 Marks all incoming chat messages as read for all or for given user trackers. Parameters \u00b6 name description type format trackers Optional array of IDs of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int array [999199, 999919] Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/chat/mark_read_all' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/chat/mark_read_all?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database. mark_read \u00b6 Marks incoming chat message as read by message_id or array of message_ids . Parameters \u00b6 name description type format message_id ID of incoming message. int 123 message_ids IDs of incoming messages. int array [123,213] Use only one parameter. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/chat/mark_read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"message_id\": 123}' HTTP GET https://api.navixy.com/v2/tracker/chat/mark_read?hash=a6aa75587e5c59c32d347da438505fc3&message_id=123 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database. send \u00b6 Sends chat message to a specified tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 message Message text, not null, max size - 20000. string \"Hello World\" Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/chat/send' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 123456, \"message\": \"Hello World\"}' Response \u00b6 { \"success\" : true , \"id\" : 222 } id - ID of the submitted message. Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 214 \u2013 Requested operation or parameters are not supported by the device. 236 \u2013 Feature unavailable due to tariff restrictions - if one of the trackers has tariff with disabled reports (\"has_reports\" is false ). broadcast \u00b6 Sends chat message to specified trackers. Parameters \u00b6 name description type format trackers Array of IDs of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. Max size - 300. int array [999199, 999919] message Message text, not null, max size - 20000. string \"Hello World\" Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/chat/broadcast' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"trackers\": [999199, 991999], \"message\": \"Hello World\"}' Response \u00b6 { \"success\" : true , \"sent_to\" : [ 14 ], \"not_sent_to\" : [ 5234 ] } sent_to - list of tracker IDs to whom the message sent. not_sent_to - list of tracker IDs, who failed to send the message. Errors \u00b6 217 \u2013 The list contains non-existent entities \u2013 if one of the specified trackers does not exist, is blocked or doesn't have required tariff features. 221 \u2013 Device limit exceeded - if device limit set for the user's dealer has been exceeded. updated/list \u00b6 Gets date-times of last messages in chat of trackers. Parameters \u00b6 name description type format trackers Array of IDs of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. Max size - 300. int array [999199, 999919] Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/chat/updated/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"trackers\": [999199, 991999]}' Response \u00b6 { \"success\" : true , \"value\" : { \"101\" : \"2016-02-29 00:23:00\" , \"122\" : \"2017-02-28 00:23:00\" } } value - map of tracker IDs to date-times. Errors \u00b6 217 \u2013 The list contains non-existent entities \u2013 if one of the specified trackers does not exist, is blocked or doesn't have required tariff features. 221 \u2013 Device limit exceeded - if device limit set for the user's dealer has been exceeded. unread/count \u00b6 Gets count of user's unread chat messages grouped by tracker ID. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/chat/unread/count' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/chat/unread/count?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"value\" : { \"1\" : 123 , \"2\" : 321 } } value - map of tracker IDs to counts. Errors \u00b6 236 \u2013 Feature unavailable due to tariff restrictions - if there is no tracker which has a tariff with \"chat\" feature.","title":"Chat"},{"location":"backend-api/resources/tracking/tracker/chat/#chat","text":"API calls to work with chat module. A chat module allows remote employees and supervisors quickly exchange their ideas and feedback, as well as helps employers to boost team culture. This can prove to be a useful communication tool.","title":"Chat"},{"location":"backend-api/resources/tracking/tracker/chat/#api-actions","text":"API base path: /tracker/chat .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/chat/#list","text":"Gets a list of chat messages.","title":"list"},{"location":"backend-api/resources/tracking/tracker/chat/#mark_read_all","text":"Marks all incoming chat messages as read for all or for given user trackers.","title":"mark_read_all"},{"location":"backend-api/resources/tracking/tracker/chat/#mark_read","text":"Marks incoming chat message as read by message_id or array of message_ids .","title":"mark_read"},{"location":"backend-api/resources/tracking/tracker/chat/#send","text":"Sends chat message to a specified tracker.","title":"send"},{"location":"backend-api/resources/tracking/tracker/chat/#broadcast","text":"Sends chat message to specified trackers.","title":"broadcast"},{"location":"backend-api/resources/tracking/tracker/chat/#updatedlist","text":"Gets date-times of last messages in chat of trackers.","title":"updated/list"},{"location":"backend-api/resources/tracking/tracker/chat/#unreadcount","text":"Gets count of user's unread chat messages grouped by tracker ID.","title":"unread/count"},{"location":"backend-api/resources/tracking/tracker/contact/","text":"Contact \u00b6 Deprecated This API action deprecated and should not be used. API call to get user's trackers with special grouping by \"contacts\" API actions \u00b6 API base path: /tracker/contact . list \u00b6 Gets all user's trackers with special grouping by \"contacts\". Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/contact/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/contact/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"contacts\" : [{ <co nta c t 1 > }, { <co nta c t n > }], \"trackers\" : [{ < tra cker 1 > }, { < tra cker n > }] } contacts - all established contacts. trackers - normal trackers belonging to current user. where contact object is: { \"user_id\" : 12059 , \"first_name\" : \"Adam\" , \"middle_name\" : \"James\" , \"last_name\" : \"Williams\" , \"trackers\" : [{ < tra cker 1 > }, { < tra cker n > }] } user_id - ID of the user with which \"contact\" is established. trackers - trackers belonging to \"contact\" which locations shared with current user. Click to see descriptions of type tracker . Errors \u00b6 201 \u2013 Not found in the database.","title":"Contact"},{"location":"backend-api/resources/tracking/tracker/contact/#contact","text":"Deprecated This API action deprecated and should not be used. API call to get user's trackers with special grouping by \"contacts\"","title":"Contact"},{"location":"backend-api/resources/tracking/tracker/contact/#api-actions","text":"API base path: /tracker/contact .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/contact/#list","text":"Gets all user's trackers with special grouping by \"contacts\".","title":"list"},{"location":"backend-api/resources/tracking/tracker/counter/","text":"Counters \u00b6 This resource contains counter specific actions Find information on how to get counters data here . Resource specific actions \u00b6 Actions with counter entities: /tracker/counter/read /tracker/counter/update Actions with counter values: /tracker/get_counters /tracker/counter/value/get /tracker/counter/value/list /tracker/counter/value/set /tracker/counter/data/read read \u00b6 Reads counter of passed type . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 type Counter type. One of [\"odometer\", \"fuel_consumed\", \"engine_hours\"] . enum \"odometer\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/counter/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"type\": \"odometer\"}' HTTP GET https://api.navixy.com/v2/tracker/counter/read?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&type=odometer Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 111 , \"type\" : \"odometer\" , \"multiplier\" : 1.0 } } Errors \u00b6 204 - Entity not found \u2013 if there is no tracker with such ID belonging to authorized user. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions or some other reason. 219 - Not allowed for clones of the device \u2013 if specified tracker is a clone. update \u00b6 Updates counter of passed type . required sub-user rights: tracker_update . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 type Counter type. One of [\"odometer\", \"fuel_consumed\", \"engine_hours\"] . enum \"odometer\" multiplier A new value of counter multiplier. float 1.34 sensor_id ID of the sensor, which must be used as the source of odometer data (in case when parameter \"type\" equals \"odometer\"). If \"type\" is not \"odometer\", \"sensor_id\" must be null. int 123 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/counter/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"type\": \"odometer\", \"multiplier\": 3.14, \"sensor_id\": 1234}' HTTP GET https://api.navixy.com/v2/tracker/counter/update?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&type=odometer&multiplier=3.14&sensor_id=1234 Response \u00b6 { \"success\" : true } Errors \u00b6 8 - Queue service error, try again later \u2013 cannot set counter value, try later. 204 - Entity not found \u2013 if there is no tracker with such ID belonging to authorized user. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions, or some other reason. 219 - Not allowed for clones of the device \u2013 if specified tracker is a clone. 7 - Invalid parameters \u2013 if type is not \"odometer\" and sensor_id is not null. if sensor with specified sensor_id is not a metering sensor. if sensor with specified sensor_id belongs to another tracker. if sensor_id is negative. if sensor with such a sensor_id is not exists. if type value is not one of list above. get_counters \u00b6 Gets last values of the tracker's counters. Parameters \u00b6 name description type format tracker_id Tracker ID (aka \"object_id\"). int 999119 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/get_counters' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/get_counters?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"success\" : true , \"user_time\" : \"2014-07-09 07:50:58\" , \"list\" : [ { \"type\" : \"odometer\" , \"value\" : 100500.1 , \"update_time\" : \"2014-03-06 13:57:00\" } ] } user_time - date/time. Current time in user's timezone. list - array of counter value objects. type - enum. One of predefined semantic counter types (see below). value - double. Counter value. update_time - date/time. Date and time when the data updated. List of counter types: odometer - odometer. fuel_consumed - total fuel consumed. engine_hours - engine hours. Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. value/get \u00b6 Gets actual value of specified type of sensor. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 type Counter type. One of [\"odometer\", \"fuel_consumed\", \"engine_hours\"] . enum \"odometer\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/counter/value/get' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"type\": \"odometer\"}' HTTP GET https://api.navixy.com/v2/tracker/counter/value/get?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&type=odometer Response \u00b6 { \"success\" : true , \"value\" : 18.9 } value - float. The last valuer of counter. Errors \u00b6 204 - Entity not found \u2013 if there is no tracker with such ID belonging to authorized user, counter does not exist or there are no values yet. use /tracker/counter/set to create new counter (if not exist) and save some value. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions or some other reason. value/list \u00b6 Get actual values for counters of passed type and trackers . Parameters \u00b6 name description type format trackers List of the tracker's ID belonging to authorized user. int array [123456, 234567] type Counter type. One of [\"odometer\", \"fuel_consumed\", \"engine_hours\"] . enum \"odometer\" Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/counter/value/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"trackers\": [123456, 234567], \"type\": \"odometer\"}' Response \u00b6 { \"success\" : true , \"value\" : { \"14\" : 18.9 } } value - a map with tracker's IDs as keys. Errors \u00b6 204 - Entity not found \u2013 if one of the specified counter does not exist or there are no values yet. Use /tracker/counter/set to create new counter (if not exist) and save some value. 217 - List contains nonexistent entities \u2013 if one of the specified trackers does not exist or is blocked. value/set \u00b6 Creates new counter of passed type (if not) and update its value . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 type Counter type. One of [\"odometer\", \"fuel_consumed\", \"engine_hours\"] . enum \"odometer\" value A new value of counter. float 233.21 Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/counter/value/set' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"type\": \"odometer\", \"value\": 233.21}' Response \u00b6 { \"success\" : true } Errors \u00b6 8 - Queue service error, try again later - can't set counter value, try later. 204 - Entity not found \u2013 if there is no tracker with such ID belonging to authorized user. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions or some other reason. 219 - Not allowed for clones of the device \u2013 if specified tracker is a clone. data/read \u00b6 Returns counter values for a period. Parameters \u00b6 name description type format tracker_id Tracker ID (aka \"object_id\"). int 123456 type Counter type. One of [\"odometer\", \"fuel_consumed\", \"engine_hours\"] . enum \"odometer\" from Requested period start. date/time \"2021-02-25 12:21:17\" to Requested period end. date/time \"2021-03-25 12:21:17\" Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/counter/data/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"type\": \"odometer\", \"from\": \"2021-02-01 00:00:00\", \"to\": \"2021-02-01 03:00:00\"}' Response \u00b6 { \"success\" : true , \"list\" : [{ \"value\" : 3835.52 , \"update_time\" : \"2021-02-01 02:52:55\" }, { \"value\" : 3835.7 , \"update_time\" : \"2021-02-01 02:57:18\" }] } Errors \u00b6 204 - Entity not found \u2013 if there is no tracker or counter belonging to authorized user. 211 - Requested time span is too big \u2013 if interval between \"from\" and \"to\" is too big (maximum value specified in API config) 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions or some other reason. 7 - Invalid parameters \u2013 if from is after to ; if between from and to more than 31 days.","title":"Counter"},{"location":"backend-api/resources/tracking/tracker/counter/#counters","text":"This resource contains counter specific actions Find information on how to get counters data here .","title":"Counters"},{"location":"backend-api/resources/tracking/tracker/counter/#resource-specific-actions","text":"Actions with counter entities: /tracker/counter/read /tracker/counter/update Actions with counter values: /tracker/get_counters /tracker/counter/value/get /tracker/counter/value/list /tracker/counter/value/set /tracker/counter/data/read","title":"Resource specific actions"},{"location":"backend-api/resources/tracking/tracker/counter/#read","text":"Reads counter of passed type .","title":"read"},{"location":"backend-api/resources/tracking/tracker/counter/#update","text":"Updates counter of passed type . required sub-user rights: tracker_update .","title":"update"},{"location":"backend-api/resources/tracking/tracker/counter/#get_counters","text":"Gets last values of the tracker's counters.","title":"get_counters"},{"location":"backend-api/resources/tracking/tracker/counter/#valueget","text":"Gets actual value of specified type of sensor.","title":"value/get"},{"location":"backend-api/resources/tracking/tracker/counter/#valuelist","text":"Get actual values for counters of passed type and trackers .","title":"value/list"},{"location":"backend-api/resources/tracking/tracker/counter/#valueset","text":"Creates new counter of passed type (if not) and update its value .","title":"value/set"},{"location":"backend-api/resources/tracking/tracker/counter/#dataread","text":"Returns counter values for a period.","title":"data/read"},{"location":"backend-api/resources/tracking/tracker/datalogger/","text":"Datalogger \u00b6 API call for uploading datalogger information. API actions \u00b6 API base path: /tracker/datalogger . upload \u00b6 Uploads track data for specified tracker. Tracker must be a datalogger. MUST be a POST multipart request (multipart/form-data), with one of the parts being a CSV file upload (with the name \"file\"). Parameters \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int file A CSV file upload containing datalogger track data. file Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 219 \u2013 Not allowed for clones of the device - if tracker is clone. 233 \u2013 No data file - if file part is missing. 214 \u2013 Requested operation or parameters are not supported by the device - if specified tracker is not datalogger.","title":"Datalogger"},{"location":"backend-api/resources/tracking/tracker/datalogger/#datalogger","text":"API call for uploading datalogger information.","title":"Datalogger"},{"location":"backend-api/resources/tracking/tracker/datalogger/#api-actions","text":"API base path: /tracker/datalogger .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/datalogger/#upload","text":"Uploads track data for specified tracker. Tracker must be a datalogger. MUST be a POST multipart request (multipart/form-data), with one of the parts being a CSV file upload (with the name \"file\").","title":"upload"},{"location":"backend-api/resources/tracking/tracker/employee/","text":"Assigning employee to tracker \u00b6 Allows assigning employee (\"driver\") to a device. Also, read who is on a vehicle now, hardware key and when, where was assigned. API actions \u00b6 API base path: /tracker/employee . assign \u00b6 Assigns another employee (\"driver\") to the tracker. required sub-user rights: employee_update . required tariff feature: app_fleet . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 new_employee_id ID of the new employee. int 12345 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/employee/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"tracker_id\": 123456, \"new_employee_id\": 12345, \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/employee/assign?tracker_id=123456&new_employee_id=12345&hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker or employee with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 263 \u2013 No change needed, old and new values are the same - if new employee matches a currently assigned employee. read \u00b6 Requests to read the current employee (driver) assigned to tracker, and when it was assigned. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/employee/read' \\ -H 'Content-Type: application/json' \\ -d '{\"tracker_id\": 123456, \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/employee/read?tracker_id=123456&hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"current\" : { \"id\" : 1 , \"icon_id\" : 55 , \"tracker_id\" : 560 , \"first_name\" : \"John\" , \"middle_name\" : \"M\" , \"last_name\" : \"Johnson\" , \"email\" : \"\" , \"phone\" : \"\" , \"driver_license_number\" : \"34534545\" , \"driver_license_cats\" : \"AB, sgeg\" , \"driver_license_issue_date\" : \"2005-06-04\" , \"driver_license_valid_till\" : \"2015-06-04\" , \"hardware_key\" : \"ab8def\" , \"department_id\" : null , \"location\" : { \"lat\" : 0.0 , \"lng\" : 0.0 , \"address\" : \"\" } }, \"last_change\" : { \"old_employee_id\" : null , \"new_employee_id\" : 1 , \"location\" : { \"lat\" : 11.0 , \"lng\" : 22.0 , \"address\" : \"Haraze-Mangueigne\" }, \"changed\" : \"2016-11-17 17:01:20\" , \"origin\" : \"tracker\" , \"hardware_key\" : \"ab8def\" } } current - current employee (driver) info, standard employee object, can be null . last_change - information about the employee's last assignment, can be null . old_employee_id - deprecated. Always null . new_employee_id - ID of an employee assigned to the tracker. Can be null . location - an address where it was. Can be null . lat - latitude. lng - longitude. address - an address where it was. Can be null . origin - supervisor (if the assignment was made through the API ) or tracker (if the assignment was made through the hardware/driver key). hardware_key - hardware key used to change employee. Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason.","title":"Employee"},{"location":"backend-api/resources/tracking/tracker/employee/#assigning-employee-to-tracker","text":"Allows assigning employee (\"driver\") to a device. Also, read who is on a vehicle now, hardware key and when, where was assigned.","title":"Assigning employee to tracker"},{"location":"backend-api/resources/tracking/tracker/employee/#api-actions","text":"API base path: /tracker/employee .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/employee/#assign","text":"Assigns another employee (\"driver\") to the tracker. required sub-user rights: employee_update . required tariff feature: app_fleet .","title":"assign"},{"location":"backend-api/resources/tracking/tracker/employee/#read","text":"Requests to read the current employee (driver) assigned to tracker, and when it was assigned.","title":"read"},{"location":"backend-api/resources/tracking/tracker/engine_immobilizer/","text":"Engine immobilizer \u00b6 API calls to read the state of immobilizer and to set the new state. Engine immobilizer is an electronic security device fitted to a motor vehicle that prevents the engine from running unless it must run. This prevents the vehicle from being \"hot wired\" after entry has been achieved and thus reduces motor vehicle theft. This API call allows manipulating with immobilizer state. API actions \u00b6 API base path: /tracker/engine_immobilizer . read \u00b6 Requests to read the state of engine immobilizer. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/engine_immobilizer/read' \\ -H 'Content-Type: application/json' \\ -d '{\"tracker_id\": 123456, \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/engine_immobilizer/read?tracker_id=123456&hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"enabled\" : true } enabled - boolean. true if engine immobilizer enabled. Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 214 \u2013 Requested operation or parameters are not supported by the device - if device does not support alarm mode. set \u00b6 Requests to change the engine immobilizer state of the device. The device must be online. required sub-user rights: tracker_set_output . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 enabled true if immobilizer should be enabled. boolean true/false Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/engine_immobilizer/set' \\ -H 'Content-Type: application/json' \\ -d '{\"tracker_id\": 123456, \"enabled\": true, \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/engine_immobilizer/set?tracker_id=123456&enabled=true&hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true } Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 213 \u2013 Cannot perform action: the device is offline - if corresponding tracker is not connected to the server. 214 \u2013 Requested operation or parameters are not supported by the device - if device does not support alarm mode. 219 \u2013 Not allowed for clones of the device - if tracker is clone.","title":"Engine Immobilizer"},{"location":"backend-api/resources/tracking/tracker/engine_immobilizer/#engine-immobilizer","text":"API calls to read the state of immobilizer and to set the new state. Engine immobilizer is an electronic security device fitted to a motor vehicle that prevents the engine from running unless it must run. This prevents the vehicle from being \"hot wired\" after entry has been achieved and thus reduces motor vehicle theft. This API call allows manipulating with immobilizer state.","title":"Engine immobilizer"},{"location":"backend-api/resources/tracking/tracker/engine_immobilizer/#api-actions","text":"API base path: /tracker/engine_immobilizer .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/engine_immobilizer/#read","text":"Requests to read the state of engine immobilizer.","title":"read"},{"location":"backend-api/resources/tracking/tracker/engine_immobilizer/#set","text":"Requests to change the engine immobilizer state of the device. The device must be online. required sub-user rights: tracker_set_output .","title":"set"},{"location":"backend-api/resources/tracking/tracker/group/","text":"Group \u00b6 Contains group object structure and API calls to interact with them. Tracker group used to organize trackers in user interface. Currently, its function is purely visual. Group object structure: \u00b6 { \"id\" : 167 , \"title\" : \"Main office\" , \"color\" : \"FF6DDC\" } id - int. Group ID. Used to reference group in objects and API calls. Read-only, assigned automatically by the server. title - string. User-specified group title, 1 to 60 printable characters, e.g. \"Employees\". color - string. Group color in web format (without #), e.g. \"FF6DDC\". Determines the color of tracker markers on the map. API actions \u00b6 API base path: /tracker/group . assign \u00b6 Assigns multiple trackers to the specified group. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type format id Group ID, or 0 if trackers should be removed from any group. int 167 trackers Array of IDs of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int array [999199, 999919] Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/group/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"trackers\": [999199, 991999], \"id\": 167}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if no group found with the specified ID (or group belongs to another user). 217 - List contains nonexistent entities \u2013 if one or more of tracker IDs belong to nonexistent tracker (or to a tracker belonging to different user). create \u00b6 Creates a new empty group. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type format title Ser-specified group title, 1 to 60 printable characters. string \"Employees\" color Group color. string \"FF6DDC\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/group/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"title\": \"Employees\", \"color\": \"FF6DDC\"}' HTTP GET https://api.navixy.com/v2/tracker/group/create?hash=a6aa75587e5c59c32d347da438505fc3&title=Employees&color=FF6DDC Response \u00b6 { \"success\" : true , \"id\" : 222 } id - int. An ID of created group, e.g. 222. Errors \u00b6 General types only. delete \u00b6 Deletes group with the specified ID. The group must belong to authorized user. All trackers from this group will be assigned to default group (0). required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type format id ID of group to delete. int 167 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/group/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"id\": 167}' HTTP GET https://api.navixy.com/v2/tracker/group/delete?hash=a6aa75587e5c59c32d347da438505fc3&id=167 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if no group found with the specified ID (or group belongs to another user). list \u00b6 Gets all user tracker groups. There is always \"default\" unnamed group with ID = 0. It cannot be modified, deleted, and is not returned by this API call. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/group/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/group/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [ { \"title\" : \"test\" , \"color\" : \"FF6DDC\" , \"id\" : 129301 } ] } Errors \u00b6 General types only. update \u00b6 Updates specified tracker group. Group must belong to the authorized user. required sub-user rights : admin (available only to master users). Parameters \u00b6 name description type format id ID of group to update. int 167 title Ser-specified group title, 1 to 60 printable characters. string \"Employees\" color Group color. string \"FF6DDC\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/group/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"id\": 167, \"title\": \"Employees\", \"color\": \"FF6DDC\"}' HTTP GET https://api.navixy.com/v2/tracker/group/update?hash=a6aa75587e5c59c32d347da438505fc3&id=167&title=Employees&color=FF6DDC Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if no group found with the specified ID (or group belongs to another user).","title":"Group"},{"location":"backend-api/resources/tracking/tracker/group/#group","text":"Contains group object structure and API calls to interact with them. Tracker group used to organize trackers in user interface. Currently, its function is purely visual.","title":"Group"},{"location":"backend-api/resources/tracking/tracker/group/#group-object-structure","text":"{ \"id\" : 167 , \"title\" : \"Main office\" , \"color\" : \"FF6DDC\" } id - int. Group ID. Used to reference group in objects and API calls. Read-only, assigned automatically by the server. title - string. User-specified group title, 1 to 60 printable characters, e.g. \"Employees\". color - string. Group color in web format (without #), e.g. \"FF6DDC\". Determines the color of tracker markers on the map.","title":"Group object structure:"},{"location":"backend-api/resources/tracking/tracker/group/#api-actions","text":"API base path: /tracker/group .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/group/#assign","text":"Assigns multiple trackers to the specified group. required sub-user rights: admin (available only to master users).","title":"assign"},{"location":"backend-api/resources/tracking/tracker/group/#create","text":"Creates a new empty group. required sub-user rights: admin (available only to master users).","title":"create"},{"location":"backend-api/resources/tracking/tracker/group/#delete","text":"Deletes group with the specified ID. The group must belong to authorized user. All trackers from this group will be assigned to default group (0). required sub-user rights: admin (available only to master users).","title":"delete"},{"location":"backend-api/resources/tracking/tracker/group/#list","text":"Gets all user tracker groups. There is always \"default\" unnamed group with ID = 0. It cannot be modified, deleted, and is not returned by this API call.","title":"list"},{"location":"backend-api/resources/tracking/tracker/group/#update","text":"Updates specified tracker group. Group must belong to the authorized user. required sub-user rights : admin (available only to master users).","title":"update"},{"location":"backend-api/resources/tracking/tracker/led/","text":"LED \u00b6 API calls to get and update LED state of the tracker. LED switch should be available for the device. API actions \u00b6 API base path: /tracker/led . read \u00b6 Gets LED status for the specified tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/led/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/led/read?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"success\" : true , \"value\" : true } value - boolean. LED status, true - ON, false - OFF. Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 214 \u2013 Requested operation or parameters are not supported by the device. update \u00b6 Switches LED state for a specified tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 value The new LED state, true \u2013 ON, false \u2013 OFF. boolean true/false Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/led/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489, \"value\": true}' HTTP GET https://api.navixy.com/v2/tracker/led/update?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489&value=true Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 214 \u2013 Requested operation or parameters are not supported by the device.","title":"Led"},{"location":"backend-api/resources/tracking/tracker/led/#led","text":"API calls to get and update LED state of the tracker. LED switch should be available for the device.","title":"LED"},{"location":"backend-api/resources/tracking/tracker/led/#api-actions","text":"API base path: /tracker/led .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/led/#read","text":"Gets LED status for the specified tracker.","title":"read"},{"location":"backend-api/resources/tracking/tracker/led/#update","text":"Switches LED state for a specified tracker.","title":"update"},{"location":"backend-api/resources/tracking/tracker/mobile/","text":"Mobile app register \u00b6 Deprecated This API action deprecated and should not be used. API call to register a mobile application. Use tracker/register with plugin_id 35. API actions \u00b6 API base path: /tracker/mobile . register \u00b6 Registers new mobile client application. required sub-user rights: tracker_register . Parameters \u00b6 Part of parameters are registration plugin-specific. See \"Registration plugins\" section. Common parameters are: name description type format label User-defined label for this tracker. Must consist of printable characters and have length between 1 and 60. string \"Courier\" group_id Tracker group id, 0 if tracker does not belong to any group. The specified group must exist. See group/list . int 0 device_id Must be specified if device model uses fixed device id. See tracker/list_models . string \"4568005588562\" send_register_commands Indicates send or not to send activation commands to device (via SMS or GPRS channel). If parameter is not specified or equals null will be used the platform settings. Default: null . boolean true/false Response \u00b6 { \"success\" : true , \"value\" : { < tra cker> } } For tracker object structure, see tracker/ . Errors \u00b6 13 \u2013 Operation not permitted \u2013 if user has insufficient rights. 204 \u2013 Entity not found - if specified group does not exist. 221 \u2013 Device limit exceeded - if device limit set for the user's dealer has been exceeded. 224 \u2013 Device ID already in use - if specified device ID already registered in the system. 225 \u2013 Not allowed for this legal type - if tariff of the new device is not compatible with user's legal type.","title":"Mobile"},{"location":"backend-api/resources/tracking/tracker/mobile/#mobile-app-register","text":"Deprecated This API action deprecated and should not be used. API call to register a mobile application. Use tracker/register with plugin_id 35.","title":"Mobile app register"},{"location":"backend-api/resources/tracking/tracker/mobile/#api-actions","text":"API base path: /tracker/mobile .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/mobile/#register","text":"Registers new mobile client application. required sub-user rights: tracker_register .","title":"register"},{"location":"backend-api/resources/tracking/tracker/output/","text":"Output control \u00b6 API calls for output control. Some device models work with set_all and some with set calls. API actions \u00b6 API base path: /tracker/output . set_all \u00b6 Request to change the states of all digital outputs of the device. The device must be online. required sub-user rights: tracker_set_output . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 outputs Array of desired states of all digital outputs, e.g. [true, true, false] means output 1 is on, output 2 is on, output 3 is off. array of boolean [true, true, false] Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/output/set_all' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489, \"outputs\": [true, true, false]}' Response \u00b6 { \"success\" : true } Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 213 \u2013 Cannot perform action: the device is offline - if corresponding tracker is not connected to the server. 214 \u2013 Requested operation or parameters are not supported by the device - if device does not support batch mode, or has a different number of outputs. 219 \u2013 Not allowed for clones of the device - if tracker is clone. set \u00b6 Request to change the state of the specified digital output of the device. The device must be online. required sub-user rights: tracker_set_output . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 output The number of the output to control, starting from 1. int 1 enable true if the requested output should be enabled, or false if it should be disabled. boolean true/false Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/output/set' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", tracker_id: 265489, \"output\": 1, \"enable\": true}' HTTP GET https://api.navixy.com/v2/tracker/output/set?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489&output=1&enable=true Response \u00b6 { \"success\" : true } Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 213 \u2013 Cannot perform action: the device is offline - if corresponding tracker is not connected to the server. 214 \u2013 Requested operation or parameters are not supported by the device - if device does not support controlling single output, does not have specified digital output, or the specified output reserved to \"engine block\" feature. In this case, output cannot be controlled by this command for safety reasons. 219 \u2013 Not allowed for clones of the device - if tracker is clone.","title":"Output"},{"location":"backend-api/resources/tracking/tracker/output/#output-control","text":"API calls for output control. Some device models work with set_all and some with set calls.","title":"Output control"},{"location":"backend-api/resources/tracking/tracker/output/#api-actions","text":"API base path: /tracker/output .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/output/#set_all","text":"Request to change the states of all digital outputs of the device. The device must be online. required sub-user rights: tracker_set_output .","title":"set_all"},{"location":"backend-api/resources/tracking/tracker/output/#set","text":"Request to change the state of the specified digital output of the device. The device must be online. required sub-user rights: tracker_set_output .","title":"set"},{"location":"backend-api/resources/tracking/tracker/readings/","text":"Sensor readings \u00b6 API call to get last values for all metering sensors and state values. Includes CAN, OBD, and fuel. Described getting data from sensors in our guides . API actions \u00b6 API base path: /tracker/readings . list \u00b6 Gets last values for all metering sensors, state values and counters. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 sensor_type Optional. If specified, state values and counters will be omitted. Used to filter sensors by type. string metering sensor type or virtual sensor type \"fuel\" include_components Optional. Default is true . If set to false , parts of composite sensors will be excluded. boolean true Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/readings/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/readings/list?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"success\" : true , \"inputs\" : [ { \"value\" : 5.66 , \"label\" : \"label\" , \"units\" : \"litres\" , \"name\" : \"fuel_level\" , \"type\" : \"fuel\" , \"units_type\" : \"custom\" , \"update_time\" : \"2023-06-28 06:05:59\" } ], \"states\" : [ { \"field\" : \"obd_mil_status\" , \"value\" : 12345.23 , \"update_time\" : \"2023-06-28 06:05:59\" } ], \"virtual_sensors\" : [ { \"label\" : \"Virtual Ignition\" , \"value\" : \"On\" , \"type\" : \"virtual_ignition\" , \"update_time\" : \"2023-06-28 06:05:59\" }, { \"label\" : \"Hood state\" , \"value\" : \"Closed\" , \"type\" : \"state\" , \"update_time\" : \"2023-06-28 06:05:59\" } ], \"counters\" : [ { \"type\" : \"odometer\" , \"value\" : 3232.9923342688653 , \"update_time\" : \"2023-06-28 06:05:59\" } ] } inputs - an array of JSON objects containing information about the tracker sensors readings. value - float. The value of the sensor. label - string. The label of the sensor. units - string. The units in which the sensor value is measured. name - string. The name of the sensor. type - metering sensor type . The type of the sensor. units_type - string. The type of the units in which the sensor value is measured. update_time - date/time. The time when the sensor value was updated. states - an array of JSON objects containing information about the tracker state readings. field - string. The field name of the state. value - can be string, int, float, boolean, or null. The value of the field. update_time - date/time. The time when the field value was updated. virtualSensors - an array of JSON objects containing information about the tracker virtual sensors readings. value - float. The value of the virtual sensor. label - string. The label of the virtual sensor. type - virtual sensor type . The type of the virtual sensor. update_time - date/time. The time when the virtual sensor value was updated. counters - an array of JSON objects containing information about the tracker counter readings. type - string. The type of the counter. value - float. The value of the counter. update_time - date/time. The time when the counter value was updated. Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. batch_list \u00b6 Gets last values for all metering sensors, state values and counters on multiple trackers. Parameters \u00b6 name description type format trackers An array of tracker IDs (aka \"object_id\"). Trackers must belong to authorized user. int [999199,991999] sensor_type Optional. If specified, state values and counters will be omitted. Used to filter sensors by type. string metering sensor type or virtual sensor type \"fuel\" include_components Optional. Default is true . If set to false , parts of composite sensors will be excluded. boolean true Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/readings/batch_list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"trackers\": [10181215,10038816]}' HTTP GET https://api.navixy.com/v2/tracker/readings/batch_list?hash=a6aa75587e5c59c32d347da438505fc3&trackers=[10181215,10038816] Response \u00b6 { \"result\" : { \"10181215\" : { \"inputs\" : [ { \"label\" : \"Tank 1\" , \"units\" : \"\" , \"name\" : \"lls_level_1\" , \"type\" : \"fuel\" , \"min_value\" : 0.0 , \"max_value\" : 480.0 , \"value\" : 225.71 , \"units_type\" : \"litre\" , \"converted_units_type\" : null , \"converted_value\" : null , \"update_time\" : \"2023-06-28 06:13:09\" }, { \"label\" : \"Tank 2\" , \"units\" : \"\" , \"name\" : \"lls_level_6\" , \"type\" : \"fuel\" , \"min_value\" : 0.0 , \"max_value\" : 300.0 , \"value\" : 113.52 , \"units_type\" : \"litre\" , \"converted_units_type\" : null , \"converted_value\" : null , \"update_time\" : \"2023-05-11 00:35:16\" }, { \"label\" : \"Fuel\" , \"units\" : \"\" , \"name\" : \"composite\" , \"type\" : \"fuel\" , \"min_value\" : 0.0 , \"max_value\" : 700.0 , \"value\" : 175.31 , \"units_type\" : \"litre\" , \"converted_units_type\" : null , \"converted_value\" : null , \"update_time\" : \"2023-05-11 00:35:26\" } ], \"states\" : [ { \"field\" : \"input_status\" , \"value\" : 0 , \"update_time\" : \"2023-06-28 06:13:09\" }, { \"field\" : \"output_status\" , \"value\" : 0 , \"update_time\" : \"2023-06-28 06:13:09\" } ], \"counters\" : [ { \"type\" : \"odometer\" , \"value\" : 3232.9923342688653 , \"update_time\" : \"2023-06-28 06:05:59\" } ] }, \"10038816\" : { \"inputs\" : [], \"states\" : [ { \"field\" : \"input_status\" , \"value\" : 0 , \"update_time\" : \"2023-06-28 06:13:23\" }, { \"field\" : \"output_status\" , \"value\" : 0 , \"update_time\" : \"2023-06-28 06:13:23\" } ], \"counters\" : [ { \"type\" : \"odometer\" , \"value\" : 20854.422727641213 , \"update_time\" : \"2023-06-28 06:12:23\" } ] } }, \"success\" : true } inputs - an array of JSON objects containing information about the tracker sensors readings. value - float. The value of the sensor. label - string. The label of the sensor. units - string. The units in which the sensor value is measured. name - string. The name of the sensor. type - metering sensor type . The type of the sensor. units_type - string. The type of the units in which the sensor value is measured. update_time - date/time. The time when the sensor value was updated. min_value - float. The minimum value of the sensor. max_value - float. The maximum value of the sensor. converted_units_type - string. The type of the units in which the sensor value is converted. converted_value - float. The converted value of the sensor reading. states - an array of JSON objects containing information about the tracker state readings. field - string. The field name of the state. value - can be string, int, float, boolean, or null. The value of the field. update_time - date/time. The time when the field value was updated. counters - an array of JSON objects containing information about the tracker counter readings. type - string. The type of the counter. value - float. The value of the counter. update_time - date/time. The time when the counter value was updated. Errors \u00b6 217 - List contains nonexistent entities.","title":"Readings"},{"location":"backend-api/resources/tracking/tracker/readings/#sensor-readings","text":"API call to get last values for all metering sensors and state values. Includes CAN, OBD, and fuel. Described getting data from sensors in our guides .","title":"Sensor readings"},{"location":"backend-api/resources/tracking/tracker/readings/#api-actions","text":"API base path: /tracker/readings .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/readings/#list","text":"Gets last values for all metering sensors, state values and counters.","title":"list"},{"location":"backend-api/resources/tracking/tracker/readings/#batch_list","text":"Gets last values for all metering sensors, state values and counters on multiple trackers.","title":"batch_list"},{"location":"backend-api/resources/tracking/tracker/retranslator/","text":"Retranslator \u00b6 Contains tracker retranslator binding object and API calls to bind/unbind it to tracker or get already binded one. Tracker retranslator binding object \u00b6 { \"retranslator_id\" : 4548 , \"fake_device_id\" : \"AI568T\" } retranslator_id - int. An ID of the retranslator. fake_device_id - string. Optional. If this field is set retranslator use it instead of real device ID to forward data. API actions \u00b6 API base path: /tracker/retranslator . bind \u00b6 Creates or updates binding. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 retranslator_id Retranslator ID. int 123 fake_device_id Optional. If set the retranslator will use this value instead of real device ID to forward data. string \"AI568T\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/retranslator/bind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489, \"retranslator_id\": 123}' HTTP GET https://api.navixy.com/v2/tracker/retranslator/bind?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489&retranslator_id=123 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found - either tracker or retranslator are not found by provided ID 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions or some other reason. 219 - Not allowed for clones of the device \u2013 if tracker is a clone. 236 - Feature unavailable due to tariff restrictions \u2013 if there are no trackers with \"retranslation\" tariff feature available. 242 - There were errors during content validation \u2013 if fake_device_id is invalid for the retranslator protocol. list \u00b6 List tracker retranslators bound to tracker with ID= tracker_id . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/retranslator/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489}' HTTP GET https://api.navixy.com/v2/tracker/retranslator/list?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489 Response \u00b6 { \"success\" : true , \"list\" : [{ \"retranslator_id\" : 4548 , \"fake_device_id\" : \"AI568T\" }] } Errors \u00b6 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions, or some other reason. unbind \u00b6 Unbinds a tracker from retranslator. required sub-user rights: admin (available only to master users). Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 retranslator_id Retranslator ID. int 123 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/retranslator/unbind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489, \"retranslator_id\": 123}' HTTP GET https://api.navixy.com/v2/tracker/retranslator/unbind?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=265489&retranslator_id=123 Response \u00b6 { \"success\" : true } Errors \u00b6 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions, or some other reason. 219 - Not allowed for clones of the device \u2013 if tracker is a clone.","title":"Retranslator"},{"location":"backend-api/resources/tracking/tracker/retranslator/#retranslator","text":"Contains tracker retranslator binding object and API calls to bind/unbind it to tracker or get already binded one.","title":"Retranslator"},{"location":"backend-api/resources/tracking/tracker/retranslator/#tracker-retranslator-binding-object","text":"{ \"retranslator_id\" : 4548 , \"fake_device_id\" : \"AI568T\" } retranslator_id - int. An ID of the retranslator. fake_device_id - string. Optional. If this field is set retranslator use it instead of real device ID to forward data.","title":"Tracker retranslator binding object"},{"location":"backend-api/resources/tracking/tracker/retranslator/#api-actions","text":"API base path: /tracker/retranslator .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/retranslator/#bind","text":"Creates or updates binding. required sub-user rights: admin (available only to master users).","title":"bind"},{"location":"backend-api/resources/tracking/tracker/retranslator/#list","text":"List tracker retranslators bound to tracker with ID= tracker_id .","title":"list"},{"location":"backend-api/resources/tracking/tracker/retranslator/#unbind","text":"Unbinds a tracker from retranslator. required sub-user rights: admin (available only to master users).","title":"unbind"},{"location":"backend-api/resources/tracking/tracker/trusted_number/","text":"Trusted number \u00b6 API calls to interact with list of trusted numbers for trackers. API actions \u00b6 API base path: /tracker/trusted_number . list \u00b6 Gets list of trusted numbers for the specified tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/trusted_number/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/trusted_number/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [ \"496156680000\" , \"496156680001\" ] } list - List of strings containing trusted phone numbers in the international format without \"+\" sign. Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. update \u00b6 Replaces the list of trusted numbers for a specified tracker with the new one. required sub-user rights: tracker_update . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 999199 list Array of phone numbers (10-15 digits) represented as strings. string array [\"496156680001\", \"496156680000\"] Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/trusted_number/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"tracker_id\": 265489, \"list\": [\"496156680001\", \"496156680000\"]}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason.","title":"Trusted Number"},{"location":"backend-api/resources/tracking/tracker/trusted_number/#trusted-number","text":"API calls to interact with list of trusted numbers for trackers.","title":"Trusted number"},{"location":"backend-api/resources/tracking/tracker/trusted_number/#api-actions","text":"API base path: /tracker/trusted_number .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/trusted_number/#list","text":"Gets list of trusted numbers for the specified tracker.","title":"list"},{"location":"backend-api/resources/tracking/tracker/trusted_number/#update","text":"Replaces the list of trusted numbers for a specified tracker with the new one. required sub-user rights: tracker_update .","title":"update"},{"location":"backend-api/resources/tracking/tracker/command/unconfirmed/","text":"Unconfirmed commands \u00b6 API calls for to interact with unconfirmed SMS commands in the queue of the specified tracker. API actions \u00b6 API path: /tracker/command/unconfirmed . count \u00b6 Gets number of commands in queue for the specified tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/command/unconfirmed/count' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456}' HTTP GET https://api.navixy.com/v2/tracker/command/unconfirmed/count?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456 Response \u00b6 { \"success\" : true , \"count\" : 0 } count - int. Number of unconfirmed commands in a queue. Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. reset \u00b6 Removes all pending SMS commands from the queue for the specified tracker. required sub-user rights: tracker_update . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/command/unconfirmed/reset' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456}' HTTP GET https://api.navixy.com/v2/tracker/command/unconfirmed/reset?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456 Response \u00b6 { \"success\" : true } Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason.","title":"Unconfirmed"},{"location":"backend-api/resources/tracking/tracker/command/unconfirmed/#unconfirmed-commands","text":"API calls for to interact with unconfirmed SMS commands in the queue of the specified tracker.","title":"Unconfirmed commands"},{"location":"backend-api/resources/tracking/tracker/command/unconfirmed/#api-actions","text":"API path: /tracker/command/unconfirmed .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/command/unconfirmed/#count","text":"Gets number of commands in queue for the specified tracker.","title":"count"},{"location":"backend-api/resources/tracking/tracker/command/unconfirmed/#reset","text":"Removes all pending SMS commands from the queue for the specified tracker. required sub-user rights: tracker_update .","title":"reset"},{"location":"backend-api/resources/tracking/tracker/rules/rule/","text":"Rule \u00b6 Contains API calls to interact with tracker's rules. Rules used to set up conditions according to which the system logs the events and sends notifications to user. Described creation and using rules step-by-step in the guide . Rule object \u00b6 { \"id\" : 668054 , \"name\" : \"Lock is opened/closed\" , \"type\" : \"locking_unlocking\" , \"description\" : \"This rule was created automatically\" , \"zone_ids\" : [ 18928 ], \"trackers\" : [ 10029750 , 10030168 , 10031971 ], \"primary_text\" : \"Lock is opened\" , \"secondary_text\" : \"Lock is closed\" , \"param\" : 0 , \"alerts\" : { \"sms_phones\" : [], \"phones\" : [], \"emails\" : [], \"push_enabled\" : true }, \"suspended\" : false , \"auto_created\" : true , \"schedule\" : [{ \"type\" : \"weekly\" , \"from\" : { \"weekday\" : 1 , \"time\" : \"00:00:00\" }, \"to\" : { \"weekday\" : 7 , \"time\" : \"23:59:59\" }, \"interval_id\" : 48732 }], \"extended_params\" : { \"emergency\" : false , \"zone_limit_inverted\" : false , \"private_rule\" : true } } id - int. An ID of a rule. name - string. Name of a rule. type - enum. One of pre-defined types of rules. See rule types . description - string. Rule's description. zone_ids - int array. List of geofence IDs. trackers - int array. List of bound tracker IDs. primary_text - string. Primary text of rule notification. secondary_text - string. Secondary text of rule notification. param - int. A common parameter. See rule types . alerts - object with destinations for notifications. sms_phones - string array. Phones for SMS notifications. phones - string array. Phones for voice calls. emails - string array. Emails for notifications. push_enabled - boolean. If true push notifications available. emergency - boolean. If true notifications will be marked as emergency with color and sound. suspended - boolean. true if the rule suspended. auto_created - optional, boolean. true means that the rule created automatically. shedule - optional object. The rule will work in specified period. extended_params - optional. An object specified for concrete rule type. See rule types . schedule_interval is one of: weekly_schedule_interval { \"type\" : \"weekly\" , \"from\" : { \"weekday\" : 1 , \"time\" : \"00:00:00\" }, \"to\" : { \"weekday\" : 7 , \"time\" : \"23:59:59\" }, \"interval_id\" : 1 } * fixed_schedule_interval { \"type\" : \"fixed\" , \"from\" : \"2014-07-09 07:50:58\" , \"to\" : \"2014-07-10 07:50:58\" , \"interval_id\" : 3 } date/time and local_time types described at the data types description section . API actions \u00b6 API base path: /tracker/rule . bind \u00b6 Binds rule with rule_id to trackers list. required sub-user rights: tracker_rule_update . Parameters \u00b6 name description type rule_id ID of a rule. int trackers IDs of trackers. Trackers which do not exist, owned by other user or deleted ignored without errors. int array Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/bind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule_id\": 123, \"trackers\": [265489]}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if rule with rule_id does not exist or owned by other user. create \u00b6 Creates rule and scheduled intervals. required sub-user rights: tracker_rule_update . Parameters \u00b6 Presented parameters are common for all rule types. However, there are specific parameters primary_text and secondary_text that are described for every rule type if exist in rule types . name description type name The name of created rule. string description Rule's description. string trackers List of tracker IDs belong to user for which the rule will work. int array zone_ids List of zones to bind where the rule will work. Leave it empty if rule should work everywhere. Parameter zone_ids is not allowed for rule offline and can't be empty for route and inoutzone rule types. int array type One of pre-defined types of rules. See rule types . enum param A common parameter that responsible for integer conditions. See rule types . int alerts An object with destinations for notifications. Described above . JSON object suspended Starts or stops tracking the rule. true if the rule suspended. boolean schedule An optional object. Configures the time - when the rule works. Described above . JSON object extended_params An optional object. Specified for concrete rule type. See rule types . JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule\": {\"description\": \"\", \"type\": \"work_status_change\", \"primary_text\": \"status changed\", \"secondary_text\": \"\", \"alerts\": {\"push_enabled\": true, \"emails\": [\"example@gmail.com\"], \"emergency\": false, \"sms_phones\": [\"745494878945\"], \"phones\": []}, \"suspended\": \"\", \"name\": \"Status changing\", \"trackers\": [123456], \"extended_params\": {\"emergency\": false, \"zone_limit_inverted\": false, \"append_zone_title\": \"\", \"status_ids\": [319281,319282,319283]}, \"param\": \"\", \"schedule\": [{\"from\": {\"weekday\": 1, \"time\": \"00:00:00\"}, \"to\": {\"weekday\": 7, \"time\": \"23:59:59\"}, \"type\": \"weekly\"}], \"zone_ids\": [], \"group_id\": 1}}' Response \u00b6 { \"success\" : true , \"id\" : 123 } id - int. An ID of created rule. Errors \u00b6 204 - Entity not found \u2013 when associated zone is not exist. delete \u00b6 Deletes rule with rule_id and all related objects from the database. required sub-user rights: tracker_rule_update . Parameters \u00b6 name description type rule_id ID of a rule. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule_id\": 123}' HTTP GET https://api.navixy.com/v2/tracker/rule/delete?hash=a6aa75587e5c59c32d347da438505fc3&rule_id=123 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if rule with rule_id does not exist or owned by other user. list \u00b6 List tracker rules bound to tracker with an ID= tracker_id or all users' tracker rules if tracker_id not passed. Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' HTTP GET https://api.navixy.com/v2/tracker/rule/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 667281 , \"name\" : \"Case intrusion\" , \"type\" : \"case_intrusion\" , \"description\" : \"This rule was created automatically\" , \"zone_id\" : 0 , \"trackers\" : [ 10029448 , 10030168 ], \"primary_text\" : \"Case is opened\" , \"secondary_text\" : \"Case is closed\" , \"param\" : 0 , \"alerts\" : { \"sms_phones\" : [], \"phones\" : [], \"emails\" : [], \"push_enabled\" : true }, \"suspended\" : false , \"auto_created\" : true , \"schedule\" : [{ \"type\" : \"weekly\" , \"from\" : { \"weekday\" : 1 , \"time\" : \"00:00:00\" }, \"to\" : { \"weekday\" : 7 , \"time\" : \"23:59:59\" }, \"interval_id\" : 46892 }] }] } list - list of rules unbind \u00b6 Unbinds trackers from rule with rule_id . required sub-user rights: tracker_rule_update . Parameters \u00b6 name description type rule_id ID of a rule. int trackers IDs of trackers. Trackers which do not exist, owned by other user or deleted ignored without errors. int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/unbind' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule_id\": 123, \"trackers\": [265489]}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if rule with rule_id does not exist or owned by other user. update \u00b6 Updates rule and scheduled intervals. required sub-user rights: tracker_rule_update . Parameters \u00b6 Presented parameters are common for all rules, but there are specific parameters that can be found in rule types . name description type id ID of a rule. You can get IDs using the rule/list call. int name The name of created rule. string description Rule's description. string zone_ids List of zones to bind where the rule will work. Leave it empty if rule should work everywhere. Parameter zone_ids is not allowed for rule offline and required for route and inoutzone rule types (there can be exactly one item). int array trackers List of tracker IDs belong to user for which the rule will work. int array type One of pre-defined types of rules. See rule types . enum param A common parameter that responsible for integer conditions. See rule types . int alerts An object with destinations for notifications. Described above . JSON object suspended Starts and stops tracking the rule. true if the rule suspended. boolean schedule An optional object. Configures the time - when the rule works. Described above . JSON object extended_params An optional object. Specified for concrete rule type. See rule types . JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/rule/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"a6aa75587e5c59c32d347da438505fc3\", \"rule\": {\"id\": 123, \"description\": \"\", \"type\": \"work_status_change\", \"primary_text\": \"status changed\", \"secondary_text\": \"\", \"alerts\": {\"push_enabled\": true, \"emails\": [\"example@gmail.com\"], \"emergency\": false, \"sms_phones\": [\"745494878945\"], \"phones\": []}, \"suspended\": \"\", \"name\": \"Status changing\", \"trackers\": [123456], \"extended_params\": {\"emergency\": false, \"zone_limit_inverted\": false, \"append_zone_title\": \"\", \"status_ids\": [319281,319282,319283]}, \"param\": \"\", \"schedule\": [{\"from\": {\"weekday\": 1, \"time\": \"00:00:00\"}, \"to\": {\"weekday\": 7, \"time\": \"23:59:59\"}, \"type\": \"weekly\"}], \"zone_ids\": [], \"group_id\": 1}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if rule is not exists or owned by other user. 204 - Entity not found \u2013 when new associated zone is not exists.","title":"Rule"},{"location":"backend-api/resources/tracking/tracker/rules/rule/#rule","text":"Contains API calls to interact with tracker's rules. Rules used to set up conditions according to which the system logs the events and sends notifications to user. Described creation and using rules step-by-step in the guide .","title":"Rule"},{"location":"backend-api/resources/tracking/tracker/rules/rule/#rule-object","text":"{ \"id\" : 668054 , \"name\" : \"Lock is opened/closed\" , \"type\" : \"locking_unlocking\" , \"description\" : \"This rule was created automatically\" , \"zone_ids\" : [ 18928 ], \"trackers\" : [ 10029750 , 10030168 , 10031971 ], \"primary_text\" : \"Lock is opened\" , \"secondary_text\" : \"Lock is closed\" , \"param\" : 0 , \"alerts\" : { \"sms_phones\" : [], \"phones\" : [], \"emails\" : [], \"push_enabled\" : true }, \"suspended\" : false , \"auto_created\" : true , \"schedule\" : [{ \"type\" : \"weekly\" , \"from\" : { \"weekday\" : 1 , \"time\" : \"00:00:00\" }, \"to\" : { \"weekday\" : 7 , \"time\" : \"23:59:59\" }, \"interval_id\" : 48732 }], \"extended_params\" : { \"emergency\" : false , \"zone_limit_inverted\" : false , \"private_rule\" : true } } id - int. An ID of a rule. name - string. Name of a rule. type - enum. One of pre-defined types of rules. See rule types . description - string. Rule's description. zone_ids - int array. List of geofence IDs. trackers - int array. List of bound tracker IDs. primary_text - string. Primary text of rule notification. secondary_text - string. Secondary text of rule notification. param - int. A common parameter. See rule types . alerts - object with destinations for notifications. sms_phones - string array. Phones for SMS notifications. phones - string array. Phones for voice calls. emails - string array. Emails for notifications. push_enabled - boolean. If true push notifications available. emergency - boolean. If true notifications will be marked as emergency with color and sound. suspended - boolean. true if the rule suspended. auto_created - optional, boolean. true means that the rule created automatically. shedule - optional object. The rule will work in specified period. extended_params - optional. An object specified for concrete rule type. See rule types . schedule_interval is one of: weekly_schedule_interval { \"type\" : \"weekly\" , \"from\" : { \"weekday\" : 1 , \"time\" : \"00:00:00\" }, \"to\" : { \"weekday\" : 7 , \"time\" : \"23:59:59\" }, \"interval_id\" : 1 } * fixed_schedule_interval { \"type\" : \"fixed\" , \"from\" : \"2014-07-09 07:50:58\" , \"to\" : \"2014-07-10 07:50:58\" , \"interval_id\" : 3 } date/time and local_time types described at the data types description section .","title":"Rule object"},{"location":"backend-api/resources/tracking/tracker/rules/rule/#api-actions","text":"API base path: /tracker/rule .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/rules/rule/#bind","text":"Binds rule with rule_id to trackers list. required sub-user rights: tracker_rule_update .","title":"bind"},{"location":"backend-api/resources/tracking/tracker/rules/rule/#create","text":"Creates rule and scheduled intervals. required sub-user rights: tracker_rule_update .","title":"create"},{"location":"backend-api/resources/tracking/tracker/rules/rule/#delete","text":"Deletes rule with rule_id and all related objects from the database. required sub-user rights: tracker_rule_update .","title":"delete"},{"location":"backend-api/resources/tracking/tracker/rules/rule/#list","text":"List tracker rules bound to tracker with an ID= tracker_id or all users' tracker rules if tracker_id not passed.","title":"list"},{"location":"backend-api/resources/tracking/tracker/rules/rule/#unbind","text":"Unbinds trackers from rule with rule_id . required sub-user rights: tracker_rule_update .","title":"unbind"},{"location":"backend-api/resources/tracking/tracker/rules/rule/#update","text":"Updates rule and scheduled intervals. required sub-user rights: tracker_rule_update .","title":"update"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/","text":"Rule types \u00b6 Rule types with all parameters to create. The rule availability depends on the device, connected and configured equipment and rule integration for it. Geofence entrance or exit \u00b6 A rule that triggers on device entering/exiting created on platform geofences . Parameters \u00b6 name description type type inoutzone for this rule type. enum primary_text Text of rule notification on entering geofence. It is for inzone event type. string secondary_text Text of rule notification on exiting geofence. It is for outzone event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean append_zone_title Show or not the zone labels in a notification text. boolean Parking state detection \u00b6 A rule that triggers on detection of parking state calculated based on parking detection settings . Parameters \u00b6 name description type type track_change for this rule type. enum primary_text Text of rule notification on parking start. It is for track_end event type. string secondary_text Text of rule notification on parking end. It is for track_start event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean Speeding (hardware related) \u00b6 A rule that triggers on speed exceeding determined by hardware. Based on the configs on the device side. Parameters \u00b6 name description type type over_speed_reported for this rule type. enum primary_text Text of rule notification when speeding detected. It is for over_speed_reported event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Speeding (platform related) \u00b6 A rule that triggers on speed exceeding determined by the platform. Based on received speed from device. Parameters \u00b6 name description type type speedup for this rule type. enum param Speed limit. It is for speedup event type. int primary_text Text of rule notification when speed exceeds the specified param value. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Deviation from the route \u00b6 A rule that triggers on deviations from the route. Only the route (sausage) type geofence may be assigned. Parameters \u00b6 name description type type route for this rule type. enum primary_text Text of rule notification when device outs the route zone. It is for outroute event type. string extended parameters \u00b6 name description type allow_exit_at_endpoints If true disables notifications on deviations from the start and end points of a route. boolean emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean append_zone_title Show or not the zone labels in a notification text. boolean Driving time \u00b6 A rule that triggers when your employee drives more than allowed. The driving time is calculated based on parking detection settings . Parameters \u00b6 name description type type excessive_driving for this rule type. enum primary_text Text of rule notification when driving time exceeded. It is for excessive_driving_start event type. string secondary_text Text of rule notification on driving time exceeding end. It is for excessive_driving_end event type. string extended parameters \u00b6 name description type max_driving_time Allowed driving time. How much time your employee can drive a car int min_parking_time Minimum parking time to reset the timer. How much time your employee must wait until he can continue driving int emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Parking time \u00b6 A rule that triggers when your employee standstill more than allowed. The parking time is calculated based on parking detection settings . Parameters \u00b6 name description type type excessive_parking for this rule type. enum primary_text Text of rule notification when parking time exceeded. It is for excessive_parking event type. string secondary_text Text of rule notification on parking time exceeding end. It is for excessive_parking_finished event type. string extended parameters \u00b6 name description type max_parking_duration Allowed parking time. How much time a car can standstill int emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Task performance \u00b6 A rule that triggers when assigned to a tracker task changes its status. Parameters \u00b6 name description type type task_status_change for this rule type. enum primary_text Text of rule notification when task changes its status to a chosen one or form is submitted or resubmitted. string extended parameters \u00b6 name description type statuses List of tracked statuses. Possible statuses are \"arrived\", \"done\",\"delayed\", \"failed\". string array on_form_submission If true form submission will track. boolean on_repeated_form_submission If true form resubmission will track. boolean emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Work status change \u00b6 A rule that triggers when tracker work status changes. Choose specific status IDs from a currently assigned to tracker status listing . Parameters \u00b6 name description type type work_status_change for this rule type. enum primary_text Text of rule notification when work status changes to a chosen one. It is for work_status_change event type. string extended parameters \u00b6 name description type status_ids List of tracked status IDs. Choose specific status IDs from a currently assigned to tracker status listing . int array emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Excessive idling (hardware related) \u00b6 A rule that triggers on excessive idling registered by hardware. Based on the configs on the device side. Parameters \u00b6 name description type type idling for this rule type. enum primary_text Text of rule notification when excessive idling detected by device. string secondary_text Text of rule notification when excessive idling end detected by a device. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Excessive idling (platform related) \u00b6 A rule that triggers on excessive idling registered by the platform. The idling time is calculated based on parking detection settings and ignition state. Parameters \u00b6 name description type type idling_soft for this rule type. enum primary_text Text of rule notification when excessive idling detected by platform. It is for idle_start event type. string secondary_text Text of rule notification when excessive idling end detected by platform. It is for idle_end event type. string param Idle duration to send notification. int extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Fuel level change \u00b6 Rule triggered by a drastic change in fuel level. A drastic change is when the fuel level changes faster than the accuracy of the sensor in a span of ten minutes. Parameters \u00b6 name description type type fuel_level_leap for this rule type. enum primary_text Text of rule notification on drastically fuel level increase. It is for fueling event type. string secondary_text Text of rule notification on drastically fuel level decrease. It is for drain event type. string extended parameters \u00b6 name description type sensor_id ID of tracked sensor. Should be a fuel level sensor. Only specified if tracker_params is not specified. int emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean tracker_params An optional object. Specifies a list of sensors to be tracked in the rule, including for different trackers. JSON object tracker_params \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int sensor_id ID of tracked sensor. Should be a fuel level sensor. int { \"tracker_params\" : [ { \"tracker_id\" : 10038820 , \"sensor_id\" : 279421 }, { \"tracker_id\" : 10038821 , \"sensor_id\" : 279422 } ] } Harsh driving \u00b6 A rule that triggers on harsh driving. Based on the configs on the device side. Parameters \u00b6 name description type type harsh_driving for this rule type. enum primary_text Text of rule notification when device detects harsh driving. It is for harsh_driving event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Advanced driver assistance systems (ADAS) \u00b6 A rule that triggers on warnings from driver-assistance systems (ADAS). Detected by camera and based on the configs on the device side. Parameters \u00b6 name description type type driver_assistance for this rule type. enum primary_text Text of rule notification when device detects some of chosen ADAS events. string extended parameters \u00b6 name description type lane_departure_enabled If true lane departure tracked. It is for lane_departure event type. boolean forward_collision_enabled If true forward collision tracked. It is for forward_collision_warning event type. boolean headway_warning_enabled If true headway warning tracked. It is for headway_warning event type. boolean peds_in_danger_zone_enabled If true peds in danger zone tracked. It is for peds_in_danger_zone event type. boolean peds_collision_warning_enabled If true peds collision warning works. It is for peds_collision_warning event type. boolean traffic_sign_recognition_enabled If true traffic sign recognition works. It is for tsr_warning event type. boolean emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Auto geofencing (unauthorized movement detected by location change) \u00b6 A rule that triggers on auto geofencing. When a car's ignition is off, and it outs the automatically created radius around it. Parameters \u00b6 name description type type auto_geofence for this rule type. enum primary_text Text of rule notification when device outs automatically created geofence around it. It is for auto_geofence_out event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Autocontrol related rules \u00b6 Autocontrol related tracked rules like alarm, battery, doors and others. Based on the configs on the device side. Parameters \u00b6 name description type type autocontrol for this rule type. enum primary_text Text of rule notification when device determines one of chosen autocontrol related rules. string extended parameters \u00b6 name description type alarmcontrol Activation of car alarms. It is for alarmcontrol event type. Described below. JSON object battery_off Disabling of external power supply. It is for battery_off event type. Described below. JSON object door_alarm Opening doors/trunk. It is for door_alarm event type. Described below. JSON object hood_alarm Opening hood. It is for hood_alarm event type. Described below. JSON object ignition Ignition. It is for ignition event type. Described below. JSON object parking Unauthorized movement. It is for parking event type. Described below. JSON object gsm_damp GSM-signal dumping (low signal level). It is for gsm_damp event type. Described below. JSON object security_control Switching ON/OFF security mode. It is for security_control event type. Described below. JSON object emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Map of sub-rules settings { \"alarmcontrol\" : { \"enabled\" : true , \"sms\" : false , \"call\" : false , \"email\" : true , \"push\" : true , \"always_notify\" : false }, \"battery_off\" : { \"enabled\" : true , \"sms\" : true , \"call\" : false , \"email\" : true , \"push\" : true }, \"door_alarm\" : { \"enabled\" : true , \"sms\" : false , \"call\" : false , \"email\" : true , \"push\" : true }, \"hood_alarm\" : { \"enabled\" : true , \"sms\" : false , \"call\" : false , \"email\" : true , \"push\" : true }, \"ignition\" : { \"enabled\" : true , \"sms\" : false , \"call\" : false , \"email\" : true , \"push\" : true }, \"parking\" : { \"enabled\" : true , \"sms\" : false , \"call\" : false , \"email\" : true , \"push\" : true }, \"gsm_damp\" : { \"enabled\" : true , \"sms\" : false , \"call\" : false , \"email\" : true , \"push\" : true }, \"security_control\" : { \"enabled\" : true , \"sms\" : false , \"call\" : false , \"email\" : true , \"push\" : true } } Car crash \u00b6 A rule that triggers when device's sensors detect car crash. Based on the configs on the device side. Parameters \u00b6 name description type type crash_alarm for this rule type. enum primary_text Text of rule notification when device determines crash by its accelerometer. It is for crash_alarm event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Cruise control switched ON/OFF \u00b6 A rule that triggers when a device provides cruise control switching event. Based on the configs on the device side. Parameters \u00b6 name description type type cruise_control for this rule type. enum primary_text Text of rule notification when cruise control switch on. It is for cruise_control_on event type. string secondary_text Text of rule notification when cruise control switch off. It is for cruise_control_off event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Distance between objects \u00b6 A rule that triggers a change in distance between objects. The distance is measured by the last valid GPS coordinates between chosen objects. Parameters \u00b6 name description type type distance_control for this rule type. enum primary_text Text of rule notification when distance is breached. It is for distance_breached event type. string secondary_text Text of rule notification when distance is restored. It is for distance_restored event type. string extended parameters \u00b6 name description type observed_trackers List of observed tracker IDs. int array control_type Type of distance control. One of [\"moving_away\", \"approaching\"] . enum control_distance_meters Distance for control in meters. int emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Driver absence \u00b6 A rule that triggers when driver lefts or enters cabin. Detected by camera and based on the configs on the device side. Parameters \u00b6 name description type type driver_enter_absence for this rule type. enum primary_text Text of rule notification when driver lefts a cabin. It is for driver_absence event type. string secondary_text Text of rule notification when driver enters a cabin. It is for driver_enter event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Driver change \u00b6 A rule that triggers on driver change automatically by the key or manually in widget with driver from a drivers list . Parameters \u00b6 name description type type driver_change for this rule type. enum primary_text Text of rule notification when a new driver assigned to a device. It is for driver_changed event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Driver distraction \u00b6 A rule that triggers when driver distracts from the road. Detected by camera and based on the configs on the device side. Parameters \u00b6 name description type type driver_distraction for this rule type. enum primary_text Text of rule notification when driver distraction detected. It is for driver_distraction_started event type. string secondary_text Text of rule notification when driver distraction ends. It is for driver_distraction_finished event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Fall detection \u00b6 A rule that triggers when g-sensor or accelerometer detects falling. Parameters \u00b6 name description type type g_sensor for this rule type. enum primary_text Text of rule notification when g-sensor detects falling. It is for g_sensor event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Fatigue driving \u00b6 A rule that triggers on fatigue driving. Detected by camera and based on the configs on the device side. Parameters \u00b6 name description type type fatigue_driving for this rule type. enum primary_text Text of rule notification when fatigue driving is detected. It is for fatigue_driving event type. string secondary_text Text of rule notification when fatigue driving ends. It is for fatigue_driving_finished event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Identification via RFID/iButton/Camera \u00b6 A rule that triggers on a driver identification with help of RFID, iButton or Camera. Based on the configs on the device side. Parameters \u00b6 name description type type driver_identification for this rule type. enum primary_text Text of rule notification when the driver tag has been identified. It is for driver_identified event type. string secondary_text Text of rule notification when the driver tag was not identified. It is for driver_not_identified event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean No movement \u00b6 A rule that triggers when the device does not detect motion for longer than the time set in its settings. Based on the configs on the device side. Parameters \u00b6 name description type type no_movement for this rule type. enum primary_text Text of rule notification when a device does not detect motion for longer than the time set in its settings. It is for no_movement event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Pressing SOS button \u00b6 A rule that triggers on SOS button pressing. Based on the configs on the device side. Parameters \u00b6 name description type type sos for this rule type. enum primary_text Text of rule notification when SOS button pressed. It is for sos event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Social distancing monitoring \u00b6 A rule that triggers on social distancing violation. Similar to distance between objects but related based on the configs on the device side. Parameters \u00b6 name description type type proximity_violation for this rule type. enum primary_text Text of rule notification when safety distance breached. It is for proximity_violation_start event type. string secondary_text Text of rule notification when safety distance restored. It is for proximity_violation_end event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Unauthorized movement (determined by accelerometer) \u00b6 A rule that triggers on unauthorized movement detected by accelerometer when ignition is off. Based on the configs on the device side. Parameters \u00b6 name description type type parking for this rule type. enum primary_text Text of rule notification when movement detected by device's accelerometer. It is for parking event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Backup battery low \u00b6 A rule that triggers on backup battery low. Based on the configs on the device side. Parameters \u00b6 name description type type backup_battery_low for this rule type. enum primary_text Text of rule notification when backup battery charge is low. It is for backup_battery_low event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Bracelet sensor \u00b6 A rule that triggers on bracelet sensor opening/closing. Based on the configs on the device side. Parameters \u00b6 name description type type bracelet for this rule type. enum primary_text Text of rule notification when bracelet opened. It is for bracelet_open event type. string secondary_text Text of rule notification when bracelet closed. It is for bracelet_close event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Call button pressed \u00b6 A rule that triggers on call button pressing. Based on the configs on the device side. Parameters \u00b6 name description type type call_button_pressed for this rule type. enum primary_text Text of rule notification when call button pressed. It is for call_button_pressed event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Car alarm triggered \u00b6 A rule that triggers on car alarm. Based on the configs on the device side. Parameters \u00b6 name description type type alarmcontrol for this rule type. enum primary_text Text of rule notification when car alarm triggers. It is for alarmcontrol event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Case intrusion \u00b6 A rule that triggers on case intrusion. Based on the configs on the device side. Parameters \u00b6 name description type type case_intrusion for this rule type. enum primary_text Text of rule notification when device determines case intrusion. It is for case_opened event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Check engine (MIL) \u00b6 A rule that triggers on check engine (MIL) events. Based on the configs on the device side. Parameters \u00b6 name description type type check_engine_light for this rule type. enum primary_text Text of rule notification when check engine (MIL) detected by a device. It is for check_engine_light event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Connection/disconnection to the OBDII port \u00b6 A rule that triggers on connection/disconnection to the OBD2 port. Based on the configs on the device side. Parameters \u00b6 name description type type obd_plug_unplug for this rule type. enum primary_text Text of rule notification when device connected to OBDII port. It is for obd_plug_in event type. string secondary_text Text of rule notification when device disconnected from OBDII port. It is for obd_unplug event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Door opening in alarm mode \u00b6 A rule that triggers on door opening in alarm mode. Based on the configs on the device side. Parameters \u00b6 name description type type door_alarm for this rule type. enum primary_text Text of rule notification when door opens in alarm mode. It is for door_alarm event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean External device connection \u00b6 A rule that triggers on connection/disconnection of an external device. Based on the configs on the device side. Parameters \u00b6 name description type type external_device_connection for this rule type. enum primary_text Text of rule notification when external device connected to tracker. It is for external_device_connected event type. string secondary_text Text of rule notification when external device disconnected from tracker. It is for external_device_disconnected event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean External power cut \u00b6 A rule that triggers when device disconnects from car's battery. Based on the configs on the device side. Parameters \u00b6 name description type type battery_off for this rule type. enum primary_text Text of rule notification when external power disconnects. It is for battery_off event type. string secondary_text Text of rule notification when external power connects. It is for battery_on event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean GPS antenna disconnected \u00b6 A rule that triggers on GPS antenna disconnect. Based on the configs on the device side. Parameters \u00b6 name description type type antenna_disconnect for this rule type. enum primary_text Text of rule notification when device determines GPS antenna disconnection. It is for antenna_disconnect event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean GPS jamming (signal dump) \u00b6 A rule that triggers when device determines GPS jamming. Based on the configs on the device side. Parameters \u00b6 name description type type gps_damp for this rule type. enum primary_text Text of rule notification when device determines GPS jamming. It is for gps_damp event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean GPS signal lost/recover \u00b6 A rule that triggers on GPS signal lost/recover. Based on the configs on the device side. Parameters \u00b6 name description type type gps_lost_recover for this rule type. enum primary_text Text of rule notification when GPS signal lost. It is for gps_lost event type. string secondary_text Text of rule notification when GPS signal recovers. It is for gps_recover event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean GSM jamming (signal dump) \u00b6 A rule that triggers on GSM jamming. Based on the configs on the device side. Parameters \u00b6 name description type type gsm_damp for this rule type. enum primary_text Text of rule notification when device determines GSM jamming. It is for gsm_damp event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Hood opening in alarm mode \u00b6 A rule that triggers on hood opening in alarm mode. Based on the configs on the device side. Parameters \u00b6 name description type type hood_alarm for this rule type. enum primary_text Text of rule notification when hood opens in alarm mode. It is for hood_alarm event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Ignition start in alarm mode \u00b6 A rule that triggers on ignition start in alarm mode. This rule is not related to usual ignition status change. Based on the configs on the device side. Parameters \u00b6 name description type type ignition for this rule type. enum primary_text Text of rule notification when ignition starts in alarm mode. It is for ignition event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Light sensor \u00b6 A rule that triggers on when light sensor detects bright/dark environment. Based on the configs on the device side. Parameters \u00b6 name description type type light_sensor for this rule type. enum primary_text Text of rule notification when environment bright. It is for light_sensor_bright event type. string secondary_text Text of rule notification when environment dark. It is for light_sensor_dark event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Location report on demand \u00b6 A rule that triggers on location requests. Parameters \u00b6 name description type type location_response for this rule type. enum primary_text Text of rule notification when location is requested manually from device. It is for location_response event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Locking/unlocking (padlock) \u00b6 A rule that triggers on locking/unlocking(padlock). Based on the configs on the device side. Parameters \u00b6 name description type type locking_unlocking for this rule type. enum primary_text Text of rule notification when lock opens. It is for lock_opened event type. string secondary_text Text of rule notification when lock closes. It is for lock_closed event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Low battery \u00b6 A rule that triggers on low internal battery. Based on the device's battery voltage and value specified for the model on the platform. Parameters \u00b6 name description type type lowpower for this rule type. enum primary_text Text of rule notification when device's battery charge is low. It is for lowpower event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Padlock tampering \u00b6 A rule that triggers on padlock tampering. Based on the configs on the device side. Parameters \u00b6 name description type type strap_bolt for this rule type. enum primary_text Text of rule notification when padlock has been forced. It is for strap_bolt_cut event type. string secondary_text Text of rule notification when padlock has been installed. It is for strap_bolt_ins event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Tracker detach from the objects \u00b6 A rule that triggers when someone detach tracker from the object. Based on the configs on the device side. Parameters \u00b6 name description type type detach for this rule type. enum primary_text Text of rule notification when device determines detach from the object. It is for detach event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Tracker switch ON/OFF \u00b6 A rule that triggers on tracker switch ON/OFF. Based on the configs on the device side. Parameters \u00b6 name description type type on_off for this rule type. enum primary_text Text of rule notification when tracker switched off. It is for poweroff event type. string secondary_text Text of rule notification when tracker switched on. It is for poweron event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Tracker switched OFF or lost connection \u00b6 A rule that triggers when tracker loses connection with the server - gets red offline status and keeps it for X minutes. Parameters \u00b6 name description type type offline for this rule type. enum primary_text Text of rule notification when tracker switched off or lost connection. It is for gps_lost event type. string secondary_text Text of rule notification when tracker switched on or connection restored. It is for gps_recover event type. string param Offline time to notification in minutes. int extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean Tracker switched ON \u00b6 A rule that triggers on tracker switch ON. Based on the configs on the device side. Parameters \u00b6 name description type type poweron for this rule type. enum primary_text Text of rule notification when tracker switches on. It is for poweroff event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Vibration sensor \u00b6 A rule that triggers when vibration sensor determines vibration. Based on the configs on the device side. Parameters \u00b6 name description type type vibration for this rule type. enum primary_text Text of rule notification when vibration starts. It is for vibration_start event type. string secondary_text Text of rule notification when vibration ends. It is for vibration_end event type. string extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Inputs triggering. \u00b6 A rule that triggers when the input state changes. Parameters \u00b6 name description type type input_change for this rule type. Both events for switch on/off will have input_change event type. enum primary_text Text of rule notification when input switches on. string secondary_text Text of rule notification when input switches off. string param Discrete input number. int extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Outputs triggering \u00b6 A rule that triggers when the output state changes. Parameters \u00b6 name description type type output_change for this rule type. Both events for switch on/off will have output_change event type. enum primary_text Text of rule notification when output switches on. string secondary_text Text of rule notification when output switches off. string param Output number. int extended parameters \u00b6 name description type emergency If true enables emergency notification. boolean private_rule Affects only sub users. If true then the rule and notifications are visible only to sub user. boolean zone_limit_inverted The rule tracked inside of zones if false or outside if true . Default is: false . boolean append_zone_title Show or not the zone labels in a notification text. Must be null or false if the zone_limit_inverted param set to true . boolean Parameter in range \u00b6 A rule that triggers when value of a chosen measurement sensor gets into or out of specified range. One rule per one sensor and device. Parameters \u00b6 name description type type sensor_range for this rule type. enum primary_text Text of rule notification when sensor value goes out range. It is for sensor_outrange event type. string secondary_text Text of rule notification when sensor value goes into range. It is for sensor_inrange event type. string extended parameters \u00b6 name description type sensor_id ID of a tracked sensor. Only specified if tracker_params is not specified. int threshold A threshold for a sensor. If the parameter is omitted or null, the default value 0.03 is used. Ignored if tracker_params is specified. double min A minimum range value. Ignored if tracker_params is specified. double max A maximum range value. Ignored if tracker_params is specified. double tracker_params An optional object. Specifies a list of parameters to be tracked in the rule, including for different trackers. JSON object tracker_params \u00b6 name description type sensor_id ID of a tracked sensor. int threshold A threshold for a sensor. If the parameter is omitted or null, the default value 0.03 is used. double min A minimum range value. double max A maximum range value. double Example: { \"tracker_params\" : [{ \"tracker_id\" : 10181445 , \"trigger_value\" : \"1\" , \"state_field\" : \"ble_magnet_sensor_3\" }, { \"tracker_id\" : 10181446 , \"trigger_value\" : \"1\" , \"virtual_sensor_id\" : 21212 } ] } State field value \u00b6 A rule that triggers when specified value of a chosen state field sensor detected. Parameters \u00b6 name description type type state_field_control for this rule type. enum primary_text Text of rule notification when state field determines chosen value. It is for state_field_control event type. string extended parameters \u00b6 name description type allow_repeat Allows notification repeating even if state field value doesn't change. bool repeat_delay_seconds How many seconds must pass with the same value before notification will be generated again. int trigger_value Expected value to trigger the rule. Only specified if tracker_params is not specified. string state_field State field code. Only specified if virtual_sensor_id and tracker_params are not specified. enum virtual_sensor_id ID of virtual sensor. Only specified if state_field and tracker_params are not specified. int tracker_params An optional object. Specifies a list of parameters to be tracked in the rule, including for different trackers. JSON object tracker_params \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int trigger_value Expected value to trigger the rule. string state_field State field code. Only specified if virtual_sensor_id is not specified. enum virtual_sensor_id ID of virtual sensor. Only specified if state_field is not specified. int { \"tracker_params\" : [{ \"tracker_id\" : 10181445 , \"trigger_value\" : \"1\" , \"state_field\" : \"ble_magnet_sensor_3\" }, { \"tracker_id\" : 10181446 , \"trigger_value\" : \"1\" , \"virtual_sensor_id\" : 21212 } ] }","title":"Rule Types"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#rule-types","text":"Rule types with all parameters to create. The rule availability depends on the device, connected and configured equipment and rule integration for it.","title":"Rule types"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#geofence-entrance-or-exit","text":"A rule that triggers on device entering/exiting created on platform geofences .","title":"Geofence entrance or exit"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#parking-state-detection","text":"A rule that triggers on detection of parking state calculated based on parking detection settings .","title":"Parking state detection"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#speeding-hardware-related","text":"A rule that triggers on speed exceeding determined by hardware. Based on the configs on the device side.","title":"Speeding (hardware related)"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#speeding-platform-related","text":"A rule that triggers on speed exceeding determined by the platform. Based on received speed from device.","title":"Speeding (platform related)"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#deviation-from-the-route","text":"A rule that triggers on deviations from the route. Only the route (sausage) type geofence may be assigned.","title":"Deviation from the route"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#driving-time","text":"A rule that triggers when your employee drives more than allowed. The driving time is calculated based on parking detection settings .","title":"Driving time"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#parking-time","text":"A rule that triggers when your employee standstill more than allowed. The parking time is calculated based on parking detection settings .","title":"Parking time"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#task-performance","text":"A rule that triggers when assigned to a tracker task changes its status.","title":"Task performance"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#work-status-change","text":"A rule that triggers when tracker work status changes. Choose specific status IDs from a currently assigned to tracker status listing .","title":"Work status change"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#excessive-idling-hardware-related","text":"A rule that triggers on excessive idling registered by hardware. Based on the configs on the device side.","title":"Excessive idling (hardware related)"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#excessive-idling-platform-related","text":"A rule that triggers on excessive idling registered by the platform. The idling time is calculated based on parking detection settings and ignition state.","title":"Excessive idling (platform related)"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#fuel-level-change","text":"Rule triggered by a drastic change in fuel level. A drastic change is when the fuel level changes faster than the accuracy of the sensor in a span of ten minutes.","title":"Fuel level change"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#harsh-driving","text":"A rule that triggers on harsh driving. Based on the configs on the device side.","title":"Harsh driving"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#advanced-driver-assistance-systems-adas","text":"A rule that triggers on warnings from driver-assistance systems (ADAS). Detected by camera and based on the configs on the device side.","title":"Advanced driver assistance systems (ADAS)"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#auto-geofencing-unauthorized-movement-detected-by-location-change","text":"A rule that triggers on auto geofencing. When a car's ignition is off, and it outs the automatically created radius around it.","title":"Auto geofencing (unauthorized movement detected by location change)"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#autocontrol-related-rules","text":"Autocontrol related tracked rules like alarm, battery, doors and others. Based on the configs on the device side.","title":"Autocontrol related rules"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#car-crash","text":"A rule that triggers when device's sensors detect car crash. Based on the configs on the device side.","title":"Car crash"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#cruise-control-switched-onoff","text":"A rule that triggers when a device provides cruise control switching event. Based on the configs on the device side.","title":"Cruise control switched ON/OFF"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#distance-between-objects","text":"A rule that triggers a change in distance between objects. The distance is measured by the last valid GPS coordinates between chosen objects.","title":"Distance between objects"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#driver-absence","text":"A rule that triggers when driver lefts or enters cabin. Detected by camera and based on the configs on the device side.","title":"Driver absence"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#driver-change","text":"A rule that triggers on driver change automatically by the key or manually in widget with driver from a drivers list .","title":"Driver change"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#driver-distraction","text":"A rule that triggers when driver distracts from the road. Detected by camera and based on the configs on the device side.","title":"Driver distraction"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#fall-detection","text":"A rule that triggers when g-sensor or accelerometer detects falling.","title":"Fall detection"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#fatigue-driving","text":"A rule that triggers on fatigue driving. Detected by camera and based on the configs on the device side.","title":"Fatigue driving"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#identification-via-rfidibuttoncamera","text":"A rule that triggers on a driver identification with help of RFID, iButton or Camera. Based on the configs on the device side.","title":"Identification via RFID/iButton/Camera"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#no-movement","text":"A rule that triggers when the device does not detect motion for longer than the time set in its settings. Based on the configs on the device side.","title":"No movement"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#pressing-sos-button","text":"A rule that triggers on SOS button pressing. Based on the configs on the device side.","title":"Pressing SOS button"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#social-distancing-monitoring","text":"A rule that triggers on social distancing violation. Similar to distance between objects but related based on the configs on the device side.","title":"Social distancing monitoring"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#unauthorized-movement-determined-by-accelerometer","text":"A rule that triggers on unauthorized movement detected by accelerometer when ignition is off. Based on the configs on the device side.","title":"Unauthorized movement (determined by accelerometer)"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#backup-battery-low","text":"A rule that triggers on backup battery low. Based on the configs on the device side.","title":"Backup battery low"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#bracelet-sensor","text":"A rule that triggers on bracelet sensor opening/closing. Based on the configs on the device side.","title":"Bracelet sensor"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#call-button-pressed","text":"A rule that triggers on call button pressing. Based on the configs on the device side.","title":"Call button pressed"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#car-alarm-triggered","text":"A rule that triggers on car alarm. Based on the configs on the device side.","title":"Car alarm triggered"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#case-intrusion","text":"A rule that triggers on case intrusion. Based on the configs on the device side.","title":"Case intrusion"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#check-engine-mil","text":"A rule that triggers on check engine (MIL) events. Based on the configs on the device side.","title":"Check engine (MIL)"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#connectiondisconnection-to-the-obdii-port","text":"A rule that triggers on connection/disconnection to the OBD2 port. Based on the configs on the device side.","title":"Connection/disconnection to the OBDII port"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#door-opening-in-alarm-mode","text":"A rule that triggers on door opening in alarm mode. Based on the configs on the device side.","title":"Door opening in alarm mode"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#external-device-connection","text":"A rule that triggers on connection/disconnection of an external device. Based on the configs on the device side.","title":"External device connection"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#external-power-cut","text":"A rule that triggers when device disconnects from car's battery. Based on the configs on the device side.","title":"External power cut"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#gps-antenna-disconnected","text":"A rule that triggers on GPS antenna disconnect. Based on the configs on the device side.","title":"GPS antenna disconnected"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#gps-jamming-signal-dump","text":"A rule that triggers when device determines GPS jamming. Based on the configs on the device side.","title":"GPS jamming (signal dump)"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#gps-signal-lostrecover","text":"A rule that triggers on GPS signal lost/recover. Based on the configs on the device side.","title":"GPS signal lost/recover"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#gsm-jamming-signal-dump","text":"A rule that triggers on GSM jamming. Based on the configs on the device side.","title":"GSM jamming (signal dump)"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#hood-opening-in-alarm-mode","text":"A rule that triggers on hood opening in alarm mode. Based on the configs on the device side.","title":"Hood opening in alarm mode"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#ignition-start-in-alarm-mode","text":"A rule that triggers on ignition start in alarm mode. This rule is not related to usual ignition status change. Based on the configs on the device side.","title":"Ignition start in alarm mode"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#light-sensor","text":"A rule that triggers on when light sensor detects bright/dark environment. Based on the configs on the device side.","title":"Light sensor"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#location-report-on-demand","text":"A rule that triggers on location requests.","title":"Location report on demand"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#lockingunlocking-padlock","text":"A rule that triggers on locking/unlocking(padlock). Based on the configs on the device side.","title":"Locking/unlocking (padlock)"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#low-battery","text":"A rule that triggers on low internal battery. Based on the device's battery voltage and value specified for the model on the platform.","title":"Low battery"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#padlock-tampering","text":"A rule that triggers on padlock tampering. Based on the configs on the device side.","title":"Padlock tampering"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#tracker-detach-from-the-objects","text":"A rule that triggers when someone detach tracker from the object. Based on the configs on the device side.","title":"Tracker detach from the objects"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#tracker-switch-onoff","text":"A rule that triggers on tracker switch ON/OFF. Based on the configs on the device side.","title":"Tracker switch ON/OFF"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#tracker-switched-off-or-lost-connection","text":"A rule that triggers when tracker loses connection with the server - gets red offline status and keeps it for X minutes.","title":"Tracker switched OFF or lost connection"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#tracker-switched-on","text":"A rule that triggers on tracker switch ON. Based on the configs on the device side.","title":"Tracker switched ON"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#vibration-sensor","text":"A rule that triggers when vibration sensor determines vibration. Based on the configs on the device side.","title":"Vibration sensor"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#inputs-triggering","text":"A rule that triggers when the input state changes.","title":"Inputs triggering."},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#outputs-triggering","text":"A rule that triggers when the output state changes.","title":"Outputs triggering"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#parameter-in-range","text":"A rule that triggers when value of a chosen measurement sensor gets into or out of specified range. One rule per one sensor and device.","title":"Parameter in range"},{"location":"backend-api/resources/tracking/tracker/rules/rule_types/#state-field-value","text":"A rule that triggers when specified value of a chosen state field sensor detected.","title":"State field value"},{"location":"backend-api/resources/tracking/tracker/sensor/","text":"Sensor actions \u00b6 Contains API calls to interact with sensors. Sensor sub-types \u00b6 Metering sensor \u00b6 { \"type\" : \"metering\" , \"id\" : 860250 , \"sensor_type\" : \"temperature\" , \"name\" : \"OBD Coolant temperature\" , \"input_name\" : \"obd_coolant_t\" , \"divider\" : 1.0 , \"accuracy\" : 0.0 , \"units\" : \"\" , \"units_type\" : \"celsius\" , \"parameters\" : { \"parent_ids\" : [ 123042 , 123566 ], \"volume\" : 0.7 , \"min\" : 0.0 , \"max\" : 12.0 , \"max_lowering_by_time\" : 120.0 , \"max_lowering_by_mileage\" : 120.0 , \"ignore_drains_in_move\" : true , \"ignore_refuels_in_move\" : false , \"refuel_gap_minutes\" : 11 } } type - string. Always \"metering\". id - int. Sensor's id. sensor_type - metering sensor type . Type of the sensor. name - string, max size 100. A name of sensor. input_name - string, max size 64. divider - double. accuracy - double. The minimum= 0.0 , maximum= 100.0 with step 0.25 . units - string. units_type - enum . Units type for a sensor. parameters - optional object with additional parameters. parent_ids - optional array of parent_ids for composite sensor. volume - double. Optional. Volume for composite sensor. parent_ids - optional. int array. Array of parent_ids for composite sensor. volume - optional. Double. Volume for composite sensor. min - optional. Double. Min acceptable raw value for a sensor. max - optional. Double. Max acceptable raw value for a sensor. max_lowering_by_time - optional. Double. Max legal value lowering per hour. max_lowering_by_mileage - optional. Double. Max legal value lowering per 100 km. ignore_drains_in_move - optional. Boolean. Default is false. If true, the fuel drains will not be detected during movement. ignore_refuels_in_move - optional. Boolean. Default is false. If true, the refuels will not be detected during movement. refuel_gap_minutes - optional. Integer. Default is 5. Time in minutes after the start of the movement, refuels will be detected during movement. Metering sensor type values \u00b6 fuel temperature rpm custom fuel_consumption instant_consumption power speed flow_meter acceleration Discrete input \u00b6 { \"type\" : \"discrete\" , \"id\" : 888951 , \"sensor_type\" : \"ignition\" , \"name\" : \"Ignition\" , \"input_number\" : 4 } type - string. Always \"discrete\". id - int. An ID of a sensor. sensor_type - discrete sensor type . Type of the sensor. name - string, max size 100. input_number - int, [1..8]. Assigned input number. Discrete sensor type values \u00b6 ignition sos_button power engine car_alarm door charge detach custom Virtual sensor \u00b6 { \"type\" : \"virtual\" , \"id\" : 1700049 , \"sensor_type\" : \"virtual_ignition\" , \"name\" : \"Virtual Ignition\" , \"input_name\" : \"board_voltage\" , \"parameters\" : { \"calc_method\" : \"in_range\" , \"range_from\" : 13.4 , \"value_titles\" : [{ \"value\" : \"0\" , \"title\" : \"Off\" }, { \"value\" : \"1\" , \"title\" : \"On\" }] } } type - string. Always \"virtual\". id - int. Sensor's id. sensor_type - virtual sensor type . Type of the sensor. \"virtual_ignition\" for virtual ignition or \"state\" for others. name - string, max size 100. A name of sensor. input_name - string, max size 64. A source input field name (identifier). parameters - optional object with additional parameters. calc_method - enum . A method of sensor value calculation. One of this: \"in_range\", \"identity\", \"bit_index\". range_from - double. Low bound of range. It is used only with \"in_range\" calc method. range_to - double. High bound of range. It is used only with \"in_range\" calc method. bit_index - int, [1..N]. A bit index in input field source value. It is used only with \"bit_index\" calc method. value_titles - mapping for bind special titles for sensor values, if it is necessary. value - string, max size 64. Sensor value. title - string, max size 64. Title for the sensor value. Virtual sensor type values \u00b6 state virtual_ignition Some requirements: There can be only one virtual sensor with type virtual_ignition for tracker. One or both field range_from and range_to must be present for the calc method \"in_range\". Field bit_index must be present for the calc method \"bit_index\". There can be no more than 100 value titles. All values must be unique within value_titles . Described work with virtual sensors in our instructions . API actions \u00b6 API base path: /tracker/sensor . batch_list \u00b6 List tracker sensors bound to trackers with specified identifiers (parameter trackers ). There exist a similar method for working with a single tracker - list . Parameters \u00b6 Name Description Type trackers Set of tracker identifiers. Each of the relevant trackers must be accessible to the authorized user and not be blocked. Number of trackers (length of array) is limited to a maximum of 500 (this number may be changed in future). int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/sensor/batch_list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"trackers\": [204104, 181451]}' HTTP GET https://api.navixy.com/v2/tracker/sensor/batch_list?hash=a6aa75587e5c59c32d347da438505fc3&trackers=[204104, 181451] Response \u00b6 Contains a map, where keys are IDs from trackers parameter and values are lists of sensor objects. { \"success\" : true , \"result\" : { \"11\" : [ { \"id\" : 1 , \"type\" : \"discrete\" , \"sensor_type\" : \"fuel\" , \"name\" : \"Main tank\" , \"input_name\" : \"fuel_level\" , \"group_type\" : null , \"divider\" : 1 , \"accuracy\" : 0.0 , \"units\" : null , \"units_type\" : \"litre\" } ] } } Errors \u00b6 217 - List contains nonexistent entities - if one of trackers either does not exist or is blocked. 221 - Device limit exceeded - if too many IDs were passed in trackers parameter. create \u00b6 Creates a sensor. required sub-user rights: tracker_update . Parameters \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int sensor Sensor object . JSON object Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/sensor/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"sensor\": {\"type\": \"metering\", \"id\": 860250,\"sensor_type\": \"temperature\", \"name\": \"OBD Coolant temperature\", \"input_name\": \"obd_coolant_t\", \"divider\": 1.0, \"accuracy\": 0.0, \"units\": \"\", \"units_type\": \"celsius\"}' Response \u00b6 { \"success\" : true , \"id\" : 937 } id - int. An ID of created sensor. Errors \u00b6 232 - Input already in use \u2013 if given input number (for discrete input) or input name (for metering sensor) already in use. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions, or some other reason. 219 - Not allowed for clones of the device \u2013 if tracker is clone. 270 - Too many sensors of same type - the number of tracker's sensors, having same sensor_type is limited. delete \u00b6 Deletes a sensor with sensor_id from the database. required sub-user rights: tracker_update . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 sensor_id Sensor ID. int 234567 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/sensor/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"sensor_id\": 23456}' HTTP GET https://api.navixy.com/v2/tracker/sensor/delete?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&sensor_id=23456 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database - if sensor with a sensor_id is not exists or owned by other user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 219 \u2013 Not allowed for clones of the device - if tracker is clone. list \u00b6 List tracker sensors bound to tracker with specified ID ( tracker_id parameter). Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/sensor/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456}' HTTP GET https://api.navixy.com/v2/tracker/sensor/list?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456 Response \u00b6 { \"success\" : true , \"list\" : [{ \"type\" : \"metering\" , \"id\" : 860250 , \"sensor_type\" : \"temperature\" , \"name\" : \"OBD Coolant temperature\" , \"input_name\" : \"obd_coolant_t\" , \"divider\" : 1.0 , \"accuracy\" : 0.0 , \"units\" : \"\" , \"units_type\" : \"celsius\" }] } list - list of sensor objects. See sensor object description. Errors \u00b6 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions, or some other reason. update \u00b6 Updates sensor. required sub-user rights: tracker_update . Parameters \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int sensor Sensor object . JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/sensor/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"sensor\": {\"type\": \"metering\", \"id\": 860250, \"sensor_type\": \"temperature\", \"name\": \"OBD Coolant temperature\", \"input_name\": \"obd_coolant_t\", \"divider\": 1.0, \"accuracy\": 0.0, \"units\": \"\", \"units_type\": \"celsius\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if sensor not exists or owned by other user. 232 - Input already in use \u2013 if given input number (for discrete input) or input name (for metering sensor) already in use. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions, or some other reason. 219 - Not allowed for clones of the device \u2013 if tracker is clone. batch_copy \u00b6 Copies sensors from one tracker to another. Important This operation will delete sensors of target trackers, and some sensor data could be lost! required sub-user rights: tracker_update . Parameters \u00b6 name description type format base_tracker_id ID of the base tracker (aka \"object_id\") from which you want to copy sensors. Tracker must belong to authorized user and not be blocked. int 123456 trackers ID of trackers. Target trackers for copying sensors. [int] [12345, 54321] Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/sensor/batch_copy' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"base_tracker_id\": 123456, \"trackers\": [56789, 54321]}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 272 \u2013 Trackers must have same models - if base tracker and one of target trackers has a different model. data/read \u00b6 Gets all metering or virtual sensor readings with values and time per requested period. It can't be used with discrete sensor. Parameters \u00b6 name description type format tracker_id ID of the base tracker (aka \"object_id\") from which you want to read sensor's data. Tracker must belong to authorized user and not be blocked. int 123456 sensor_id Sensor ID. int 234567 from Start date and time for searching. date/time \"2022-02-28 00:00:00\" to End date and time for searching. Must be after from date. Maximum period is maxReportTimeSpan , default 30 days. date/time \"2022-03-28 23:59:00\" raw_data If true then the response will contain raw data without any calibration and multiplication. Affects only metering sensors. Default value is false for backward compatibility. boolean false Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/sensor/data/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"sensor_id\": 1456789, \"from\": \"2022-02-28 00:00:00\", \"to\": \"2022-03-28 23:59:00\"}' Response \u00b6 { \"success\" : true , \"list\" : [ { \"value\" : 100500 , \"get_time\" : \"2022-02-28 00:00:00\" }, { \"value\" : 100501 , \"get_time\" : \"2022-02-28 00:00:30\" } ] } value - a value of sensor data. It can be double, int or string depending on the sensor type. get_time - time when value was received. Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 211 \u2013 Requested time span is too big - if interval between \"from\" and \"to\" is too big. Maximum period is maxReportTimeSpan . 228 \u2013 Not supported by the sensor - if sensor is not a metering or virtual sensor.","title":"Index"},{"location":"backend-api/resources/tracking/tracker/sensor/#sensor-actions","text":"Contains API calls to interact with sensors.","title":"Sensor actions"},{"location":"backend-api/resources/tracking/tracker/sensor/#sensor-sub-types","text":"","title":"Sensor sub-types"},{"location":"backend-api/resources/tracking/tracker/sensor/#metering-sensor","text":"{ \"type\" : \"metering\" , \"id\" : 860250 , \"sensor_type\" : \"temperature\" , \"name\" : \"OBD Coolant temperature\" , \"input_name\" : \"obd_coolant_t\" , \"divider\" : 1.0 , \"accuracy\" : 0.0 , \"units\" : \"\" , \"units_type\" : \"celsius\" , \"parameters\" : { \"parent_ids\" : [ 123042 , 123566 ], \"volume\" : 0.7 , \"min\" : 0.0 , \"max\" : 12.0 , \"max_lowering_by_time\" : 120.0 , \"max_lowering_by_mileage\" : 120.0 , \"ignore_drains_in_move\" : true , \"ignore_refuels_in_move\" : false , \"refuel_gap_minutes\" : 11 } } type - string. Always \"metering\". id - int. Sensor's id. sensor_type - metering sensor type . Type of the sensor. name - string, max size 100. A name of sensor. input_name - string, max size 64. divider - double. accuracy - double. The minimum= 0.0 , maximum= 100.0 with step 0.25 . units - string. units_type - enum . Units type for a sensor. parameters - optional object with additional parameters. parent_ids - optional array of parent_ids for composite sensor. volume - double. Optional. Volume for composite sensor. parent_ids - optional. int array. Array of parent_ids for composite sensor. volume - optional. Double. Volume for composite sensor. min - optional. Double. Min acceptable raw value for a sensor. max - optional. Double. Max acceptable raw value for a sensor. max_lowering_by_time - optional. Double. Max legal value lowering per hour. max_lowering_by_mileage - optional. Double. Max legal value lowering per 100 km. ignore_drains_in_move - optional. Boolean. Default is false. If true, the fuel drains will not be detected during movement. ignore_refuels_in_move - optional. Boolean. Default is false. If true, the refuels will not be detected during movement. refuel_gap_minutes - optional. Integer. Default is 5. Time in minutes after the start of the movement, refuels will be detected during movement.","title":"Metering sensor"},{"location":"backend-api/resources/tracking/tracker/sensor/#discrete-input","text":"{ \"type\" : \"discrete\" , \"id\" : 888951 , \"sensor_type\" : \"ignition\" , \"name\" : \"Ignition\" , \"input_number\" : 4 } type - string. Always \"discrete\". id - int. An ID of a sensor. sensor_type - discrete sensor type . Type of the sensor. name - string, max size 100. input_number - int, [1..8]. Assigned input number.","title":"Discrete input"},{"location":"backend-api/resources/tracking/tracker/sensor/#virtual-sensor","text":"{ \"type\" : \"virtual\" , \"id\" : 1700049 , \"sensor_type\" : \"virtual_ignition\" , \"name\" : \"Virtual Ignition\" , \"input_name\" : \"board_voltage\" , \"parameters\" : { \"calc_method\" : \"in_range\" , \"range_from\" : 13.4 , \"value_titles\" : [{ \"value\" : \"0\" , \"title\" : \"Off\" }, { \"value\" : \"1\" , \"title\" : \"On\" }] } } type - string. Always \"virtual\". id - int. Sensor's id. sensor_type - virtual sensor type . Type of the sensor. \"virtual_ignition\" for virtual ignition or \"state\" for others. name - string, max size 100. A name of sensor. input_name - string, max size 64. A source input field name (identifier). parameters - optional object with additional parameters. calc_method - enum . A method of sensor value calculation. One of this: \"in_range\", \"identity\", \"bit_index\". range_from - double. Low bound of range. It is used only with \"in_range\" calc method. range_to - double. High bound of range. It is used only with \"in_range\" calc method. bit_index - int, [1..N]. A bit index in input field source value. It is used only with \"bit_index\" calc method. value_titles - mapping for bind special titles for sensor values, if it is necessary. value - string, max size 64. Sensor value. title - string, max size 64. Title for the sensor value.","title":"Virtual sensor"},{"location":"backend-api/resources/tracking/tracker/sensor/#api-actions","text":"API base path: /tracker/sensor .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/sensor/#batch_list","text":"List tracker sensors bound to trackers with specified identifiers (parameter trackers ). There exist a similar method for working with a single tracker - list .","title":"batch_list"},{"location":"backend-api/resources/tracking/tracker/sensor/#create","text":"Creates a sensor. required sub-user rights: tracker_update .","title":"create"},{"location":"backend-api/resources/tracking/tracker/sensor/#delete","text":"Deletes a sensor with sensor_id from the database. required sub-user rights: tracker_update .","title":"delete"},{"location":"backend-api/resources/tracking/tracker/sensor/#list","text":"List tracker sensors bound to tracker with specified ID ( tracker_id parameter).","title":"list"},{"location":"backend-api/resources/tracking/tracker/sensor/#update","text":"Updates sensor. required sub-user rights: tracker_update .","title":"update"},{"location":"backend-api/resources/tracking/tracker/sensor/#batch_copy","text":"Copies sensors from one tracker to another. Important This operation will delete sensors of target trackers, and some sensor data could be lost! required sub-user rights: tracker_update .","title":"batch_copy"},{"location":"backend-api/resources/tracking/tracker/sensor/#dataread","text":"Gets all metering or virtual sensor readings with values and time per requested period. It can't be used with discrete sensor.","title":"data/read"},{"location":"backend-api/resources/tracking/tracker/sensor/calibration_data/","text":"Sensor calibration data \u00b6 Contains API calls to read and set sensor calibration data which is used for calibration received data from sensors to the convenient format. For example, analog fuel sensor provides Volts that should be calibrated to Liters. API actions \u00b6 API path: /tracker/sensor/calibration_data . read \u00b6 Gets calibration data for sensor. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 sensor_id ID of the sensor. int 12345 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/sensor/calibration_data/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"sensor_id\": 12345}' HTTP GET https://api.navixy.com/v2/tracker/sensor/calibration_data/read?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&sensor_id=12345 Response \u00b6 { \"success\" : true , \"value\" : [{ \"in\" : 0.0 , \"out\" : 0.0 },{ \"in\" : 0.7 , \"out\" : 60.0 }] } value - list of objects containing calibration data. Errors \u00b6 201 \u2013 Not found in the database (if there is no tracker with such ID belonging to authorized user). 228 \u2013 Not supported by the sensor (if sensor doesn't support calibration). update \u00b6 Replaces the calibration data for a sensor. required sub-user rights: tracker_update . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 sensor_id ID of the sensor. int 12345 data Array of calibration data objects. array of JSON object [{\"in\":0.0,\"out\":0.0},{\"in\":0.7,\"out\":60.0}] Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/sensor/calibration_data/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"sensor_id\": 12345, \"data\": [{\"in\":0.0,\"out\":0.0},{\"in\":0.7,\"out\":60.0}]}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 228 \u2013 Not supported by the sensor - if sensor doesn't support calibration. 228 \u2013 Not supported by the sensor - if sensor doesn't support calibration. 219 \u2013 Not allowed for clones of the device - if tracker is clone. upload_omnicomm \u00b6 Replaces the calibration data for a sensor from Omnicomm LLS monitor's XML configuration file. If XML file contains information about multiple sensors, user must specify which sensor number to use. required sub-user rights: tracker_update . MUST be a POST multipart request (multipart/form-data), with one of the parts being an XML file upload (with the name \"file\"). Parameters \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int sensor_id ID of the sensor. int file A file upload containing LLS monitor XML file. file upload Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 228 \u2013 Not supported by the sensor - if sensor doesn't support calibration. 219 \u2013 Not allowed for clones of the device - if tracker is clone. 233 \u2013 No data file - if file part is missing. 234 \u2013 Invalid data format - if supplied file is not a valid LLS monitor XML file. 235 \u2013 Missing calibration data - if there is no calibration data for the specified sensor number.","title":"Calibration Data"},{"location":"backend-api/resources/tracking/tracker/sensor/calibration_data/#sensor-calibration-data","text":"Contains API calls to read and set sensor calibration data which is used for calibration received data from sensors to the convenient format. For example, analog fuel sensor provides Volts that should be calibrated to Liters.","title":"Sensor calibration data"},{"location":"backend-api/resources/tracking/tracker/sensor/calibration_data/#api-actions","text":"API path: /tracker/sensor/calibration_data .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/sensor/calibration_data/#read","text":"Gets calibration data for sensor.","title":"read"},{"location":"backend-api/resources/tracking/tracker/sensor/calibration_data/#update","text":"Replaces the calibration data for a sensor. required sub-user rights: tracker_update .","title":"update"},{"location":"backend-api/resources/tracking/tracker/sensor/calibration_data/#upload_omnicomm","text":"Replaces the calibration data for a sensor from Omnicomm LLS monitor's XML configuration file. If XML file contains information about multiple sensors, user must specify which sensor number to use. required sub-user rights: tracker_update . MUST be a POST multipart request (multipart/form-data), with one of the parts being an XML file upload (with the name \"file\").","title":"upload_omnicomm"},{"location":"backend-api/resources/tracking/tracker/sensor/input_name/","text":"Input name \u00b6 API base path: /tracker/sensor/input_name . API call to get all sensor inputs and state fields existing in the system and their descriptions. API actions \u00b6 list \u00b6 This will provide descriptions of all sensor inputs and state fields present in the system. These descriptions will be given in the language according to the user's locale. Parameters \u00b6 Only API key hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/sensor/input_name/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/tracker/sensor/input_name/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 For every input following properties returned: input_name and description . input_name is an enum member, same as in sensor object . description is made in current user's language (according to locale settings ). Response { \"success\" : true , \"list\" : [ { \"input_name\" : \"acceleration\" , \"description\" : \"Acceleration\" }, { \"input_name\" : \"analog_1\" , \"description\" : \"Analog sensor #1\" }, { \"input_name\" : \"analog_2\" , \"description\" : \"Analog sensor #2\" }, { \"input_name\" : \"analog_3\" , \"description\" : \"Analog sensor #3\" }, { \"input_name\" : \"analog_4\" , \"description\" : \"Analog sensor #4\" }, { \"input_name\" : \"analog_5\" , \"description\" : \"Analog sensor #5\" }, { \"input_name\" : \"analog_6\" , \"description\" : \"Analog sensor #6\" }, { \"input_name\" : \"analog_7\" , \"description\" : \"Analog sensor #7\" }, { \"input_name\" : \"analog_8\" , \"description\" : \"Analog sensor #8\" }, { \"input_name\" : \"axis_x\" , \"description\" : \"Acceleration by X axis\" }, { \"input_name\" : \"axis_y\" , \"description\" : \"Acceleration by Y axis\" }, { \"input_name\" : \"axis_z\" , \"description\" : \"Acceleration by Z axis\" }, { \"input_name\" : \"battery_current\" , \"description\" : \"Battery current\" }, { \"input_name\" : \"battery_level\" , \"description\" : \"Battery level\" }, { \"input_name\" : \"battery_voltage\" , \"description\" : \"Battery voltage\" }, { \"input_name\" : \"ble_battery_level_1\" , \"description\" : \"BLE: Battery level #1\" }, { \"input_name\" : \"ble_battery_level_10\" , \"description\" : \"BLE: Battery level #10\" }, { \"input_name\" : \"ble_battery_level_11\" , \"description\" : \"BLE: Battery level #11\" }, { \"input_name\" : \"ble_battery_level_12\" , \"description\" : \"BLE: Battery level #12\" }, { \"input_name\" : \"ble_battery_level_13\" , \"description\" : \"BLE: Battery level #13\" }, { \"input_name\" : \"ble_battery_level_14\" , \"description\" : \"BLE: Battery level #14\" }, { \"input_name\" : \"ble_battery_level_15\" , \"description\" : \"BLE: Battery level #15\" }, { \"input_name\" : \"ble_battery_level_16\" , \"description\" : \"BLE: Battery level #16\" }, { \"input_name\" : \"ble_battery_level_2\" , \"description\" : \"BLE: Battery level #2\" }, { \"input_name\" : \"ble_battery_level_3\" , \"description\" : \"BLE: Battery level #3\" }, { \"input_name\" : \"ble_battery_level_4\" , \"description\" : \"BLE: Battery level #4\" }, { \"input_name\" : \"ble_battery_level_5\" , \"description\" : \"BLE: Battery level #5\" }, { \"input_name\" : \"ble_battery_level_6\" , \"description\" : \"BLE: Battery level #6\" }, { \"input_name\" : \"ble_battery_level_7\" , \"description\" : \"BLE: Battery level #7\" }, { \"input_name\" : \"ble_battery_level_8\" , \"description\" : \"BLE: Battery level #8\" }, { \"input_name\" : \"ble_battery_level_9\" , \"description\" : \"BLE: Battery level #9\" }, { \"input_name\" : \"ble_battery_voltage_1\" , \"description\" : \"BLE: Battery voltage #1\" }, { \"input_name\" : \"ble_battery_voltage_10\" , \"description\" : \"BLE: Battery voltage #10\" }, { \"input_name\" : \"ble_battery_voltage_11\" , \"description\" : \"BLE: Battery voltage #11\" }, { \"input_name\" : \"ble_battery_voltage_12\" , \"description\" : \"BLE: Battery voltage #12\" }, { \"input_name\" : \"ble_battery_voltage_13\" , \"description\" : \"BLE: Battery voltage #13\" }, { \"input_name\" : \"ble_battery_voltage_14\" , \"description\" : \"BLE: Battery voltage #14\" }, { \"input_name\" : \"ble_battery_voltage_15\" , \"description\" : \"BLE: Battery voltage #15\" }, { \"input_name\" : \"ble_battery_voltage_16\" , \"description\" : \"BLE: Battery voltage #16\" }, { \"input_name\" : \"ble_battery_voltage_2\" , \"description\" : \"BLE: Battery voltage #2\" }, { \"input_name\" : \"ble_battery_voltage_3\" , \"description\" : \"BLE: Battery voltage #3\" }, { \"input_name\" : \"ble_battery_voltage_4\" , \"description\" : \"BLE: Battery voltage #4\" }, { \"input_name\" : \"ble_battery_voltage_5\" , \"description\" : \"BLE: Battery voltage #5\" }, { \"input_name\" : \"ble_battery_voltage_6\" , \"description\" : \"BLE: Battery voltage #6\" }, { \"input_name\" : \"ble_battery_voltage_7\" , \"description\" : \"BLE: Battery voltage #7\" }, { \"input_name\" : \"ble_battery_voltage_8\" , \"description\" : \"BLE: Battery voltage #8\" }, { \"input_name\" : \"ble_battery_voltage_9\" , \"description\" : \"BLE: Battery voltage #9\" }, { \"input_name\" : \"ble_humidity_1\" , \"description\" : \"BLE: Humidity sensor #1\" }, { \"input_name\" : \"ble_humidity_10\" , \"description\" : \"BLE: Humidity sensor #10\" }, { \"input_name\" : \"ble_humidity_11\" , \"description\" : \"BLE: Humidity sensor #11\" }, { \"input_name\" : \"ble_humidity_12\" , \"description\" : \"BLE: Humidity sensor #12\" }, { \"input_name\" : \"ble_humidity_13\" , \"description\" : \"BLE: Humidity sensor #13\" }, { \"input_name\" : \"ble_humidity_14\" , \"description\" : \"BLE: Humidity sensor #14\" }, { \"input_name\" : \"ble_humidity_15\" , \"description\" : \"BLE: Humidity sensor #15\" }, { \"input_name\" : \"ble_humidity_16\" , \"description\" : \"BLE: Humidity sensor #16\" }, { \"input_name\" : \"ble_humidity_2\" , \"description\" : \"BLE: Humidity sensor #2\" }, { \"input_name\" : \"ble_humidity_3\" , \"description\" : \"BLE: Humidity sensor #3\" }, { \"input_name\" : \"ble_humidity_4\" , \"description\" : \"BLE: Humidity sensor #4\" }, { \"input_name\" : \"ble_humidity_5\" , \"description\" : \"BLE: Humidity sensor #5\" }, { \"input_name\" : \"ble_humidity_6\" , \"description\" : \"BLE: Humidity sensor #6\" }, { \"input_name\" : \"ble_humidity_7\" , \"description\" : \"BLE: Humidity sensor #7\" }, { \"input_name\" : \"ble_humidity_8\" , \"description\" : \"BLE: Humidity sensor #8\" }, { \"input_name\" : \"ble_humidity_9\" , \"description\" : \"BLE: Humidity sensor #9\" }, { \"input_name\" : \"ble_lls_level_1\" , \"description\" : \"BLE: LLS #1 level\" }, { \"input_name\" : \"ble_lls_level_10\" , \"description\" : \"BLE: LLS #10 level\" }, { \"input_name\" : \"ble_lls_level_2\" , \"description\" : \"BLE: LLS #2 level\" }, { \"input_name\" : \"ble_lls_level_3\" , \"description\" : \"BLE: LLS #3 level\" }, { \"input_name\" : \"ble_lls_level_4\" , \"description\" : \"BLE: LLS #4 level\" }, { \"input_name\" : \"ble_lls_level_5\" , \"description\" : \"BLE: LLS #5 level\" }, { \"input_name\" : \"ble_lls_level_6\" , \"description\" : \"BLE: LLS #6 level\" }, { \"input_name\" : \"ble_lls_level_7\" , \"description\" : \"BLE: LLS #7 level\" }, { \"input_name\" : \"ble_lls_level_8\" , \"description\" : \"BLE: LLS #8 level\" }, { \"input_name\" : \"ble_lls_level_9\" , \"description\" : \"BLE: LLS #9 level\" }, { \"input_name\" : \"ble_lls_temperature_1\" , \"description\" : \"BLE: LLS #1 temperature\" }, { \"input_name\" : \"ble_lls_temperature_10\" , \"description\" : \"BLE: LLS #10 temperature\" }, { \"input_name\" : \"ble_lls_temperature_2\" , \"description\" : \"BLE: LLS #2 temperature\" }, { \"input_name\" : \"ble_lls_temperature_3\" , \"description\" : \"BLE: LLS #3 temperature\" }, { \"input_name\" : \"ble_lls_temperature_4\" , \"description\" : \"BLE: LLS #4 temperature\" }, { \"input_name\" : \"ble_lls_temperature_5\" , \"description\" : \"BLE: LLS #5 temperature\" }, { \"input_name\" : \"ble_lls_temperature_6\" , \"description\" : \"BLE: LLS #6 temperature\" }, { \"input_name\" : \"ble_lls_temperature_7\" , \"description\" : \"BLE: LLS #7 temperature\" }, { \"input_name\" : \"ble_lls_temperature_8\" , \"description\" : \"BLE: LLS #8 temperature\" }, { \"input_name\" : \"ble_lls_temperature_9\" , \"description\" : \"BLE: LLS #9 temperature\" }, { \"input_name\" : \"ble_luminosity_1\" , \"description\" : \"BLE: Luminosity #1\" }, { \"input_name\" : \"ble_luminosity_10\" , \"description\" : \"BLE: Luminosity #10\" }, { \"input_name\" : \"ble_luminosity_11\" , \"description\" : \"BLE: Luminosity #11\" }, { \"input_name\" : \"ble_luminosity_12\" , \"description\" : \"BLE: Luminosity #12\" }, { \"input_name\" : \"ble_luminosity_13\" , \"description\" : \"BLE: Luminosity #13\" }, { \"input_name\" : \"ble_luminosity_14\" , \"description\" : \"BLE: Luminosity #14\" }, { \"input_name\" : \"ble_luminosity_15\" , \"description\" : \"BLE: Luminosity #15\" }, { \"input_name\" : \"ble_luminosity_16\" , \"description\" : \"BLE: Luminosity #16\" }, { \"input_name\" : \"ble_luminosity_2\" , \"description\" : \"BLE: Luminosity #2\" }, { \"input_name\" : \"ble_luminosity_3\" , \"description\" : \"BLE: Luminosity #3\" }, { \"input_name\" : \"ble_luminosity_4\" , \"description\" : \"BLE: Luminosity #4\" }, { \"input_name\" : \"ble_luminosity_5\" , \"description\" : \"BLE: Luminosity #5\" }, { \"input_name\" : \"ble_luminosity_6\" , \"description\" : \"BLE: Luminosity #6\" }, { \"input_name\" : \"ble_luminosity_7\" , \"description\" : \"BLE: Luminosity #7\" }, { \"input_name\" : \"ble_luminosity_8\" , \"description\" : \"BLE: Luminosity #8\" }, { \"input_name\" : \"ble_luminosity_9\" , \"description\" : \"BLE: Luminosity #9\" }, { \"input_name\" : \"ble_signal_strength_1\" , \"description\" : \"BLE: Signal strength #1\" }, { \"input_name\" : \"ble_signal_strength_10\" , \"description\" : \"BLE: Signal strength #10\" }, { \"input_name\" : \"ble_signal_strength_11\" , \"description\" : \"BLE: Signal strength #11\" }, { \"input_name\" : \"ble_signal_strength_12\" , \"description\" : \"BLE: Signal strength #12\" }, { \"input_name\" : \"ble_signal_strength_13\" , \"description\" : \"BLE: Signal strength #13\" }, { \"input_name\" : \"ble_signal_strength_14\" , \"description\" : \"BLE: Signal strength #14\" }, { \"input_name\" : \"ble_signal_strength_15\" , \"description\" : \"BLE: Signal strength #15\" }, { \"input_name\" : \"ble_signal_strength_16\" , \"description\" : \"BLE: Signal strength #16\" }, { \"input_name\" : \"ble_signal_strength_2\" , \"description\" : \"BLE: Signal strength #2\" }, { \"input_name\" : \"ble_signal_strength_3\" , \"description\" : \"BLE: Signal strength #3\" }, { \"input_name\" : \"ble_signal_strength_4\" , \"description\" : \"BLE: Signal strength #4\" }, { \"input_name\" : \"ble_signal_strength_5\" , \"description\" : \"BLE: Signal strength #5\" }, { \"input_name\" : \"ble_signal_strength_6\" , \"description\" : \"BLE: Signal strength #6\" }, { \"input_name\" : \"ble_signal_strength_7\" , \"description\" : \"BLE: Signal strength #7\" }, { \"input_name\" : \"ble_signal_strength_8\" , \"description\" : \"BLE: Signal strength #8\" }, { \"input_name\" : \"ble_signal_strength_9\" , \"description\" : \"BLE: Signal strength #9\" }, { \"input_name\" : \"ble_temp_sensor_1\" , \"description\" : \"BLE: temperature sensor #1\" }, { \"input_name\" : \"ble_temp_sensor_10\" , \"description\" : \"BLE: temperature sensor #10\" }, { \"input_name\" : \"ble_temp_sensor_11\" , \"description\" : \"BLE: temperature sensor #11\" }, { \"input_name\" : \"ble_temp_sensor_12\" , \"description\" : \"BLE: temperature sensor #12\" }, { \"input_name\" : \"ble_temp_sensor_13\" , \"description\" : \"BLE: temperature sensor #13\" }, { \"input_name\" : \"ble_temp_sensor_14\" , \"description\" : \"BLE: temperature sensor #14\" }, { \"input_name\" : \"ble_temp_sensor_15\" , \"description\" : \"BLE: temperature sensor #15\" }, { \"input_name\" : \"ble_temp_sensor_16\" , \"description\" : \"BLE: temperature sensor #16\" }, { \"input_name\" : \"ble_temp_sensor_2\" , \"description\" : \"BLE: temperature sensor #2\" }, { \"input_name\" : \"ble_temp_sensor_3\" , \"description\" : \"BLE: temperature sensor #3\" }, { \"input_name\" : \"ble_temp_sensor_4\" , \"description\" : \"BLE: temperature sensor #4\" }, { \"input_name\" : \"ble_temp_sensor_5\" , \"description\" : \"BLE: temperature sensor #5\" }, { \"input_name\" : \"ble_temp_sensor_6\" , \"description\" : \"BLE: temperature sensor #6\" }, { \"input_name\" : \"ble_temp_sensor_7\" , \"description\" : \"BLE: temperature sensor #7\" }, { \"input_name\" : \"ble_temp_sensor_8\" , \"description\" : \"BLE: temperature sensor #8\" }, { \"input_name\" : \"ble_temp_sensor_9\" , \"description\" : \"BLE: temperature sensor #9\" }, { \"input_name\" : \"ble_tire_pressure_1\" , \"description\" : \"BLE: Tire pressure #1\" }, { \"input_name\" : \"ble_tire_pressure_10\" , \"description\" : \"BLE: Tire pressure #10\" }, { \"input_name\" : \"ble_tire_pressure_11\" , \"description\" : \"BLE: Tire pressure #11\" }, { \"input_name\" : \"ble_tire_pressure_12\" , \"description\" : \"BLE: Tire pressure #12\" }, { \"input_name\" : \"ble_tire_pressure_13\" , \"description\" : \"BLE: Tire pressure #13\" }, { \"input_name\" : \"ble_tire_pressure_14\" , \"description\" : \"BLE: Tire pressure #14\" }, { \"input_name\" : \"ble_tire_pressure_15\" , \"description\" : \"BLE: Tire pressure #15\" }, { \"input_name\" : \"ble_tire_pressure_16\" , \"description\" : \"BLE: Tire pressure #16\" }, { \"input_name\" : \"ble_tire_pressure_17\" , \"description\" : \"BLE: Tire pressure #17\" }, { \"input_name\" : \"ble_tire_pressure_18\" , \"description\" : \"BLE: Tire pressure #18\" }, { \"input_name\" : \"ble_tire_pressure_19\" , \"description\" : \"BLE: Tire pressure #19\" }, { \"input_name\" : \"ble_tire_pressure_2\" , \"description\" : \"BLE: Tire pressure #2\" }, { \"input_name\" : \"ble_tire_pressure_20\" , \"description\" : \"BLE: Tire pressure #20\" }, { \"input_name\" : \"ble_tire_pressure_21\" , \"description\" : \"BLE: Tire pressure #21\" }, { \"input_name\" : \"ble_tire_pressure_22\" , \"description\" : \"BLE: Tire pressure #22\" }, { \"input_name\" : \"ble_tire_pressure_23\" , \"description\" : \"BLE: Tire pressure #23\" }, { \"input_name\" : \"ble_tire_pressure_24\" , \"description\" : \"BLE: Tire pressure #24\" }, { \"input_name\" : \"ble_tire_pressure_25\" , \"description\" : \"BLE: Tire pressure #25\" }, { \"input_name\" : \"ble_tire_pressure_26\" , \"description\" : \"BLE: Tire pressure #26\" }, { \"input_name\" : \"ble_tire_pressure_27\" , \"description\" : \"BLE: Tire pressure #27\" }, { \"input_name\" : \"ble_tire_pressure_28\" , \"description\" : \"BLE: Tire pressure #28\" }, { \"input_name\" : \"ble_tire_pressure_29\" , \"description\" : \"BLE: Tire pressure #29\" }, { \"input_name\" : \"ble_tire_pressure_3\" , \"description\" : \"BLE: Tire pressure #3\" }, { \"input_name\" : \"ble_tire_pressure_30\" , \"description\" : \"BLE: Tire pressure #30\" }, { \"input_name\" : \"ble_tire_pressure_4\" , \"description\" : \"BLE: Tire pressure #4\" }, { \"input_name\" : \"ble_tire_pressure_5\" , \"description\" : \"BLE: Tire pressure #5\" }, { \"input_name\" : \"ble_tire_pressure_6\" , \"description\" : \"BLE: Tire pressure #6\" }, { \"input_name\" : \"ble_tire_pressure_7\" , \"description\" : \"BLE: Tire pressure #7\" }, { \"input_name\" : \"ble_tire_pressure_8\" , \"description\" : \"BLE: Tire pressure #8\" }, { \"input_name\" : \"ble_tire_pressure_9\" , \"description\" : \"BLE: Tire pressure #9\" }, { \"input_name\" : \"ble_tire_temperature_1\" , \"description\" : \"BLE: Tire air temperature #1\" }, { \"input_name\" : \"ble_tire_temperature_10\" , \"description\" : \"BLE: Tire air temperature #10\" }, { \"input_name\" : \"ble_tire_temperature_11\" , \"description\" : \"BLE: Tire air temperature #11\" }, { \"input_name\" : \"ble_tire_temperature_12\" , \"description\" : \"BLE: Tire air temperature #12\" }, { \"input_name\" : \"ble_tire_temperature_13\" , \"description\" : \"BLE: Tire air temperature #13\" }, { \"input_name\" : \"ble_tire_temperature_14\" , \"description\" : \"BLE: Tire air temperature #14\" }, { \"input_name\" : \"ble_tire_temperature_15\" , \"description\" : \"BLE: Tire air temperature #15\" }, { \"input_name\" : \"ble_tire_temperature_16\" , \"description\" : \"BLE: Tire air temperature #16\" }, { \"input_name\" : \"ble_tire_temperature_17\" , \"description\" : \"BLE: Tire air temperature #17\" }, { \"input_name\" : \"ble_tire_temperature_18\" , \"description\" : \"BLE: Tire air temperature #18\" }, { \"input_name\" : \"ble_tire_temperature_19\" , \"description\" : \"BLE: Tire air temperature #19\" }, { \"input_name\" : \"ble_tire_temperature_2\" , \"description\" : \"BLE: Tire air temperature #2\" }, { \"input_name\" : \"ble_tire_temperature_20\" , \"description\" : \"BLE: Tire air temperature #20\" }, { \"input_name\" : \"ble_tire_temperature_21\" , \"description\" : \"BLE: Tire air temperature #21\" }, { \"input_name\" : \"ble_tire_temperature_22\" , \"description\" : \"BLE: Tire air temperature #22\" }, { \"input_name\" : \"ble_tire_temperature_23\" , \"description\" : \"BLE: Tire air temperature #23\" }, { \"input_name\" : \"ble_tire_temperature_24\" , \"description\" : \"BLE: Tire air temperature #24\" }, { \"input_name\" : \"ble_tire_temperature_25\" , \"description\" : \"BLE: Tire air temperature #25\" }, { \"input_name\" : \"ble_tire_temperature_26\" , \"description\" : \"BLE: Tire air temperature #26\" }, { \"input_name\" : \"ble_tire_temperature_27\" , \"description\" : \"BLE: Tire air temperature #27\" }, { \"input_name\" : \"ble_tire_temperature_28\" , \"description\" : \"BLE: Tire air temperature #28\" }, { \"input_name\" : \"ble_tire_temperature_29\" , \"description\" : \"BLE: Tire air temperature #29\" }, { \"input_name\" : \"ble_tire_temperature_3\" , \"description\" : \"BLE: Tire air temperature #3\" }, { \"input_name\" : \"ble_tire_temperature_30\" , \"description\" : \"BLE: Tire air temperature #30\" }, { \"input_name\" : \"ble_tire_temperature_4\" , \"description\" : \"BLE: Tire air temperature #4\" }, { \"input_name\" : \"ble_tire_temperature_5\" , \"description\" : \"BLE: Tire air temperature #5\" }, { \"input_name\" : \"ble_tire_temperature_6\" , \"description\" : \"BLE: Tire air temperature #6\" }, { \"input_name\" : \"ble_tire_temperature_7\" , \"description\" : \"BLE: Tire air temperature #7\" }, { \"input_name\" : \"ble_tire_temperature_8\" , \"description\" : \"BLE: Tire air temperature #8\" }, { \"input_name\" : \"ble_tire_temperature_9\" , \"description\" : \"BLE: Tire air temperature #9\" }, { \"input_name\" : \"ble_user_data_1\" , \"description\" : \"BLE custom user data #1\" }, { \"input_name\" : \"ble_user_data_10\" , \"description\" : \"BLE custom user data #10\" }, { \"input_name\" : \"ble_user_data_11\" , \"description\" : \"BLE custom user data #11\" }, { \"input_name\" : \"ble_user_data_12\" , \"description\" : \"BLE custom user data #12\" }, { \"input_name\" : \"ble_user_data_13\" , \"description\" : \"BLE custom user data #13\" }, { \"input_name\" : \"ble_user_data_14\" , \"description\" : \"BLE custom user data #14\" }, { \"input_name\" : \"ble_user_data_15\" , \"description\" : \"BLE custom user data #15\" }, { \"input_name\" : \"ble_user_data_16\" , \"description\" : \"BLE custom user data #16\" }, { \"input_name\" : \"ble_user_data_17\" , \"description\" : \"BLE custom user data #17\" }, { \"input_name\" : \"ble_user_data_18\" , \"description\" : \"BLE custom user data #18\" }, { \"input_name\" : \"ble_user_data_19\" , \"description\" : \"BLE custom user data #19\" }, { \"input_name\" : \"ble_user_data_2\" , \"description\" : \"BLE custom user data #2\" }, { \"input_name\" : \"ble_user_data_20\" , \"description\" : \"BLE custom user data #20\" }, { \"input_name\" : \"ble_user_data_21\" , \"description\" : \"BLE custom user data #21\" }, { \"input_name\" : \"ble_user_data_22\" , \"description\" : \"BLE custom user data #22\" }, { \"input_name\" : \"ble_user_data_23\" , \"description\" : \"BLE custom user data #23\" }, { \"input_name\" : \"ble_user_data_24\" , \"description\" : \"BLE custom user data #24\" }, { \"input_name\" : \"ble_user_data_25\" , \"description\" : \"BLE custom user data #25\" }, { \"input_name\" : \"ble_user_data_26\" , \"description\" : \"BLE custom user data #26\" }, { \"input_name\" : \"ble_user_data_27\" , \"description\" : \"BLE custom user data #27\" }, { \"input_name\" : \"ble_user_data_28\" , \"description\" : \"BLE custom user data #28\" }, { \"input_name\" : \"ble_user_data_29\" , \"description\" : \"BLE custom user data #29\" }, { \"input_name\" : \"ble_user_data_3\" , \"description\" : \"BLE custom user data #3\" }, { \"input_name\" : \"ble_user_data_30\" , \"description\" : \"BLE custom user data #30\" }, { \"input_name\" : \"ble_user_data_31\" , \"description\" : \"BLE custom user data #31\" }, { \"input_name\" : \"ble_user_data_32\" , \"description\" : \"BLE custom user data #32\" }, { \"input_name\" : \"ble_user_data_33\" , \"description\" : \"BLE custom user data #33\" }, { \"input_name\" : \"ble_user_data_34\" , \"description\" : \"BLE custom user data #34\" }, { \"input_name\" : \"ble_user_data_35\" , \"description\" : \"BLE custom user data #35\" }, { \"input_name\" : \"ble_user_data_36\" , \"description\" : \"BLE custom user data #36\" }, { \"input_name\" : \"ble_user_data_37\" , \"description\" : \"BLE custom user data #37\" }, { \"input_name\" : \"ble_user_data_38\" , \"description\" : \"BLE custom user data #38\" }, { \"input_name\" : \"ble_user_data_39\" , \"description\" : \"BLE custom user data #39\" }, { \"input_name\" : \"ble_user_data_4\" , \"description\" : \"BLE custom user data #4\" }, { \"input_name\" : \"ble_user_data_40\" , \"description\" : \"BLE custom user data #40\" }, { \"input_name\" : \"ble_user_data_41\" , \"description\" : \"BLE custom user data #41\" }, { \"input_name\" : \"ble_user_data_42\" , \"description\" : \"BLE custom user data #42\" }, { \"input_name\" : \"ble_user_data_43\" , \"description\" : \"BLE custom user data #43\" }, { \"input_name\" : \"ble_user_data_44\" , \"description\" : \"BLE custom user data #44\" }, { \"input_name\" : \"ble_user_data_45\" , \"description\" : \"BLE custom user data #45\" }, { \"input_name\" : \"ble_user_data_46\" , \"description\" : \"BLE custom user data #46\" }, { \"input_name\" : \"ble_user_data_47\" , \"description\" : \"BLE custom user data #47\" }, { \"input_name\" : \"ble_user_data_48\" , \"description\" : \"BLE custom user data #48\" }, { \"input_name\" : \"ble_user_data_49\" , \"description\" : \"BLE custom user data #49\" }, { \"input_name\" : \"ble_user_data_5\" , \"description\" : \"BLE custom user data #5\" }, { \"input_name\" : \"ble_user_data_50\" , \"description\" : \"BLE custom user data #50\" }, { \"input_name\" : \"ble_user_data_6\" , \"description\" : \"BLE custom user data #6\" }, { \"input_name\" : \"ble_user_data_7\" , \"description\" : \"BLE custom user data #7\" }, { \"input_name\" : \"ble_user_data_8\" , \"description\" : \"BLE custom user data #8\" }, { \"input_name\" : \"ble_user_data_9\" , \"description\" : \"BLE custom user data #9\" }, { \"input_name\" : \"board_voltage\" , \"description\" : \"Board voltage\" }, { \"input_name\" : \"braking\" , \"description\" : \"Braking\" }, { \"input_name\" : \"can_adblue_level\" , \"description\" : \"CAN: Level of AdBlue fluid\" }, { \"input_name\" : \"can_axle_load_1\" , \"description\" : \"CAN: Axle #1 load\" }, { \"input_name\" : \"can_axle_load_10\" , \"description\" : \"CAN: Axle #10 load\" }, { \"input_name\" : \"can_axle_load_11\" , \"description\" : \"CAN: Axle #11 load\" }, { \"input_name\" : \"can_axle_load_12\" , \"description\" : \"CAN: Axle #12 load\" }, { \"input_name\" : \"can_axle_load_13\" , \"description\" : \"CAN: Axle #13 load\" }, { \"input_name\" : \"can_axle_load_14\" , \"description\" : \"CAN: Axle #14 load\" }, { \"input_name\" : \"can_axle_load_15\" , \"description\" : \"CAN: Axle #15 load\" }, { \"input_name\" : \"can_axle_load_2\" , \"description\" : \"CAN: Axle #2 load\" }, { \"input_name\" : \"can_axle_load_3\" , \"description\" : \"CAN: Axle #3 load\" }, { \"input_name\" : \"can_axle_load_4\" , \"description\" : \"CAN: Axle #4 load\" }, { \"input_name\" : \"can_axle_load_5\" , \"description\" : \"CAN: Axle #5 load\" }, { \"input_name\" : \"can_axle_load_6\" , \"description\" : \"CAN: Axle #6 load\" }, { \"input_name\" : \"can_axle_load_7\" , \"description\" : \"CAN: Axle #7 load\" }, { \"input_name\" : \"can_axle_load_8\" , \"description\" : \"CAN: Axle #8 load\" }, { \"input_name\" : \"can_axle_load_9\" , \"description\" : \"CAN: Axle #9 load\" }, { \"input_name\" : \"can_consumption\" , \"description\" : \"CAN: Total fuel used\" }, { \"input_name\" : \"can_consumption_relative\" , \"description\" : \"CAN: Relative fuel consumption\" }, { \"input_name\" : \"can_coolant_t\" , \"description\" : \"CAN: Coolant temperature\" }, { \"input_name\" : \"can_engine_hours\" , \"description\" : \"CAN: Engine hours\" }, { \"input_name\" : \"can_engine_hours_relative\" , \"description\" : \"CAN: Relative engine hours\" }, { \"input_name\" : \"can_engine_load\" , \"description\" : \"CAN: Engine load\" }, { \"input_name\" : \"can_engine_revolutions\" , \"description\" : \"CAN: Total engine revolutions\" }, { \"input_name\" : \"can_engine_temp\" , \"description\" : \"CAN: Engine temp.\" }, { \"input_name\" : \"can_fuel\" , \"description\" : \"CAN: Fuel level\" }, { \"input_name\" : \"can_fuel_2\" , \"description\" : \"CAN: Fuel level #2\" }, { \"input_name\" : \"can_fuel_economy\" , \"description\" : \"CAN: Fuel consumption\" }, { \"input_name\" : \"can_fuel_litres\" , \"description\" : \"CAN: Fuel (litres)\" }, { \"input_name\" : \"can_fuel_rate\" , \"description\" : \"CAN: Instant fuel rate\" }, { \"input_name\" : \"can_intake_air_t\" , \"description\" : \"CAN: Intake air temp.\" }, { \"input_name\" : \"can_mileage\" , \"description\" : \"CAN: Mileage\" }, { \"input_name\" : \"can_mileage_relative\" , \"description\" : \"CAN: Relative mileage\" }, { \"input_name\" : \"can_pto_duration\" , \"description\" : \"CAN: Total duration of PTO when stand still\" }, { \"input_name\" : \"can_pto_fuel_used\" , \"description\" : \"CAN: Total fuel used during PTO when stand still\" }, { \"input_name\" : \"can_r_prefix\" , \"description\" : \"CAN: R-prefix\" }, { \"input_name\" : \"can_rpm\" , \"description\" : \"CAN: RPM\" }, { \"input_name\" : \"can_speed\" , \"description\" : \"CAN: Speed\" }, { \"input_name\" : \"can_throttle\" , \"description\" : \"CAN: Throttle\" }, { \"input_name\" : \"composite\" , \"description\" : \"input.composite\" }, { \"input_name\" : \"cornering\" , \"description\" : \"Cornering\" }, { \"input_name\" : \"ext_battery_voltage\" , \"description\" : \"External battery voltage\" }, { \"input_name\" : \"ext_temp_sensor_1\" , \"description\" : \"External temperature #1\" }, { \"input_name\" : \"ext_temp_sensor_10\" , \"description\" : \"External temperature #10\" }, { \"input_name\" : \"ext_temp_sensor_2\" , \"description\" : \"External temperature #2\" }, { \"input_name\" : \"ext_temp_sensor_3\" , \"description\" : \"External temperature #3\" }, { \"input_name\" : \"ext_temp_sensor_4\" , \"description\" : \"External temperature #4\" }, { \"input_name\" : \"ext_temp_sensor_5\" , \"description\" : \"External temperature #5\" }, { \"input_name\" : \"ext_temp_sensor_6\" , \"description\" : \"External temperature #6\" }, { \"input_name\" : \"ext_temp_sensor_7\" , \"description\" : \"External temperature #7\" }, { \"input_name\" : \"ext_temp_sensor_8\" , \"description\" : \"External temperature #8\" }, { \"input_name\" : \"ext_temp_sensor_9\" , \"description\" : \"External temperature #9\" }, { \"input_name\" : \"freq_1\" , \"description\" : \"Frequency sensor #1\" }, { \"input_name\" : \"freq_2\" , \"description\" : \"Frequency sensor #2\" }, { \"input_name\" : \"freq_3\" , \"description\" : \"Frequency sensor #3\" }, { \"input_name\" : \"freq_4\" , \"description\" : \"Frequency sensor #4\" }, { \"input_name\" : \"freq_5\" , \"description\" : \"Frequency sensor #5\" }, { \"input_name\" : \"freq_6\" , \"description\" : \"Frequency sensor #6\" }, { \"input_name\" : \"freq_7\" , \"description\" : \"Frequency sensor #7\" }, { \"input_name\" : \"freq_8\" , \"description\" : \"Frequency sensor #8\" }, { \"input_name\" : \"fuel_consumption\" , \"description\" : \"Fuel consumption\" }, { \"input_name\" : \"fuel_frequency\" , \"description\" : \"LLS: Frequency\" }, { \"input_name\" : \"fuel_level\" , \"description\" : \"LLS: Level\" }, { \"input_name\" : \"fuel_temperature\" , \"description\" : \"LLS: Temperature\" }, { \"input_name\" : \"humidity_1\" , \"description\" : \"Relative humidity sensor #1\" }, { \"input_name\" : \"humidity_2\" , \"description\" : \"Relative humidity sensor #2\" }, { \"input_name\" : \"humidity_3\" , \"description\" : \"Relative humidity sensor #3\" }, { \"input_name\" : \"humidity_4\" , \"description\" : \"Relative humidity sensor #4\" }, { \"input_name\" : \"hw_mileage\" , \"description\" : \"Mileage\" }, { \"input_name\" : \"impulse_counter_1\" , \"description\" : \"Impulse counter #1\" }, { \"input_name\" : \"impulse_counter_2\" , \"description\" : \"Impulse counter #2\" }, { \"input_name\" : \"impulse_counter_3\" , \"description\" : \"Impulse counter #3\" }, { \"input_name\" : \"impulse_counter_4\" , \"description\" : \"Impulse counter #4\" }, { \"input_name\" : \"impulse_counter_5\" , \"description\" : \"Impulse counter #5\" }, { \"input_name\" : \"impulse_counter_6\" , \"description\" : \"Impulse counter #6\" }, { \"input_name\" : \"impulse_counter_7\" , \"description\" : \"Impulse counter #7\" }, { \"input_name\" : \"impulse_counter_8\" , \"description\" : \"Impulse counter #8\" }, { \"input_name\" : \"input_status\" , \"description\" : \"input.input_status\" }, { \"input_name\" : \"lls_level_1\" , \"description\" : \"LLS #1: Level\" }, { \"input_name\" : \"lls_level_10\" , \"description\" : \"LLS #10: Level\" }, { \"input_name\" : \"lls_level_11\" , \"description\" : \"LLS #11: Level\" }, { \"input_name\" : \"lls_level_12\" , \"description\" : \"LLS #12: Level\" }, { \"input_name\" : \"lls_level_13\" , \"description\" : \"LLS #13: Level\" }, { \"input_name\" : \"lls_level_14\" , \"description\" : \"LLS #14: Level\" }, { \"input_name\" : \"lls_level_15\" , \"description\" : \"LLS #15: Level\" }, { \"input_name\" : \"lls_level_16\" , \"description\" : \"LLS #16: Level\" }, { \"input_name\" : \"lls_level_2\" , \"description\" : \"LLS #2: Level\" }, { \"input_name\" : \"lls_level_3\" , \"description\" : \"LLS #3: Level\" }, { \"input_name\" : \"lls_level_4\" , \"description\" : \"LLS #4: Level\" }, { \"input_name\" : \"lls_level_5\" , \"description\" : \"LLS #5: Level\" }, { \"input_name\" : \"lls_level_6\" , \"description\" : \"LLS #6: Level\" }, { \"input_name\" : \"lls_level_7\" , \"description\" : \"LLS #7: Level\" }, { \"input_name\" : \"lls_level_8\" , \"description\" : \"LLS #8: Level\" }, { \"input_name\" : \"lls_level_9\" , \"description\" : \"LLS #9: Level\" }, { \"input_name\" : \"lls_level_raw_1\" , \"description\" : \"LLS #1: Level (raw)\" }, { \"input_name\" : \"lls_level_raw_2\" , \"description\" : \"LLS #2: Level (raw)\" }, { \"input_name\" : \"lls_level_raw_3\" , \"description\" : \"LLS #3: Level (raw)\" }, { \"input_name\" : \"lls_level_raw_4\" , \"description\" : \"LLS #4: Level (raw)\" }, { \"input_name\" : \"lls_level_raw_5\" , \"description\" : \"LLS #5: Level (raw)\" }, { \"input_name\" : \"lls_level_raw_6\" , \"description\" : \"LLS #6: Level (raw)\" }, { \"input_name\" : \"lls_level_raw_7\" , \"description\" : \"LLS #7: Level (raw)\" }, { \"input_name\" : \"lls_level_raw_8\" , \"description\" : \"LLS #8: Level (raw)\" }, { \"input_name\" : \"lls_temperature_1\" , \"description\" : \"LLS #1: Temperature\" }, { \"input_name\" : \"lls_temperature_10\" , \"description\" : \"LLS #10: Temperature\" }, { \"input_name\" : \"lls_temperature_11\" , \"description\" : \"LLS #11: Temperature\" }, { \"input_name\" : \"lls_temperature_12\" , \"description\" : \"LLS #12: Temperature\" }, { \"input_name\" : \"lls_temperature_13\" , \"description\" : \"LLS #13: Temperature\" }, { \"input_name\" : \"lls_temperature_14\" , \"description\" : \"LLS #14: Temperature\" }, { \"input_name\" : \"lls_temperature_15\" , \"description\" : \"LLS #15: Temperature\" }, { \"input_name\" : \"lls_temperature_16\" , \"description\" : \"LLS #16: Temperature\" }, { \"input_name\" : \"lls_temperature_2\" , \"description\" : \"LLS #2: Temperature\" }, { \"input_name\" : \"lls_temperature_3\" , \"description\" : \"LLS #3: Temperature\" }, { \"input_name\" : \"lls_temperature_4\" , \"description\" : \"LLS #4: Temperature\" }, { \"input_name\" : \"lls_temperature_5\" , \"description\" : \"LLS #5: Temperature\" }, { \"input_name\" : \"lls_temperature_6\" , \"description\" : \"LLS #6: Temperature\" }, { \"input_name\" : \"lls_temperature_7\" , \"description\" : \"LLS #7: Temperature\" }, { \"input_name\" : \"lls_temperature_8\" , \"description\" : \"LLS #8: Temperature\" }, { \"input_name\" : \"lls_temperature_9\" , \"description\" : \"LLS #9: Temperature\" }, { \"input_name\" : \"obd_absolute_load_value\" , \"description\" : \"Absolute load value\" }, { \"input_name\" : \"obd_consumption\" , \"description\" : \"OBD: Fuel consumption\" }, { \"input_name\" : \"obd_control_module_voltage\" , \"description\" : \"Control module voltage\" }, { \"input_name\" : \"obd_coolant_t\" , \"description\" : \"OBD: Coolant temperature\" }, { \"input_name\" : \"obd_custom_fuel_litres\" , \"description\" : \"OBD: Real Fuel (litres)\" }, { \"input_name\" : \"obd_custom_odometer\" , \"description\" : \"OBD: Odometer\" }, { \"input_name\" : \"obd_engine_load\" , \"description\" : \"OBD: Engine load\" }, { \"input_name\" : \"obd_fuel\" , \"description\" : \"OBD: Fuel\" }, { \"input_name\" : \"obd_intake_air_pressure\" , \"description\" : \"OBD: Intake air pressure\" }, { \"input_name\" : \"obd_intake_air_t\" , \"description\" : \"OBD: Intake air temp.\" }, { \"input_name\" : \"obd_mil_run_time\" , \"description\" : \"Time run with MIL on\" }, { \"input_name\" : \"obd_oil_temperature\" , \"description\" : \"OBD: Oil temperature\" }, { \"input_name\" : \"obd_rpm\" , \"description\" : \"OBD: RPM\" }, { \"input_name\" : \"obd_speed\" , \"description\" : \"OBD: Speed\" }, { \"input_name\" : \"obd_throttle\" , \"description\" : \"OBD: Throttle\" }, { \"input_name\" : \"obd_time_since_engine_start\" , \"description\" : \"Run time since engine start\" }, { \"input_name\" : \"passengers_entered_1\" , \"description\" : \"Passenger counter #1: Entry\" }, { \"input_name\" : \"passengers_entered_2\" , \"description\" : \"Passenger counter #2: Entry\" }, { \"input_name\" : \"passengers_entered_3\" , \"description\" : \"Passenger counter #3: Entry\" }, { \"input_name\" : \"passengers_entered_4\" , \"description\" : \"Passenger counter #4: Entry\" }, { \"input_name\" : \"passengers_entered_5\" , \"description\" : \"Passenger counter #5: Entry\" }, { \"input_name\" : \"passengers_entered_6\" , \"description\" : \"Passenger counter #6: Entry\" }, { \"input_name\" : \"passengers_entered_7\" , \"description\" : \"Passenger counter #7: Entry\" }, { \"input_name\" : \"passengers_entered_8\" , \"description\" : \"Passenger counter #8: Entry\" }, { \"input_name\" : \"passengers_exit_1\" , \"description\" : \"Passenger counter #1: Exit\" }, { \"input_name\" : \"passengers_exit_2\" , \"description\" : \"Passenger counter #2: Exit\" }, { \"input_name\" : \"passengers_exit_3\" , \"description\" : \"Passenger counter #3: Exit\" }, { \"input_name\" : \"passengers_exit_4\" , \"description\" : \"Passenger counter #4: Exit\" }, { \"input_name\" : \"passengers_exit_5\" , \"description\" : \"Passenger counter #5: Exit\" }, { \"input_name\" : \"passengers_exit_6\" , \"description\" : \"Passenger counter #6: Exit\" }, { \"input_name\" : \"passengers_exit_7\" , \"description\" : \"Passenger counter #7: Exit\" }, { \"input_name\" : \"passengers_exit_8\" , \"description\" : \"Passenger counter #8: Exit\" }, { \"input_name\" : \"physiologic_blood_pressure_dt\" , \"description\" : \"Diastolic blood pressure\" }, { \"input_name\" : \"physiologic_blood_pressure_st\" , \"description\" : \"Systolic blood pressure\" }, { \"input_name\" : \"physiologic_heart_rate\" , \"description\" : \"Heart rate\" }, { \"input_name\" : \"raw_can_1\" , \"description\" : \"CAN: Raw data #1\" }, { \"input_name\" : \"raw_can_10\" , \"description\" : \"CAN: Raw data #10\" }, { \"input_name\" : \"raw_can_11\" , \"description\" : \"CAN: Raw data #11\" }, { \"input_name\" : \"raw_can_12\" , \"description\" : \"CAN: Raw data #12\" }, { \"input_name\" : \"raw_can_13\" , \"description\" : \"CAN: Raw data #13\" }, { \"input_name\" : \"raw_can_14\" , \"description\" : \"CAN: Raw data #14\" }, { \"input_name\" : \"raw_can_15\" , \"description\" : \"CAN: Raw data #15\" }, { \"input_name\" : \"raw_can_16\" , \"description\" : \"CAN: Raw data #16\" }, { \"input_name\" : \"raw_can_2\" , \"description\" : \"CAN: Raw data #2\" }, { \"input_name\" : \"raw_can_3\" , \"description\" : \"CAN: Raw data #3\" }, { \"input_name\" : \"raw_can_4\" , \"description\" : \"CAN: Raw data #4\" }, { \"input_name\" : \"raw_can_5\" , \"description\" : \"CAN: Raw data #5\" }, { \"input_name\" : \"raw_can_6\" , \"description\" : \"CAN: Raw data #6\" }, { \"input_name\" : \"raw_can_7\" , \"description\" : \"CAN: Raw data #7\" }, { \"input_name\" : \"raw_can_8\" , \"description\" : \"CAN: Raw data #8\" }, { \"input_name\" : \"raw_can_9\" , \"description\" : \"CAN: Raw data #9\" }, { \"input_name\" : \"rs232_1\" , \"description\" : \"RS-232 #1\" }, { \"input_name\" : \"rs232_2\" , \"description\" : \"RS-232 #2\" }, { \"input_name\" : \"rs232_3\" , \"description\" : \"RS-232 #3\" }, { \"input_name\" : \"rs232_4\" , \"description\" : \"RS-232 #4\" }, { \"input_name\" : \"rs232_5\" , \"description\" : \"RS-232 #5\" }, { \"input_name\" : \"rs232_6\" , \"description\" : \"RS-232 #6\" }, { \"input_name\" : \"tacho_mileage\" , \"description\" : \"TACHO: Mileage\" }, { \"input_name\" : \"tacho_speed\" , \"description\" : \"TACHO: Speed\" }, { \"input_name\" : \"temp_sensor\" , \"description\" : \"Temperature\" }, { \"input_name\" : \"tire_pressure_1\" , \"description\" : \"Tire pressure #1\" }, { \"input_name\" : \"tire_pressure_10\" , \"description\" : \"Tire pressure #10\" }, { \"input_name\" : \"tire_pressure_11\" , \"description\" : \"Tire pressure #11\" }, { \"input_name\" : \"tire_pressure_12\" , \"description\" : \"Tire pressure #12\" }, { \"input_name\" : \"tire_pressure_13\" , \"description\" : \"Tire pressure #13\" }, { \"input_name\" : \"tire_pressure_14\" , \"description\" : \"Tire pressure #14\" }, { \"input_name\" : \"tire_pressure_15\" , \"description\" : \"Tire pressure #15\" }, { \"input_name\" : \"tire_pressure_16\" , \"description\" : \"Tire pressure #16\" }, { \"input_name\" : \"tire_pressure_17\" , \"description\" : \"Tire pressure #17\" }, { \"input_name\" : \"tire_pressure_18\" , \"description\" : \"Tire pressure #18\" }, { \"input_name\" : \"tire_pressure_19\" , \"description\" : \"Tire pressure #19\" }, { \"input_name\" : \"tire_pressure_2\" , \"description\" : \"Tire pressure #2\" }, { \"input_name\" : \"tire_pressure_20\" , \"description\" : \"Tire pressure #20\" }, { \"input_name\" : \"tire_pressure_21\" , \"description\" : \"Tire pressure #21\" }, { \"input_name\" : \"tire_pressure_22\" , \"description\" : \"Tire pressure #22\" }, { \"input_name\" : \"tire_pressure_23\" , \"description\" : \"Tire pressure #23\" }, { \"input_name\" : \"tire_pressure_24\" , \"description\" : \"Tire pressure #24\" }, { \"input_name\" : \"tire_pressure_25\" , \"description\" : \"Tire pressure #25\" }, { \"input_name\" : \"tire_pressure_26\" , \"description\" : \"Tire pressure #26\" }, { \"input_name\" : \"tire_pressure_27\" , \"description\" : \"Tire pressure #27\" }, { \"input_name\" : \"tire_pressure_28\" , \"description\" : \"Tire pressure #28\" }, { \"input_name\" : \"tire_pressure_29\" , \"description\" : \"Tire pressure #29\" }, { \"input_name\" : \"tire_pressure_3\" , \"description\" : \"Tire pressure #3\" }, { \"input_name\" : \"tire_pressure_30\" , \"description\" : \"Tire pressure #30\" }, { \"input_name\" : \"tire_pressure_4\" , \"description\" : \"Tire pressure #4\" }, { \"input_name\" : \"tire_pressure_5\" , \"description\" : \"Tire pressure #5\" }, { \"input_name\" : \"tire_pressure_6\" , \"description\" : \"Tire pressure #6\" }, { \"input_name\" : \"tire_pressure_7\" , \"description\" : \"Tire pressure #7\" }, { \"input_name\" : \"tire_pressure_8\" , \"description\" : \"Tire pressure #8\" }, { \"input_name\" : \"tire_pressure_9\" , \"description\" : \"Tire pressure #9\" }, { \"input_name\" : \"tire_temperature_1\" , \"description\" : \"Tire air temperature #1\" }, { \"input_name\" : \"tire_temperature_10\" , \"description\" : \"Tire air temperature #10\" }, { \"input_name\" : \"tire_temperature_11\" , \"description\" : \"Tire air temperature #11\" }, { \"input_name\" : \"tire_temperature_12\" , \"description\" : \"Tire air temperature #12\" }, { \"input_name\" : \"tire_temperature_13\" , \"description\" : \"Tire air temperature #13\" }, { \"input_name\" : \"tire_temperature_14\" , \"description\" : \"Tire air temperature #14\" }, { \"input_name\" : \"tire_temperature_15\" , \"description\" : \"Tire air temperature #15\" }, { \"input_name\" : \"tire_temperature_16\" , \"description\" : \"Tire air temperature #16\" }, { \"input_name\" : \"tire_temperature_17\" , \"description\" : \"Tire air temperature #17\" }, { \"input_name\" : \"tire_temperature_18\" , \"description\" : \"Tire air temperature #18\" }, { \"input_name\" : \"tire_temperature_19\" , \"description\" : \"Tire air temperature #19\" }, { \"input_name\" : \"tire_temperature_2\" , \"description\" : \"Tire air temperature #2\" }, { \"input_name\" : \"tire_temperature_20\" , \"description\" : \"Tire air temperature #20\" }, { \"input_name\" : \"tire_temperature_21\" , \"description\" : \"Tire air temperature #21\" }, { \"input_name\" : \"tire_temperature_22\" , \"description\" : \"Tire air temperature #22\" }, { \"input_name\" : \"tire_temperature_23\" , \"description\" : \"Tire air temperature #23\" }, { \"input_name\" : \"tire_temperature_24\" , \"description\" : \"Tire air temperature #24\" }, { \"input_name\" : \"tire_temperature_25\" , \"description\" : \"Tire air temperature #25\" }, { \"input_name\" : \"tire_temperature_26\" , \"description\" : \"Tire air temperature #26\" }, { \"input_name\" : \"tire_temperature_27\" , \"description\" : \"Tire air temperature #27\" }, { \"input_name\" : \"tire_temperature_28\" , \"description\" : \"Tire air temperature #28\" }, { \"input_name\" : \"tire_temperature_29\" , \"description\" : \"Tire air temperature #29\" }, { \"input_name\" : \"tire_temperature_3\" , \"description\" : \"Tire air temperature #3\" }, { \"input_name\" : \"tire_temperature_30\" , \"description\" : \"Tire air temperature #30\" }, { \"input_name\" : \"tire_temperature_4\" , \"description\" : \"Tire air temperature #4\" }, { \"input_name\" : \"tire_temperature_5\" , \"description\" : \"Tire air temperature #5\" }, { \"input_name\" : \"tire_temperature_6\" , \"description\" : \"Tire air temperature #6\" }, { \"input_name\" : \"tire_temperature_7\" , \"description\" : \"Tire air temperature #7\" }, { \"input_name\" : \"tire_temperature_8\" , \"description\" : \"Tire air temperature #8\" }, { \"input_name\" : \"tire_temperature_9\" , \"description\" : \"Tire air temperature #9\" }, { \"input_name\" : \"uds_adblue_tanklevel_absolut\" , \"description\" : \"UDS: Level of AdBlue fluid\" }, { \"input_name\" : \"uds_adblue_tanklevel_percent\" , \"description\" : \"UDS: Level of AdBlue fluid (percent)\" }, { \"input_name\" : \"uds_ambient_air_temp\" , \"description\" : \"UDS: Ambient air temperature\" }, { \"input_name\" : \"uds_battery_state_percent\" , \"description\" : \"UDS: Battery level\" }, { \"input_name\" : \"uds_battery_voltage\" , \"description\" : \"UDS: Battery voltage\" }, { \"input_name\" : \"uds_consumption\" , \"description\" : \"UDS: Fuel consumption\" }, { \"input_name\" : \"uds_consumption_average\" , \"description\" : \"UDS: Average fuel consumption\" }, { \"input_name\" : \"uds_consumption_average_high\" , \"description\" : \"UDS: Average high fuel consumption\" }, { \"input_name\" : \"uds_consumption_average_low\" , \"description\" : \"UDS: Average low fuel consumption\" }, { \"input_name\" : \"uds_consumption_since_reset\" , \"description\" : \"UDS: Fuel consumption since reset\" }, { \"input_name\" : \"uds_eco_co2_score\" , \"description\" : \"UDS: Environmental score\" }, { \"input_name\" : \"uds_engine_coolant_temp\" , \"description\" : \"UDS: Coolant temperature\" }, { \"input_name\" : \"uds_engine_oil_temperature\" , \"description\" : \"UDS: Oil temperature\" }, { \"input_name\" : \"uds_fuel_tank_level_absolute\" , \"description\" : \"UDS: Fuel level\" }, { \"input_name\" : \"uds_fuel_tank_level_percent\" , \"description\" : \"UDS: Fuel level (percent)\" }, { \"input_name\" : \"uds_odometer\" , \"description\" : \"UDS: Odometer\" }, { \"input_name\" : \"uds_rpm\" , \"description\" : \"UDS: RPM\" }, { \"input_name\" : \"uds_service_days_since_last\" , \"description\" : \"UDS: Days since last service\" }, { \"input_name\" : \"uds_service_distance_snc_lst\" , \"description\" : \"UDS: Km since last service\" }, { \"input_name\" : \"uds_service_interval_days\" , \"description\" : \"UDS: Days till next service\" }, { \"input_name\" : \"uds_service_interval_distance\" , \"description\" : \"UDS: Distance to drive till next service\" }, { \"input_name\" : \"uds_service_max_days\" , \"description\" : \"UDS: Max days of service interval\" }, { \"input_name\" : \"uds_service_max_distance\" , \"description\" : \"UDS: Max km of service interval\" }, { \"input_name\" : \"uds_speed\" , \"description\" : \"UDS: Speed\" }, { \"input_name\" : \"uds_steer_angle\" , \"description\" : \"UDS: Steer angle\" }, { \"input_name\" : \"uds_tank_level_cng_percent\" , \"description\" : \"UDS: Cng fuel tank level (percent)\" }, { \"input_name\" : \"uds_throttle\" , \"description\" : \"UDS: Throttle\" }, { \"input_name\" : \"uds_time_since_engine_start\" , \"description\" : \"UDS: Run time since engine start\" }, { \"input_name\" : \"uds_tire_pressure_front_left\" , \"description\" : \"UDS: Tire pressure front left\" }, { \"input_name\" : \"uds_tire_pressure_front_right\" , \"description\" : \"UDS: Tire pressure front right\" }, { \"input_name\" : \"uds_tire_pressure_rear_left\" , \"description\" : \"UDS: Tire pressure rear left\" }, { \"input_name\" : \"uds_tire_pressure_rear_right\" , \"description\" : \"UDS: Tire pressure rear right\" }, { \"input_name\" : \"user_data_1\" , \"description\" : \"Custom user data #1\" }, { \"input_name\" : \"user_data_10\" , \"description\" : \"Custom user data #10\" }, { \"input_name\" : \"user_data_11\" , \"description\" : \"Custom user data #11\" }, { \"input_name\" : \"user_data_12\" , \"description\" : \"Custom user data #12\" }, { \"input_name\" : \"user_data_13\" , \"description\" : \"Custom user data #13\" }, { \"input_name\" : \"user_data_14\" , \"description\" : \"Custom user data #14\" }, { \"input_name\" : \"user_data_15\" , \"description\" : \"Custom user data #15\" }, { \"input_name\" : \"user_data_16\" , \"description\" : \"Custom user data #16\" }, { \"input_name\" : \"user_data_17\" , \"description\" : \"Custom user data #17\" }, { \"input_name\" : \"user_data_18\" , \"description\" : \"Custom user data #18\" }, { \"input_name\" : \"user_data_19\" , \"description\" : \"Custom user data #19\" }, { \"input_name\" : \"user_data_2\" , \"description\" : \"Custom user data #2\" }, { \"input_name\" : \"user_data_20\" , \"description\" : \"Custom user data #20\" }, { \"input_name\" : \"user_data_21\" , \"description\" : \"Custom user data #21\" }, { \"input_name\" : \"user_data_22\" , \"description\" : \"Custom user data #22\" }, { \"input_name\" : \"user_data_23\" , \"description\" : \"Custom user data #23\" }, { \"input_name\" : \"user_data_24\" , \"description\" : \"Custom user data #24\" }, { \"input_name\" : \"user_data_25\" , \"description\" : \"Custom user data #25\" }, { \"input_name\" : \"user_data_26\" , \"description\" : \"Custom user data #26\" }, { \"input_name\" : \"user_data_27\" , \"description\" : \"Custom user data #27\" }, { \"input_name\" : \"user_data_28\" , \"description\" : \"Custom user data #28\" }, { \"input_name\" : \"user_data_29\" , \"description\" : \"Custom user data #29\" }, { \"input_name\" : \"user_data_3\" , \"description\" : \"Custom user data #3\" }, { \"input_name\" : \"user_data_30\" , \"description\" : \"Custom user data #30\" }, { \"input_name\" : \"user_data_31\" , \"description\" : \"Custom user data #31\" }, { \"input_name\" : \"user_data_32\" , \"description\" : \"Custom user data #32\" }, { \"input_name\" : \"user_data_4\" , \"description\" : \"Custom user data #4\" }, { \"input_name\" : \"user_data_5\" , \"description\" : \"Custom user data #5\" }, { \"input_name\" : \"user_data_6\" , \"description\" : \"Custom user data #6\" }, { \"input_name\" : \"user_data_7\" , \"description\" : \"Custom user data #7\" }, { \"input_name\" : \"user_data_8\" , \"description\" : \"Custom user data #8\" }, { \"input_name\" : \"user_data_9\" , \"description\" : \"Custom user data #9\" } ] } Errors \u00b6 General types only.","title":"Input Name"},{"location":"backend-api/resources/tracking/tracker/sensor/input_name/#input-name","text":"API base path: /tracker/sensor/input_name . API call to get all sensor inputs and state fields existing in the system and their descriptions.","title":"Input name"},{"location":"backend-api/resources/tracking/tracker/sensor/input_name/#api-actions","text":"","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/sensor/input_name/#list","text":"This will provide descriptions of all sensor inputs and state fields present in the system. These descriptions will be given in the language according to the user's locale.","title":"list"},{"location":"backend-api/resources/tracking/tracker/settings/","text":"Tracker settings actions \u00b6 Contains API calls to get and change tracker's label and group. API actions \u00b6 API base path: /tracker/settings . read \u00b6 Gets base settings for the specified tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/settings/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456}' HTTP GET https://api.navixy.com/v2/tracker/settings/read?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456 Response \u00b6 { \"success\" : true , \"settings\" : { \"label\" : \"Courier\" , \"group_id\" : 1 } } label - string. User-defined label for this tracker, e.g. \"Courier\". group_id - int. Tracker group id. 0 if tracker does not belong to any group. Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. update \u00b6 Updates the settings of the specified tracker. required sub-user rights: tracker_update . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 group_id Tracker group ID. 0 if tracker does not belong to any group. The specified group must exist. int 1 label User-defined label for this tracker, e.g. \"Courier\". Must consist of printable characters and have length between 1 and 60. Cannot contain < and > symbols. string \"Courier\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/settings/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"group_id\": 1, \"label\": \"Courier\"}' HTTP GET https://api.navixy.com/v2/tracker/settings/update?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&group_id=1&label=Courier Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 204 \u2013 Entity not found - if there is no group with the specified group id.","title":"Index"},{"location":"backend-api/resources/tracking/tracker/settings/#tracker-settings-actions","text":"Contains API calls to get and change tracker's label and group.","title":"Tracker settings actions"},{"location":"backend-api/resources/tracking/tracker/settings/#api-actions","text":"API base path: /tracker/settings .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/settings/#read","text":"Gets base settings for the specified tracker.","title":"read"},{"location":"backend-api/resources/tracking/tracker/settings/#update","text":"Updates the settings of the specified tracker. required sub-user rights: tracker_update .","title":"update"},{"location":"backend-api/resources/tracking/tracker/settings/lbs/","text":"LBS settings \u00b6 Contains API calls for reading and changing LBS settings. It is responsible for the LBS detection radius portlet in devices and settings tab in the UI. LBS (Location-based service) technology allows to determine the tracker's location without using standard location services such as GPS, GLONASS, Galileo or Beidou. LBS locates the position using cellular base stations or Wi-Fi access points. API actions \u00b6 API base path: /tracker/settings/lbs . read \u00b6 Gets LBS settings for the specified tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/settings/lbs/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456}' HTTP GET https://api.navixy.com/v2/tracker/settings/lbs/read?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456 Response \u00b6 { \"success\" : true , \"max_radius\" : 300 } max_radius - int. Max allowed radius for LBS points in meters. Min=0, max=10000. Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. update \u00b6 Updates LBS settings for the specified tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 max_radius Max allowed radius for LBS points in meters. Min=0, max=10000. int 1000 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/settings/lbs/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"max_radius\": 1000}' HTTP GET https://api.navixy.com/v2/tracker/settings/lbs/update?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&max_radius=1000 Response \u00b6 { \"success\" : true } Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason.","title":"Lbs"},{"location":"backend-api/resources/tracking/tracker/settings/lbs/#lbs-settings","text":"Contains API calls for reading and changing LBS settings. It is responsible for the LBS detection radius portlet in devices and settings tab in the UI. LBS (Location-based service) technology allows to determine the tracker's location without using standard location services such as GPS, GLONASS, Galileo or Beidou. LBS locates the position using cellular base stations or Wi-Fi access points.","title":"LBS settings"},{"location":"backend-api/resources/tracking/tracker/settings/lbs/#api-actions","text":"API base path: /tracker/settings/lbs .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/settings/lbs/#read","text":"Gets LBS settings for the specified tracker.","title":"read"},{"location":"backend-api/resources/tracking/tracker/settings/lbs/#update","text":"Updates LBS settings for the specified tracker.","title":"update"},{"location":"backend-api/resources/tracking/tracker/settings/tracking/","text":"Tracking mode \u00b6 API calls for reading and setting data transmission and operating modes of devices. It is responsible for the tracking mode portlet in devices and settings tab in the UI. The list of settings can vary depending on model of the used tracker, the principle of its work and its functionality. API actions \u00b6 API base path: /tracker/settings/tracking . read \u00b6 Gets tracking settings for the specified tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/settings/tracking/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456}' HTTP GET https://api.navixy.com/v2/tracker/settings/tracking/read?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456 Response \u00b6 Returned fields may differ from model to model. See tracking profiles for more information. { \"success\" : true , \"value\" : { < tra cki n g se tt i n gs> } } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 214 \u2013 Requested operation or parameters are not supported by the device - if device model has no tracking settings at all. update \u00b6 Sends new tracking settings to the specified tracker. required sub-user rights: tracker_configure . Parameters \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int tracking_settings Set of fields which differ from model to model. See tracking profiles for more information. JSON object Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/settings/tracking/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"tracking_settings\": {\"tracking_angle\": 30, \"tracking_distance\": 100, \"tracking_interval\": 60, \"on_stop_tracking_interval\": 180, \"sleep_mode\": \"disabled\", \"stop_detection\": \"ignition\"}}' Response \u00b6 Returned fields may differ from model to model. See tracking profiles for more information. { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 214 \u2013 Requested operation or parameters are not supported by the device - if device model has no tracking settings at all. 219 \u2013 Not allowed for clones of the device - if specified tracker is clone of another tracker.","title":"Tracking"},{"location":"backend-api/resources/tracking/tracker/settings/tracking/#tracking-mode","text":"API calls for reading and setting data transmission and operating modes of devices. It is responsible for the tracking mode portlet in devices and settings tab in the UI. The list of settings can vary depending on model of the used tracker, the principle of its work and its functionality.","title":"Tracking mode"},{"location":"backend-api/resources/tracking/tracker/settings/tracking/#api-actions","text":"API base path: /tracker/settings/tracking .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/settings/tracking/#read","text":"Gets tracking settings for the specified tracker.","title":"read"},{"location":"backend-api/resources/tracking/tracker/settings/tracking/#update","text":"Sends new tracking settings to the specified tracker. required sub-user rights: tracker_configure .","title":"update"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/","text":"Tracking profiles \u00b6 Contains tracking profiles of all device models with description. albatross_s6 \u00b6 Tracking profile for Albatross S6. { \"tracking_interval\" : 30 , \"tracking_distance\" : 100 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. albatross_s8_5 \u00b6 Tracking profile for Albatross S8.5. { \"tracking_interval\" : 30 , \"psm_interval\" : 60000 , \"psm_mode\" : 0 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. psm_interval - optional int. Duration in seconds for the device to stay in the deep sleep mode. Min=600, max=65535. psm_mode - int. Define the sleep level. Min=0, max=1. apkcom \u00b6 Tracking profile for \u0410\u041f\u041a \u041a\u041e\u041c ASC-2 GLONASS/GPS, \u0410\u041f\u041a \u041a\u041e\u041c ASC-6 GLONASS/GPS, \u0410\u041f\u041a \u041a\u041e\u041c ASC-7, \u0410\u041f\u041a \u041a\u041e\u041c ASC-8. { \"tracking_angle\" : 30 , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=300. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000. arknav_x8 \u00b6 Tracking profile for Arknav RX8. { \"tracking_angle\" : 30 , \"tracking_interval\" : 60 , \"tracking_distance\" : 150 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=65534. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65534. arnavi2 \u00b6 Arnavi 2 tracking profile. { \"tracking_angle\" : 30 , \"tracking_distance\" : 100 , \"min_tracking_interval\" : 30 , \"max_tracking_interval\" : 300 , \"speed_change\" : 50 , \"freeze_by_speed\" : false , \"freeze_by_motion\" : true , \"freeze_by_ignition\" : false } * tracking_angle \u2013 int. Degrees 10-255, the device will send tracking data when course changing more than defined value. * tracking_distance \u2013 int. Distance in meters 50-65535, e.g. 100 means that the device will send data every 100 meters. * min_tracking_interval \u2013 int. Min interval in seconds 30-255, e.g. 30 means that the device will send tracking data no more frequently than every 30 seconds. * max_tracking_interval \u2013 int. Max interval in seconds 30-65535, e.g. 30 means that the device will send tracking data not less frequently than every 30 seconds. * speed_change \u2013 int. Kph 3-255, the device will send tracking data when speed changing more than defined value. * freeze_by_speed \u2013 boolean. Freeze coordinates when speed is less than 2kph. * freeze_by_motion \u2013 boolean. Freeze coordinates when motion sensor detects no motion. * freeze_by_ignition \u2013 boolean. Freeze coordinates when ignition is OFF. arnavi4 \u00b6 Tracking profile for Arnavi 4, Arnavi 5, Arnavi Integral, Arnavi Integral-2, Arnavi Integral-3. { \"max_tracking_interval\" : 60 , \"min_tracking_interval\" : 5 , \"speed_change\" : 10 , \"tracking_angle\" : 30 , \"tracking_distance\" : 150 } max_tracking_interval \u2013 int. Max interval in seconds 30-65535, e.g. 30 means that the device will send tracking data not less frequently than every 30 seconds. min_tracking_interval \u2013 int. Min interval in seconds 30-255, e.g. 30 means that the device will send tracking data no more frequently than every 30 seconds. speed_change \u2013 int. Kph 3-255, the device will send tracking data when speed changing more than defined value. tracking_angle \u2013 int. Degrees 10-255, the device will send tracking data when course changing more than defined value. tracking_distance \u2013 int. Distance in meters 50-65535, e.g. 100 means that the device will send data every 100 meters. atlanta \u00b6 Tracking profile for Atlanta L-100, Atlanta O-300, Atlanta PT-100, Atlanta W-track, Atlanta WP-30C. { \"tracking_distance\" : 150 , \"tracking_interval\" : 60 } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65534. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000. atlanta_pt100 \u00b6 Tracking profile for Atlanta PT-100. { \"tracking_interval\" : 300 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=300, max=18000. atrack \u00b6 ATrack tracking profile. { \"control_mode\" : \"acc\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 150 , \"tracking_angle\" : 30 , \"psm_mode\" : 0 , \"psm_interval\" : 30 , \"on_stop_tracking_interval\" : 1 } * control_mode - optional enum . Mode of tracking by the ACC or engine status. Can be \"acc\" | \"engine_status\". * tracking_interval - optional int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535x10, default=300. * tracking_distance - optional int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535, default=100. * tracking_angle - optional int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=80, default=10. * psm_mode - optional int. Define the sleep level, 0 \u2013 no sleeping, 1- light sleep (GPS Off, GPRS On, G-sensor On), 2- deep sleep (GPS Off, GPRS Off, G-sensor On). Min=0, max=2, default=0. * psm_interval - optional int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=65535x60, default=90x60. * on_stop_tracking_interval - int. Minimum time in seconds that must elapse before reporting next position while the ACC is in Off status. \"acc\" in control_mode must be set in order to use this time interval. Min=1, max=65535x10, default=15x60. autofon \u00b6 Autofon profile. { \"type\" : \"interval\" , \"tracking_interval\" : 30 , \"online_on_ext_power\" : true , \"timer1_time\" : \"2020-09-16 03:17:26\" , \"timer1_interval\" : 15 , \"timer2_time\" : \"2020-09-18 03:17:26\" , \"timer2_interval\" : 30 } type - enum . Tracking type \"interval\" or \"power_save\". tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=240. online_on_ext_power - boolean. Connect to server when external power connected. timer1_time - date/time. Date/time for timer1 for checking incoming SMS commands. timer1_interval - int. Interval to wakeup for timer1, minutes, min=15. timer2_time - date/time. Date/time for timer2 for sending location. timer2_interval - int. Interval to wakeup for timer1, minutes, min=15. autoleaders_st901 \u00b6 Tracking profile for Auto Leaders ST-901, Auto Leaders ST-901M. { \"psm_interval\" : 60 , \"psm_mode\" : 0 , \"tracking_interval\" : 30 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=18000. psm_mode - int. Define the sleep level. Min=0, max=1. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000. autoseeker_at17 \u00b6 Tracking profile for Autoseeker AT-17. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=1, max=18000. avlsat_neos \u00b6 Tracking profile for AVLSAT NEO-S. { \"tracking_interval\" : 60 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=60, max=599940. bitrek310 \u00b6 Tracking profile for BI 310 CICADA, NaviTrek 310 Cicada. { \"psm_interval\" : 12000 , \"psm_mode\" : 0 , \"tracking_interval\" : 720 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=300, max=86400. psm_mode - int. Define the sleep level. Min=0, max=1. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=720, max=21600. bofan_pt521 \u00b6 Tracking profile for Bofan PT502, Bofan PT521. { \"tracking_angle\" : 30 , \"tracking_distance\" : 100 , \"tracking_interval\" : 60 , \"type\" : \"interval\" } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=90. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=1200. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\". box \u00b6 Tracking profile for BOX-tracker, BOXtracker 2, Galileosky Boxfinder v1.0. { \"tracking_angle\" : 30 , \"tracking_interval\" : 120 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=4294968. boxfinder \u00b6 Tracking profile for Galileosky Boxfinder v1.0. { \"shock_value\" : 1.5 , \"sleep_timeout\" : 180 } shock_value - double. Can be min=0.5, max=4 g. sleep_timeout - int. Can be min=1, max=1440 minutes. bsj \u00b6 Tracking profile for BSJ KM-01/02, Gosafe G1C. { \"tracking_angle\" : 30 , \"tracking_interval\" : 150 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. c2stek_fl \u00b6 Tracking profile for C2STEK FL10, C2STEK FL2000G. { \"tracking_angle\" : 30 , \"tracking_distance\" : 300 , \"tracking_interval\" : 120 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=360. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=9999. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=9999. calamp \u00b6 Tracking profile for CalAmp ATU-620, CalAmp LMU-1100, CalAmp LMU-1200, CalAmp LMU-200, CalAmp LMU-2030, CalAmp LMU-2600, CalAmp LMU-2630, CalAmp LMU-2720, CalAmp LMU-300, CalAmp LMU-3030, CalAmp LMU-3640, CalAmp LMU-400, CalAmp LMU-4200, CalAmp LMU-4230, CalAmp LMU-4520, CalAmp LMU-5530, CalAmp LMU-700, CalAmp LMU-800, CalAmp LMU-900, CalAmp TTU-1200, CalAmp TTU-2830, CalAmp TTU-700. { \"psm_interval\" : 600 , \"tracking_angle\" : 30 , \"tracking_distance\" : 200 , \"tracking_interval\" : 60 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. cantrack_t80 \u00b6 Tracking profile for Cantrack T80. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=1000. careu \u00b6 Tracking profile for CAREU U1 Lite Plus, CAREU U1 Plus, CAREU UT1, CAREU UW1, CAREU Ucan, CAREU Ueco, CAREU Ugo, IntelliTrac A1, Intellitrac S1. { \"tracking_angle\" : 45 , \"tracking_distance\" : 50 , \"tracking_interval\" : 20 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=25, max=50000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=65535. cargo \u00b6 Tracking profile for Cargo Light 2, Cargo Mini 2, Cargo Pro 2. { \"psm_interval\" : 600 , \"tracking_angle\" : 60 , \"tracking_distance\" : 100 , \"tracking_interval\" : 30 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. carscop_cctr800 \u00b6 Tracking profile for Carscop CCTR-808S, Carscop CCTR-809. { \"psm_interval\" : 3600 , \"psm_mode\" : 1 , \"tracking_interval\" : 30 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=3600, max=432000. psm_mode - int. Define the sleep level. Min=0, max=1. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=999. carscop_cctr830 \u00b6 Tracking profile for Carscop CCTR-830, Toptracking CCTR-830G. { \"tracking_interval\" : 40 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=999. castel_idd \u00b6 Tracking profile for Sinocastel IDD-213. { \"sleep_report_interval\" : 120 , \"tracking_angle\" : 20 , \"tracking_distance\" : 500 , \"tracking_interval\" : 200 , \"upload_records_count\" : 1 } sleep_report_interval - int. Interval in minutes, e.g. 10 means that the device will send tracking data every 10 minutes in a sleep mode. Min=10, max=1440. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=90. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=600. upload_records_count - int. Count of uploaded records. Min =1, max=10. castel_interval \u00b6 Tracking profile for Sinocastel MPIP-620, Sinocastel PT-690, Sinocastel PT-718S. { \"tracking_interval\" : 60 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=18000. cguard \u00b6 cGuard tracking profile. { \"tracking_interval\" : 60 , \"tracking_distance\" : 100 , \"tracking_angle\" : 15 , \"psm_interval\" : 300 } * tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=65535, default=60. * tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=65535, default=100. * tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180, default=15. * psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=0, max=65535, default=300. cguard_asset \u00b6 cGuard tracking profile for asset trackers. name: 'cguard_asset' { \"tracking_interval\" : 60 , \"tracking_distance\" : 100 , \"tracking_angle\" : 45 , \"psm_interval\" : 300 , \"mode\" : \"ASSET\" , \"wakeup_type\" : \"PERIODICAL\" , \"wakeup_day\" : \"EVERYDAY\" , \"wakeup_time\" : \"12:00\" , \"wakeup_period\" : 1440 , \"moving_detection\" : true } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=65535, default=60. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=65535, default=100. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180, default=45. psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=0, max=65535, default=300. mode - enum . Device working mode. TRACKER means that device work in the continuous mode. ASSET means that device work in the periodical mode and wakes up on schedule or by period. wakeup_type - enum . Can be \"SCHEDULED\" | \"PERIODICAL\". How device wakes up in ASSET mode. default=\"PERIODICAL\". wakeup_day - enum . Can be \"EVERYDAY\" | \"MONDAY\" | \"TUESDAY\" | \"WEDNESDAY\" | \"THURSDAY\" | \"FRIDAY\" | \"SATURDAY\" | \"SUNDAY\", default=\"EVERYDAY\". What day to wake up if wakeup_type = SCHEDULED . wakeup_time - string. Specifies the time in minutes to wake up if wakeup_type = SCHEDULED . Format HH:mm , default=\"12:00\" wakeup_period - int. Wakeup period in minutes. Min=15, max=65535, default=1440. Required if wakeup_type = PERIODICAL moving_detection - boolean. If true means that device will be wakes up at the beginning of the movement. Required if mode == 'ASSET' concox_distance_interval \u00b6 Tracking profile for Concox X3. { \"tracking_distance\" : 100 , \"tracking_interval\" : 30 } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000. concox_gt350 \u00b6 Tracking profile for Concox GT350. { \"psm_interval\" : 600 , \"psm_mode\" : 1 , \"tracking_interval\" : 10 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=600, max=432000. psm_mode - int. Define the sleep level. Min=0, max=1. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=1800. concox_gt700 \u00b6 Tracking profile for Concox AT3, Concox AT4, Concox GT710. { \"psm_interval\" : 2 , \"tracking_interval\" : 1 , \"type\" : \"interval\" , \"wakeup_time\" : \"10:20\" } psm_interval - int. Duration in hours for the device to stay in the deep sleep mode. Min=1, max=24. Valid values are 1, 2, 3, 4, 6, 8, 12, 24. tracking_interval - int. Interval in minutes. Min=1, max=30. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\". wakeup_time - string. Format hh:mm . concox_interval \u00b6 Tracking profile for Concox GK309 , Concox GS503, Concox GT03A, Concox GT03C, Concox WeTrack Lite, Concox WeTrack2, Jimi JI09. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000. concox_jv200 \u00b6 Tracking profile for Concox JV200. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000. concox_qbit \u00b6 Tracking profile for Concox QBIT. { \"gps_tracking_interval\" : 10 , \"lbs_tracking_interval\" : 60 , \"mode\" : \"lbs\" } gps_tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds in gps mode. Min=30, max=18000. lbs_tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds in lbs mode. Min=30, max=18000. mode - string. Can be \"lbs\" | \"gps\". concoxgt02 \u00b6 Tracking profile for Concox GT02 / TR02. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000. concoxgt06 \u00b6 Tracking profile for Concox GV20, Concox X1, Protrack VT05. { \"psm_interval\" : 3000 , \"tracking_angle\" : 120 , \"tracking_distance\" : 250 , \"tracking_interval\" : 30 , \"type\" : \"intelligent\" } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=65535. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\". default \u00b6 Default tracking profile. { \"type\" : \"interval\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 } type - enum . Can be \"interval\" (send tracking data based on time intervals) or \"distance\" (send tracking data after passing specified distance). tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. default_angle \u00b6 Default profile with optional angle-based tracking. { \"type\" : \"distance\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 } type - enum . Can be \"interval\" (send tracking data based on time intervals) or \"distance\" (send tracking data after passing specified distance). tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - optional int. If specified, the device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. default_powersave \u00b6 Default powersave profile with optional angle-based tracking. { \"type\" : \"power_save\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_interval\" : 65535 , \"psm_mode\" : 2 } type - enum . Can be \"interval\" (send tracking data based on time intervals) or \"distance\" (send tracking data after passing specified distance). tracking_interval - optional int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - optional int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - optional int. If specified, the device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_interval - optional int. Define the time interval in seconds (60-65535) which the unit stays in the sleeping state when type= power_save . psm_mode - optional int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On). defenstar_007 \u00b6 Tracking profile for Defenstar DS007. { \"tracking_interval\" : 65534 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=60, max=65534. defenstar_008 \u00b6 Tracking profile for Defenstar DS008, Gubloos GPS-S1. { \"tracking_interval\" : 1000 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=9999. digitalsystems_dsf22 \u00b6 Tracking profile for DigitalSystems DSF22. { \"tracking_angle\" : 10 , \"tracking_interval\" : 120 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. distance_interval \u00b6 Tracking profile with distance and interval. { \"tracking_distance\" : 250 , \"tracking_interval\" : 3600 } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. distance_interval_angle_ps \u00b6 Tracking profile with distance, interval, angle and power save mode. { \"psm_interval\" : 86400 , \"tracking_angle\" : 10 , \"tracking_distance\" : 100 , \"tracking_interval\" : 60 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. distance_interval_angle \u00b6 Tracking profile with distance, interval and angle. { \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. eelink \u00b6 Tracking profile for Eelink GOT08, Eelink GOT10, Eelink GPT18, Eelink TK-319, Eelink TK116, Eelink TK119. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=18000. eelink_tk116 \u00b6 Tracking profile for Eelink TK116. { \"tracking_interval\" : 3600 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=3600. eelink_v2 \u00b6 Tracking profile for Eelink GPT18, Eelink TK-319. { \"active_tracking_interval\" : 30 , \"gps_working_mode\" : \"always_on\" , \"gsm_working_mode\" : \"auto\" , \"tracking_angle\" : 30 , \"tracking_distance\" : 50 , \"tracking_interval\" : 60 } active_tracking_interval - int. Active tracking interval in seconds. Min=30, max=65535. gps_working_mode - enum . Can be \"always_on\" | \"auto\". gsm_working_mode - enum . Can be \"always_on\" | \"auto\". tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. enfora \u00b6 Tracking profile for Enfora MT-GL (GSM2218), Enfora MT-Gu (GSM2338), Novatel MT4100, SkyPatrol TT8740, SkyPatrol TT8750. { \"tracking_distance\" : 100 , \"tracking_interval\" : 60 } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000. esino \u00b6 Tracking profile for Esino ES-GP34, Esino ES-GT23. { \"tracking_interval\" : 20 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20, max=3600. etrack_tlt2h \u00b6 Tracking profile for E-Track TLT-2H. { \"tracking_interval\" : 600 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=59999. fifotrack \u00b6 Tracking profile for Fifotrack A100, fifotrack A100 FW1.15+, fifotrack A300, fifotrack A300 FW1.23+, fifotrack A600 (FW before V1.07), fifotrack A600 FW1.07+. { \"psm_interval\" : 3600 , \"psm_mode\" : 2 , \"tracking_angle\" : 45 , \"tracking_distance\" : 100 , \"tracking_interval\" : 60 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=0, max=3932100. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep (GPS Off, GPRS Off, G-sensor On). tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=655350. genesis_g36 \u00b6 Tracking profile for Sinocastel HT-770, Ezlink T28, G36, Orion 7, XiLi Technologies PT100. { \"tracking_interval\" : 1 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=1. gl200 \u00b6 Queclink/Ruslink GL200/GL300 profile { \"type\" : \"distance\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_interval\" : 600 , \"movement_detection\" : true , \"non_movement_duration\" : 420 } type - enum . Tracking type \"distance\" or \"interval\" or \"power_save\". tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_interval - int. Sending interval when the tracking type is \"power_save\", seconds. movement_detection - boolean. non_movement_duration - int. In seconds. gl500 \u00b6 Queclink/Ruslink GL500 profile. { \"type\" : \"interval\" , \"tracking_interval\" : 1 , \"wakeup_time\" : \"10:00\" , \"psm_interval\" : 8 } type - enum . Tracking type \"interval\" or \"power save\". tracking_interval - int. Interval in minutes. wakeup_time - int. Wakeup time for power_save mode in a format \"HH:mm\". psm_interval - int. Update interval in power_save mode, hours (1, 2, 3, 4, 6, 8, 12, 24). gt300 \u00b6 Queclink/Ruslink GT300 profile. { \"tracking_interval\" : 5 , \"start_time\" : \"0000\" , \"end_time\" : \"2359\" , \"movement_detection\" : true , \"min_speed\" : 10 , \"min_distance\" : 20 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=5, max=86400. start_time - string. Start time of scheduled fix timing report. The valid format is \"HHMM\" 0000-2359. end_time - string. End time of scheduled fix timing report. The valid format is \"HHMM\" 0000-2359. movement_detection - boolean. Enable suspend reports if the device at rest. min_speed - int. The speed threshold of movement detect, km/h 0-999. min_distance - int. The distance threshold of movement detect, meters 1-9099. gotoptk206_amgps_freko \u00b6 Tracking profile for AMGPS Freko. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=3600. gv500 \u00b6 Queclink/Ruslink GV500 profile. { \"type\" : \"interval\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_mode\" : 1 , \"psm_interval\" : 600 } type - enum . Tracking type when ignition is ON, \"distance\" or \"interval\". tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On). psm_interval - int. Sending interval when the engine is off, seconds. gv55lite \u00b6 Queclink/Ruslink GV55Lite profile. { \"type\" : \"interval\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_mode\" : 1 , \"psm_interval\" : 600 } type - enum . Tracking type when ignition is ON, \"distance\" or \"interval\". tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On). psm_interval - int. Sending interval when the engine is off, seconds. gubloost1 \u00b6 Tracking profile for Defenstar GPS668, Gubloos GPS-T1, MiniFinder Pico. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=9999. haicom_hi603x \u00b6 Tracking profile for Haicom HI-603X. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=2592000. helioversal_m1 \u00b6 Tracking profile for Helioversal M1. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. hhd_g \u00b6 Tracking profile for HHD G-400, HHD G-600. { \"tracking_interval\" : 20 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20. howen_herome \u00b6 Tracking profile for Hero-ME31-08, Hero-ME32-04, Hero-ME41-04. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. hua_sheng_hs3000g \u00b6 Tracking profile for Hua Sheng HS 3000G. { \"psm_interval\" : 600 , \"tracking_angle\" : 10 , \"tracking_interval\" : 30 } psm_interval - int. Sending interval when the engine is off, seconds. Min=60, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=250. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=450. huabao \u00b6 Tracking profile for Huabao HB-T10. { \"tracking_interval\" : 1000 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=9999. intellitrac_x1 \u00b6 Tracking profile for IntelliTrac X1, IntelliTrac X1+. { \"tracking_angle\" : 5 , \"tracking_distance\" : 100 , \"tracking_interval\" : 30 , \"type\" : \"interval\" } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=358. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=65534. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65534. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\". interval \u00b6 Tracking profile with an interval only. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30. interval_angle \u00b6 Tracking profile with an interval and angle. { \"tracking_interval\" : 30 , \"tracking_angle\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. interval_angle_powersave \u00b6 Tracking profile with an interval, angle and powersave mode. { \"psm_interval\" : 60 , \"tracking_angle\" : 55 , \"tracking_interval\" : 30 } psm_interval - int. Sending interval when the engine is off, seconds. Min=60, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=355. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=900. interval_powersave \u00b6 Tracking profile with an interval and powersave mode. { \"psm_interval\" : 3000 , \"psm_mode\" : 1 , \"tracking_interval\" : 30 } psm_interval - int. Sending interval when the engine is off, seconds. Min=60, max=86400. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On). tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=180. jimi_jc100 \u00b6 Tracking profile for Jimi JC100. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000. jinsheng_js810 \u00b6 Tracking profile for Jin Sheng JS810, Jin Sheng JS810S. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65534. jointech_gp \u00b6 Tracking profile for Jointech GP4000, Jointech GP6000, Jointech GP6000F. { \"psm_interval\" : 3600 , \"psm_mode\" : 1 , \"tracking_angle\" : 45 , \"tracking_distance\" : 150 , \"tracking_interval\" : 30 , \"type\" : \"interval\" } psm_interval - int. Sending interval when the engine is off, seconds. Min=300, max=65535. psm_mode - int. Define the sleep level when type != power_save , 1 - no sleeping, 2 - light sleep(GPS Off, GPRS On, G-sensor On), 3 - deep sleep(GPS Off, GPRS Off, G-sensor On). tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=90. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\". jointech_jt701 \u00b6 Tracking profile for Jointech JT701. { \"tracking_interval\" : 240 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=60000. jointech_jt703 \u00b6 Profile for Jointech JT703B { \"tracking_interval\" : 10 , \"sleep_mode\" : \"enabled\" , \"wakeup_timers\" : [ \"10:00:00\" , \"16:00:00\" ], \"sleep_time_in_minutes\" : 60 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=60000. sleep_mode - enum . Can be \"enabled\" | \"disabled\". wakeup_timers - optional string. Define wake-up timers when the sleep mode enabled, 1-48 timers. Local time in a standard format HH:mm:ss . sleep_time_in_minutes - optional int. Define the time interval which the unit stays in the sleeping state when wake-up timers not defined. Min=10, max=1440. jointech_jt707 \u00b6 Tracking profile for Jointech JT707. { \"psm_interval\" : 150 , \"psm_mode\" : 0 , \"tracking_interval\" : 60 } psm_interval - int. Sending interval when the engine is off, seconds. Min=10, max=1440. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On). tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=5, max=43200. keson_ks168 \u00b6 Tracking profile for Keson KS168. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=65535. laipacs911 \u00b6 Tracking profile for Laipac S911 Lola, Laipac-911BL. { \"tracking_distance\" : 1000 , \"tracking_interval\" : 30 , \"type\" : \"distance\" } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=5, max=43200. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\". lk200 \u00b6 Tracking profile for LKGPS LK209A, LKGPS LK209B, LKGPS LK210. { \"tracking_interval\" : 45 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. logosoft \u00b6 Tracking profile for Logosoft Log-101. { \"type\" : \"interval\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 300 , \"tracking_angle\" : 10 } type - enum . Tracking type \"interval\" or \"distance\" or \"intelligent\". tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=300. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10. m7 \u00b6 Profile for Navixy M7. { \"type\" : \"interval\" , \"psm_mode\" : 1 , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_interval\" : 600 , \"wakeup_timer1\" : \"10:00\" , \"wakeup_timer2\" : \"16:00\" , \"wakeup_timer3\" : \"22:00\" } type - enum . Can be \"interval\" (send tracking data based on time intervals), \"distance\" (send tracking data after passing specified distance). psm_mode - int. Power save mode, 0 - disable, 1 - powersave without timers, 2 - powersave with timers. tracking_interval - optional int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - optional int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - optional int. If specified, the device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_interval - optional int. Define the time interval in seconds (600-3932100) which the unit stays in the sleeping state. wakeup_timer - optional string. Timer 1-3. maxtrack_140 \u00b6 Tracking profile for Maxtrack MXT-140. { \"tracking_angle\" : 60 , \"tracking_distance\" : 500 , \"tracking_interval\" : 20 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=25500. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20, max=65535. megastek_gvt430 \u00b6 Tracking profile for Megastek GVT-430. { \"tracking_angle\" : 25 , \"tracking_distance\" : 100 , \"tracking_interval\" : 30 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=60. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=1000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. megastek_mt \u00b6 Tracking profile for Megastek MT-300, Megastek MT-90s, Megastek MT100. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. megastek_mt100 \u00b6 Tracking profile for Megastek MT100. { \"tracking_distance\" : 50 , \"tracking_interval\" : 300 , \"type\" : \"intelligent\" } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\". meiligaovt \u00b6 Tracking profile for GoTop VT360, GoTop VT380, Meiligao VT310, Meitrack VT310, RedView VT310. { \"tracking_angle\" : 30 , \"tracking_distance\" : 200 , \"tracking_interval\" : 10 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350. meitrack \u00b6 Meitrack profile. { \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_mode\" : 0 , \"psm_interval\" : 3600 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_mode - optional int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On). psm_interval - optional int. Define the time interval in seconds which the unit stays in the sleeping state. meitrack_asset \u00b6 Tracking profile for Meitrack T355v2. { \"psm_interval\" : 3932100 , \"psm_mode\" : 0 , \"tracking_angle\" : 10 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=0, max=3932100. psm_mode - optional int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On). tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=655350. meitrack_vehicle \u00b6 Tracking profile for Meitrack MVT100, Meitrack MVT340, Meitrack MVT380, Meitrack MVT600, Meitrack T1, Meitrack T3, Meitrack T333, Meitrack T366G, Meitrack T366L, Meitrack T622G, Meitrack TC68S, Meitrack TC68SG. { \"on_stop_tracking_interval\" : 120 , \"psm_interval\" : 300 , \"psm_mode\" : 2 , \"tracking_angle\" : 45 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } on_stop_tracking_interval - int. Tracking interval in seconds when the vehicle stopped. Min=0, max=655350. psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=0, max=3932100. psm_mode - optional int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On). tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=655350. meitrack_without_ps \u00b6 Tracking profile for Meitrack P66. { \"tracking_angle\" : 45 , \"tracking_distance\" : 150 , \"tracking_interval\" : 60 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=655350. mictrack_mp90 \u00b6 Tracking profile for MicTrack MP-90. { \"tracking_angle\" : 20 , \"tracking_interval\" : 60 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=20, max=180. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=65535. mika_g1 \u00b6 Tracking profile for MIKA G1. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=10000. mrd_100 \u00b6 Tracking profile for MRD-100. { \"tracking_interval\" : 20 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20, max=65535. mwp008_a \u00b6 Tracking profile for Diwei TK116, Moralwinhk P008A, Moralwinhk P168. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350. myrope_m500 \u00b6 Tracking profile for MyRope M528, MyRope M588. { \"psm_interval\" : 60 , \"tracking_distance\" : 10 , \"tracking_interval\" : 50 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=65535. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=1, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=1, max=65535. navisetgt \u00b6 Tracking profile for Naviset GT-10, Naviset GT-20. { \"tracking_angle\" : 120 , \"tracking_distance\" : 150 , \"tracking_interval\" : 240 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=255. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=300. noran \u00b6 Tracking profile for Noran NR008, Noran NR024, Noran NR100. { \"tracking_interval\" : 150 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=15, max=64800. oigo_ar2 \u00b6 Tracking profile for Oigo AR-2GM, Oigo AR-3HU. { \"psm_interval\" : 60 , \"tracking_angle\" : 45 , \"tracking_distance\" : 300 , \"tracking_interval\" : 15 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=15, max=604800. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=60000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=15, max=604800. orange_tk103 \u00b6 Tracking profile for Orange TK-103. { \"tracking_interval\" : 990 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=990. piccolo_atx \u00b6 Tracking profile for Piccolo ATX. { \"tracking_interval\" : 300 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=300, max=86400. piccolo_distance_interval_angle \u00b6 Tracking profile for Piccolo ATX2S, Piccolo Hybrid+, Piccolo STX, Piccolo TMX+. { \"tracking_angle\" : 30 , \"tracking_distance\" : 100 , \"tracking_interval\" : 30 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=30, max=150. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. piccolo_plus \u00b6 Profile Wireless Links for Piccolo Plus { \"sleep_mode\" : \"disabled\" , \"track_by\" : \"interval\" , \"tracking_interval\" : 60 , \"tracking_distance\" : 100 , \"track_by_angle\" : true , \"tracking_angle\" : 30 , \"asset_moving_interval\" : 300 , \"asset_stopped_interval\" : 86400 } sleep_mode - enum . Can be \"disabled\" | \"engine\" | \"asset\" | \"hybrid\". track_by - optional enum . Can be \"interval\" | \"distance\". Need for disabled, engine, hybrid modes. tracking_interval - optional int. Interval in seconds, need for disabled, engine, hybrid modes. Min=60, max=86400. tracking_distance - optional int. Distance in meters, need for disabled, engine, hybrid modes. Min=100, max=10000. track_by_angle - optional boolean. Need for disabled, engine, hybrid modes. tracking_angle - optional int. If specified, the device will additionally send data when it changes direction to specified angle, e.g. 30 degrees, need for disabled, engine, hybrid modes. Min=30, max=150. asset_moving_interval - optional int. Need for asset and hybrid modes. Min=300, max=86400. asset_stopped_interval - optional int. Need for asset and hybrid modes. Min=300, max=86400. redview_vt680 \u00b6 Tracking profile for RedView VT680. { \"tracking_angle\" : 60 , \"tracking_interval\" : 10 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=30, max=270. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350. sanfone \u00b6 Tracking profile for Sanfone SF100, Sanfone SF700. { \"tracking_angle\" : 120 , \"tracking_distance\" : 60 , \"tracking_interval\" : 60 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=360. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=30, max=60000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=999. satsol \u00b6 Tracking profile for SAT-LITE 3, SAT-LITE 4, Sat Lite 2, Sat Pro, Super Lite. { \"psm_interval\" : 30 , \"tracking_angle\" : 10 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=30, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=9999. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. senseitp211 \u00b6 { \"tracking_interval\" : 30 , \"gps_enabled\" : true } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30. gps_enabled - boolean. sheriff_awax12 \u00b6 Tracking profile for Sheriff AWAX12. { \"tracking_interval\" : 900 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=900, max=86400. sinowell_g102 \u00b6 Tracking profile for Sinowell G102. { \"psm_interval\" : 10 , \"tracking_angle\" : 5 , \"tracking_distance\" : 50 , \"tracking_interval\" : 10 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=10, max=65000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=1000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=1000. skypatrol_tt8750plus \u00b6 Tracking profile for SkyPatrol TT8750+. { \"psm_interval\" : 30 , \"tracking_angle\" : 10 , \"tracking_distance\" : 100 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=30, max=18000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000. sleep_active \u00b6 Tracking profile for \u0421\u041a\u0410\u0422-\u041c\u0430\u044f\u043a. { \"active_time\" : 300 , \"sleep_time\" : 300 } active_time - int. Min=300, max=599940 seconds. sleep_time - int. Min=300, max=599940 seconds. spetrotec_iwatcher \u00b6 Tracking profile for Spetrotec i-WATCHER AVL. { \"tracking_distance\" : 100 , \"tracking_interval\" : 60 , \"type\" : \"interval\" } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=60, max=86400. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\". stab_liner \u00b6 Tracking profile for M2M-Cyber GLX, STAB Liner 102. { \"psm_interval\" : 3600 , \"tracking_angle\" : 10 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=0, max=3600. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=3600. starcom_helios \u00b6 Tracking profile for Starcom Helios Advanced, Starcom Helios Hybrid, Starcom Helios TT. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=432000. starline_m17 \u00b6 Tracking profile for Starline M17. { \"psm_interval\" : 600 , \"psm_mode\" : 0 , \"tracking_interval\" : 100 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=3540. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On). tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=300. suntech_distance_interval_angle \u00b6 Tracking profile for Suntech ST200, Suntech ST215, Suntech ST300, Suntech ST310U, Suntech ST340LC, Suntech ST600R, Suntech ST600V, Suntech ST650. { \"tracking_angle\" : 30 , \"tracking_distance\" : 50 , \"tracking_interval\" : 20 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=60000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20, max=60000. suntech_interval \u00b6 Tracking profile for Suntech ST940. { \"tracking_interval\" : 20 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20, max=60000. syrus \u00b6 Tracking profile for Syrus 2G. { \"tracking_angle\" : 5 , \"tracking_distance\" : 200 , \"tracking_interval\" : 30 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=90. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=5000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=9999. telfm \u00b6 Teltonika FM tracking profile. { \"tracking_angle\" : 30 , \"tracking_distance\" : 100 , \"tracking_interval\" : 60 , \"on_stop_tracking_interval\" : 180 , \"sleep_mode\" : \"disabled\" , \"stop_detection\" : \"ignition\" } * tracking_angle \u2013 int. Degrees 10-255, the device will send tracking data when course changing more than defined value. * tracking_distance \u2013 int. Distance in meters 50-65535, e.g. 100 means that the device will send data every 100 meters. * tracking_interval \u2013 int. Interval in seconds 30-255, e.g. 30 means that the device will send tracking data no more frequently than every 30 seconds. * on_stop_tracking_interval \u2013 int. On stop interval in seconds 30-65535, e.g. 30 means that the device will send tracking data not less frequently than every 30 seconds. * sleep_mode \u2013 enum . Can be \"disabled\" | \"soft_sleep\". * stop_detection \u2013 enum . Can be \"ignition\" | \"g_sensor\" | \"gps\". telfm5x \u00b6 Tracking profile for Teltonika FM5500, Teltonika FM6320, Teltonika FMB630, Teltonika FMB640. { \"sleep_mode\" : \"disabled\" , \"sleep_timeout\" : 300 , \"tracking_angle\" : 25 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } sleep_mode \u2013 enum . Can be \"disabled\" | \"soft_sleep\". sleep_timeout - int. Can be min=300, max=2592000 seconds. tracking_angle \u2013 int. Degrees min=0, max=180, the device will send tracking data when course changing more than defined value. tracking_distance \u2013 int. Distance in meters min=50, max=65535, e.g. 100 means that the device will send data every 100 meters. tracking_interval \u2013 int. Interval in seconds min=30, max=2592000, e.g. 30 means that the device will send tracking data no more frequently than every 30 seconds. topfly \u00b6 Tracking profile for TopFlyTech T8603, TopFlyTech T8608, TopFlyTech T8803, TopFlyTech T8803 Pro, TopFlyTech T8803+, TopFlyTech T8806, TopFlyTech T8806+, TopFlyTech T8806+R, TopFlyTech T8808A, TopFlyTech T8808A+, TopFlyTech T8808B, TopFlyTech T8808B+. { \"psm_interval\" : 10000 , \"tracking_angle\" : 60 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=0, max=65535. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=90. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=65535. topshine_distance_interval \u00b6 Tracking profile for TopShine MT02, TopShine MT08, TopShine OGT100, TopShine VT1000, TopShine VT200W, TopShine VT900. { \"tracking_distance\" : 50 , \"tracking_interval\" : 10 } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350. topshine_distance_interval_angle \u00b6 Tracking profile for TopShine MT08, TopShine OGT100, TopShine VT1000. { \"tracking_angle\" : 15 , \"tracking_distance\" : 50 , \"tracking_interval\" : 60 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350. topten \u00b6 Tracking profile for TopTen GT08, TopTen TK-510, TopTen TK228. { \"tracking_angle\" : 25 , \"tracking_interval\" : 30 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=359. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350. totarget \u00b6 Tracking profile for TT-08, VG-eLock7A. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=300. totem \u00b6 Tracking profile for TotemTech AT05, TotemTech AT07. { \"psm_interval\" : 15000 , \"tracking_angle\" : 10 , \"tracking_distance\" : 60 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=10, max=18000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=10, max=18000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=18000. trackertech_msp320 \u00b6 Tracking profile for Tracker Technology MSP320. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. trackertech_msp340 \u00b6 Tracking profile for Tracker Technology MSP340. { \"psm_interval\" : 180 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=180, max=86400. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. trackertech_msp350 \u00b6 Tracking profile for Tracker Technology MSP350. { \"psm_interval\" : 2147483647 , \"psm_mode\" : 0 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=2147483647. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On), 3 - ultra deep sleep. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400. tramigo \u00b6 Profile for Tramigo models that do not support the interval in seconds { \"tracking_interval\" : 1 , \"tracking_distance\" : 0.5 , \"tracking_angle\" : 20 , \"on_stop_tracking_interval\" : 120 , \"sleep_mode\" : \"disabled\" } tracking_interval - int. Interval in minutes, e.g. 30 means that the device will send tracking data every 30 minutes. Min=1, max=10080. tracking_distance - float. Distance in kilometers, e.g. 0.5 means that the device will send data every 500 meters. Min=0.5, max=20. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=20, max=180. on_stop_tracking_interval - int. Interval in minutes when not in a trip. Min=1, max=10080. sleep_mode - sting enum. Can be \"disabled\" | \"enabled\". tramigo_with_seconds \u00b6 Profile for Tramigo models that do support the interval in seconds { \"tracking_interval\" : 30 , \"tracking_distance\" : 20 , \"tracking_angle\" : 180 , \"on_stop_tracking_interval\" : 100 , \"sleep_mode\" : \"enabled\" } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=604800. tracking_distance - float. Distance in kilometers, e.g. 0.5 means that the device will send data every 500 meters. Min=0.5, max=20. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=20, max=180. on_stop_tracking_interval - int. Interval in minutes when not in a trip. Min=1, max=10080. sleep_mode - sting enum. Can be \"disabled\" | \"enabled\". tt1 \u00b6 Profile for Navixy TT-1. { \"type\" : \"interval\" , \"psm_mode\" : 2 , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_interval\" : 60 , \"bat_voltage\" : \"1.5\" , \"bat_psm_interval\" : 600 } type - enum . Can be \"interval\" (send tracking data based on time intervals), \"distance\" (send tracking data after passing specified distance). psm_mode - int. power save mode, 0 - disable, 1 - powersave mode, 2 - Back-up Battery Power Saving Mode tracking_interval - optional int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - optional int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - optional int. If specified, the device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_interval - optional int. Define the time interval in seconds (600-3932100) which the unit stays in the sleeping state. bat_voltage - optional string. Threshold of low back-up battery voltage. bat_psm_interval - optional int. Sleeping duration when battery voltage below defined threshold, seconds. ulbotech_t300 \u00b6 Tracking profile for IMTSA TR2-OBD, Ulbotech T361, Ulbotech T381. { \"tracking_angle\" : 3 , \"tracking_distance\" : 150 , \"tracking_interval\" : 30 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=3, max=20. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=25500. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=900. vjoy \u00b6 Tracking profile for Kingneed C30, Kingneed T0024 / T4024, Kingneed T0026, Kingneed T1124, Kingneed T12, Kingneed T16/T18/T19, Kingneed T300, Kingneed T3124 / T5124, Kingneed T500, Kingneed T6024, Kingneed T6124, Kingneed T630, Kingneed T8124, Kingneed TK10, Kingneed TK101, Kingneed TK20, Kingneed TK5, VJOYCAR T0026G, VJOYCAR T13G, VJOYCAR T13GSE, VJOYCAR T633G, VJOYCAR TK10SDC, VJoy T12, VJoy TK05, VJoy TK10GSE, VJoy TK10GSE Solar, VJoy TK20SE. { \"continuous_report_interval\" : 10 , \"motion_interval\" : 30 , \"psm_mode\" : 1 , \"psm_wake_up_interval\" : 1 } continuous_report_interval - int. Min=10, max=5940 seconds. motion_interval - int. Min=30, max=999 seconds. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On). psm_wake_up_interval - int. Min=1, max=99 hours. xirgo \u00b6 Tracking profile for Xirgo XT-2050C, Xirgo XT-2060G, Xirgo XT-2150C, Xirgo XT-2160G, Xirgo XT-2450V, Xirgo XT-2460G, Xirgo XT-4750C, Xirgo XT-4760G, Xirgo XT-4850C. { \"psm_interval\" : 2592000 , \"tracking_angle\" : 10 , \"tracking_distance\" : 1 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=2592000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_distance - int. Distance in miles, e.g. 100 means that the device will send data every 100 miles. Min=1, max=100. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=2592000. xirgo_48 \u00b6 Tracking profile for Xirgo XT-4850C. { \"psm_interval\" : 60 , \"tracking_angle\" : 10 , \"tracking_distance\" : 1 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=2592000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_distance - int. Distance in miles, e.g. 100 means that the device will send data every 100 miles. Min=1, max=100. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=2592000. xirgo_dist \u00b6 Tracking profile for Xirgo XT-2050C, Xirgo XT-2060G, Xirgo XT-2450V, Xirgo XT-2460G, Xirgo XT-4750C, Xirgo XT-4760G. { \"psm_interval\" : 60 , \"tracking_angle\" : 10 , \"tracking_distance\" : 2 , \"tracking_interval\" : 60 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=2592000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_distance - int. Distance in miles, e.g. 100 means that the device will send data every 100 miles. Min=1, max=100. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=2592000. yatut_poisk \u00b6 \"\u042f \u0422\u0423\u0422 \u041f\u041e\u0418\u0421\u041a\" tracking profile. name: 'yatut_poisk' { \"mode\" : \"DAILY\" , \"main_wakeup_time\" : \"12:00\" , \"wakeup_period\" : \"24\" , \"gps_determination_period\" : 0 } mode - enum . Device's working mode. Can be \"DAILY\" | \"TEST\" | \"SEARCH\", default=\"DAILY\". main_wakeup_time - string. At what time to wake up if mode == \"DAILY\". Format HH:mm , default=\"12:00\" wakeup_period - enum . Only values 8 , 12 or 24 (hours). Default=\"24\" gps_determination_period - int. How often to determine the position by satellites (in days). Zero (0) means on each waking up. Min=0, max=30, default=0.","title":"Tracking Profiles"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#tracking-profiles","text":"Contains tracking profiles of all device models with description.","title":"Tracking profiles"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#albatross_s6","text":"Tracking profile for Albatross S6. { \"tracking_interval\" : 30 , \"tracking_distance\" : 100 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535.","title":"albatross_s6"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#albatross_s8_5","text":"Tracking profile for Albatross S8.5. { \"tracking_interval\" : 30 , \"psm_interval\" : 60000 , \"psm_mode\" : 0 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. psm_interval - optional int. Duration in seconds for the device to stay in the deep sleep mode. Min=600, max=65535. psm_mode - int. Define the sleep level. Min=0, max=1.","title":"albatross_s8_5"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#apkcom","text":"Tracking profile for \u0410\u041f\u041a \u041a\u041e\u041c ASC-2 GLONASS/GPS, \u0410\u041f\u041a \u041a\u041e\u041c ASC-6 GLONASS/GPS, \u0410\u041f\u041a \u041a\u041e\u041c ASC-7, \u0410\u041f\u041a \u041a\u041e\u041c ASC-8. { \"tracking_angle\" : 30 , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=300. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000.","title":"apkcom"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#arknav_x8","text":"Tracking profile for Arknav RX8. { \"tracking_angle\" : 30 , \"tracking_interval\" : 60 , \"tracking_distance\" : 150 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=65534. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65534.","title":"arknav_x8"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#arnavi2","text":"Arnavi 2 tracking profile. { \"tracking_angle\" : 30 , \"tracking_distance\" : 100 , \"min_tracking_interval\" : 30 , \"max_tracking_interval\" : 300 , \"speed_change\" : 50 , \"freeze_by_speed\" : false , \"freeze_by_motion\" : true , \"freeze_by_ignition\" : false } * tracking_angle \u2013 int. Degrees 10-255, the device will send tracking data when course changing more than defined value. * tracking_distance \u2013 int. Distance in meters 50-65535, e.g. 100 means that the device will send data every 100 meters. * min_tracking_interval \u2013 int. Min interval in seconds 30-255, e.g. 30 means that the device will send tracking data no more frequently than every 30 seconds. * max_tracking_interval \u2013 int. Max interval in seconds 30-65535, e.g. 30 means that the device will send tracking data not less frequently than every 30 seconds. * speed_change \u2013 int. Kph 3-255, the device will send tracking data when speed changing more than defined value. * freeze_by_speed \u2013 boolean. Freeze coordinates when speed is less than 2kph. * freeze_by_motion \u2013 boolean. Freeze coordinates when motion sensor detects no motion. * freeze_by_ignition \u2013 boolean. Freeze coordinates when ignition is OFF.","title":"arnavi2"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#arnavi4","text":"Tracking profile for Arnavi 4, Arnavi 5, Arnavi Integral, Arnavi Integral-2, Arnavi Integral-3. { \"max_tracking_interval\" : 60 , \"min_tracking_interval\" : 5 , \"speed_change\" : 10 , \"tracking_angle\" : 30 , \"tracking_distance\" : 150 } max_tracking_interval \u2013 int. Max interval in seconds 30-65535, e.g. 30 means that the device will send tracking data not less frequently than every 30 seconds. min_tracking_interval \u2013 int. Min interval in seconds 30-255, e.g. 30 means that the device will send tracking data no more frequently than every 30 seconds. speed_change \u2013 int. Kph 3-255, the device will send tracking data when speed changing more than defined value. tracking_angle \u2013 int. Degrees 10-255, the device will send tracking data when course changing more than defined value. tracking_distance \u2013 int. Distance in meters 50-65535, e.g. 100 means that the device will send data every 100 meters.","title":"arnavi4"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#atlanta","text":"Tracking profile for Atlanta L-100, Atlanta O-300, Atlanta PT-100, Atlanta W-track, Atlanta WP-30C. { \"tracking_distance\" : 150 , \"tracking_interval\" : 60 } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65534. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000.","title":"atlanta"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#atlanta_pt100","text":"Tracking profile for Atlanta PT-100. { \"tracking_interval\" : 300 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=300, max=18000.","title":"atlanta_pt100"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#atrack","text":"ATrack tracking profile. { \"control_mode\" : \"acc\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 150 , \"tracking_angle\" : 30 , \"psm_mode\" : 0 , \"psm_interval\" : 30 , \"on_stop_tracking_interval\" : 1 } * control_mode - optional enum . Mode of tracking by the ACC or engine status. Can be \"acc\" | \"engine_status\". * tracking_interval - optional int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535x10, default=300. * tracking_distance - optional int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535, default=100. * tracking_angle - optional int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=80, default=10. * psm_mode - optional int. Define the sleep level, 0 \u2013 no sleeping, 1- light sleep (GPS Off, GPRS On, G-sensor On), 2- deep sleep (GPS Off, GPRS Off, G-sensor On). Min=0, max=2, default=0. * psm_interval - optional int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=65535x60, default=90x60. * on_stop_tracking_interval - int. Minimum time in seconds that must elapse before reporting next position while the ACC is in Off status. \"acc\" in control_mode must be set in order to use this time interval. Min=1, max=65535x10, default=15x60.","title":"atrack"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#autofon","text":"Autofon profile. { \"type\" : \"interval\" , \"tracking_interval\" : 30 , \"online_on_ext_power\" : true , \"timer1_time\" : \"2020-09-16 03:17:26\" , \"timer1_interval\" : 15 , \"timer2_time\" : \"2020-09-18 03:17:26\" , \"timer2_interval\" : 30 } type - enum . Tracking type \"interval\" or \"power_save\". tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=240. online_on_ext_power - boolean. Connect to server when external power connected. timer1_time - date/time. Date/time for timer1 for checking incoming SMS commands. timer1_interval - int. Interval to wakeup for timer1, minutes, min=15. timer2_time - date/time. Date/time for timer2 for sending location. timer2_interval - int. Interval to wakeup for timer1, minutes, min=15.","title":"autofon"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#autoleaders_st901","text":"Tracking profile for Auto Leaders ST-901, Auto Leaders ST-901M. { \"psm_interval\" : 60 , \"psm_mode\" : 0 , \"tracking_interval\" : 30 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=18000. psm_mode - int. Define the sleep level. Min=0, max=1. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000.","title":"autoleaders_st901"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#autoseeker_at17","text":"Tracking profile for Autoseeker AT-17. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=1, max=18000.","title":"autoseeker_at17"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#avlsat_neos","text":"Tracking profile for AVLSAT NEO-S. { \"tracking_interval\" : 60 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=60, max=599940.","title":"avlsat_neos"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#bitrek310","text":"Tracking profile for BI 310 CICADA, NaviTrek 310 Cicada. { \"psm_interval\" : 12000 , \"psm_mode\" : 0 , \"tracking_interval\" : 720 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=300, max=86400. psm_mode - int. Define the sleep level. Min=0, max=1. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=720, max=21600.","title":"bitrek310"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#bofan_pt521","text":"Tracking profile for Bofan PT502, Bofan PT521. { \"tracking_angle\" : 30 , \"tracking_distance\" : 100 , \"tracking_interval\" : 60 , \"type\" : \"interval\" } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=90. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=1200. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\".","title":"bofan_pt521"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#box","text":"Tracking profile for BOX-tracker, BOXtracker 2, Galileosky Boxfinder v1.0. { \"tracking_angle\" : 30 , \"tracking_interval\" : 120 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=4294968.","title":"box"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#boxfinder","text":"Tracking profile for Galileosky Boxfinder v1.0. { \"shock_value\" : 1.5 , \"sleep_timeout\" : 180 } shock_value - double. Can be min=0.5, max=4 g. sleep_timeout - int. Can be min=1, max=1440 minutes.","title":"boxfinder"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#bsj","text":"Tracking profile for BSJ KM-01/02, Gosafe G1C. { \"tracking_angle\" : 30 , \"tracking_interval\" : 150 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"bsj"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#c2stek_fl","text":"Tracking profile for C2STEK FL10, C2STEK FL2000G. { \"tracking_angle\" : 30 , \"tracking_distance\" : 300 , \"tracking_interval\" : 120 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=360. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=9999. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=9999.","title":"c2stek_fl"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#calamp","text":"Tracking profile for CalAmp ATU-620, CalAmp LMU-1100, CalAmp LMU-1200, CalAmp LMU-200, CalAmp LMU-2030, CalAmp LMU-2600, CalAmp LMU-2630, CalAmp LMU-2720, CalAmp LMU-300, CalAmp LMU-3030, CalAmp LMU-3640, CalAmp LMU-400, CalAmp LMU-4200, CalAmp LMU-4230, CalAmp LMU-4520, CalAmp LMU-5530, CalAmp LMU-700, CalAmp LMU-800, CalAmp LMU-900, CalAmp TTU-1200, CalAmp TTU-2830, CalAmp TTU-700. { \"psm_interval\" : 600 , \"tracking_angle\" : 30 , \"tracking_distance\" : 200 , \"tracking_interval\" : 60 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"calamp"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#cantrack_t80","text":"Tracking profile for Cantrack T80. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=1000.","title":"cantrack_t80"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#careu","text":"Tracking profile for CAREU U1 Lite Plus, CAREU U1 Plus, CAREU UT1, CAREU UW1, CAREU Ucan, CAREU Ueco, CAREU Ugo, IntelliTrac A1, Intellitrac S1. { \"tracking_angle\" : 45 , \"tracking_distance\" : 50 , \"tracking_interval\" : 20 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=25, max=50000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=65535.","title":"careu"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#cargo","text":"Tracking profile for Cargo Light 2, Cargo Mini 2, Cargo Pro 2. { \"psm_interval\" : 600 , \"tracking_angle\" : 60 , \"tracking_distance\" : 100 , \"tracking_interval\" : 30 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"cargo"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#carscop_cctr800","text":"Tracking profile for Carscop CCTR-808S, Carscop CCTR-809. { \"psm_interval\" : 3600 , \"psm_mode\" : 1 , \"tracking_interval\" : 30 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=3600, max=432000. psm_mode - int. Define the sleep level. Min=0, max=1. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=999.","title":"carscop_cctr800"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#carscop_cctr830","text":"Tracking profile for Carscop CCTR-830, Toptracking CCTR-830G. { \"tracking_interval\" : 40 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=999.","title":"carscop_cctr830"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#castel_idd","text":"Tracking profile for Sinocastel IDD-213. { \"sleep_report_interval\" : 120 , \"tracking_angle\" : 20 , \"tracking_distance\" : 500 , \"tracking_interval\" : 200 , \"upload_records_count\" : 1 } sleep_report_interval - int. Interval in minutes, e.g. 10 means that the device will send tracking data every 10 minutes in a sleep mode. Min=10, max=1440. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=90. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=600. upload_records_count - int. Count of uploaded records. Min =1, max=10.","title":"castel_idd"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#castel_interval","text":"Tracking profile for Sinocastel MPIP-620, Sinocastel PT-690, Sinocastel PT-718S. { \"tracking_interval\" : 60 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=18000.","title":"castel_interval"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#cguard","text":"cGuard tracking profile. { \"tracking_interval\" : 60 , \"tracking_distance\" : 100 , \"tracking_angle\" : 15 , \"psm_interval\" : 300 } * tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=65535, default=60. * tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=65535, default=100. * tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180, default=15. * psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=0, max=65535, default=300.","title":"cguard"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#cguard_asset","text":"cGuard tracking profile for asset trackers. name: 'cguard_asset' { \"tracking_interval\" : 60 , \"tracking_distance\" : 100 , \"tracking_angle\" : 45 , \"psm_interval\" : 300 , \"mode\" : \"ASSET\" , \"wakeup_type\" : \"PERIODICAL\" , \"wakeup_day\" : \"EVERYDAY\" , \"wakeup_time\" : \"12:00\" , \"wakeup_period\" : 1440 , \"moving_detection\" : true } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=65535, default=60. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=65535, default=100. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180, default=45. psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=0, max=65535, default=300. mode - enum . Device working mode. TRACKER means that device work in the continuous mode. ASSET means that device work in the periodical mode and wakes up on schedule or by period. wakeup_type - enum . Can be \"SCHEDULED\" | \"PERIODICAL\". How device wakes up in ASSET mode. default=\"PERIODICAL\". wakeup_day - enum . Can be \"EVERYDAY\" | \"MONDAY\" | \"TUESDAY\" | \"WEDNESDAY\" | \"THURSDAY\" | \"FRIDAY\" | \"SATURDAY\" | \"SUNDAY\", default=\"EVERYDAY\". What day to wake up if wakeup_type = SCHEDULED . wakeup_time - string. Specifies the time in minutes to wake up if wakeup_type = SCHEDULED . Format HH:mm , default=\"12:00\" wakeup_period - int. Wakeup period in minutes. Min=15, max=65535, default=1440. Required if wakeup_type = PERIODICAL moving_detection - boolean. If true means that device will be wakes up at the beginning of the movement. Required if mode == 'ASSET'","title":"cguard_asset"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#concox_distance_interval","text":"Tracking profile for Concox X3. { \"tracking_distance\" : 100 , \"tracking_interval\" : 30 } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000.","title":"concox_distance_interval"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#concox_gt350","text":"Tracking profile for Concox GT350. { \"psm_interval\" : 600 , \"psm_mode\" : 1 , \"tracking_interval\" : 10 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=600, max=432000. psm_mode - int. Define the sleep level. Min=0, max=1. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=1800.","title":"concox_gt350"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#concox_gt700","text":"Tracking profile for Concox AT3, Concox AT4, Concox GT710. { \"psm_interval\" : 2 , \"tracking_interval\" : 1 , \"type\" : \"interval\" , \"wakeup_time\" : \"10:20\" } psm_interval - int. Duration in hours for the device to stay in the deep sleep mode. Min=1, max=24. Valid values are 1, 2, 3, 4, 6, 8, 12, 24. tracking_interval - int. Interval in minutes. Min=1, max=30. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\". wakeup_time - string. Format hh:mm .","title":"concox_gt700"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#concox_interval","text":"Tracking profile for Concox GK309 , Concox GS503, Concox GT03A, Concox GT03C, Concox WeTrack Lite, Concox WeTrack2, Jimi JI09. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000.","title":"concox_interval"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#concox_jv200","text":"Tracking profile for Concox JV200. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000.","title":"concox_jv200"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#concox_qbit","text":"Tracking profile for Concox QBIT. { \"gps_tracking_interval\" : 10 , \"lbs_tracking_interval\" : 60 , \"mode\" : \"lbs\" } gps_tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds in gps mode. Min=30, max=18000. lbs_tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds in lbs mode. Min=30, max=18000. mode - string. Can be \"lbs\" | \"gps\".","title":"concox_qbit"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#concoxgt02","text":"Tracking profile for Concox GT02 / TR02. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000.","title":"concoxgt02"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#concoxgt06","text":"Tracking profile for Concox GV20, Concox X1, Protrack VT05. { \"psm_interval\" : 3000 , \"tracking_angle\" : 120 , \"tracking_distance\" : 250 , \"tracking_interval\" : 30 , \"type\" : \"intelligent\" } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=65535. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\".","title":"concoxgt06"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#default","text":"Default tracking profile. { \"type\" : \"interval\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 } type - enum . Can be \"interval\" (send tracking data based on time intervals) or \"distance\" (send tracking data after passing specified distance). tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters.","title":"default"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#default_angle","text":"Default profile with optional angle-based tracking. { \"type\" : \"distance\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 } type - enum . Can be \"interval\" (send tracking data based on time intervals) or \"distance\" (send tracking data after passing specified distance). tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - optional int. If specified, the device will additionally send data when it changes direction to specified angle, e.g. 30 degrees.","title":"default_angle"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#default_powersave","text":"Default powersave profile with optional angle-based tracking. { \"type\" : \"power_save\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_interval\" : 65535 , \"psm_mode\" : 2 } type - enum . Can be \"interval\" (send tracking data based on time intervals) or \"distance\" (send tracking data after passing specified distance). tracking_interval - optional int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - optional int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - optional int. If specified, the device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_interval - optional int. Define the time interval in seconds (60-65535) which the unit stays in the sleeping state when type= power_save . psm_mode - optional int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On).","title":"default_powersave"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#defenstar_007","text":"Tracking profile for Defenstar DS007. { \"tracking_interval\" : 65534 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=60, max=65534.","title":"defenstar_007"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#defenstar_008","text":"Tracking profile for Defenstar DS008, Gubloos GPS-S1. { \"tracking_interval\" : 1000 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=9999.","title":"defenstar_008"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#digitalsystems_dsf22","text":"Tracking profile for DigitalSystems DSF22. { \"tracking_angle\" : 10 , \"tracking_interval\" : 120 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"digitalsystems_dsf22"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#distance_interval","text":"Tracking profile with distance and interval. { \"tracking_distance\" : 250 , \"tracking_interval\" : 3600 } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"distance_interval"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#distance_interval_angle_ps","text":"Tracking profile with distance, interval, angle and power save mode. { \"psm_interval\" : 86400 , \"tracking_angle\" : 10 , \"tracking_distance\" : 100 , \"tracking_interval\" : 60 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=30, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"distance_interval_angle_ps"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#distance_interval_angle","text":"Tracking profile with distance, interval and angle. { \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees.","title":"distance_interval_angle"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#eelink","text":"Tracking profile for Eelink GOT08, Eelink GOT10, Eelink GPT18, Eelink TK-319, Eelink TK116, Eelink TK119. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=18000.","title":"eelink"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#eelink_tk116","text":"Tracking profile for Eelink TK116. { \"tracking_interval\" : 3600 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=3600.","title":"eelink_tk116"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#eelink_v2","text":"Tracking profile for Eelink GPT18, Eelink TK-319. { \"active_tracking_interval\" : 30 , \"gps_working_mode\" : \"always_on\" , \"gsm_working_mode\" : \"auto\" , \"tracking_angle\" : 30 , \"tracking_distance\" : 50 , \"tracking_interval\" : 60 } active_tracking_interval - int. Active tracking interval in seconds. Min=30, max=65535. gps_working_mode - enum . Can be \"always_on\" | \"auto\". gsm_working_mode - enum . Can be \"always_on\" | \"auto\". tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535.","title":"eelink_v2"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#enfora","text":"Tracking profile for Enfora MT-GL (GSM2218), Enfora MT-Gu (GSM2338), Novatel MT4100, SkyPatrol TT8740, SkyPatrol TT8750. { \"tracking_distance\" : 100 , \"tracking_interval\" : 60 } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000.","title":"enfora"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#esino","text":"Tracking profile for Esino ES-GP34, Esino ES-GT23. { \"tracking_interval\" : 20 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20, max=3600.","title":"esino"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#etrack_tlt2h","text":"Tracking profile for E-Track TLT-2H. { \"tracking_interval\" : 600 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=59999.","title":"etrack_tlt2h"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#fifotrack","text":"Tracking profile for Fifotrack A100, fifotrack A100 FW1.15+, fifotrack A300, fifotrack A300 FW1.23+, fifotrack A600 (FW before V1.07), fifotrack A600 FW1.07+. { \"psm_interval\" : 3600 , \"psm_mode\" : 2 , \"tracking_angle\" : 45 , \"tracking_distance\" : 100 , \"tracking_interval\" : 60 } psm_interval - int. Duration in seconds for the device to stay in the deep sleep mode. Min=0, max=3932100. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep (GPS Off, GPRS Off, G-sensor On). tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=655350.","title":"fifotrack"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#genesis_g36","text":"Tracking profile for Sinocastel HT-770, Ezlink T28, G36, Orion 7, XiLi Technologies PT100. { \"tracking_interval\" : 1 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=1.","title":"genesis_g36"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#gl200","text":"Queclink/Ruslink GL200/GL300 profile { \"type\" : \"distance\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_interval\" : 600 , \"movement_detection\" : true , \"non_movement_duration\" : 420 } type - enum . Tracking type \"distance\" or \"interval\" or \"power_save\". tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_interval - int. Sending interval when the tracking type is \"power_save\", seconds. movement_detection - boolean. non_movement_duration - int. In seconds.","title":"gl200"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#gl500","text":"Queclink/Ruslink GL500 profile. { \"type\" : \"interval\" , \"tracking_interval\" : 1 , \"wakeup_time\" : \"10:00\" , \"psm_interval\" : 8 } type - enum . Tracking type \"interval\" or \"power save\". tracking_interval - int. Interval in minutes. wakeup_time - int. Wakeup time for power_save mode in a format \"HH:mm\". psm_interval - int. Update interval in power_save mode, hours (1, 2, 3, 4, 6, 8, 12, 24).","title":"gl500"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#gt300","text":"Queclink/Ruslink GT300 profile. { \"tracking_interval\" : 5 , \"start_time\" : \"0000\" , \"end_time\" : \"2359\" , \"movement_detection\" : true , \"min_speed\" : 10 , \"min_distance\" : 20 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=5, max=86400. start_time - string. Start time of scheduled fix timing report. The valid format is \"HHMM\" 0000-2359. end_time - string. End time of scheduled fix timing report. The valid format is \"HHMM\" 0000-2359. movement_detection - boolean. Enable suspend reports if the device at rest. min_speed - int. The speed threshold of movement detect, km/h 0-999. min_distance - int. The distance threshold of movement detect, meters 1-9099.","title":"gt300"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#gotoptk206_amgps_freko","text":"Tracking profile for AMGPS Freko. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=3600.","title":"gotoptk206_amgps_freko"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#gv500","text":"Queclink/Ruslink GV500 profile. { \"type\" : \"interval\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_mode\" : 1 , \"psm_interval\" : 600 } type - enum . Tracking type when ignition is ON, \"distance\" or \"interval\". tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On). psm_interval - int. Sending interval when the engine is off, seconds.","title":"gv500"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#gv55lite","text":"Queclink/Ruslink GV55Lite profile. { \"type\" : \"interval\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_mode\" : 1 , \"psm_interval\" : 600 } type - enum . Tracking type when ignition is ON, \"distance\" or \"interval\". tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On). psm_interval - int. Sending interval when the engine is off, seconds.","title":"gv55lite"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#gubloost1","text":"Tracking profile for Defenstar GPS668, Gubloos GPS-T1, MiniFinder Pico. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=9999.","title":"gubloost1"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#haicom_hi603x","text":"Tracking profile for Haicom HI-603X. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=2592000.","title":"haicom_hi603x"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#helioversal_m1","text":"Tracking profile for Helioversal M1. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"helioversal_m1"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#hhd_g","text":"Tracking profile for HHD G-400, HHD G-600. { \"tracking_interval\" : 20 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20.","title":"hhd_g"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#howen_herome","text":"Tracking profile for Hero-ME31-08, Hero-ME32-04, Hero-ME41-04. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"howen_herome"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#hua_sheng_hs3000g","text":"Tracking profile for Hua Sheng HS 3000G. { \"psm_interval\" : 600 , \"tracking_angle\" : 10 , \"tracking_interval\" : 30 } psm_interval - int. Sending interval when the engine is off, seconds. Min=60, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=250. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=450.","title":"hua_sheng_hs3000g"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#huabao","text":"Tracking profile for Huabao HB-T10. { \"tracking_interval\" : 1000 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=9999.","title":"huabao"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#intellitrac_x1","text":"Tracking profile for IntelliTrac X1, IntelliTrac X1+. { \"tracking_angle\" : 5 , \"tracking_distance\" : 100 , \"tracking_interval\" : 30 , \"type\" : \"interval\" } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=358. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=65534. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65534. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\".","title":"intellitrac_x1"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#interval","text":"Tracking profile with an interval only. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30.","title":"interval"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#interval_angle","text":"Tracking profile with an interval and angle. { \"tracking_interval\" : 30 , \"tracking_angle\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees.","title":"interval_angle"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#interval_angle_powersave","text":"Tracking profile with an interval, angle and powersave mode. { \"psm_interval\" : 60 , \"tracking_angle\" : 55 , \"tracking_interval\" : 30 } psm_interval - int. Sending interval when the engine is off, seconds. Min=60, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=355. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=900.","title":"interval_angle_powersave"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#interval_powersave","text":"Tracking profile with an interval and powersave mode. { \"psm_interval\" : 3000 , \"psm_mode\" : 1 , \"tracking_interval\" : 30 } psm_interval - int. Sending interval when the engine is off, seconds. Min=60, max=86400. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On). tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=180.","title":"interval_powersave"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#jimi_jc100","text":"Tracking profile for Jimi JC100. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000.","title":"jimi_jc100"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#jinsheng_js810","text":"Tracking profile for Jin Sheng JS810, Jin Sheng JS810S. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65534.","title":"jinsheng_js810"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#jointech_gp","text":"Tracking profile for Jointech GP4000, Jointech GP6000, Jointech GP6000F. { \"psm_interval\" : 3600 , \"psm_mode\" : 1 , \"tracking_angle\" : 45 , \"tracking_distance\" : 150 , \"tracking_interval\" : 30 , \"type\" : \"interval\" } psm_interval - int. Sending interval when the engine is off, seconds. Min=300, max=65535. psm_mode - int. Define the sleep level when type != power_save , 1 - no sleeping, 2 - light sleep(GPS Off, GPRS On, G-sensor On), 3 - deep sleep(GPS Off, GPRS Off, G-sensor On). tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=90. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\".","title":"jointech_gp"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#jointech_jt701","text":"Tracking profile for Jointech JT701. { \"tracking_interval\" : 240 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=60000.","title":"jointech_jt701"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#jointech_jt703","text":"Profile for Jointech JT703B { \"tracking_interval\" : 10 , \"sleep_mode\" : \"enabled\" , \"wakeup_timers\" : [ \"10:00:00\" , \"16:00:00\" ], \"sleep_time_in_minutes\" : 60 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=60000. sleep_mode - enum . Can be \"enabled\" | \"disabled\". wakeup_timers - optional string. Define wake-up timers when the sleep mode enabled, 1-48 timers. Local time in a standard format HH:mm:ss . sleep_time_in_minutes - optional int. Define the time interval which the unit stays in the sleeping state when wake-up timers not defined. Min=10, max=1440.","title":"jointech_jt703"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#jointech_jt707","text":"Tracking profile for Jointech JT707. { \"psm_interval\" : 150 , \"psm_mode\" : 0 , \"tracking_interval\" : 60 } psm_interval - int. Sending interval when the engine is off, seconds. Min=10, max=1440. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On). tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=5, max=43200.","title":"jointech_jt707"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#keson_ks168","text":"Tracking profile for Keson KS168. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=65535.","title":"keson_ks168"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#laipacs911","text":"Tracking profile for Laipac S911 Lola, Laipac-911BL. { \"tracking_distance\" : 1000 , \"tracking_interval\" : 30 , \"type\" : \"distance\" } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=5, max=43200. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\".","title":"laipacs911"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#lk200","text":"Tracking profile for LKGPS LK209A, LKGPS LK209B, LKGPS LK210. { \"tracking_interval\" : 45 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535.","title":"lk200"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#logosoft","text":"Tracking profile for Logosoft Log-101. { \"type\" : \"interval\" , \"tracking_interval\" : 30 , \"tracking_distance\" : 300 , \"tracking_angle\" : 10 } type - enum . Tracking type \"interval\" or \"distance\" or \"intelligent\". tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=300. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10.","title":"logosoft"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#m7","text":"Profile for Navixy M7. { \"type\" : \"interval\" , \"psm_mode\" : 1 , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_interval\" : 600 , \"wakeup_timer1\" : \"10:00\" , \"wakeup_timer2\" : \"16:00\" , \"wakeup_timer3\" : \"22:00\" } type - enum . Can be \"interval\" (send tracking data based on time intervals), \"distance\" (send tracking data after passing specified distance). psm_mode - int. Power save mode, 0 - disable, 1 - powersave without timers, 2 - powersave with timers. tracking_interval - optional int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - optional int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - optional int. If specified, the device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_interval - optional int. Define the time interval in seconds (600-3932100) which the unit stays in the sleeping state. wakeup_timer - optional string. Timer 1-3.","title":"m7"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#maxtrack_140","text":"Tracking profile for Maxtrack MXT-140. { \"tracking_angle\" : 60 , \"tracking_distance\" : 500 , \"tracking_interval\" : 20 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=25500. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20, max=65535.","title":"maxtrack_140"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#megastek_gvt430","text":"Tracking profile for Megastek GVT-430. { \"tracking_angle\" : 25 , \"tracking_distance\" : 100 , \"tracking_interval\" : 30 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=60. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=1000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"megastek_gvt430"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#megastek_mt","text":"Tracking profile for Megastek MT-300, Megastek MT-90s, Megastek MT100. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"megastek_mt"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#megastek_mt100","text":"Tracking profile for Megastek MT100. { \"tracking_distance\" : 50 , \"tracking_interval\" : 300 , \"type\" : \"intelligent\" } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\".","title":"megastek_mt100"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#meiligaovt","text":"Tracking profile for GoTop VT360, GoTop VT380, Meiligao VT310, Meitrack VT310, RedView VT310. { \"tracking_angle\" : 30 , \"tracking_distance\" : 200 , \"tracking_interval\" : 10 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=5000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350.","title":"meiligaovt"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#meitrack","text":"Meitrack profile. { \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_mode\" : 0 , \"psm_interval\" : 3600 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_mode - optional int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On). psm_interval - optional int. Define the time interval in seconds which the unit stays in the sleeping state.","title":"meitrack"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#meitrack_asset","text":"Tracking profile for Meitrack T355v2. { \"psm_interval\" : 3932100 , \"psm_mode\" : 0 , \"tracking_angle\" : 10 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=0, max=3932100. psm_mode - optional int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On). tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=655350.","title":"meitrack_asset"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#meitrack_vehicle","text":"Tracking profile for Meitrack MVT100, Meitrack MVT340, Meitrack MVT380, Meitrack MVT600, Meitrack T1, Meitrack T3, Meitrack T333, Meitrack T366G, Meitrack T366L, Meitrack T622G, Meitrack TC68S, Meitrack TC68SG. { \"on_stop_tracking_interval\" : 120 , \"psm_interval\" : 300 , \"psm_mode\" : 2 , \"tracking_angle\" : 45 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } on_stop_tracking_interval - int. Tracking interval in seconds when the vehicle stopped. Min=0, max=655350. psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=0, max=3932100. psm_mode - optional int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On). tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=655350.","title":"meitrack_vehicle"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#meitrack_without_ps","text":"Tracking profile for Meitrack P66. { \"tracking_angle\" : 45 , \"tracking_distance\" : 150 , \"tracking_interval\" : 60 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=655350.","title":"meitrack_without_ps"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#mictrack_mp90","text":"Tracking profile for MicTrack MP-90. { \"tracking_angle\" : 20 , \"tracking_interval\" : 60 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=20, max=180. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=65535.","title":"mictrack_mp90"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#mika_g1","text":"Tracking profile for MIKA G1. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=10000.","title":"mika_g1"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#mrd_100","text":"Tracking profile for MRD-100. { \"tracking_interval\" : 20 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20, max=65535.","title":"mrd_100"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#mwp008_a","text":"Tracking profile for Diwei TK116, Moralwinhk P008A, Moralwinhk P168. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350.","title":"mwp008_a"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#myrope_m500","text":"Tracking profile for MyRope M528, MyRope M588. { \"psm_interval\" : 60 , \"tracking_distance\" : 10 , \"tracking_interval\" : 50 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=65535. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=1, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=1, max=65535.","title":"myrope_m500"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#navisetgt","text":"Tracking profile for Naviset GT-10, Naviset GT-20. { \"tracking_angle\" : 120 , \"tracking_distance\" : 150 , \"tracking_interval\" : 240 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=255. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=300.","title":"navisetgt"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#noran","text":"Tracking profile for Noran NR008, Noran NR024, Noran NR100. { \"tracking_interval\" : 150 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=15, max=64800.","title":"noran"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#oigo_ar2","text":"Tracking profile for Oigo AR-2GM, Oigo AR-3HU. { \"psm_interval\" : 60 , \"tracking_angle\" : 45 , \"tracking_distance\" : 300 , \"tracking_interval\" : 15 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=15, max=604800. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=60000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=15, max=604800.","title":"oigo_ar2"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#orange_tk103","text":"Tracking profile for Orange TK-103. { \"tracking_interval\" : 990 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=990.","title":"orange_tk103"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#piccolo_atx","text":"Tracking profile for Piccolo ATX. { \"tracking_interval\" : 300 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=300, max=86400.","title":"piccolo_atx"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#piccolo_distance_interval_angle","text":"Tracking profile for Piccolo ATX2S, Piccolo Hybrid+, Piccolo STX, Piccolo TMX+. { \"tracking_angle\" : 30 , \"tracking_distance\" : 100 , \"tracking_interval\" : 30 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=30, max=150. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=65535.","title":"piccolo_distance_interval_angle"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#piccolo_plus","text":"Profile Wireless Links for Piccolo Plus { \"sleep_mode\" : \"disabled\" , \"track_by\" : \"interval\" , \"tracking_interval\" : 60 , \"tracking_distance\" : 100 , \"track_by_angle\" : true , \"tracking_angle\" : 30 , \"asset_moving_interval\" : 300 , \"asset_stopped_interval\" : 86400 } sleep_mode - enum . Can be \"disabled\" | \"engine\" | \"asset\" | \"hybrid\". track_by - optional enum . Can be \"interval\" | \"distance\". Need for disabled, engine, hybrid modes. tracking_interval - optional int. Interval in seconds, need for disabled, engine, hybrid modes. Min=60, max=86400. tracking_distance - optional int. Distance in meters, need for disabled, engine, hybrid modes. Min=100, max=10000. track_by_angle - optional boolean. Need for disabled, engine, hybrid modes. tracking_angle - optional int. If specified, the device will additionally send data when it changes direction to specified angle, e.g. 30 degrees, need for disabled, engine, hybrid modes. Min=30, max=150. asset_moving_interval - optional int. Need for asset and hybrid modes. Min=300, max=86400. asset_stopped_interval - optional int. Need for asset and hybrid modes. Min=300, max=86400.","title":"piccolo_plus"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#redview_vt680","text":"Tracking profile for RedView VT680. { \"tracking_angle\" : 60 , \"tracking_interval\" : 10 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=30, max=270. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350.","title":"redview_vt680"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#sanfone","text":"Tracking profile for Sanfone SF100, Sanfone SF700. { \"tracking_angle\" : 120 , \"tracking_distance\" : 60 , \"tracking_interval\" : 60 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=360. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=30, max=60000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=999.","title":"sanfone"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#satsol","text":"Tracking profile for SAT-LITE 3, SAT-LITE 4, Sat Lite 2, Sat Pro, Super Lite. { \"psm_interval\" : 30 , \"tracking_angle\" : 10 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=30, max=86400. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=9999. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"satsol"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#senseitp211","text":"{ \"tracking_interval\" : 30 , \"gps_enabled\" : true } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30. gps_enabled - boolean.","title":"senseitp211"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#sheriff_awax12","text":"Tracking profile for Sheriff AWAX12. { \"tracking_interval\" : 900 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=900, max=86400.","title":"sheriff_awax12"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#sinowell_g102","text":"Tracking profile for Sinowell G102. { \"psm_interval\" : 10 , \"tracking_angle\" : 5 , \"tracking_distance\" : 50 , \"tracking_interval\" : 10 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=10, max=65000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=1000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=1000.","title":"sinowell_g102"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#skypatrol_tt8750plus","text":"Tracking profile for SkyPatrol TT8750+. { \"psm_interval\" : 30 , \"tracking_angle\" : 10 , \"tracking_distance\" : 100 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=30, max=18000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=10000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=18000.","title":"skypatrol_tt8750plus"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#sleep_active","text":"Tracking profile for \u0421\u041a\u0410\u0422-\u041c\u0430\u044f\u043a. { \"active_time\" : 300 , \"sleep_time\" : 300 } active_time - int. Min=300, max=599940 seconds. sleep_time - int. Min=300, max=599940 seconds.","title":"sleep_active"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#spetrotec_iwatcher","text":"Tracking profile for Spetrotec i-WATCHER AVL. { \"tracking_distance\" : 100 , \"tracking_interval\" : 60 , \"type\" : \"interval\" } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=60, max=86400. type - enum . Can be \"interval\" | \"distance\" | \"power_save\" | \"distance_interval_angle\" | \"interval_angle\" | \"intelligent\".","title":"spetrotec_iwatcher"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#stab_liner","text":"Tracking profile for M2M-Cyber GLX, STAB Liner 102. { \"psm_interval\" : 3600 , \"tracking_angle\" : 10 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=0, max=3600. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=3600.","title":"stab_liner"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#starcom_helios","text":"Tracking profile for Starcom Helios Advanced, Starcom Helios Hybrid, Starcom Helios TT. { \"tracking_interval\" : 10 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=432000.","title":"starcom_helios"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#starline_m17","text":"Tracking profile for Starline M17. { \"psm_interval\" : 600 , \"psm_mode\" : 0 , \"tracking_interval\" : 100 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=3540. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On). tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=300.","title":"starline_m17"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#suntech_distance_interval_angle","text":"Tracking profile for Suntech ST200, Suntech ST215, Suntech ST300, Suntech ST310U, Suntech ST340LC, Suntech ST600R, Suntech ST600V, Suntech ST650. { \"tracking_angle\" : 30 , \"tracking_distance\" : 50 , \"tracking_interval\" : 20 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=60000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20, max=60000.","title":"suntech_distance_interval_angle"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#suntech_interval","text":"Tracking profile for Suntech ST940. { \"tracking_interval\" : 20 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=20, max=60000.","title":"suntech_interval"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#syrus","text":"Tracking profile for Syrus 2G. { \"tracking_angle\" : 5 , \"tracking_distance\" : 200 , \"tracking_interval\" : 30 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=5, max=90. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=100, max=5000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=9999.","title":"syrus"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#telfm","text":"Teltonika FM tracking profile. { \"tracking_angle\" : 30 , \"tracking_distance\" : 100 , \"tracking_interval\" : 60 , \"on_stop_tracking_interval\" : 180 , \"sleep_mode\" : \"disabled\" , \"stop_detection\" : \"ignition\" } * tracking_angle \u2013 int. Degrees 10-255, the device will send tracking data when course changing more than defined value. * tracking_distance \u2013 int. Distance in meters 50-65535, e.g. 100 means that the device will send data every 100 meters. * tracking_interval \u2013 int. Interval in seconds 30-255, e.g. 30 means that the device will send tracking data no more frequently than every 30 seconds. * on_stop_tracking_interval \u2013 int. On stop interval in seconds 30-65535, e.g. 30 means that the device will send tracking data not less frequently than every 30 seconds. * sleep_mode \u2013 enum . Can be \"disabled\" | \"soft_sleep\". * stop_detection \u2013 enum . Can be \"ignition\" | \"g_sensor\" | \"gps\".","title":"telfm"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#telfm5x","text":"Tracking profile for Teltonika FM5500, Teltonika FM6320, Teltonika FMB630, Teltonika FMB640. { \"sleep_mode\" : \"disabled\" , \"sleep_timeout\" : 300 , \"tracking_angle\" : 25 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } sleep_mode \u2013 enum . Can be \"disabled\" | \"soft_sleep\". sleep_timeout - int. Can be min=300, max=2592000 seconds. tracking_angle \u2013 int. Degrees min=0, max=180, the device will send tracking data when course changing more than defined value. tracking_distance \u2013 int. Distance in meters min=50, max=65535, e.g. 100 means that the device will send data every 100 meters. tracking_interval \u2013 int. Interval in seconds min=30, max=2592000, e.g. 30 means that the device will send tracking data no more frequently than every 30 seconds.","title":"telfm5x"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#topfly","text":"Tracking profile for TopFlyTech T8603, TopFlyTech T8608, TopFlyTech T8803, TopFlyTech T8803 Pro, TopFlyTech T8803+, TopFlyTech T8806, TopFlyTech T8806+, TopFlyTech T8806+R, TopFlyTech T8808A, TopFlyTech T8808A+, TopFlyTech T8808B, TopFlyTech T8808B+. { \"psm_interval\" : 10000 , \"tracking_angle\" : 60 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=0, max=65535. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=90. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=0, max=65535.","title":"topfly"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#topshine_distance_interval","text":"Tracking profile for TopShine MT02, TopShine MT08, TopShine OGT100, TopShine VT1000, TopShine VT200W, TopShine VT900. { \"tracking_distance\" : 50 , \"tracking_interval\" : 10 } tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350.","title":"topshine_distance_interval"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#topshine_distance_interval_angle","text":"Tracking profile for TopShine MT08, TopShine OGT100, TopShine VT1000. { \"tracking_angle\" : 15 , \"tracking_distance\" : 50 , \"tracking_interval\" : 60 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=359. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=65535. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350.","title":"topshine_distance_interval_angle"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#topten","text":"Tracking profile for TopTen GT08, TopTen TK-510, TopTen TK228. { \"tracking_angle\" : 25 , \"tracking_interval\" : 30 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=0, max=359. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=655350.","title":"topten"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#totarget","text":"Tracking profile for TT-08, VG-eLock7A. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=300.","title":"totarget"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#totem","text":"Tracking profile for TotemTech AT05, TotemTech AT07. { \"psm_interval\" : 15000 , \"tracking_angle\" : 10 , \"tracking_distance\" : 60 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=10, max=18000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=10, max=18000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=10, max=18000.","title":"totem"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#trackertech_msp320","text":"Tracking profile for Tracker Technology MSP320. { \"tracking_interval\" : 30 } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"trackertech_msp320"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#trackertech_msp340","text":"Tracking profile for Tracker Technology MSP340. { \"psm_interval\" : 180 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=180, max=86400. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"trackertech_msp340"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#trackertech_msp350","text":"Tracking profile for Tracker Technology MSP350. { \"psm_interval\" : 2147483647 , \"psm_mode\" : 0 , \"tracking_distance\" : 50 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=2147483647. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On), 2 - deep sleep(GPS Off, GPRS Off, G-sensor On), 3 - ultra deep sleep. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=50, max=100000. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=86400.","title":"trackertech_msp350"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#tramigo","text":"Profile for Tramigo models that do not support the interval in seconds { \"tracking_interval\" : 1 , \"tracking_distance\" : 0.5 , \"tracking_angle\" : 20 , \"on_stop_tracking_interval\" : 120 , \"sleep_mode\" : \"disabled\" } tracking_interval - int. Interval in minutes, e.g. 30 means that the device will send tracking data every 30 minutes. Min=1, max=10080. tracking_distance - float. Distance in kilometers, e.g. 0.5 means that the device will send data every 500 meters. Min=0.5, max=20. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=20, max=180. on_stop_tracking_interval - int. Interval in minutes when not in a trip. Min=1, max=10080. sleep_mode - sting enum. Can be \"disabled\" | \"enabled\".","title":"tramigo"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#tramigo_with_seconds","text":"Profile for Tramigo models that do support the interval in seconds { \"tracking_interval\" : 30 , \"tracking_distance\" : 20 , \"tracking_angle\" : 180 , \"on_stop_tracking_interval\" : 100 , \"sleep_mode\" : \"enabled\" } tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=604800. tracking_distance - float. Distance in kilometers, e.g. 0.5 means that the device will send data every 500 meters. Min=0.5, max=20. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=20, max=180. on_stop_tracking_interval - int. Interval in minutes when not in a trip. Min=1, max=10080. sleep_mode - sting enum. Can be \"disabled\" | \"enabled\".","title":"tramigo_with_seconds"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#tt1","text":"Profile for Navixy TT-1. { \"type\" : \"interval\" , \"psm_mode\" : 2 , \"tracking_interval\" : 30 , \"tracking_distance\" : 100 , \"tracking_angle\" : 30 , \"psm_interval\" : 60 , \"bat_voltage\" : \"1.5\" , \"bat_psm_interval\" : 600 } type - enum . Can be \"interval\" (send tracking data based on time intervals), \"distance\" (send tracking data after passing specified distance). psm_mode - int. power save mode, 0 - disable, 1 - powersave mode, 2 - Back-up Battery Power Saving Mode tracking_interval - optional int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. tracking_distance - optional int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. tracking_angle - optional int. If specified, the device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. psm_interval - optional int. Define the time interval in seconds (600-3932100) which the unit stays in the sleeping state. bat_voltage - optional string. Threshold of low back-up battery voltage. bat_psm_interval - optional int. Sleeping duration when battery voltage below defined threshold, seconds.","title":"tt1"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#ulbotech_t300","text":"Tracking profile for IMTSA TR2-OBD, Ulbotech T361, Ulbotech T381. { \"tracking_angle\" : 3 , \"tracking_distance\" : 150 , \"tracking_interval\" : 30 } tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=3, max=20. tracking_distance - int. Distance in meters, e.g. 100 means that the device will send data every 100 meters. Min=0, max=25500. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=900.","title":"ulbotech_t300"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#vjoy","text":"Tracking profile for Kingneed C30, Kingneed T0024 / T4024, Kingneed T0026, Kingneed T1124, Kingneed T12, Kingneed T16/T18/T19, Kingneed T300, Kingneed T3124 / T5124, Kingneed T500, Kingneed T6024, Kingneed T6124, Kingneed T630, Kingneed T8124, Kingneed TK10, Kingneed TK101, Kingneed TK20, Kingneed TK5, VJOYCAR T0026G, VJOYCAR T13G, VJOYCAR T13GSE, VJOYCAR T633G, VJOYCAR TK10SDC, VJoy T12, VJoy TK05, VJoy TK10GSE, VJoy TK10GSE Solar, VJoy TK20SE. { \"continuous_report_interval\" : 10 , \"motion_interval\" : 30 , \"psm_mode\" : 1 , \"psm_wake_up_interval\" : 1 } continuous_report_interval - int. Min=10, max=5940 seconds. motion_interval - int. Min=30, max=999 seconds. psm_mode - int. Define the sleep level when type != power_save , 0 - no sleeping, 1 - light sleep(GPS Off, GPRS On, G-sensor On). psm_wake_up_interval - int. Min=1, max=99 hours.","title":"vjoy"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#xirgo","text":"Tracking profile for Xirgo XT-2050C, Xirgo XT-2060G, Xirgo XT-2150C, Xirgo XT-2160G, Xirgo XT-2450V, Xirgo XT-2460G, Xirgo XT-4750C, Xirgo XT-4760G, Xirgo XT-4850C. { \"psm_interval\" : 2592000 , \"tracking_angle\" : 10 , \"tracking_distance\" : 1 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=2592000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_distance - int. Distance in miles, e.g. 100 means that the device will send data every 100 miles. Min=1, max=100. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=2592000.","title":"xirgo"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#xirgo_48","text":"Tracking profile for Xirgo XT-4850C. { \"psm_interval\" : 60 , \"tracking_angle\" : 10 , \"tracking_distance\" : 1 , \"tracking_interval\" : 30 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=2592000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_distance - int. Distance in miles, e.g. 100 means that the device will send data every 100 miles. Min=1, max=100. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=2592000.","title":"xirgo_48"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#xirgo_dist","text":"Tracking profile for Xirgo XT-2050C, Xirgo XT-2060G, Xirgo XT-2450V, Xirgo XT-2460G, Xirgo XT-4750C, Xirgo XT-4760G. { \"psm_interval\" : 60 , \"tracking_angle\" : 10 , \"tracking_distance\" : 2 , \"tracking_interval\" : 60 } psm_interval - int. Define the time interval in seconds which the unit stays in the sleeping state. Min=60, max=2592000. tracking_angle - int. The device will additionally send data when it changes direction to specified angle, e.g. 30 degrees. Min=10, max=180. tracking_distance - int. Distance in miles, e.g. 100 means that the device will send data every 100 miles. Min=1, max=100. tracking_interval - int. Interval in seconds, e.g. 30 means that the device will send tracking data every 30 seconds. Min=30, max=2592000.","title":"xirgo_dist"},{"location":"backend-api/resources/tracking/tracker/settings/tracking_profiles/#yatut_poisk","text":"\"\u042f \u0422\u0423\u0422 \u041f\u041e\u0418\u0421\u041a\" tracking profile. name: 'yatut_poisk' { \"mode\" : \"DAILY\" , \"main_wakeup_time\" : \"12:00\" , \"wakeup_period\" : \"24\" , \"gps_determination_period\" : 0 } mode - enum . Device's working mode. Can be \"DAILY\" | \"TEST\" | \"SEARCH\", default=\"DAILY\". main_wakeup_time - string. At what time to wake up if mode == \"DAILY\". Format HH:mm , default=\"12:00\" wakeup_period - enum . Only values 8 , 12 or 24 (hours). Default=\"24\" gps_determination_period - int. How often to determine the position by satellites (in days). Zero (0) means on each waking up. Min=0, max=30, default=0.","title":"yatut_poisk"},{"location":"backend-api/resources/tracking/tracker/settings/trip_detection/","text":"Parking detection \u00b6 Contains API calls for getting and changing parking detection for the tracker. It is responsible for the parking detection function in the UI. The monitoring system automatically detects the facts of parking (states without movement), for the following purposes: To split a movement trajectory to separate trips - for clear illustration and easy viewing in tabular reports; To capture \"Trip end\" / \"Trip start\" events - with possibility of Email/SMS notification. API actions \u00b6 API base path: /tracker/settings/trip_detection . read \u00b6 Gets parking detection settings for the specified tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/settings/trip_detection/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456}' HTTP GET https://api.navixy.com/v2/tracker/settings/trip_detection/read?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456 Response \u00b6 { \"success\" : true , \"min_idle_duration_minutes\" : 5 , \"idle_speed_threshold\" : 3 , \"ignition_aware\" : false , \"motion_sensor_aware\" : false } min_idle_duration_minutes - int. Number of minutes the device must be idle before a trip considered finished. idle_speed_threshold - int. Speed (km/h) below which the device marked as being idle. ignition_aware - boolean. Check ignition state to detect a trip. motion_sensor_aware - boolean. Check motion sensor state to detect a trip. Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. update \u00b6 Updates parking detection settings for the specified tracker. required sub-user rights: tracker_update . Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 min_idle_duration_minutes Number of minutes the device must be idle before a trip considered finished. Min=1, max=1440. int 5 idle_speed_threshold Speed (km/h) below which the device marked as being idle. Min=0, max=200. If 0 - will never idle. int 3 ignition_aware Check ignition state to detect a trip. boolean false motion_sensor_aware Check motion sensor state to detect a trip. boolean false Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/settings/trip_detection/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"min_idle_duration_minutes\": \"5\", \"idle_speed_threshold\": \"3\", \"ignition_aware\": false, \"motion_sensor_aware\": false}' HTTP GET https://api.navixy.com/v2/tracker/settings/trip_detection/update?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456&min_idle_duration_minutes=5&idle_speed_threshold=3&ignition_aware=false&motion_sensor_aware=false Response \u00b6 { \"success\" : true } Errors \u00b6 204 \u2013 Entity not found (if there is no tracker with such ID belonging to authorized user). 208 \u2013 Device blocked (if tracker exists but was blocked due to tariff restrictions or some other reason).","title":"Trip Detection"},{"location":"backend-api/resources/tracking/tracker/settings/trip_detection/#parking-detection","text":"Contains API calls for getting and changing parking detection for the tracker. It is responsible for the parking detection function in the UI. The monitoring system automatically detects the facts of parking (states without movement), for the following purposes: To split a movement trajectory to separate trips - for clear illustration and easy viewing in tabular reports; To capture \"Trip end\" / \"Trip start\" events - with possibility of Email/SMS notification.","title":"Parking detection"},{"location":"backend-api/resources/tracking/tracker/settings/trip_detection/#api-actions","text":"API base path: /tracker/settings/trip_detection .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/settings/trip_detection/#read","text":"Gets parking detection settings for the specified tracker.","title":"read"},{"location":"backend-api/resources/tracking/tracker/settings/trip_detection/#update","text":"Updates parking detection settings for the specified tracker. required sub-user rights: tracker_update .","title":"update"},{"location":"backend-api/resources/tracking/tracker/settings/special/","text":"About special settings \u00b6 Some trackers provide additional specific kind of control which is defined with special_control field of tracker model. This field contains type , which identifies a certain kind of settings. (For example \"pwr_off_key\" or \"sos_key\", which you can see below) special_control = \"none\" means that tracker doesn't have specific kind of control. In other cases you can: read special settings with api/tracker/settings/special/read , update special settings with api/tracker/settings/special/update , perform special control with api/tracker/send_command . Such control assumes tracker special settings API actions \u00b6 API base path: /tracker/settings/special . read \u00b6 Gets special settings for the specified tracker. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 type Optional. Type of special object. enum \"electronic_lock_password\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/settings/special/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456}' HTTP GET https://api.navixy.com/v2/tracker/settings/special/read?hash=a6aa75587e5c59c32d347da438505fc3&tracker_id=123456 Responses \u00b6 If parameter type is present: { \"success\" : true , \"value\" : { \"type\" : \"electronic_lock_password\" , \"password\" : \"4567879\" , \"remember_password\" : false } } value - settings object. If parameter type omitted: { \"success\" : true , \"list\" : [{ \"type\" : \"electronic_lock_password\" , \"password\" : \"4567879\" , \"remember_password\" : false },{ \"type\" : \"hhd_lock_password\" , \"password\" : \"25698545\" , \"remember_password\" : true }] } list - array of objects. Settings object array. Settings object structures by type: \u00b6 electronic_lock_password { \"type\" : \"electronic_lock_password\" , \"password\" : \"password\" , \"remember_password\" : false } password - string. Nullable. hhd_lock_password { \"type\" : \"hhd_lock_password\" , \"password\" : \"56894567\" , \"remember_password\" : true } password - string. Nullable. 8 digits. jointech_lock_password { \"type\" : \"jointech_lock_password\" , \"password\" : \"d45s6w\" , \"remember_password\" : false } password - string. Nullable. 6 non-space, non-comma symbols. vg_lock_password { \"type\" : \"vg_lock_password\" , \"password\" : \"123456\" , \"remember_password\" : true } password - string. Nullable. 6 digits. autofon_sms_alerts { \"type\" : \"autofon_sms_alerts\" , \"low_battery_mode\" : \"enable\" , \"ext_input_mode\" : \"disable\" , \"sos_button_mode\" : \"enable\" } low_battery_mode - enum . Can be \"enable\" | \"disable\". ext_input_mode - enum . Can be \"enable\" | \"disable\". sos_button_mode - enum . Can be \"enable\" | \"disable\". auto_geofence_telfm { \"type\" : \"auto_geofence_telfm\" , \"mode\" : \"enable\" , \"activation_timeout\" : 300 , \"radius\" : 50 } mode - enum . Can be \"enable\" | \"disable\". activation_timeout - int. 0-65535 seconds. radius - int. 50 - 10000 meters. bce_tacho_control { \"type\" : \"bce_tacho_control\" , \"function\" : \"slot1\" } function - enum . Can be \"slot1\" | \"slot2\" | \"vu_activities\" | \"vu_no_activities\" call_button { \"type\" : \"call_button\" , \"capacity\" : 1 , \"items\" : [{ \"phone\" : \"45641784111\" }] } items - Array of phone numbers (10-15 digits) represented as strings. phone - string. Phone number in the international format without \"+\" sign. call_buttons_v40 { \"type\" : \"call_buttons_v40\" , \"capacity\" : 4 , \"items\" : [{ \"phone\" : \"45641784111\" }] } items - Array of phone numbers (10-15 digits) represented as strings. phone - string. Phone number in the international format without \"+\" sign. careu_psm { \"type\" : \"careu_psm\" , \"sleep_when_ignition_off\" : true , \"sleep_when_no_motion\" : true , \"sleep_when_no_communication\" : true , \"sleep_conditions_duration\" : 1 , \"deep_sleep_conditions_duration\" : 300 , \"wake_up_interval\" : 30 , \"wake_up_from_dsm_interval\" : 2 } sleep_when_ignition_off - boolean. sleep_when_no_motion - boolean. sleep_when_no_communication - boolean. sleep_conditions_duration \u2013 int. Delay between the moment when conditions met and sleep mode activation in minutes. Can be 1-255. deep_sleep_conditions_duration \u2013 int. Delay between sleep mode activation and deep sleep mode activation in minutes. Can be 0-65535. wake_up_interval \u2013 int. Delay before waking up from sleep mode in minutes. Can be 0-65535. wake_up_from_dsm_interval \u2013 int. Delay before waking up from deep sleep mode in hours. Can be 0-255. 0 in these fields means don't switch. castel_alarms { \"type\" : \"castel_alarms\" , \"acceleration\" : { \"report\" : true , \"beep\" : true , \"threshold\" : 0.4 }, \"deceleration\" : { \"report\" : false , \"beep\" : false , \"threshold\" : 0.7 }, \"crash\" : { \"report\" : true , \"beep\" : true , \"threshold\" : 1.0 }, \"sharp_turn\" : { \"report\" : true , \"beep\" : true , \"threshold\" : 0.3 } } report - boolean. If true will send notification to server upon an event. beep - boolean. If true will sound upon an event. threshold - double. Normal values range where event does not occur. Each unit equals 1 g. acceleration - 0.2 - 0.8. deceleration - 0.3 - 1.0. crash - 1.0 - 2.0. sharp_turn - 0.3 - 0.9. castel_obd { \"type\" : \"castel_obd\" , \"enable_pid_reports\" : true , \"pid_data_records_per_message\" : 1 , \"pid_data_collect_interval\" : 30 } enable_pid_reports - boolean. pid_data_records_per_message - int. Count of records per one message. Can be 1 - 20. pid_data_collect_interval - int. Data collect interval in seconds. Can be 30 - 600. charging_gmt100 { \"type\" : \"charging_gmt100\" , \"mode\" : \"on_need\" } mode - enum . Can be \"on_need\" | \"ign_on_only\" | \"ign_on\" | \"low_charge\". ddd_emails { \"type\" : \"ddd_emails\" , \"emails\" : [ \"test@email.com\" , \"example@email.com\" ] } emails - string array. Valid emails. Maximum size 5. digital_password { \"type\" : \"digital_password\" , \"password\" : \"123456\" } password - string. 6 digits. fcc_telfm { \"type\" : \"fcc_telfm\" , \"fuel_type\" : \"gasoline\" , \"engine_volume\" : 10.0 , \"multiplier\" : 0.0 } fuel_type - enum . Can be \"gasoline\" | \"diesel\" | \"lpg\". engine_volume - double. Can be 0.0 - 10.0. multiplier - double. Can be 0.0 - 10.0. galileo_tacho_control { \"type\" : \"galileo_tacho_control\" , \"function\" : \"download\" } galileo_hds { \"type\" : \"galileo_hds\" , \"mode\" : \"enable\" , \"max_acceleration_force\" : 1.26 , \"max_braking_force\" : 1.59 , \"max_cornering_force\" : 0.75 } mode - enum . Can be \"enable\" | \"disable\". max_acceleration_force - double. It is a max allowed acceleration force which can be reached while accelerating without triggering harsh acceleration event.Can be 0 - 2.55. max_braking_force - double. It is a max allowed braking force which can be reached while braking without triggering harsh braking event. Can be 0 - 2.55. max_cornering_force - double. It is a max allowed cornering angle which can be reached while cornering without triggering harsh cornering event. Can be 0 - 2.55. harsh_behavior_hua_sheng { \"type\" : \"harsh_behavior_hua_sheng\" , \"mode\" : \"enable\" , \"max_acceleration_force\" : 1.0 , \"max_braking_force\" : 0.5 , \"max_cornering_force\" : 0.1 } mode - enum . Can be \"enable\" | \"disable\". max_acceleration_force - double. It is a max allowed acceleration force which can be reached while accelerating without triggering harsh acceleration event.Can be 0.1 - 1.0. max_braking_force - double. It is a max allowed braking force which can be reached while braking without triggering harsh braking event. Can be 0.1 - 1.0. max_cornering_force - double. It is a max allowed cornering angle which can be reached while cornering without triggering harsh cornering event. Can be 0.1 - 1.0. hbm_telfm { \"type\" : \"hbm_telfm\" , \"mode\" : \"enable\" , \"max_acceleration_force\" : 0.3 , \"max_braking_force\" : 0.85 , \"max_angular_velocity\" : 0.1 } mode - enum . Can be \"enable\" | \"disable\". max_acceleration_force - double. It is a max allowed acceleration force which can be reached while accelerating without triggering harsh acceleration event. Can be 0.25 - 0.85 g. max_braking_force - double. It is a max allowed braking force which can be reached while braking without triggering harsh braking event. Can be 0.25 - 0.85 g. max_cornering_force - double. It is a max allowed cornering angle which can be reached while cornering without triggering harsh cornering event. Can be 0.1 - 1.0 rad/s. hbm_telfm5x { \"type\" : \"hbm_telfm5x\" , \"mode\" : \"enable\" , \"max_acceleration_force\" : 0.5 , \"max_braking_force\" : 3.0 , \"max_angular_velocity\" : 10.0 } max_acceleration_force \u2013 double. It is a max allowed acceleration force which can be reached while accelerating without triggering harsh acceleration event. Can be 0.5 - 10.0 g. max_braking_force \u2013 double. It is a max allowed braking force which can be reached while braking without triggering harsh braking event. Can be 0.5 - 10.0 g. max_angular_velocity \u2013 double. It is a max allowed cornering angle which can be reached while cornering without triggering harsh cornering event. Can be 0.5 - 10.0 rad/s. hbm_ql { \"type\" : \"hbm_ql\" , \"mode\" : \"enable\" , \"high_speed\" : 100 , \"high_speed_braking_delta\" : 50 , \"high_speed_acceleration_delta\" : 50 , \"medium_speed\" : 70 , \"medium_speed_braking_delta\" : 50 , \"medium_speed_acceleration_delta\" : 50 , \"low_speed_braking_delta\" : 50 , \"low_speed_acceleration_delta\" : 50 } mode - enum . Can be \"enable\" | \"disable\". high_speed - int. Can be 100 - 400. high_speed_braking_delta - int. Can be 0 - 100. high_speed_acceleration_delta - int. Can be 0 - 100. medium_speed - int. Can be 60 - 100. medium_speed_braking_delta - int. Can be 0 - 100. medium_speed_acceleration_delta - int. Can be 0 - 100. low_speed_braking_delta - int. Can be 0 - 100. low_speed_acceleration_delta - int. Can be 0 - 100. hbm_ms_ql { \"type\" : \"hbm_ms_ql\" , \"mode\" : \"gps_only\" , \"high_speed\" : 100 , \"high_speed_braking_delta\" : 50 , \"high_speed_acceleration_delta\" : 50 , \"medium_speed\" : 60 , \"medium_speed_braking_delta\" : 50 , \"medium_speed_acceleration_delta\" : 50 , \"low_speed_braking_delta\" : 50 , \"low_speed_acceleration_delta\" : 50 , \"turn_brake_threshold\" : 30 , \"turn_brake_duration\" : 320 , \"acceleration_threshold\" : 15 , \"acceleration_duration\" : 1200 } mode - enum . Can be \"disable\" | \"gps_only\" | \"motion_sensor_only\" | \"gps_and_motion_sensor\". high_speed - int. Can be 100 - 400. high_speed_braking_delta - int. Can be 0 - 100. high_speed_acceleration_delta - int. Can be 0 - 100. medium_speed - int. Can be 60 - 100. medium_speed_braking_delta - int. Can be 0 - 100. medium_speed_acceleration_delta - int. Can be 0 - 100. low_speed_braking_delta - int. Can be 0 - 100. low_speed_acceleration_delta - int. Can be 0 - 100. turn_brake_threshold - int. Can be 30 - 70. turn_brake_duration - int. Can be 320 - 800 milliseconds. acceleration_threshold - int. Can be 15 - 50. acceleration_duration - int. Can be 400 - 2000 milliseconds. harsh_behavior_bce { \"type\" : \"harsh_behavior_bce\" , \"is_switched_off\" : false , \"acceleration_limit\" : 0.04 , \"braking_limit\" : 1.21 , \"cornering_limit\" : 2.38 } is_switched_off - boolean. acceleration_limit - double. Can be 0.04 - 3. braking_limit - double. Can be 0.04 - 3. cornering_limit - double. Can be 0.04 - 3. harsh_behavior_concox_x1 { \"type\" : \"harsh_behavior_concox_x1\" , \"acc_speed\" : 40 , \"acc_detection_time\" : 4 , \"braking_speed\" : 60 , \"braking_detection_time\" : 2 } acc_speed - int. Can be 0 - 100. acc_detection_time - int. Can be 0 - 10. braking_speed - int. Can be 0 - 100. braking_detection_time - int. Can be 0 - 10. harsh_behavior_tramigo { \"type\" : \"harsh_behavior_tramigo\" , \"mode\" : \"enable\" , \"max_acceleration_force\" : 0.5 , \"max_braking_force\" : 1.3 } mode - enum . Can be \"enable\" | \"disable\". max_acceleration_force - double. Can be 0.1 - 8. max_braking_force - double. Can be 0.1 - 8. harsh_behavior_ruptela { \"type\" : \"harsh_behavior_ruptela\" , \"braking_limit\" : 30 , \"acceleration_limit\" : 60 } braking_limit - int. Can be 0 - 100. acceleration_limit - int. Can be 0 - 100. nimbelink_accel { \"type\" : \"nimbelink_accel\" , \"mode\" : \"enable\" , \"x\" : 1.12 , \"y\" : 0.8 , \"z\" : 2.33 } mode - enum . Can be \"enable\" | \"disable\". x - double. Can be 0 - 2.55. y - double. Can be 0 - 2.55. z - double. Can be 0 - 2.55. hua_sheng_vibration_sensitivity { \"type\" : \"hua_sheng_vibration_sensitivity\" , \"sensitivity\" : \"easy\" } sensitivity - enum . Can be \"easy\" | \"normal\" | \"hard\" | \"hardest\". ign_ruptela For Ruptela devices. Represents configuration parameters related to ignition detection (\"Engine detection\" and \"Custom ignition\", as Ruptela documentation calls them). JSON-schema : { \"$schema\" : \"http://json-schema.org/draft-07/schema#\", \"type\" : \"object\", \"properties\" : { \"mode\" : { \"$ref\" : \"ruptela_ignition_mode.json\" }, \"use_voltage\" : { \"type\" : [ \"boolean\", \"null\" ] }, \"voltage\" : { \"type\" : [ \"number\", \"null\" ] } }, \"required\" : [ \"mode\" ], \"$id\" : \"ruptela-ignition.json\" } { \"$schema\" : \"http://json-schema.org/draft-07/schema#\", \"type\" : \"string\", \"enum\" : [ \"always_on\", \"din\", \"movement_sensor\", \"custom\" ], \"$id\" : \"ruptela_ignition_mode.json\" } ign_src_suntech { \"type\" : \"ign_src_suntech\" , \"mode\" : \"power_voltage\" , \"power_voltage_low_level\" : 12000 , \"power_voltage_high_level\" : 19000 } mode - enum . Can be \"power_voltage\" | \"din1\" | \"movement\". power_voltage_low_level - int. Can be 0 - 30000. power_voltage_high_level - int. Can be 0 - 30000. ign_src_telfm { \"type\" : \"ign_src_telfm\" , \"mode\" : \"power_voltage\" , \"power_voltage_low_level\" : 12000 , \"power_voltage_high_level\" : 24000 } mode - enum . Can be \"power_voltage\" | \"din1\" | \"movement\". power_voltage_low_level - int. Can be 0 - 30000. power_voltage_high_level - int. Can be 0 - 30000. locus_sec { \"type\" : \"locus_sec\" , \"signature\" : \"signature\" , \"sms_password\" : \"23145\" , \"reset\" : false } signature - string. Length 1 - 32. sms_password - string. Length 1 - 32. reset - boolean. phonebook_gt300 { \"type\" : \"phonebook_gt300\" , \"capacity\" : 20 , \"items\" : [{ \"name\" : \"Karl\" , \"phone\" : \"555469874\" }] } items - array of contacts. name - string. Contact name. phone - string. Phone number in the international format without \"+\" sign. phonebook_pt100 { \"type\" : \"phonebook_pt100\" , \"capacity\" : 3 , \"items\" : [{ \"name\" : \"Karl\" , \"phone\" : \"555469874\" }] } items - array of contacts. name - string. Contact name. phone - string. Phone number in the international format without \"+\" sign. pwr_off_key { \"type\" : \"pwr_off_key\" , \"mode\" : \"enable\" } mode - enum . Can be \"enable\" | \"disable\". scat_mayak_bt_control { \"type\" : \"scat_mayak_bt_control\" , \"function\" : \"bt_disable\" , \"bt_state\" : true } function - enum . Can be \"bt_disable\" | \"bt_enable\" | \"bt_clear\" | \"bt_write\". bt_state - boolean. sos_key { \"type\" : \"sos_key\" , \"mode\" : \"report\" , \"phone\" : \"55548875236\" } mode - enum . Can be \"report\" | \"call_report\". phone - string. SOS phone to call. Phone number in the international format without \"+\" sign. starcom_impact { \"type\" : \"starcom_impact\" , \"strong_duration\" : 12 , \"strong_force\" : 4 , \"strong_impact_enabled\" : true , \"weak_duration\" : 9 , \"weak_force\" : 6 , \"weak_impact_enabled\" : true } strong_duration - int. Required impact duration to trigger strong impact event. Each unit equals 2.5 milliseconds. Can be 0 - 14. strong_force - int. Required impact force triggering strong impact event. Each unit equals about 1.1g. Can be 1 - 7. strong_impact_enabled - boolean. weak_duration - int. Required impact duration to trigger weak impact event. Each unit equals 2.5 milliseconds. Can be 0 - 14. weak_force - int. Required impact force triggering weak impact event. Each unit equals about 1.1g. Can be 1 - 7. weak_impact_enabled - boolean. tacho_company_card { \"type\" : \"tacho_company_card\" , \"company_card_number\" : \"A2332BF23EC3245A\" } company_card_number - string. 16 HEX digits (0-9A-F). tacho_remote_download { \"type\" : \"tacho_remote_download\" , \"company_card_number\" : \"A2332BF23EC3245A\" , \"vu_download_interval\" : 10 , \"card_download_interval\" : 2 } company_card_number - string. 16 HEX digits (0-9A-F). vu_download_interval - int. Min = 0. card_download_interval - int. Min = 0. teltonika_tacho_request { \"type\" : \"teltonika_tacho_request\" , \"data_type\" : \"activities\" , \"activities_start_time\" : \"2020-09-01\" , \"activities_end_time\" : \"2020-09-16\" } data_type - enum . Can be \"overview\" | \"activities\" | \"eventsAndFaults\" | \"detailedSpeed\" | \"technicalData\" | \"card1Download\" | \"card2Download\". activities_start_time - string date. Format = \"YYYY-MM-DD\", not null only if data_type = \"activities\". activities_end_time - string date. Format = \"YYYY-MM-DD\", not null only if data_type = \"activities\". temporary_digital_password { \"type\" : \"temporary_digital_password\" , \"password\" : \"231578\" , \"duration_in_min\" : 17 } password - string. 6 digits. duration_in_min - int. Can be 10 - 255. time_shift { \"type\" : \"time_shift\" , \"offset\" : 3.0 } offset - double. Can be -24.0 - 24.0 hours. tow_detection_ql { \"type\" : \"tow_detection_ql\" , \"mode\" : \"enable\" , \"engine_off_to_tow\" : 300 , \"fake_tow_delay\" : 300 , \"tow_interval\" : 12000 , \"rest_duration\" : 90 , \"motion_duration\" : 8300 , \"motion_threshold\" : 3 } mode - enum . Can be \"enable\" | \"disable\". engine_off_to_tow - int. A time parameter to judge whether the device considered towed after the engine off. If the motion sensor doesn't detect stillness within the specified time after the engine off the device is being towed. Can be 0 - 900 seconds. fake_tow_delay - int. After the engine off and stillness detected, if motion sensor detects moving again, the device turns into a state called fake tow. If the device keeps in fake tow after a period defined by this parameter, it is considered towed. Can be 0 - 600 seconds. tow_interval - int. The period to send alarm messages. Can be 0 - 86400 seconds. rest_duration - int. A time parameter to make sure the device enters stillness status, i.e. the status of the device will be changed to stillness if the motion sensor detects stillness and maintains for a period defined by this parameter. Can be 0 - 3825 seconds, step 15. motion_duration - int. A time parameter to make sure the device enters motion status. Can be 0 - 9900 milliseconds, step 100. motion_threshold - int. The threshold for the motion sensor to measure whether the device is moving. Can be 2 - 9. tow_detection_ql2 { \"type\" : \"tow_detection_ql2\" , \"mode\" : \"enable\" , \"engine_off_to_tow\" : 300 , \"fake_tow_delay\" : 300 , \"tow_interval\" : 12000 , \"rest_duration\" : 90 , \"motion_duration\" : 400 , \"motion_threshold\" : 3 } mode - enum . Can be \"enable\" | \"disable\". engine_off_to_tow - int. A time parameter to judge whether the device considered towed after the engine off. If the motion sensor doesn't detect stillness within the specified time after the engine off the device is being towed. Can be 0 - 900 seconds. fake_tow_delay - int. After the engine off and stillness detected, if motion sensor detects moving again, the device turns into a state called fake tow. If the device keeps in fake tow after a period defined by this parameter, it is considered towed. Can be 0 - 600 seconds. tow_interval - int. The period to send alarm messages. Can be 0 - 86400 seconds. rest_duration - int. A time parameter to make sure the device enters stillness status, i.e. the status of the device will be changed to stillness if the motion sensor detects stillness and maintains for a period defined by this parameter. Can be 0 - 3825 seconds, step 15. motion_duration - int. A time parameter to make sure the device enters motion status. Can be 100 - 1000 milliseconds, step 100. motion_threshold - int. The threshold for the motion sensor to measure whether the device is moving. Can be 2 - 9. tow_detection_telfm { \"type\" : \"tow_detection_telfm\" , \"mode\" : \"enable\" , \"activation_timeout\" : 5 , \"threshold\" : 0.30 } mode - enum . Can be \"enable\" | \"disable\". activation_timeout - int. Can be 0 - 65535 minutes. threshold - double. Can be 0.10 - 5.00. video_stream_howen { \"type\" : \"video_stream_howen\" } virtual_ign_ql { \"type\" : \"virtual_ign_ql\" , \"mode\" : \"motion_sensor\" , \"ign_on_voltage\" : 12000 , \"rest_duration_to_off\" : 120 , \"motion_duration_to_on\" : 75 } mode - enum . Can be \"disabled\" | \"power_voltage\" | \"motion_sensor\". ign_on_voltage - int. Can be 250 - 28000. rest_duration_to_off \u2013 int. A time parameter to make sure the device enters stillness status, i.e. the status of the device will be changed to stillness if the motion sensor detects stillness and maintains for a period of time defined by this parameter. Can be 1 - 255. motion_duration_to_on \u2013 A time parameter to make sure the device enters motion status. Can be 1 - 255. no_movement_alarm { \"type\" : \"no_movement_alarm\" , \"enabled\" : true , \"timeout\" : 300 , \"pre_alarm_duration\" : 120 } timeout - int. Can be 30 - 65500. A time parameter when the device doesn't move. pre_alarm_duration - int. Can be 0 - 65500. A time parameter when the device continues not to move after timeout. Errors \u00b6 201 \u2013 Not found in the database (if there is no tracker with such ID belonging to authorized user). 208 \u2013 Device blocked (if tracker exists but was blocked due to tariff restrictions or some other reason). 214 \u2013 Requested operation or parameters are not supported by the device. update \u00b6 Sets special settings for a specified tracker with the new one. required sub-user rights: tracker_configure . Parameters \u00b6 name description type tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int value Settings object, see above. JSON object Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/settings/special/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"value\": {\"type\": \"time_shift\", \"offset\": 3.0}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 214 \u2013 Requested operation or parameters are not supported by the device.","title":"Index"},{"location":"backend-api/resources/tracking/tracker/settings/special/#about-special-settings","text":"Some trackers provide additional specific kind of control which is defined with special_control field of tracker model. This field contains type , which identifies a certain kind of settings. (For example \"pwr_off_key\" or \"sos_key\", which you can see below) special_control = \"none\" means that tracker doesn't have specific kind of control. In other cases you can: read special settings with api/tracker/settings/special/read , update special settings with api/tracker/settings/special/update , perform special control with api/tracker/send_command . Such control assumes tracker special settings","title":"About special settings"},{"location":"backend-api/resources/tracking/tracker/settings/special/#api-actions","text":"API base path: /tracker/settings/special .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/settings/special/#read","text":"Gets special settings for the specified tracker.","title":"read"},{"location":"backend-api/resources/tracking/tracker/settings/special/#update","text":"Sets special settings for a specified tracker with the new one. required sub-user rights: tracker_configure .","title":"update"},{"location":"backend-api/resources/tracking/tracker/settings/special/portlets/","text":"Specific portlets \u00b6 Specific portlets that are used for models of three device manufacturers: Engine event behavior for ATrack. Guard mode for Yatut. Harsh behavior for Suntech. engine_control_atrack \u00b6 Special settings to set the engine event behavior for ATrack. { \"power_voltage_high_level\" : 13800 , \"on_duration_seconds\" : 120 , \"power_voltage_low_level\" : 12800 , \"off_duration_seconds\" : 300 } power_voltage_high_level - int. Voltage in 0.001 volts for detecting engine ON state. Min=0, max=30000, default=13800 mV. on_duration_seconds - int. Duration in seconds that must elapse before the engine state change accepted. Min=0, max=600, default=1 second. power_voltage_low_level - int. Voltage in 0.001 volts for detecting engine OFF state. Min=0, max=30000, default=12800 mV. off_duration_seconds - duration in seconds that must elapse before the engine state change accepted. Min=0, max=600, default=5 seconds. guard_mode_yatut \u00b6 Guard special settings for \"\u042f \u0422\u0423\u0422 \u041f\u041e\u0418\u0421\u041a\". { \"motion_sensor_mode\" : \"double_period\" , \"motion_sensor_first_period\" : \"23:00-07:00\" , \"motion_sensor_second_period\" : \"10:00-17:00\" , \"motion_sensor_amplitude\" : 10 , \"motion_sensor_duration\" : 30 , \"motion_sensor_ignore_time\" : 50 , \"motion_sensor_double_check\" : false , \"perimeter_mode\" : \"once_triggering\" , \"perimeter_diameter\" : 1 } motion_sensor_mode - enum . Can be \"off\" | \"permanent\" | \"single_period\" | \"double_period\". Default=\"off\". motion_sensor_first_period - string time. Format= HH:mm-HH:mm , default=\"23:00-07:00\" Required for motion_sensor_mode in single_period/double_period. motion_sensor_second_period - string time. Format= HH:mm-HH:mm , default=\"10:00-17:00\" Required for motion_sensor_mode in double_period. motion_sensor_amplitude - int. Min=1, max=255, default=5 Required for motion_sensor_mode != off. motion_sensor_duration - int. Min=1, max=255, default=5 seconds. Required for motion_sensor_mode != off. motion_sensor_ignore_time - int. Min=5, max=99, default=5 minutes. Required for motion_sensor_mode != off. motion_sensor_double_check - boolean. Default= false . Required for motion_sensor_mode != off. perimeter_mode - enum . Can be \"off\" | \"once_triggering\" | \"permanent\" | \"point_displacement\". Default=\"off\". perimeter_diameter - int. Min=1, max=999, default=1 kilometer. Required for perimeter_mode != off. harsh_behavior_suntech \u00b6 Harsh driving settings for Suntech. { \"mode\" : \"enable\" , \"max_acceleration_force\" : 1.5 , \"max_braking_force\" : 0.05 , \"max_cornering_force\" : 3 , \"type\" : \"harsh_behavior_suntech\" } mode - string. Can be \"enable\" | \"disable\". max_acceleration_force - double. Can be 0.05 \u2013 3.0 g. max_braking_force - double. Can be 0.05 \u2013 3.0 g. max_cornering_force - double. Can be 0.05 \u2013 3.0 g.","title":"Portlets"},{"location":"backend-api/resources/tracking/tracker/settings/special/portlets/#specific-portlets","text":"Specific portlets that are used for models of three device manufacturers: Engine event behavior for ATrack. Guard mode for Yatut. Harsh behavior for Suntech.","title":"Specific portlets"},{"location":"backend-api/resources/tracking/tracker/settings/special/portlets/#engine_control_atrack","text":"Special settings to set the engine event behavior for ATrack. { \"power_voltage_high_level\" : 13800 , \"on_duration_seconds\" : 120 , \"power_voltage_low_level\" : 12800 , \"off_duration_seconds\" : 300 } power_voltage_high_level - int. Voltage in 0.001 volts for detecting engine ON state. Min=0, max=30000, default=13800 mV. on_duration_seconds - int. Duration in seconds that must elapse before the engine state change accepted. Min=0, max=600, default=1 second. power_voltage_low_level - int. Voltage in 0.001 volts for detecting engine OFF state. Min=0, max=30000, default=12800 mV. off_duration_seconds - duration in seconds that must elapse before the engine state change accepted. Min=0, max=600, default=5 seconds.","title":"engine_control_atrack"},{"location":"backend-api/resources/tracking/tracker/settings/special/portlets/#guard_mode_yatut","text":"Guard special settings for \"\u042f \u0422\u0423\u0422 \u041f\u041e\u0418\u0421\u041a\". { \"motion_sensor_mode\" : \"double_period\" , \"motion_sensor_first_period\" : \"23:00-07:00\" , \"motion_sensor_second_period\" : \"10:00-17:00\" , \"motion_sensor_amplitude\" : 10 , \"motion_sensor_duration\" : 30 , \"motion_sensor_ignore_time\" : 50 , \"motion_sensor_double_check\" : false , \"perimeter_mode\" : \"once_triggering\" , \"perimeter_diameter\" : 1 } motion_sensor_mode - enum . Can be \"off\" | \"permanent\" | \"single_period\" | \"double_period\". Default=\"off\". motion_sensor_first_period - string time. Format= HH:mm-HH:mm , default=\"23:00-07:00\" Required for motion_sensor_mode in single_period/double_period. motion_sensor_second_period - string time. Format= HH:mm-HH:mm , default=\"10:00-17:00\" Required for motion_sensor_mode in double_period. motion_sensor_amplitude - int. Min=1, max=255, default=5 Required for motion_sensor_mode != off. motion_sensor_duration - int. Min=1, max=255, default=5 seconds. Required for motion_sensor_mode != off. motion_sensor_ignore_time - int. Min=5, max=99, default=5 minutes. Required for motion_sensor_mode != off. motion_sensor_double_check - boolean. Default= false . Required for motion_sensor_mode != off. perimeter_mode - enum . Can be \"off\" | \"once_triggering\" | \"permanent\" | \"point_displacement\". Default=\"off\". perimeter_diameter - int. Min=1, max=999, default=1 kilometer. Required for perimeter_mode != off.","title":"guard_mode_yatut"},{"location":"backend-api/resources/tracking/tracker/settings/special/portlets/#harsh_behavior_suntech","text":"Harsh driving settings for Suntech. { \"mode\" : \"enable\" , \"max_acceleration_force\" : 1.5 , \"max_braking_force\" : 0.05 , \"max_cornering_force\" : 3 , \"type\" : \"harsh_behavior_suntech\" } mode - string. Can be \"enable\" | \"disable\". max_acceleration_force - double. Can be 0.05 \u2013 3.0 g. max_braking_force - double. Can be 0.05 \u2013 3.0 g. max_cornering_force - double. Can be 0.05 \u2013 3.0 g.","title":"harsh_behavior_suntech"},{"location":"backend-api/resources/tracking/tracker/stats/stats_engine_hours/","text":"Engine hours \u00b6 Contains API call to read engine hours (time when engine is on) counted for the specified period. API actions \u00b6 API base path: /tracker/stats/engine_hours . read \u00b6 Returns engine hours counted for the specified period. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 from From date/time. date/time \"2020-09-24 03:24:00\" to To date/time. Specified date must be after \"from\" date. date/time \"2020-09-24 06:24:00\" Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/stats/engine_hours/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"tracker_id\": 123456, \"from\": \"2020-09-24 03:24:00\", \"to\": \"2020-09-24 06:24:00\"}' Response \u00b6 { \"success\" : true , \"value\" : 42.0 } Errors \u00b6 204 \u2013 Entity not found - if there is no tracker with such ID belonging to authorized user. 208 \u2013 Device blocked - if tracker exists but was blocked due to tariff restrictions or some other reason. 211 \u2013 Requested time span is too big - if interval between \"from\" and \"to\" is too big (maximum value specified in API config). 214 \u2013 Requested operation or parameters are not supported by the device - if device does not have ignition input. 219 \u2013 Not allowed for clones of the device - if specified tracker is a clone.","title":"Stats Engine Hours"},{"location":"backend-api/resources/tracking/tracker/stats/stats_engine_hours/#engine-hours","text":"Contains API call to read engine hours (time when engine is on) counted for the specified period.","title":"Engine hours"},{"location":"backend-api/resources/tracking/tracker/stats/stats_engine_hours/#api-actions","text":"API base path: /tracker/stats/engine_hours .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/stats/stats_engine_hours/#read","text":"Returns engine hours counted for the specified period.","title":"read"},{"location":"backend-api/resources/tracking/tracker/stats/stats_mileage/","text":"Mileage \u00b6 Contains API call to read mileage counted for the specified period. API actions \u00b6 API base path: /tracker/stats/mileage . read \u00b6 Returns mileage in kilometers in specified period grouped by trackers and day. Parameters \u00b6 name description type trackers Array of tracker IDs (aka \"object_id\"). Trackers must belong to authorized user and not be blocked. int array from From date/time. date/time to To date/time. Specified date must be after \"from\" date. date/time Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/tracker/stats/mileage/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"trackers\": [123456], \"from\": \"2020-09-24 03:24:00\", \"to\": \"2020-09-24 06:24:00\"}' Response \u00b6 { \"success\" : true , \"result\" : { \"123456\" : { \"2000-01-01\" : { \"mileage\" : 0.0 }, \"2000-01-02\" : { \"mileage\" : 0.0 }, \"2000-01-03\" : { \"mileage\" : 199.09 } } }, \"limit_exceeded\" : false } Errors \u00b6 211 \u2013 Requested time span is too big - if interval between \"from\" and \"to\" is too big (maximum value specified in API config). 217 \u2013 List contains nonexistent entities. 221 \u2013 Device limit exceeded.","title":"Stats Mileage"},{"location":"backend-api/resources/tracking/tracker/stats/stats_mileage/#mileage","text":"Contains API call to read mileage counted for the specified period.","title":"Mileage"},{"location":"backend-api/resources/tracking/tracker/stats/stats_mileage/#api-actions","text":"API base path: /tracker/stats/mileage .","title":"API actions"},{"location":"backend-api/resources/tracking/tracker/stats/stats_mileage/#read","text":"Returns mileage in kilometers in specified period grouped by trackers and day.","title":"read"},{"location":"backend-api/resources/tracking/zone/","text":"Working with geofences \u00b6 Geofences used in rules to limit rule area of activity. Also, geofence names shown in reports after the address, if an event happened inside the geofence. This document describes CRUD actions for geofences. Note that geofence points handled separately because they are represented by big arrays of data. Find instructions on working with geofences of different types here . Entity description \u00b6 zone is JSON object with one of types: sausage , circle or polygon . circle: \u00b6 { \"id\" : 985472 , \"type\" : \"circle\" , \"label\" : \"Zone name\" , \"address\" : \"Karlsplatz, 2\" , \"color\" : \"27A9E3\" , \"radius\" : 150 , \"center\" : { \"lat\" : 48.200940 , \"lng\" : 16.369856 }, \"bounds\" : { \"nw\" : { \"lat\" : 48.202289 , \"lng\" : 16.367832 }, \"se\" : { \"lat\" : 48.199591 , \"lng\" : 16.371880 } }, \"tags\" : [ 127 , 15 ] } id - int. Geofence ID. label - string. Geofence label. address - string. Geofence address. color - string. Geofence color in 3-byte RGB hex format. radius - int. Circle radius in meters. center - location object. Location of circle center. bounds - object. North-west and south-east coordinates of the axis-aligned minimum bounding box. tags - int array. Array of tag IDs. polygon: \u00b6 { \"id\" : 124597 , \"type\" : \"polygon\" , \"label\" : \"Geofence name\" , \"address\" : \"Karlsplatz, 2\" , \"color\" : \"27A9E3\" , \"points\" : [ <poi nt > , ... ], \"bounds\" : { \"nw\" : { \"lat\" : 48.202289 , \"lng\" : 16.367832 }, \"se\" : { \"lat\" : 48.199591 , \"lng\" : 16.371880 } }, \"tags\" : [ 1 , 236 ] } id - int. Geofence ID. label - string. Geofence label. address - string. Geofence address. color - string. Geofence color in 3-byte RGB hex format. points - optional array of objects. Geofence points bounds - object. North-west and south-east coordinates of the axis-aligned minimum bounding box that contains all points. tags - int array. Array of tag IDs. sausage: \u00b6 Represents all points within certain distance to the specified polyline. { \"id\" : 12345 , \"type\" : \"sausage\" , \"label\" : \"Geofence name\" , \"address\" : \"Karlsplatz, 2\" , \"color\" : \"27A9E3\" , \"radius\" : 150 , \"points\" : [ <poi nt > , ... ], \"bounds\" : { \"nw\" : { \"lat\" : 48.202289 , \"lng\" : 16.367832 }, \"se\" : { \"lat\" : 48.199591 , \"lng\" : 16.371880 } }, \"tags\" : [ 289 ] } id - int. Geofence ID. label - string. Geofence label. address - string. Geofence address. color - string. Geofence color in 3-byte RGB hex format. radius - int. Polyline radius in meters. points - optional array of objects. Geofence points bounds - object. North-west and south-east coordinates of the axis-aligned minimum bounding box that contains all points with a radius. tags - int array. Array of tag IDs. API actions \u00b6 API base path: /zone . batch_convert \u00b6 Convert batch of tab-delimited circle geofences and return list of checked geofences with errors. required sub-user rights : zone_update . Parameters \u00b6 name description type batch Batch of tab-delimited places. string file_id ID of file preloaded with /data/spreadsheet/parse method. string fields Optional, array of field names, default is [\"label\", \"address\", \"lat\", \"lng\", \"radius\", \"tags\"] . enum array geocoder Optional. Geocoder type. enum default_radius Optional. Radius for point, default is 100. int If 'file_id' is set \u2013 'batch' parameter will be ignored. For batch parameter: * address - required if no coordinates specified. * lat - required if no address specified. * long - required if no address specified. Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/zone/batch_convert' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"batch\": \"Geofence for test Karlsplatz, 2\"}' Response \u00b6 { \"success\" : true , \"list\" : [ { \"id\" : null , \"type\" : \"circle\" , \"label\" : \"Geofence name\" , \"address\" : \"Karlsplatz, 2\" , \"color\" : \"27A9E3\" , \"radius\" : 100 , \"center\" : { \"lat\" : 48.2009935 , \"lng\" : 16.3699642 }, \"bounds\" : { \"nw\" : { \"lat\" : 48.202289 , \"lng\" : 16.367832 }, \"se\" : { \"lat\" : 48.199591 , \"lng\" : 16.371880 } }, \"tags\" : [] } ], \"limit_exceeded\" : false } id - int. Geofence ID. label - string. Geofence label. address - string. Geofence address. color - string. Geofence color in 3-byte RGB hex format. radius - int. Circle radius in meters. center - location object. Location of circle center. bounds - object. North-west and south-east coordinates of the axis-aligned minimum bounding box. tags - int array. Array of tag IDs. limit_exceeded - boolean. true if given batch constrained by limit. Response with errors object \u00b6 { \"success\" : true , \"list\" : [ { \"id\" : null , \"label\" : \"Geofence name\" , \"address\" : \"incorrect address\" , \"color\" : \"27A9E3\" , \"radius\" : 100 , \"center\" : { \"lat\" : 0.0 , \"lng\" : 0.0 }, \"errors\" : [ { \"parameter\" : \"zone.center\" , \"error\" : \"Location should be correct with 'lat' and 'lng' not null\" } ], \"tags\" : [] } ], \"limit_exceeded\" : false } errors - optional object. It appears if parameters incorrect. parameter - string. Parameter name. error - string. Error description. Errors \u00b6 234 - Invalid data format. create \u00b6 Creates a new geofence. required sub-user rights : zone_update . Parameters \u00b6 name description type zone zone JSON-object without id and color fields. JSON object points Array of new points for this geofence. Must contain at least 3 elements. MUST be omitted if zone does not support points (e.g. circle). array of zone point objects zone.color Optional. Geofence color in 3-byte RGB hex format. Default is \"27A9E3\". string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/zone/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone\": {\"label\": \"Circle geofence\", \"type\": \"circle\", \"center\": {\"lat\": 61.49504550221769, \"lng\": 23.775476217269897}, \"radius\": 50, \"tags\": [179227], \"color\": \"03A9F4\", \"address\":\"Address\"}}' Response \u00b6 { \"success\" : true , \"id\" : 1234567 } id - int. An ID of the created geofence. Errors \u00b6 202 - Too many points in a geofence \u2013 max allowed points count for a geofence is 100 for a polygon or 1024 for sausage. 230 - Not supported for this entity type \u2013 if \"points\" were specified, but geofence cannot have any points associated with it (e.g. if geofence is circle). 268 - Over quota \u2013 if the user's quota for geofences exceeded. delete \u00b6 Deletes user's geofence by zone_id or array of zone_ids . required sub-user rights : zone_update . Parameters \u00b6 name description type format zone_id ID of a geofence. int 1234567 zone_ids Array of geofence IDs. int array [1234567, 2345678] Use only one parameter zone_id or zone_ids . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/zone/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone_id\": 1234567}' HTTP GET https://api.navixy.com/v2/zone/delete?hash=a6aa75587e5c59c32d347da438505fc3&zone_id=1234567 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database. 203 - Delete entity associated with. { \"success\" : false , \"status\" : { \"code\" : 203 , \"description\" : \"Delete entity associated with\" }, \"entities\" : [ { \"type\" : \"rules\" , \"ids\" : [ 12345 , 23456 ] } ] } ids - int array. List IDs of the rules which uses the specified geofence. list \u00b6 Gets all user geofences. Parameters \u00b6 name description type filter Optional. Filter for geofences label and description. string tag_ids Optional. Tag IDs assigned to the geofences. The zones found must include all the tags from the list. int array offset Optional. Offset from start of the found geofences for pagination. int limit Optional. Limit of the found geofences for pagination. int with_points Optional, default= false . If true , return geofence with its points boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/zone/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\"}' HTTP GET https://api.navixy.com/v2/zone/list?hash=a6aa75587e5c59c32d347da438505fc3 Response \u00b6 { \"success\" : true , \"list\" : [ { \"id\" : 12345 , \"type\" : \"sausage\" , \"label\" : \"Zone name\" , \"address\" : \"Karlsplatz, 2\" , \"color\" : \"27A9E3\" , \"radius\" : 150 , \"points\" : [ <poi nt > , ... ], \"tags\" : [ 289 ] } ] } list - array of objects. Geofence objects with optional points field. read \u00b6 Gets geofence by specified ID. Parameters \u00b6 name description type zone_id ID of a geofence. int with_points Optional, default= false . If true , return geofence with its points boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/zone/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone_id\": 12345}' HTTP GET https://api.navixy.com/v2/zone/read?hash=a6aa75587e5c59c32d347da438505fc3&zone_id=12345 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 12345 , \"type\" : \"sausage\" , \"label\" : \"Zone name\" , \"address\" : \"Karlsplatz, 2\" , \"color\" : \"27A9E3\" , \"radius\" : 150 , \"points\" : [ <poi nt > , ... ], \"tags\" : [ 289 ] } } value - Geofence object with optional points field. search_location \u00b6 Gets all geofence IDs and names within which a specified coordinates are located inside. Parameters \u00b6 name description type location Location coordinates (see: data types description section section). JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/zone/search_location' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"location\": {\"lat\": 34.178868, \"lng\": -118.599672}}' Response \u00b6 { \"list\" : [ { \"id\" : 18404 , \"label\" : \"geofence 1\" }, { \"id\" : 35284 , \"label\" : \"geofence 2\" } ], \"success\" : true } id - int. Geofence ID that containing a searched location. label - string. Geofence name. update \u00b6 Update geofence parameters for the specified geofence. Note that geofence must exist, must belong to the current user, and its type cannot be changed. E.g. if you already have a geofence with ID=1 which type is \"circle\", not possible to submit a geofence which type is \"polygon\". required sub-user rights : zone_update . Parameters \u00b6 name description type zone Geofence JSON-object with id and color fields. JSON object zone.color Optional. Geofence color in 3-byte RGB hex format. Default is \"27A9E3\". string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/zone/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone\": {\"id\": 231512 \"label\": \"Circle geofence\", \"type\": \"circle\", \"center\": {\"lat\": 61.49504550221769, \"lng\": 23.775476217269897}, \"radius\": 50, \"tags\": [179227], \"color\": \"03A9F4\", \"address\":\"Address\"}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if geofence with the specified ID cannot be found or belongs to another user. 231 - Entity type mismatch \u2013 if type of the submitted geofence differs from type of the geofence currently stored in the database. upload \u00b6 Import geofences from KML file. required sub-user rights : zone_update . MUST be a POST multipart request (multipart/form-data), with one of the parts being a KML file upload (with the name \"file\"). Parameters \u00b6 name description type file A KML file upload containing geofences data. file upload default_radius Default radius for circle and route geofence in meters. Min 20, default 150. int dry_run If true returns ready to create geofences or creates it and returns list of IDs otherwise. Default true . boolean redirect_target Optional. URL to redirect. If redirect_target passed return redirect to <redirect_target>?response=<urlencoded_response_json> string Responses \u00b6 if dry_run=true : { \"success\" : true , \"list\" : [ { \"id\" : null , \"label\" : \"Simple line 1\" , \"address\" : \"\" , \"color\" : \"27A9E3\" , \"points\" : [ { \"lat\" : 37.818844 , \"lng\" : -122.366278 , \"node\" : true }, { \"lat\" : 37.819267 , \"lng\" : -122.365248 , \"node\" : false }, { \"lat\" : 37.819861 , \"lng\" : -122.36564 , \"node\" : false }, { \"lat\" : 37.819429 , \"lng\" : -122.366669 , \"node\" : true } ], \"radius\" : 150 , \"type\" : \"sausage\" } ] } if dry_run=false : { \"success\" : true , \"list\" : [ 1 , 2 ] } Errors \u00b6 202 - Too many points in a geofence \u2013 max allowed points count for a geofence is 100 for a polygon or 1024 for sausage. 233 - No data file \u2013 if file part is missing. 234 - Invalid data format. 268 - Over quota \u2013 if the user's quota for geofences exceeded. From Placemark with Point geometry will be created circle geofence with a radius=default_radius. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <kml xmlns= \"http://www.opengis.net/kml/2.2\" > <Document> <name> Points </name> <Placemark> <name> named point </name> <Point> <coordinates> -122.366278,37.818844,30 </coordinates> </Point> </Placemark> </Document> </kml> From Placemark with LineString geometry will be created route geofence with a radius=default_radius. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <kml xmlns= \"http://www.opengis.net/kml/2.2\" > <Document> <name> Simple line </name> <Placemark> <LineString> <coordinates> -122.366278,37.818844,30 -122.365248,37.819267,30 -122.365640,37.819861,30 -122.366669,37.819429,30 </coordinates> </LineString> </Placemark> </Document> </kml> From Placemark with Polygon geometry will be created polygon geofence. Polygons with holes not supported. In that case only the outer boundary will be imported and the inner boundary, holes, ignored. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <kml xmlns= \"http://www.opengis.net/kml/2.2\" > <Document> <name> Simple polygon </name> <Placemark> <name> hollow box </name> <Polygon> <outerBoundaryIs> <LinearRing> <coordinates> -122.366278,37.818844,30 -122.365248,37.819267,30 -122.365640,37.819861,30 -122.366669,37.819429,30 -122.366278,37.818844,30 </coordinates> </LinearRing> </outerBoundaryIs> </Polygon> </Placemark> </Document> </kml> From Placemark with MultiGeometry geometry will be created several geofences. If Placemark.name defined it will be used as geofence name with respect of hierarchy of Folder and Document .","title":"Index"},{"location":"backend-api/resources/tracking/zone/#working-with-geofences","text":"Geofences used in rules to limit rule area of activity. Also, geofence names shown in reports after the address, if an event happened inside the geofence. This document describes CRUD actions for geofences. Note that geofence points handled separately because they are represented by big arrays of data. Find instructions on working with geofences of different types here .","title":"Working with geofences"},{"location":"backend-api/resources/tracking/zone/#entity-description","text":"zone is JSON object with one of types: sausage , circle or polygon .","title":"Entity description"},{"location":"backend-api/resources/tracking/zone/#api-actions","text":"API base path: /zone .","title":"API actions"},{"location":"backend-api/resources/tracking/zone/#batch_convert","text":"Convert batch of tab-delimited circle geofences and return list of checked geofences with errors. required sub-user rights : zone_update .","title":"batch_convert"},{"location":"backend-api/resources/tracking/zone/#create","text":"Creates a new geofence. required sub-user rights : zone_update .","title":"create"},{"location":"backend-api/resources/tracking/zone/#delete","text":"Deletes user's geofence by zone_id or array of zone_ids . required sub-user rights : zone_update .","title":"delete"},{"location":"backend-api/resources/tracking/zone/#list","text":"Gets all user geofences.","title":"list"},{"location":"backend-api/resources/tracking/zone/#read","text":"Gets geofence by specified ID.","title":"read"},{"location":"backend-api/resources/tracking/zone/#search_location","text":"Gets all geofence IDs and names within which a specified coordinates are located inside.","title":"search_location"},{"location":"backend-api/resources/tracking/zone/#update","text":"Update geofence parameters for the specified geofence. Note that geofence must exist, must belong to the current user, and its type cannot be changed. E.g. if you already have a geofence with ID=1 which type is \"circle\", not possible to submit a geofence which type is \"polygon\". required sub-user rights : zone_update .","title":"update"},{"location":"backend-api/resources/tracking/zone/#upload","text":"Import geofences from KML file. required sub-user rights : zone_update . MUST be a POST multipart request (multipart/form-data), with one of the parts being a KML file upload (with the name \"file\").","title":"upload"},{"location":"backend-api/resources/tracking/zone/zone_point/","text":"Geofence point \u00b6 All actions to retrieve and manipulate points of the geofence. Note that circle geofence type can't have points. Point object structure \u00b6 { \"lat\" : 11.0 , \"lng\" : 22.0 , \"node\" : true } lat - float. Point latitude. lng - float. Point latitude. node - boolean. Will be true if this point is a route node. API actions \u00b6 API base path: /zone/point . list \u00b6 Get points of user's geofence with zone_id . Parameters \u00b6 name description type format zone_id ID of a geofence. int 1234567 count Optional. If specified, the returned list will be simplified to contain this number of points. int 300 Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/zone/point/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone_id\": 1234567}' HTTP GET https://api.navixy.com/v2/zone/point/list?hash=a6aa75587e5c59c32d347da438505fc3&zone_id=1234567 Response \u00b6 { \"success\" : true , \"list\" : [{ \"lat\" : 11.0 , \"lng\" : 22.0 , \"node\" : true }] } list - array of objects. List of point objects. Errors \u00b6 201 - Not found in the database \u2013 if geofence with the specified ID cannot be found or belongs to another user. 230 - Not supported for this entity type \u2013 if geofence cannot have any points associated with it (e.g. if geofence is circle). update \u00b6 Update points for user's geofence with zone_id . required sub-user rights : zone_update . Parameters \u00b6 name description type zone_id ID of a geofence. int points Array of new points for this geofence. Must contain at least 3 elements. Maximum number of points depends on geofence type. array of JSON objects Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/zone/point/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"zone_id\": 1234567, \"points\": [{\"lat\": 11.0, \"lng\": 22.0, \"node\": true},{\"lat\": 11.2, \"lng\": 22.2, \"node\": true},{\"lat\": 11.4, \"lng\": 22.4, \"node\": true}]}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if geofence with the specified ID cannot be found or belongs to another user. 202 - Too many points in a geofence \u2013 if \"points\" array size exceeds limit for this geofence type. Max allowed points count for a geofence is 100 for a polygon or 1024 for sausage. 230 - Not supported for this entity type \u2013 if geofence cannot have any points associated with it (e.g. if geofence is circle).","title":"Zone Point"},{"location":"backend-api/resources/tracking/zone/zone_point/#geofence-point","text":"All actions to retrieve and manipulate points of the geofence. Note that circle geofence type can't have points.","title":"Geofence point"},{"location":"backend-api/resources/tracking/zone/zone_point/#point-object-structure","text":"{ \"lat\" : 11.0 , \"lng\" : 22.0 , \"node\" : true } lat - float. Point latitude. lng - float. Point latitude. node - boolean. Will be true if this point is a route node.","title":"Point object structure"},{"location":"backend-api/resources/tracking/zone/zone_point/#api-actions","text":"API base path: /zone/point .","title":"API actions"},{"location":"backend-api/resources/tracking/zone/zone_point/#list","text":"Get points of user's geofence with zone_id .","title":"list"},{"location":"backend-api/resources/tracking/zone/zone_point/#update","text":"Update points for user's geofence with zone_id . required sub-user rights : zone_update .","title":"update"},{"location":"backend-api/websocket/","text":"WebSocket API \u00b6 Information about WebSocket API and how to open connection. Introduction \u00b6 WebSocket is the alternate transport to getting data from the server. The process of notification about events occurs from the server to the client through a constantly open connection. This allows you to display changes in real time. Currently, the Atmosphere Framework used as an application layer library and protocol. Standard workflow \u00b6 Let's describe a standard workflow for WebSocket API: Determine API base URL . Get the hash of an API Key . Open WebSocket connection by the path /event/subscription/ with Atmosphere protocol parameters. Subscribe on events using subscribe action . Listen and process the incoming events . Get the current tracker states after subscribe on a state event. Subscribe and unsubscribe on the events if needed. Unsubscribe when leaving monitoring page using unsubscribe action . Note The subscription requests must contain the hash of an API Key . Responses and errors for subscribe and unsubscribe actions are similar with common API format. All WebSocket frames use a JSON format. Exceptions are heartbeat frames containing \"X\". Open connection \u00b6 In a simplified form, opening the WebSocket using atmosphere-javascript looks like this: var subSocket ; function sendSubsrcibeRequest () { console . log ( 'sending subsrcibe action to websocket' ); subSocket . push ( JSON . stringify ({ action : 'subscribe' , hash : 'e4c24xxx4a08e9xxxc337xxxx5ca04e1' , requests : [ { type : 'state_batch' , target : { type : 'all' } } ] })); } var request = { url : 'https://api.navixy.com/v2/event/subscription' , contentType : \"application/json\" , logLevel : 'debug' , transport : 'websocket' , trackMessageLength : false , reconnectInterval : 2000 , onOpen : function ( r ) { console . log ( 'onOpen' , r ); sendSubsrcibeRequest (); }, onReopen : function ( r ) { console . log ( 'onReopen' , r ); sendSubsrcibeRequest (); }, onMessage : function ( msg ) { console . log ( 'onMessage' , msg ); }, onClientTimeout : function ( r ) { console . log ( 'onClientTimeout' , r ); }, onTransportFailure : function ( errorMsg , request ) { console . log ( 'onTransportFailure' , errorMsg ); }, onClose : function ( r ) { console . log ( 'onClose' , r ); }, onError : function ( r ) { console . log ( 'onError' , r ); }, onReconnect : function ( request , response ) { console . log ( 'onReconnect' , response ); } }; subSocket = atmosphere . subscribe ( request ); Executing this code will lead to send a request wss://domain.com/event/subscription?X-Atmosphere-tracking-id=0&X-Atmosphere-Framework=2.3.6-javascript&X-Atmosphere-Transport=websocket&Content-Type=application/json&X-atmo-protocol=true and upgrade the connection to the WebSocket. After that, will be sent a first frame through the opened WebSocket channel: b623a15d-9623-4fd8-a9d3-697036635c29|30000|X| This is service message for the Atmosphere protocol negotiation. Now everything is ready to subscribe on events . Common fields \u00b6 All messages from client side contain field action with action name (e.g. \"subscribe\" or \"unsubscribe\"). All messages from server side contain field type with message type (\"event\", \"response\" or \"error\") and data with a payload.","title":"WebSocket API"},{"location":"backend-api/websocket/#websocket-api","text":"Information about WebSocket API and how to open connection.","title":"WebSocket API"},{"location":"backend-api/websocket/#introduction","text":"WebSocket is the alternate transport to getting data from the server. The process of notification about events occurs from the server to the client through a constantly open connection. This allows you to display changes in real time. Currently, the Atmosphere Framework used as an application layer library and protocol.","title":"Introduction"},{"location":"backend-api/websocket/#standard-workflow","text":"Let's describe a standard workflow for WebSocket API: Determine API base URL . Get the hash of an API Key . Open WebSocket connection by the path /event/subscription/ with Atmosphere protocol parameters. Subscribe on events using subscribe action . Listen and process the incoming events . Get the current tracker states after subscribe on a state event. Subscribe and unsubscribe on the events if needed. Unsubscribe when leaving monitoring page using unsubscribe action . Note The subscription requests must contain the hash of an API Key . Responses and errors for subscribe and unsubscribe actions are similar with common API format. All WebSocket frames use a JSON format. Exceptions are heartbeat frames containing \"X\".","title":"Standard workflow"},{"location":"backend-api/websocket/#open-connection","text":"In a simplified form, opening the WebSocket using atmosphere-javascript looks like this: var subSocket ; function sendSubsrcibeRequest () { console . log ( 'sending subsrcibe action to websocket' ); subSocket . push ( JSON . stringify ({ action : 'subscribe' , hash : 'e4c24xxx4a08e9xxxc337xxxx5ca04e1' , requests : [ { type : 'state_batch' , target : { type : 'all' } } ] })); } var request = { url : 'https://api.navixy.com/v2/event/subscription' , contentType : \"application/json\" , logLevel : 'debug' , transport : 'websocket' , trackMessageLength : false , reconnectInterval : 2000 , onOpen : function ( r ) { console . log ( 'onOpen' , r ); sendSubsrcibeRequest (); }, onReopen : function ( r ) { console . log ( 'onReopen' , r ); sendSubsrcibeRequest (); }, onMessage : function ( msg ) { console . log ( 'onMessage' , msg ); }, onClientTimeout : function ( r ) { console . log ( 'onClientTimeout' , r ); }, onTransportFailure : function ( errorMsg , request ) { console . log ( 'onTransportFailure' , errorMsg ); }, onClose : function ( r ) { console . log ( 'onClose' , r ); }, onError : function ( r ) { console . log ( 'onError' , r ); }, onReconnect : function ( request , response ) { console . log ( 'onReconnect' , response ); } }; subSocket = atmosphere . subscribe ( request ); Executing this code will lead to send a request wss://domain.com/event/subscription?X-Atmosphere-tracking-id=0&X-Atmosphere-Framework=2.3.6-javascript&X-Atmosphere-Transport=websocket&Content-Type=application/json&X-atmo-protocol=true and upgrade the connection to the WebSocket. After that, will be sent a first frame through the opened WebSocket channel: b623a15d-9623-4fd8-a9d3-697036635c29|30000|X| This is service message for the Atmosphere protocol negotiation. Now everything is ready to subscribe on events .","title":"Open connection"},{"location":"backend-api/websocket/#common-fields","text":"All messages from client side contain field action with action name (e.g. \"subscribe\" or \"unsubscribe\"). All messages from server side contain field type with message type (\"event\", \"response\" or \"error\") and data with a payload.","title":"Common fields"},{"location":"backend-api/websocket/events/","text":"WebSocket Events \u00b6 The server sends an event message through the WebSocket channel when an event occurs and client has subscription on this. All event messages contain the next fields: type - enum . \"event\". event - enum . Can be \"state\", \"state_batch\", \"lifecycle\", or \"logout\". data - optional object. Specific event payload. State event \u00b6 Can be used for 100 devices. If there are more devices, please use state batch event These messages are coming from server if client subscribed to the state events of the specific tracker that not blocked. It occurs in the next cases: Tracker state changed. Immediately after subscription. Immediately after unblocking. Message fields: type - \"event\". event - \"state\". data - depends on format request parameter: \"full\" - source state . \"compact\" - compact source state . user_time - current time in user's timezone. Message sample: { \"type\" : \"event\" , \"event\" : \"state\" , \"user_time\" : \"2018-10-17 12:51:55\" , \"data\" : { \"source_id\" : 10284 , \"gps\" : { \"updated\" : \"2018-10-17 12:51:43\" , \"signal_level\" : 100 , \"location\" : { \"lat\" : 14.330065796228606 , \"lng\" : -90.99037259141691 }, \"heading\" : 248 , \"speed\" : 0 , \"alt\" : 431 }, \"connection_status\" : \"active\" , \"movement_status\" : \"parked\" , \"gsm\" : null , \"last_update\" : \"2018-10-17 12:51:46\" , \"battery_level\" : null , \"battery_update\" : null , \"inputs\" : [ false , false , false , false , false , false , false , false ], \"inputs_update\" : \"2018-10-17 12:51:43\" , \"outputs\" : [ false , false , false , false , false , false , false , false ], \"outputs_update\" : \"2018-10-17 12:51:43\" , \"actual_track_update\" : \"2018-10-04 22:47:07\" } } source_id is not a tracker_id . State batch event \u00b6 These messages are coming from server if client subscribed to the state_batch events of the specific tracker that not blocked. It occurs in the next cases: Immediately after subscription. rate_limit period passed. Message fields: type - \"event\". event - \"state\". data - depends on format request parameter: \"full\" - source state array. \"compact\" - compact source state array. user_time - current time in user's timezone. Message sample: { \"type\" : \"event\" , \"event\" : \"state_batch\" , \"user_time\" : \"2018-10-17 12:51:55\" , \"data\" : [ { \"source_id\" : 10284 , \"gps\" : { \"updated\" : \"2018-10-17 12:51:43\" , \"signal_level\" : 100 , \"location\" : { \"lat\" : 14.330065796228606 , \"lng\" : -90.99037259141691 }, \"heading\" : 248 , \"speed\" : 0 , \"alt\" : 431 }, \"connection_status\" : \"active\" , \"movement_status\" : \"parked\" , \"gsm\" : null , \"last_update\" : \"2018-10-17 12:51:46\" , \"battery_level\" : null , \"battery_update\" : null , \"inputs\" : [ false , false , false , false , false , false , false , false ], \"inputs_update\" : \"2018-10-17 12:51:43\" , \"outputs\" : [ false , false , false , false , false , false , false , false ], \"outputs_update\" : \"2018-10-17 12:51:43\" , \"actual_track_update\" : \"2018-10-04 22:47:07\" } ] } source_id is not a tracker_id . Compact source state \u00b6 Sample: { \"source_id\" : 10284 , \"gps\" : { \"updated\" : \"2018-10-17 12:51:43\" , \"signal_level\" : 100 , \"location\" : { \"lat\" : 14.330065796228606 , \"lng\" : -90.99037259141691 }, \"heading\" : 248 , \"speed\" : 0 , \"alt\" : 431 }, \"connection_status\" : \"active\" , \"movement_status\" : \"parked\" , \"last_update\" : \"2018-10-17 12:51:46\" } Lifecycle event \u00b6 These messages are coming from the server if client subscribed to the state events of the specific tracker. It occurs in the next cases: Tracker blocked. Tracker unblocked. Tracker corrupted (removed). Message fields: type - \"event\". event - \"lifecycle\". data - required object. source_id - source ID. lifecycle_event - lifecycle event type. Can be \"block\", \"unblock\", or \"corrupt\". Message sample: { \"type\" : \"event\" , \"event\" : \"lifecycle\" , \"data\" : { \"source_id\" : 123456 , \"lifecycle_event\" : \"block\" } } Logout event \u00b6 These messages are coming from server if client subscribed to any event. It occurs in the next cases: User logged out. User session expired (did not renew during one month). Sub-user is blocked by master-user. User has restored his password. User has changed his password. User blocked from admin panel. User was corrupted (removed). Message fields: type - \"event\". event - \"logout\". data - \"session closed\". Message sample: { \"type\" : \"event\" , \"event\" : \"logout\" , \"data\" : \"session closed\" }","title":"WebSocket Events"},{"location":"backend-api/websocket/events/#websocket-events","text":"The server sends an event message through the WebSocket channel when an event occurs and client has subscription on this. All event messages contain the next fields: type - enum . \"event\". event - enum . Can be \"state\", \"state_batch\", \"lifecycle\", or \"logout\". data - optional object. Specific event payload.","title":"WebSocket Events"},{"location":"backend-api/websocket/events/#state-event","text":"Can be used for 100 devices. If there are more devices, please use state batch event These messages are coming from server if client subscribed to the state events of the specific tracker that not blocked. It occurs in the next cases: Tracker state changed. Immediately after subscription. Immediately after unblocking. Message fields: type - \"event\". event - \"state\". data - depends on format request parameter: \"full\" - source state . \"compact\" - compact source state . user_time - current time in user's timezone. Message sample: { \"type\" : \"event\" , \"event\" : \"state\" , \"user_time\" : \"2018-10-17 12:51:55\" , \"data\" : { \"source_id\" : 10284 , \"gps\" : { \"updated\" : \"2018-10-17 12:51:43\" , \"signal_level\" : 100 , \"location\" : { \"lat\" : 14.330065796228606 , \"lng\" : -90.99037259141691 }, \"heading\" : 248 , \"speed\" : 0 , \"alt\" : 431 }, \"connection_status\" : \"active\" , \"movement_status\" : \"parked\" , \"gsm\" : null , \"last_update\" : \"2018-10-17 12:51:46\" , \"battery_level\" : null , \"battery_update\" : null , \"inputs\" : [ false , false , false , false , false , false , false , false ], \"inputs_update\" : \"2018-10-17 12:51:43\" , \"outputs\" : [ false , false , false , false , false , false , false , false ], \"outputs_update\" : \"2018-10-17 12:51:43\" , \"actual_track_update\" : \"2018-10-04 22:47:07\" } } source_id is not a tracker_id .","title":"State event"},{"location":"backend-api/websocket/events/#state-batch-event","text":"These messages are coming from server if client subscribed to the state_batch events of the specific tracker that not blocked. It occurs in the next cases: Immediately after subscription. rate_limit period passed. Message fields: type - \"event\". event - \"state\". data - depends on format request parameter: \"full\" - source state array. \"compact\" - compact source state array. user_time - current time in user's timezone. Message sample: { \"type\" : \"event\" , \"event\" : \"state_batch\" , \"user_time\" : \"2018-10-17 12:51:55\" , \"data\" : [ { \"source_id\" : 10284 , \"gps\" : { \"updated\" : \"2018-10-17 12:51:43\" , \"signal_level\" : 100 , \"location\" : { \"lat\" : 14.330065796228606 , \"lng\" : -90.99037259141691 }, \"heading\" : 248 , \"speed\" : 0 , \"alt\" : 431 }, \"connection_status\" : \"active\" , \"movement_status\" : \"parked\" , \"gsm\" : null , \"last_update\" : \"2018-10-17 12:51:46\" , \"battery_level\" : null , \"battery_update\" : null , \"inputs\" : [ false , false , false , false , false , false , false , false ], \"inputs_update\" : \"2018-10-17 12:51:43\" , \"outputs\" : [ false , false , false , false , false , false , false , false ], \"outputs_update\" : \"2018-10-17 12:51:43\" , \"actual_track_update\" : \"2018-10-04 22:47:07\" } ] } source_id is not a tracker_id .","title":"State batch event"},{"location":"backend-api/websocket/events/#compact-source-state","text":"Sample: { \"source_id\" : 10284 , \"gps\" : { \"updated\" : \"2018-10-17 12:51:43\" , \"signal_level\" : 100 , \"location\" : { \"lat\" : 14.330065796228606 , \"lng\" : -90.99037259141691 }, \"heading\" : 248 , \"speed\" : 0 , \"alt\" : 431 }, \"connection_status\" : \"active\" , \"movement_status\" : \"parked\" , \"last_update\" : \"2018-10-17 12:51:46\" }","title":"Compact source state"},{"location":"backend-api/websocket/events/#lifecycle-event","text":"These messages are coming from the server if client subscribed to the state events of the specific tracker. It occurs in the next cases: Tracker blocked. Tracker unblocked. Tracker corrupted (removed). Message fields: type - \"event\". event - \"lifecycle\". data - required object. source_id - source ID. lifecycle_event - lifecycle event type. Can be \"block\", \"unblock\", or \"corrupt\". Message sample: { \"type\" : \"event\" , \"event\" : \"lifecycle\" , \"data\" : { \"source_id\" : 123456 , \"lifecycle_event\" : \"block\" } }","title":"Lifecycle event"},{"location":"backend-api/websocket/events/#logout-event","text":"These messages are coming from server if client subscribed to any event. It occurs in the next cases: User logged out. User session expired (did not renew during one month). Sub-user is blocked by master-user. User has restored his password. User has changed his password. User blocked from admin panel. User was corrupted (removed). Message fields: type - \"event\". event - \"logout\". data - \"session closed\". Message sample: { \"type\" : \"event\" , \"event\" : \"logout\" , \"data\" : \"session closed\" }","title":"Logout event"},{"location":"backend-api/websocket/subscription/","text":"WebSocket Subscription \u00b6 The subscribe and unsubscribe actions used by the client's side to subscribe on server events and unsubscribe from them. These actions are similar with any other API REST actions but must be sent inside open WebSocket channel and use only JSON format for messages between the client and server. Subscribe Action \u00b6 The main difference between state and state_batch events is they can provide different amount of data every second. Use 'state' event for smaller fleets since it supports sending data up to 350 entries per second. For big or growing fleets better to use state_batch event since it supports sending data for up to 12000 entries per second. Request \u00b6 Request parameters: action (text: \"subscribe\"). hash - required, string, length=32. Session hash code obtained by user/auth action. requests - required, object array. See requests' structure below. Deprecated Parameters below are deprecated by requests and should not be used. trackers - required, int array, without nulls. List of tracker IDs for the events that require a subscription. events - required, enum array, without nulls. List of events to subscribe. Event can be one of: state . Subscribe state_batch event sample: \u00b6 { \"action\" : \"subscribe\" , \"hash\" : \"f4bf1b754034213653dad99c78c4b237\" , \"requests\" : [ { \"type\" : \"state_batch\" , \"target\" : { \"type\" : \"all\" }, \"rate_limit\" : \"5s\" , \"format\" : \"compact\" } ] } If you use target 'trackers' for some devices and then subscribe again to other devices - in state_batch event you will receive data from all subscribed devices at once. Subscribe state event sample \u00b6 { \"action\" : \"subscribe\" , \"hash\" : \"4ce2b45d12a6c634154017511575369a\" , \"requests\" : [ { \"type\" : \"state\" , \"trackers\" : [ 1701976 , 1701975 ], \"rate_limit\" : \"5s\" , \"format\" : \"compact\" }] } Sub requests: \u00b6 Batching (preferred): type - required, text: \"state_batch\" . target - required, object. One of targets below. rate_limit - optional, string. A timespan for batching. format - optional, enum , one of: \"full\" (default), \"compact\". Simple: type - required, text: \"state\" . trackers - required, int array. List of tracker ids. format - optional, enum , one of: \"full\" (default), \"compact\". Sample: { \"type\" : \"state_batch\" , \"target\" : { \"type\" : \"selected\" , \"tracker_ids\" : [ 15564 , 15565 , 15568 ] }, \"rate_limit\" : \"5s\" , \"format\" : \"full\" } Request targets: \u00b6 All trackers: type - required, text: \"all\" . Selected trackers: type - required, text: \"selected\" . tracker_ids - required, int array. Sample: { \"type\" : \"all\" } Response \u00b6 Response parameters: type - required, text: \"response\" . action - required, text: \"subscription/subscribe\" . events - required, array of enum , without nulls. List of the subscribed events. Event can be state . data - required, map . Map with events subscription result. One key per subscribed event. state - present if the \"state\" subscription requested, see sub response below. state_batch - present if the \"state_batch\" subscription requested, see sub response below. Sub response: * success - required, boolean. * value - required, map , present if success. The current status of requested trackers. Keys is a tracker IDs, values - one of the item: normal - non-blocked, normal status. State events for this tracker will be delivered to client. blocked - tracker blocked. State events for this tracker will not be delivered to client. Lifecycle events will be delivered. After unblocking, current tracker state will be sent automatically. unknown - tracker ID missed in the database or not belong to current user. disallowed - subscription for this tracker not allowed by the current session. Response sample: { \"type\" : \"response\" , \"action\" : \"subscription/subscribe\" , \"events\" : [ \"state\" ], \"data\" : { \"state\" : { \"value\" : { \"15564\" : \"normal\" , \"15565\" : \"blocked\" , \"15568\" : \"unknown\" }, \"success\" : true } } } The \"state\" event subscription \u00b6 After subscribe on the \"state\", server will send the current states of all non-blocked trackers to which the subscription made in a separate packets. Receiver must be able to read information from these packets separately. When changing the state of any tracker to which a subscription made, the server will send a new state in the event message . The \"state_batch\" event subscription \u00b6 After subscribe on the \"state\", server will send the current states of all non-blocked trackers to which the subscription made in one packet. Receiver must be able to parse data from different devices in this packet. After each period equal to rate_limit , the server will send a list of changed tracker states in the event message . Automatic subscriptions \u00b6 Subscribing to a state or state_batch automatically creates a subscription to lifecycle events . Subscribing to any event automatically creates a subscription to logout events . Unsubscribe Action \u00b6 For structure see Subscribe Action . Error Response \u00b6 If something goes wrong, the server may respond with an error. Error codes are similar to the API errors codes . Error response parameters: type - required, text: \"error\" . action - required, string - action from request (e.g. \"subscription/subscribe\") or \"null\" for some unexpected errors. status - required - error code and description: code - required - error code (see API errors codes ). description - required, string - error description. data - optional string - part of parameters from request or some info for unexpected errors. Error response sample: { \"type\" : \"error\" , \"action\" : \"subscription/subscribe\" , \"status\" : { \"code\" : 3 , \"description\" : \"Wrong hash\" }, \"data\" : { \"events\" : [ \"state\" ], \"trackers\" : [ 15564 ] } }","title":"WebSocket Subscription"},{"location":"backend-api/websocket/subscription/#websocket-subscription","text":"The subscribe and unsubscribe actions used by the client's side to subscribe on server events and unsubscribe from them. These actions are similar with any other API REST actions but must be sent inside open WebSocket channel and use only JSON format for messages between the client and server.","title":"WebSocket Subscription"},{"location":"backend-api/websocket/subscription/#subscribe-action","text":"The main difference between state and state_batch events is they can provide different amount of data every second. Use 'state' event for smaller fleets since it supports sending data up to 350 entries per second. For big or growing fleets better to use state_batch event since it supports sending data for up to 12000 entries per second.","title":"Subscribe Action"},{"location":"backend-api/websocket/subscription/#request","text":"Request parameters: action (text: \"subscribe\"). hash - required, string, length=32. Session hash code obtained by user/auth action. requests - required, object array. See requests' structure below. Deprecated Parameters below are deprecated by requests and should not be used. trackers - required, int array, without nulls. List of tracker IDs for the events that require a subscription. events - required, enum array, without nulls. List of events to subscribe. Event can be one of: state .","title":"Request"},{"location":"backend-api/websocket/subscription/#response","text":"Response parameters: type - required, text: \"response\" . action - required, text: \"subscription/subscribe\" . events - required, array of enum , without nulls. List of the subscribed events. Event can be state . data - required, map . Map with events subscription result. One key per subscribed event. state - present if the \"state\" subscription requested, see sub response below. state_batch - present if the \"state_batch\" subscription requested, see sub response below. Sub response: * success - required, boolean. * value - required, map , present if success. The current status of requested trackers. Keys is a tracker IDs, values - one of the item: normal - non-blocked, normal status. State events for this tracker will be delivered to client. blocked - tracker blocked. State events for this tracker will not be delivered to client. Lifecycle events will be delivered. After unblocking, current tracker state will be sent automatically. unknown - tracker ID missed in the database or not belong to current user. disallowed - subscription for this tracker not allowed by the current session. Response sample: { \"type\" : \"response\" , \"action\" : \"subscription/subscribe\" , \"events\" : [ \"state\" ], \"data\" : { \"state\" : { \"value\" : { \"15564\" : \"normal\" , \"15565\" : \"blocked\" , \"15568\" : \"unknown\" }, \"success\" : true } } }","title":"Response"},{"location":"backend-api/websocket/subscription/#the-state-event-subscription","text":"After subscribe on the \"state\", server will send the current states of all non-blocked trackers to which the subscription made in a separate packets. Receiver must be able to read information from these packets separately. When changing the state of any tracker to which a subscription made, the server will send a new state in the event message .","title":"The \"state\" event subscription"},{"location":"backend-api/websocket/subscription/#the-state_batch-event-subscription","text":"After subscribe on the \"state\", server will send the current states of all non-blocked trackers to which the subscription made in one packet. Receiver must be able to parse data from different devices in this packet. After each period equal to rate_limit , the server will send a list of changed tracker states in the event message .","title":"The \"state_batch\" event subscription"},{"location":"backend-api/websocket/subscription/#automatic-subscriptions","text":"Subscribing to a state or state_batch automatically creates a subscription to lifecycle events . Subscribing to any event automatically creates a subscription to logout events .","title":"Automatic subscriptions"},{"location":"backend-api/websocket/subscription/#unsubscribe-action","text":"For structure see Subscribe Action .","title":"Unsubscribe Action"},{"location":"backend-api/websocket/subscription/#error-response","text":"If something goes wrong, the server may respond with an error. Error codes are similar to the API errors codes . Error response parameters: type - required, text: \"error\" . action - required, string - action from request (e.g. \"subscription/subscribe\") or \"null\" for some unexpected errors. status - required - error code and description: code - required - error code (see API errors codes ). description - required, string - error description. data - optional string - part of parameters from request or some info for unexpected errors. Error response sample: { \"type\" : \"error\" , \"action\" : \"subscription/subscribe\" , \"status\" : { \"code\" : 3 , \"description\" : \"Wrong hash\" }, \"data\" : { \"events\" : [ \"state\" ], \"trackers\" : [ 15564 ] } }","title":"Error Response"},{"location":"data-warehouse-api/getting-started/","text":"Navixy Data Warehouse API \u00b6 Navixy Data Warehouse (DWH) API is a powerful tool designed for developers and data engineers who need access to comprehensive, raw data from GPS and telematics devices. This API allows you to extract unprocessed data with high granularity, enabling detailed analysis and customized solutions. With the Navixy DWH API, you can seamlessly integrate with our platform, retrieve essential data, and leverage it for various applications, including analytics, reporting, and data science. Overview \u00b6 The structure of the Data Warehouse API is mostly similar to the Backend API . If you're familiar with the basics of the user API, you will find this API intuitive and easy to work with. The DWH API provides robust methods to access raw, unprocessed data, ensuring you can harness the full potential of your connected devices. Time Frame Limits \u00b6 The Data Warehouse (DW) API allows you to request raw data for periods ranging from one to several months, depending on your plan restrictions. The maximum time frame for data retrieval is determined by your subscription plan, with a common limit for lower tiers being 30 days from the current date. Data stored beyond this period cannot be requested through the DW API. Base URL \u00b6 Data Warehouse API resides in the dwh subsection of the API URL and does not belong to backend APIv2. You need to determine the URL to API calls like this: * https://api.eu.navixy.com/dwh/v1 for the European Navixy ServerMate platform. * https://api.us.navixy.com/dwh/v1 for the American Navixy ServerMate platform. For example, to make raw data readings API request in the European Navixy ServerMate, you need to use this URL: https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read Authentication and Authorization \u00b6 Authentication \u00b6 Authentication is handled by the Backend API . Authorization \u00b6 Requests to the Data Warehouse API are made using a user session hash or API key. It can be passed as the Authorization HTTP header with the NVX auth scheme or within a -d (data) command. Example: with Authorization header curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/get_inputs' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -H 'Authorization: NVX 8a41497ed8e77fa68b9c4a9420971fdb' \\ -d '{\"tracker_id\": 123456' } ' with hash curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/get_inputs' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"6dc7d304dec4434f4c4202ec42817f83\",\"tracker_id\": 123456}' Response Format \u00b6 Depending on the API request, responses can be in application/json or text/csv content types. Errors \u00b6 Errors are distinguished by HTTP status codes (>= 400) and follow RFC 7807 . Example: { \"type\" : \"errors/default/bad-request\" , \"title\" : \"Bad Request\" , \"status\" : 400 , \"detail\" : \"id: must be greater than or equal to 1\" } Common Error Types \u00b6 errors/default/bad-request - Causes: missing or invalid parameter value. errors/default/unauthorized - Causes: missing Authorization header or credentials are insufficient or expired. Date/Time Formats \u00b6 The API uses date/time formats according to ISO 8601 . For detailed information on date/time formats and examples, refer to Raw Data Request - Date and Time . Examples \u00b6 Example of Getting Inputs \u00b6 This example shows how to use the get_inputs method to retrieve available metering inputs and state fields of a device. curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/get_inputs' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": 123456 }' Example of Reading Raw Data \u00b6 This example shows how to use the read method to fetch parsed raw data values received from tracking devices and decoded by the platform. curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": \"123456\", \"from\": \"2023-11-30T07:13:00.000Z\", \"to\": \"2023-11-30T07:15:00.000Z\", \"columns\": [ \"lat\", \"lng\", \"speed\", \"inputs.ble_lls_level_1\", \"inputs.hw_mileage\", \"discrete_inputs.*\" ] }' By leveraging the Navixy Data Warehouse API, developers and data engineers can access and analyze detailed raw data from their GPS and telematics devices, enabling a wide range of custom solutions and insights.","title":"Getting Started"},{"location":"data-warehouse-api/getting-started/#navixy-data-warehouse-api","text":"Navixy Data Warehouse (DWH) API is a powerful tool designed for developers and data engineers who need access to comprehensive, raw data from GPS and telematics devices. This API allows you to extract unprocessed data with high granularity, enabling detailed analysis and customized solutions. With the Navixy DWH API, you can seamlessly integrate with our platform, retrieve essential data, and leverage it for various applications, including analytics, reporting, and data science.","title":"Navixy Data Warehouse API"},{"location":"data-warehouse-api/getting-started/#overview","text":"The structure of the Data Warehouse API is mostly similar to the Backend API . If you're familiar with the basics of the user API, you will find this API intuitive and easy to work with. The DWH API provides robust methods to access raw, unprocessed data, ensuring you can harness the full potential of your connected devices.","title":"Overview"},{"location":"data-warehouse-api/getting-started/#time-frame-limits","text":"The Data Warehouse (DW) API allows you to request raw data for periods ranging from one to several months, depending on your plan restrictions. The maximum time frame for data retrieval is determined by your subscription plan, with a common limit for lower tiers being 30 days from the current date. Data stored beyond this period cannot be requested through the DW API.","title":"Time Frame Limits"},{"location":"data-warehouse-api/getting-started/#base-url","text":"Data Warehouse API resides in the dwh subsection of the API URL and does not belong to backend APIv2. You need to determine the URL to API calls like this: * https://api.eu.navixy.com/dwh/v1 for the European Navixy ServerMate platform. * https://api.us.navixy.com/dwh/v1 for the American Navixy ServerMate platform. For example, to make raw data readings API request in the European Navixy ServerMate, you need to use this URL: https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read","title":"Base URL"},{"location":"data-warehouse-api/getting-started/#authentication-and-authorization","text":"","title":"Authentication and Authorization"},{"location":"data-warehouse-api/getting-started/#authentication","text":"Authentication is handled by the Backend API .","title":"Authentication"},{"location":"data-warehouse-api/getting-started/#authorization","text":"Requests to the Data Warehouse API are made using a user session hash or API key. It can be passed as the Authorization HTTP header with the NVX auth scheme or within a -d (data) command. Example: with Authorization header curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/get_inputs' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -H 'Authorization: NVX 8a41497ed8e77fa68b9c4a9420971fdb' \\ -d '{\"tracker_id\": 123456' } ' with hash curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/get_inputs' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"6dc7d304dec4434f4c4202ec42817f83\",\"tracker_id\": 123456}'","title":"Authorization"},{"location":"data-warehouse-api/getting-started/#response-format","text":"Depending on the API request, responses can be in application/json or text/csv content types.","title":"Response Format"},{"location":"data-warehouse-api/getting-started/#errors","text":"Errors are distinguished by HTTP status codes (>= 400) and follow RFC 7807 . Example: { \"type\" : \"errors/default/bad-request\" , \"title\" : \"Bad Request\" , \"status\" : 400 , \"detail\" : \"id: must be greater than or equal to 1\" }","title":"Errors"},{"location":"data-warehouse-api/getting-started/#datetime-formats","text":"The API uses date/time formats according to ISO 8601 . For detailed information on date/time formats and examples, refer to Raw Data Request - Date and Time .","title":"Date/Time Formats"},{"location":"data-warehouse-api/getting-started/#examples","text":"","title":"Examples"},{"location":"data-warehouse-api/getting-started/#example-of-getting-inputs","text":"This example shows how to use the get_inputs method to retrieve available metering inputs and state fields of a device. curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/get_inputs' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": 123456 }'","title":"Example of Getting Inputs"},{"location":"data-warehouse-api/getting-started/#example-of-reading-raw-data","text":"This example shows how to use the read method to fetch parsed raw data values received from tracking devices and decoded by the platform. curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": \"123456\", \"from\": \"2023-11-30T07:13:00.000Z\", \"to\": \"2023-11-30T07:15:00.000Z\", \"columns\": [ \"lat\", \"lng\", \"speed\", \"inputs.ble_lls_level_1\", \"inputs.hw_mileage\", \"discrete_inputs.*\" ] }' By leveraging the Navixy Data Warehouse API, developers and data engineers can access and analyze detailed raw data from their GPS and telematics devices, enabling a wide range of custom solutions and insights.","title":"Example of Reading Raw Data"},{"location":"data-warehouse-api/guides/raw-data/","text":"Requesting Raw Data \u00b6 Navixy Data Warehouse API allows telematics solution providers and developers of location-based solutions to access comprehensive, unprocessed data from tracking devices. This enables accurate information retrieval and a deeper understanding of collected data, facilitating issue resolution and integration into other systems for extensive analysis and business use. Typical Use Case \u00b6 For efficient fuel management, especially in fleet management or cargo transportation, integrating your ERP system with the Navixy platform is essential. This integration allows you to seamlessly request raw fuel data from specific devices, enhancing your fuel monitoring and expense tracking capabilities. Imagine that you need to retrieve the following data: Fuel Level Device Location Mileage (Odometer) Speed Date and Time Any other data valuable to your business Please note that you will not receive human-readable information about fuel drains and refills, excessive consumption, idling, and other analytics\u2014those are available through backend-API methods . Raw data requests provide unprocessed data received directly from the device, decoded by the Navixy platform, offering instantaneous data readings for a specific period. This data is suitable for further processing and analysis on your end. Requesting Inputs List \u00b6 Tracking devices from different manufacturers have different specifics of work and send data in various forms. In addition, sensors can be of different types: digital and analog, wired and wireless, built-in and external. Also, there can be several sensors monitoring the same type of readings: for example, two fuel sensors in two tanks, internal and external temperature sensors, etc. Before requesting raw data, we need to understand what data the device can report to the platform and what the data inputs are named. To do this, we need to use the raw_data/get_inputs request. Example for a device with ID 123456: cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/get_inputs' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": 123456 }' The platform will notify us about success, and we will see the following JSON object in response: { \"discrete_inputs\" : 2 , \"discrete_outputs\" : 1 , \"inputs\" : [ \"analog_1\" , \"battery_voltage\" , \"board_voltage\" , \"ext_temp_sensor_4\" , \"freq_1\" , \"hw_mileage\" , \"impulse_counter_1\" , \"lls_level_4\" , \"lls_temperature_4\" ], \"states\" : [ \"hardware_key\" ], \"success\" : true } Among the obtained inputs, we see the one of interest to us - lls_level_4 . This is a fuel level input, and the index 4 indicates the value is a range of LLS levels from 1 to 4 . This means the device can send fuel data on a maximum of four inputs: from lls_level_1 to lls_level_4 . We also see the hw_mileage , which will allow us to get the value of the hardware odometer. The presence of some inputs in the received response does not mean that data is certainly available on these inputs. It means that data may come on them, but whether it is actually available or not depends on the configuration of a particular device. Requesting Raw Data Readings \u00b6 Now we know the names of the inputs where the fuel data comes from, and we can use them in the API query. However, we also need other parameters for more accurate analysis. This data is not related to sensors, so the above query does not return it. They come in simple columns and are listed on the appropriate documentation page. We will use the following columns: lat lng speed In addition, we will use names for inputs according to the information obtained earlier: inputs.lls_level_1 inputs.hw_mileage We specify inputs.lls_level_1 because we know that our device only sends data on this input. If we didn't know the input number, we could have specified all four possible inputs, and then the inputs without data would just get zero values. The API request raw_data/read for reading the required raw data in our case should look like this: cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": \"123456\", \"from\": \"2023-11-29T08:31:00Z\", \"to\": \"2023-11-29T08:32:00Z\", \"columns\": [ \"lat\", \"lng\", \"speed\", \"inputs.lls_level_1\", \"inputs.hw_mileage\" ] }' The response is returned in a CSV table format: \"msg_time\",\"lat\",\"lng\",\"speed\",\"inputs.lls_level_1\",\"inputs.hw_mileage\" \"2023-11-29T08:31:10Z\",54.2312716,69.5261833,0,3307,24250.798 \"2023-11-29T08:31:12Z\",54.1811183,69.5331349,24,3274,24257.16 \"2023-11-29T08:31:27Z\",54.1802066,69.5333599,21,\\N,\\N \"2023-11-29T08:31:27Z\",54.1802066,69.5333599,21,3274,24257.262 \"2023-11-29T08:31:30Z\",54.180055,69.533395,20,3274,24257.279 \"2023-11-29T08:31:31Z\",54.180005,69.5334083,20,3274,24257.285 \"2023-11-29T08:31:33Z\",54.179915,69.5334266,17,3274,24257.295 \"2023-11-29T08:31:34Z\",54.1798766,69.533435,15,3274,24257.299 \"2023-11-29T08:31:36Z\",54.1798116,69.5334433,12,3274,24257.306 \"2023-11-29T08:31:37Z\",54.179785,69.5334416,10,3274,24257.309 \"2023-11-29T08:31:39Z\",54.1797366,69.533425,9,3274,24257.315 \"2023-11-29T08:31:40Z\",54.1797183,69.5334083,8,3274,24257.315 \"2023-11-29T08:31:42Z\",54.1796883,69.5333449,10,3274,24257.322 \"2023-11-29T08:31:43Z\",54.17968,69.5333016,12,3274,24257.325 \"2023-11-29T08:31:45Z\",54.1796816,69.53318,15,3274,24257.333 \"2023-11-29T08:31:47Z\",54.1796816,69.533025,20,3274,24257.343 In the above example, we see the output for one minute of tracking. When querying raw data over a long period of time, the response can reach significant sizes \u2014 this must be considered. In one of the lines, we see \\N instead of fuel level and mileage values. This means that no such information was received in this data packet. The \\N symbol represents NULL . The above example is one of the simplest, but it clearly demonstrates the process of using an API request to read raw data. You can query a lot of data at once and over large periods of time, depending on your objectives. Specifying Time Frame \u00b6 When requesting raw data, you must specify the exact period for which you need the data to ensure the platform can accurately process your request and return the necessary information. Similar to the Backend API , you can specify the date and time in either the standard YYYY-MM-DD HH:mm:ss format with or without a time zone or in ISO 8601 format. The default format for Data Warehouse API requests is ISO 8601. The platform allows you to request raw data for any period within the time frame limits . All methods for specifying the date and time provided below are equally valid. Choose the one that is most convenient or best matches the format used in your integrations. ISO 8601 \u00b6 ISO 8601 is an international standard for representing date and time-related data in an unambiguous form that is both human- and machine-readable. However, some programs, including Microsoft Excel, may not be able to read such timestamps, so its use is optional. Using this date/time standard when requesting raw data, you can specify the exact time for which you need the data, as well as the time zone - not only as in the user account or UTC+0, but any other time zone of your choice, if required. According to ISO 8601, the date and time are represented starting with the year, followed by month, day, hour, minutes, seconds, milliseconds, and time zone offset. Date and time format: [yyyy]-[mm]-[dd]T[hh]:[mm]:[ss]\u00b1[offset] Time zone offset can be specified using any of the following formats: +-HH:mm - for example, -06:00 or +05:30. +-HHmm - for example, -0500 or +0100. +-HH - for example, -03 or +07. Z - no offset (UTC+0). Timestamp examples: Let's assume that the client account is set to UTC+4 (Dubai) time, and the time we need is 10:20 AM, the date is December 2, 2023. Then we can specify the timestamp in one of the following ways: 2023-12-02T10:20:00+04:00 2023-12-02T10:20:00+04 2023-12-02T06:20:00Z (converted to UTC+0) Another example. The client account is set to UTC-6 (Mexico) time, and the time we need is 10:55 PM, the date is December 11, 2023. Then we can specify the timestamp in one of the following ways: 2023-12-11T23:55:00-06:00 2023-12-11T23:55:00-06 2023-12-12T04:55:00Z (converted to UTC+0, mind the date) API request example: cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": \"10033823\", \"from\": \"2023-12-12T09:00:00Z\", \"to\": \"2023-12-12T09:25:00Z\", \"columns\": [\"lat\",\"lng\",\"discrete_inputs.1\",\"inputs.board_voltage\"] }' The output for a raw data request will always contain a msg_time column that contains timestamps according to the user account time zone. If you need to obtain msg_time in any other time zone, please refer to the Time zone section below. Regular Date and Time \u00b6 Another valid option to specify date and time is the usual YYYY-MM-DD HH:mm:ss format. Since this is not the default format, you need to specify the parameter iso_datetime=false in the API request. API request example: cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"iso_datetime\": false, \"tracker_id\": \"10033823\", \"from\": \"2023-12-12 14:00:00\", \"to\": \"2023-12-12 14:25:00\", \"columns\": [\"lat\",\"lng\",\"discrete_inputs.1\",\"inputs.board_voltage\"] }' In this case, the retrieved data will be in the time zone of the user account. Time Zone \u00b6 There may be situations when you need to obtain data in a specific time zone different from the user account. This can be useful when the customer's time zone differs from yours due to geographical reasons. In this case, you need to supplement your request with the time_zone parameter and specify the required zone ID. You can request all the possible zone IDs using the timezone/list request from the Backend API. API request example: cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"iso_datetime\": false, \"time_zone\": \"Europe/London\", \"tracker_id\": \"10033823\", \"from\": \"2023-12-12 14:00:00\", \"to\": \"2023-12-12 14:25:00\", \"columns\": [\"lat\",\"lng\",\"discrete_inputs.1\",\"inputs.board_voltage\"] }' Time Period \u00b6 When requesting raw data, you have an option of specifying the request period in two ways: by specifying the date and time \"from\" and \"to\" or by specifying an interval. Both methods are equally valid, but you should use only one of your choice. From ... To \u00b6 A common way to indicate the period of data request is to specify two timestamps of start and end. This is done using the from and to parameters. The values are specified either according to ISO 8601 or in a regular YYYY-MM-DD HH:mm:ss form - as described above. Examples: \"from\" : \"2023-11-30T17:00:00-06:00\" , \"to\" : \"2023-11-30T18:00:00-06:00\" , or \"from\" : \"2023-11-30 17:00:00\" , \"to\" : \"2023-11-30 18:00:00\" , The to date and time must be after the from , otherwise the query will result in an Invalid parameters error. Interval \u00b6 An alternative method of indicating the request period is an interval. Here you specify the start or end date and time of the period appended by the duration of the period. When specifying the interval parameter, the from and to parameters must not be specified. These are mutually exclusive ways of specifying the data request period. The interval can be specified in different forms: Starting from a specific date and time. Ending with a specific date and time. Indicated by start and end timestamps, without a period. Possible interval parameter formats: [start date and time]/P[dd]T[hh]H[mm]M[ss]S or P[dd]T[hh]H[mm]M[ss]S/[end date and time] or [start date and time]/[end date and time] The date and time can be specified either according to ISO 8601 or in a regular form. PT in interval value stands for \u201cPeriod and Time\u201d and indicates the period after the specified timestamp. For example, PT1H30M15S means 1 hour 30 minutes 15 seconds. If you need to request data for several days, you can specify the number of days between P and T . For example, P2DT3H45M10S means 2 days 3 hours 45 minutes 10 seconds. Examples: \"interval\": \"2023-11-30T17:00:00-0600/PT1H30M10S\" - data will be requested from 17:00:00 to 18:30:10, November 30 (UTC-6). \"interval\": \"2023-11-30 17:00:00/P2DT2H45M10S\" - data will be requested from November 30, 17:00:00 to December 2, 19:45:10 (according to user account time zone). \"interval\": \"P2DT2H45M10S/2023-11-30 17:00:00\" - data will be requested from November 28, 14:14:50 to November 30, 17:00:00 (according to user account time zone).","title":"Requesting raw data"},{"location":"data-warehouse-api/guides/raw-data/#requesting-raw-data","text":"Navixy Data Warehouse API allows telematics solution providers and developers of location-based solutions to access comprehensive, unprocessed data from tracking devices. This enables accurate information retrieval and a deeper understanding of collected data, facilitating issue resolution and integration into other systems for extensive analysis and business use.","title":"Requesting Raw Data"},{"location":"data-warehouse-api/guides/raw-data/#typical-use-case","text":"For efficient fuel management, especially in fleet management or cargo transportation, integrating your ERP system with the Navixy platform is essential. This integration allows you to seamlessly request raw fuel data from specific devices, enhancing your fuel monitoring and expense tracking capabilities. Imagine that you need to retrieve the following data: Fuel Level Device Location Mileage (Odometer) Speed Date and Time Any other data valuable to your business Please note that you will not receive human-readable information about fuel drains and refills, excessive consumption, idling, and other analytics\u2014those are available through backend-API methods . Raw data requests provide unprocessed data received directly from the device, decoded by the Navixy platform, offering instantaneous data readings for a specific period. This data is suitable for further processing and analysis on your end.","title":"Typical Use Case"},{"location":"data-warehouse-api/guides/raw-data/#requesting-inputs-list","text":"Tracking devices from different manufacturers have different specifics of work and send data in various forms. In addition, sensors can be of different types: digital and analog, wired and wireless, built-in and external. Also, there can be several sensors monitoring the same type of readings: for example, two fuel sensors in two tanks, internal and external temperature sensors, etc. Before requesting raw data, we need to understand what data the device can report to the platform and what the data inputs are named. To do this, we need to use the raw_data/get_inputs request. Example for a device with ID 123456: cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/get_inputs' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": 123456 }' The platform will notify us about success, and we will see the following JSON object in response: { \"discrete_inputs\" : 2 , \"discrete_outputs\" : 1 , \"inputs\" : [ \"analog_1\" , \"battery_voltage\" , \"board_voltage\" , \"ext_temp_sensor_4\" , \"freq_1\" , \"hw_mileage\" , \"impulse_counter_1\" , \"lls_level_4\" , \"lls_temperature_4\" ], \"states\" : [ \"hardware_key\" ], \"success\" : true } Among the obtained inputs, we see the one of interest to us - lls_level_4 . This is a fuel level input, and the index 4 indicates the value is a range of LLS levels from 1 to 4 . This means the device can send fuel data on a maximum of four inputs: from lls_level_1 to lls_level_4 . We also see the hw_mileage , which will allow us to get the value of the hardware odometer. The presence of some inputs in the received response does not mean that data is certainly available on these inputs. It means that data may come on them, but whether it is actually available or not depends on the configuration of a particular device.","title":"Requesting Inputs List"},{"location":"data-warehouse-api/guides/raw-data/#requesting-raw-data-readings","text":"Now we know the names of the inputs where the fuel data comes from, and we can use them in the API query. However, we also need other parameters for more accurate analysis. This data is not related to sensors, so the above query does not return it. They come in simple columns and are listed on the appropriate documentation page. We will use the following columns: lat lng speed In addition, we will use names for inputs according to the information obtained earlier: inputs.lls_level_1 inputs.hw_mileage We specify inputs.lls_level_1 because we know that our device only sends data on this input. If we didn't know the input number, we could have specified all four possible inputs, and then the inputs without data would just get zero values. The API request raw_data/read for reading the required raw data in our case should look like this: cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": \"123456\", \"from\": \"2023-11-29T08:31:00Z\", \"to\": \"2023-11-29T08:32:00Z\", \"columns\": [ \"lat\", \"lng\", \"speed\", \"inputs.lls_level_1\", \"inputs.hw_mileage\" ] }' The response is returned in a CSV table format: \"msg_time\",\"lat\",\"lng\",\"speed\",\"inputs.lls_level_1\",\"inputs.hw_mileage\" \"2023-11-29T08:31:10Z\",54.2312716,69.5261833,0,3307,24250.798 \"2023-11-29T08:31:12Z\",54.1811183,69.5331349,24,3274,24257.16 \"2023-11-29T08:31:27Z\",54.1802066,69.5333599,21,\\N,\\N \"2023-11-29T08:31:27Z\",54.1802066,69.5333599,21,3274,24257.262 \"2023-11-29T08:31:30Z\",54.180055,69.533395,20,3274,24257.279 \"2023-11-29T08:31:31Z\",54.180005,69.5334083,20,3274,24257.285 \"2023-11-29T08:31:33Z\",54.179915,69.5334266,17,3274,24257.295 \"2023-11-29T08:31:34Z\",54.1798766,69.533435,15,3274,24257.299 \"2023-11-29T08:31:36Z\",54.1798116,69.5334433,12,3274,24257.306 \"2023-11-29T08:31:37Z\",54.179785,69.5334416,10,3274,24257.309 \"2023-11-29T08:31:39Z\",54.1797366,69.533425,9,3274,24257.315 \"2023-11-29T08:31:40Z\",54.1797183,69.5334083,8,3274,24257.315 \"2023-11-29T08:31:42Z\",54.1796883,69.5333449,10,3274,24257.322 \"2023-11-29T08:31:43Z\",54.17968,69.5333016,12,3274,24257.325 \"2023-11-29T08:31:45Z\",54.1796816,69.53318,15,3274,24257.333 \"2023-11-29T08:31:47Z\",54.1796816,69.533025,20,3274,24257.343 In the above example, we see the output for one minute of tracking. When querying raw data over a long period of time, the response can reach significant sizes \u2014 this must be considered. In one of the lines, we see \\N instead of fuel level and mileage values. This means that no such information was received in this data packet. The \\N symbol represents NULL . The above example is one of the simplest, but it clearly demonstrates the process of using an API request to read raw data. You can query a lot of data at once and over large periods of time, depending on your objectives.","title":"Requesting Raw Data Readings"},{"location":"data-warehouse-api/guides/raw-data/#specifying-time-frame","text":"When requesting raw data, you must specify the exact period for which you need the data to ensure the platform can accurately process your request and return the necessary information. Similar to the Backend API , you can specify the date and time in either the standard YYYY-MM-DD HH:mm:ss format with or without a time zone or in ISO 8601 format. The default format for Data Warehouse API requests is ISO 8601. The platform allows you to request raw data for any period within the time frame limits . All methods for specifying the date and time provided below are equally valid. Choose the one that is most convenient or best matches the format used in your integrations.","title":"Specifying Time Frame"},{"location":"data-warehouse-api/guides/raw-data/#iso-8601","text":"ISO 8601 is an international standard for representing date and time-related data in an unambiguous form that is both human- and machine-readable. However, some programs, including Microsoft Excel, may not be able to read such timestamps, so its use is optional. Using this date/time standard when requesting raw data, you can specify the exact time for which you need the data, as well as the time zone - not only as in the user account or UTC+0, but any other time zone of your choice, if required. According to ISO 8601, the date and time are represented starting with the year, followed by month, day, hour, minutes, seconds, milliseconds, and time zone offset. Date and time format: [yyyy]-[mm]-[dd]T[hh]:[mm]:[ss]\u00b1[offset] Time zone offset can be specified using any of the following formats: +-HH:mm - for example, -06:00 or +05:30. +-HHmm - for example, -0500 or +0100. +-HH - for example, -03 or +07. Z - no offset (UTC+0). Timestamp examples: Let's assume that the client account is set to UTC+4 (Dubai) time, and the time we need is 10:20 AM, the date is December 2, 2023. Then we can specify the timestamp in one of the following ways: 2023-12-02T10:20:00+04:00 2023-12-02T10:20:00+04 2023-12-02T06:20:00Z (converted to UTC+0) Another example. The client account is set to UTC-6 (Mexico) time, and the time we need is 10:55 PM, the date is December 11, 2023. Then we can specify the timestamp in one of the following ways: 2023-12-11T23:55:00-06:00 2023-12-11T23:55:00-06 2023-12-12T04:55:00Z (converted to UTC+0, mind the date) API request example: cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": \"10033823\", \"from\": \"2023-12-12T09:00:00Z\", \"to\": \"2023-12-12T09:25:00Z\", \"columns\": [\"lat\",\"lng\",\"discrete_inputs.1\",\"inputs.board_voltage\"] }' The output for a raw data request will always contain a msg_time column that contains timestamps according to the user account time zone. If you need to obtain msg_time in any other time zone, please refer to the Time zone section below.","title":"ISO 8601"},{"location":"data-warehouse-api/guides/raw-data/#regular-date-and-time","text":"Another valid option to specify date and time is the usual YYYY-MM-DD HH:mm:ss format. Since this is not the default format, you need to specify the parameter iso_datetime=false in the API request. API request example: cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"iso_datetime\": false, \"tracker_id\": \"10033823\", \"from\": \"2023-12-12 14:00:00\", \"to\": \"2023-12-12 14:25:00\", \"columns\": [\"lat\",\"lng\",\"discrete_inputs.1\",\"inputs.board_voltage\"] }' In this case, the retrieved data will be in the time zone of the user account.","title":"Regular Date and Time"},{"location":"data-warehouse-api/guides/raw-data/#time-zone","text":"There may be situations when you need to obtain data in a specific time zone different from the user account. This can be useful when the customer's time zone differs from yours due to geographical reasons. In this case, you need to supplement your request with the time_zone parameter and specify the required zone ID. You can request all the possible zone IDs using the timezone/list request from the Backend API. API request example: cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"iso_datetime\": false, \"time_zone\": \"Europe/London\", \"tracker_id\": \"10033823\", \"from\": \"2023-12-12 14:00:00\", \"to\": \"2023-12-12 14:25:00\", \"columns\": [\"lat\",\"lng\",\"discrete_inputs.1\",\"inputs.board_voltage\"] }'","title":"Time Zone"},{"location":"data-warehouse-api/guides/raw-data/#time-period","text":"When requesting raw data, you have an option of specifying the request period in two ways: by specifying the date and time \"from\" and \"to\" or by specifying an interval. Both methods are equally valid, but you should use only one of your choice.","title":"Time Period"},{"location":"data-warehouse-api/guides/raw-data/#from-to","text":"A common way to indicate the period of data request is to specify two timestamps of start and end. This is done using the from and to parameters. The values are specified either according to ISO 8601 or in a regular YYYY-MM-DD HH:mm:ss form - as described above. Examples: \"from\" : \"2023-11-30T17:00:00-06:00\" , \"to\" : \"2023-11-30T18:00:00-06:00\" , or \"from\" : \"2023-11-30 17:00:00\" , \"to\" : \"2023-11-30 18:00:00\" , The to date and time must be after the from , otherwise the query will result in an Invalid parameters error.","title":"From ... To"},{"location":"data-warehouse-api/guides/raw-data/#interval","text":"An alternative method of indicating the request period is an interval. Here you specify the start or end date and time of the period appended by the duration of the period. When specifying the interval parameter, the from and to parameters must not be specified. These are mutually exclusive ways of specifying the data request period. The interval can be specified in different forms: Starting from a specific date and time. Ending with a specific date and time. Indicated by start and end timestamps, without a period. Possible interval parameter formats: [start date and time]/P[dd]T[hh]H[mm]M[ss]S or P[dd]T[hh]H[mm]M[ss]S/[end date and time] or [start date and time]/[end date and time] The date and time can be specified either according to ISO 8601 or in a regular form. PT in interval value stands for \u201cPeriod and Time\u201d and indicates the period after the specified timestamp. For example, PT1H30M15S means 1 hour 30 minutes 15 seconds. If you need to request data for several days, you can specify the number of days between P and T . For example, P2DT3H45M10S means 2 days 3 hours 45 minutes 10 seconds. Examples: \"interval\": \"2023-11-30T17:00:00-0600/PT1H30M10S\" - data will be requested from 17:00:00 to 18:30:10, November 30 (UTC-6). \"interval\": \"2023-11-30 17:00:00/P2DT2H45M10S\" - data will be requested from November 30, 17:00:00 to December 2, 19:45:10 (according to user account time zone). \"interval\": \"P2DT2H45M10S/2023-11-30 17:00:00\" - data will be requested from November 28, 14:14:50 to November 30, 17:00:00 (according to user account time zone).","title":"Interval"},{"location":"data-warehouse-api/resources/tracker/raw_data/","text":"Raw Data \u00b6 Navixy DataWarehouse API empowers you to extract every piece of data transmitted by your connected devices, quickly and efficiently. This page covers the API methods that allow you to obtain raw, unprocessed data, providing the necessary granularity for in-depth analysis. This API allows you to retrieve parsed raw data from the platform for periods ranging from one to several months (depending on your plan). You can obtain parsed GPS and sensor data that the device sends, including input statuses, data from analog and digital interfaces, wireless interfaces, and counters. Parsed raw data \u2014 Data obtained immediately after decoding (parsing) incoming data packets, considering the protocol and specifics of the device model from which the packets were received. The Navixy DataWarehouse API provides the following key methods for accessing raw data: get_inputs : Retrieve the available metering inputs and state fields of a device. read : Fetch parsed raw data values received from tracking devices and decoded by the platform. API Actions \u00b6 API base path: /tracker/raw_data/ get_inputs \u00b6 Returns available metering inputs and state fields of a device. Before requesting raw data, it is crucial to comprehend the device's data capabilities and the specific names of the data input and state fields it possesses. It's important to note that this API request does not provide actual device data. Rather, it serves as a supplementary request aimed at gaining insights into the fields, which data that can be obtained subsequently. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). The tracker must be associated with the user whose hash is being used for the request, and not tariff-blocked. int 123456 Example \u00b6 cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/get_inputs' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": 123456 }' Response \u00b6 { \"discrete_inputs\" : 2 , \"discrete_outputs\" : 1 , \"inputs\" : [ \"analog_1\" , \"battery_voltage\" , \"board_voltage\" , \"ext_temp_sensor_4\" , \"freq_1\" , \"hw_mileage\" , \"impulse_counter_1\" , \"lls_level_4\" , \"lls_temperature_4\" ], \"states\" : [ \"hardware_key\" ], \"success\" : true } discrete_inputs - int. A number of discrete inputs. discrete_outputs - int. A number of discrete outputs. inputs - string array. A list of available metering inputs. states - string array. A list of available state fields. If there is more than one input of the same type, they are indexed (1, 2, 3...). In this case, only the input with the maximum index is returned. For example: If LLS Levels from 1 to 4 are available, lls_level_4 is returned, and it is assumed that LLS levels 1 through 3 also exist. If AVL IOs from 1 to 100000 are available for a device, avl_io_100000 is returned, and AVL IOs with smaller indexes also exist. Errors \u00b6 201 \u2013 Not found in the database \u2013 tracker ID does not exist. 204 \u2013 Entity not found \u2013 there is no tracker with such ID belonging to the authorized user. 208 \u2013 Device blocked \u2013 tracker exists but was blocked due to tariff restrictions or some other reason. read \u00b6 Retrieves parsed raw data - values received from tracking devices and decoded by the platform. The names and values of the inputs and state fields returned by this request align with the names visible in Air Console when connecting to a device. You can find them in the right column, where the incoming data is decoded. Parameters \u00b6 name description type format tracker_id ID of the tracker (aka \"object_id\"). The tracker must be associated with the user whose hash is being used for the request, and not tariff-blocked. int 123456 from From date/time. Starting from what moment logs messages should be retrieved. It relates to the message time - when the packet was registered by a tracker. The time is specified along with time zone according to ISO 8601. date/time \"2023-08-24T08:04:36Z\" to To date/time. Till which moment messages should be retrieved into log. It relates to the message time - when the packet was registered by a tracker. Specified date must be after \"from\" date. The time is specified along with time zone according to ISO 8601. date/time \"2023-08-24T08:04:36Z\" columns List of CSV columns to retrieve string array [\"flags.location_valid\",\"lat\",\"lng\",\"discrete_inputs.1\",\"inputs.board_voltage\"] server_time_filter Optional interval for additional filtering message by server time. If it is used - messages will be returned not only by message time - when the packet was registered by a tracker, they will be filtered by server time - when the message was sent to the server. string/object \"2024-02-03T10:26:26+0500/2024-02-03T10:27:18+0500\" / {\"from\": \"2024-02-03T10:26:26+0500\", \"to\": \"2024-02-03T10:27:18+0500\"} / {\"interval\":\"2024-02-03T10:26:26+0500/PT1H\"} Instead of using from / to parameters it is possible to set interval parameter - ISO 8601 formatted interval, for example 2023-08-24T08:04:36.306Z/PT24H. The response is provided in a CSV format file, with columns that are predefined in the columns parameter of the API request. Here are the specifications for the table output: Rows are enclosed in double quotes. A double quote inside a string is output as two double quotes in a row. There are no other rules for escaping characters. Date and date-time are enclosed in double quotes. Numbers are output without quotes. Values are separated by a comma character , . Rows are separated using the Unix line feed (LF). NULL is represented as \\N . Requested column can be a simple or complex. Simple columns: msg_time - time of message sent by the device. Always returned in CSV output and does not need to be requested separately. Indicated according to user account time zone. server_time - time of message processing by the server. gps_fix_type - enum. One of UNKNOWN , NO_FIX , HAS_FIX , LAST_KNOWN_POSITION . lat - float. Latitude. lng - float. Longitude. speed - decimal. Speed, km/h. alt - int. Altitude, meters. satellites - int. Satellites count ( -1 = unknown). heading - int. Heading degrees. precision - int. Location precision, meters. hdop - float. Horizontal dilution of precision ( -1 = unknown). pdop - float. Position dilution of precision ( -1 = unknown). event_id - int. Event ID. mn_name - string. Mobile network name. mn_roaming - int. Roaming status ( 0 = no roaming, 1 = roaming, -1 = unknown). mn_code - int. Mobile network operator code. mn_csq - int. Mobile network signal strength, CSQ, values from 0 to 31 ( 99 = unknown). mn_type - enum. Mobile network type, one of UNKNOWN , GSM , CDMA , WCDMA , LTE , NR . Complex columns: flags - bitmap of flags: bit 0 location_valid : 0 = location invalid, 1 = location valid. bit 1 lbs : 0 = GPS, 1 = LBS. bit 2 soft_lbs : 0 = device LBS, 1 = software LBS. discrete_inputs - map of discrete inputs states, inputs enumerated from 1. discrete_outputs - map of discrete outputs states, outputs enumerated from 1. inputs - map of metering inputs values. Inputs list depends on the device. states - map of various states. States list depends on the device. To retrieve an internal value from a complex column, use the period symbol. For example: flags.location_valid , inputs.board_voltage . Unknown internal values will be returned as NULL . The list of available internal values for a particular device is obtained using the get_inputs method described above. If you specify a complex column without specifying an internal value, then all internal values will be returned as a JSON map (except flags that will be returned as an integer). You can append complex columns with an asterisk symbol: inputs.* states.* discrete_inputs.* discrete_outputs.* In this case, the platform will search for all available columns in the specified data range and then request them from the database. In the resulting CSV output, instead of the column with an asterisk, all the existing columns in alphabetical order will be shown. If there are no columns, they will not be included in the response. Example for Standard Searching by Message Time Only \u00b6 cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": \"123456\", \"from\": \"2023-11-30T07:13:00.000Z\", \"to\": \"2023-11-30T07:15:00.000Z\", \"columns\": [ \"lat\", \"lng\", \"speed\", \"inputs.ble_lls_level_1\", \"inputs.hw_mileage\", \"discrete_inputs.*\" ] }' Response \u00b6 \"msg_time\",\"lat\",\"lng\",\"speed\",\"inputs.ble_lls_level_1\",\"inputs.hw_mileage\",\"discrete_inputs.1\",\"discrete_inputs.2\" \"2023-11-30T13:13:14+0600\",54.22809,69.5264283,28,2871,24296.444,0,1 \"2023-11-30T13:13:25+0600\",54.228095,69.5278333,32,2871,24296.536,0,1 \"2023-11-30T13:13:36+0600\",54.227765,69.5293916,39,2871,24296.644,0,1 \"2023-11-30T13:13:46+0600\",54.22744,69.5310083,39,2871,24296.756,0,1 \"2023-11-30T13:13:55+0600\",54.227205,69.5323383,29,2871,24296.847,0,1 \"2023-11-30T13:13:56+0600\",54.2271866,69.5324516,27,\\N,\\N,\\N,\\N \"2023-11-30T13:14:00+0600\",54.2270866,69.5328033,22,2871,24296.881,0,1 \"2023-11-30T13:14:01+0600\",54.2270433,69.53286,23,2871,24296.887,0,1 \"2023-11-30T13:14:02+0600\",54.2269866,69.5328883,22,2871,24296.893,0,1 \"2023-11-30T13:14:04+0600\",54.2268766,69.5328683,22,2871,24296.906,0,1 \"2023-11-30T13:14:05+0600\",54.2268266,69.5328266,23,2871,24296.912,0,1 \"2023-11-30T13:14:13+0600\",54.2263733,69.5321966,33,2871,24296.977,0,1 \"2023-11-30T13:14:18+0600\",54.2259866,69.5318949,34,2871,24297.014,0,1 \"2023-11-30T13:14:22+0600\",54.2256266,69.5318,33,2871,24297.065,0,1 \"2023-11-30T13:14:25+0600\",54.22534,69.5318866,35,2871,24297.097,0,1 \"2023-11-30T13:14:31+0600\",54.224835,69.532085,33,2871,24297.155,0,1 \"2023-11-30T13:14:42+0600\",54.2238583,69.5320866,38,2871,24297.264,0,1 \"2023-11-30T13:14:52+0600\",54.2229033,69.5321616,36,2871,24297.36,0,1 \"2023-11-30T13:15:00+0600\",54.222275,69.5320816,36,2871,24297.44,0,1 Example for Searching by Server Time Additionally \u00b6 This API is designed to accommodate scenarios where you retrieve information from trackers to your applications within specified time intervals. Occasionally, trackers may experience connectivity issues. During such occurrences, these trackers automatically store information in their memory buffers. Upon re-establishing a connection, devices promptly transmit their stored information to the platform. For instance: A tracker was connected from 10:00 to 10:30. It then loses GSM signal, storing information in its buffer from 10:30 to 12:00. At 12:00, it reconnects and begins sending packets from the buffer. These packets are timestamped with message times starting from 10:30, 10:31, and so forth. However, the server time reflects 12:00, 12:01, and so on. If your program requests data from 10:00 to 11:00 at 11:00 without utilizing the server_time_filter parameter, it will receive messages only from 10:00 to 10:30. The program might not be aware that it needs to re-request this data once all data from the buffer has been uploaded. To address such situations, there is optional filtering using the server_time_filter parameter. This ensures that your program will get all buffered information. This approach helps prevent potential data gaps and enhances the reliability of your application. cURL curl -X 'POST' \\ 'https://api.eu.navixy.com/dwh/v1/tracker/raw_data/read' \\ -H 'accept: text/csv' \\ -H 'Content-Type: application/json' \\ -d '{ \"hash\": \"6dc7d304dec4434f4c4202ec42817f83\", \"tracker_id\": \"123456\", \"from\": \"2024-02-03T07:00:00.000Z\", \"to\": \"2024-02-03T07:23:59.000Z\", \"server_time_filter\": { \"from\": \"2024-02-03T10:30:00.000Z\", \"to\": \"2024-02-03T12:30:00.000Z\" }, \"columns\": [ \"lat\", \"lng\", \"speed\", \"inputs.ble_lls_level_1\", \"inputs.hw_mileage\", \"discrete_inputs.*\" ] }' Errors \u00b6 201 \u2013 Not found in the database \u2013 tracker ID does not exist. 204 \u2013 Entity not found \u2013 there is no tracker with such ID belonging to the authorized user. 208 \u2013 Device blocked \u2013 tracker exists but was blocked due to tariff restrictions or some other reason.","title":"Raw data"},{"location":"data-warehouse-api/resources/tracker/raw_data/#raw-data","text":"Navixy DataWarehouse API empowers you to extract every piece of data transmitted by your connected devices, quickly and efficiently. This page covers the API methods that allow you to obtain raw, unprocessed data, providing the necessary granularity for in-depth analysis. This API allows you to retrieve parsed raw data from the platform for periods ranging from one to several months (depending on your plan). You can obtain parsed GPS and sensor data that the device sends, including input statuses, data from analog and digital interfaces, wireless interfaces, and counters. Parsed raw data \u2014 Data obtained immediately after decoding (parsing) incoming data packets, considering the protocol and specifics of the device model from which the packets were received. The Navixy DataWarehouse API provides the following key methods for accessing raw data: get_inputs : Retrieve the available metering inputs and state fields of a device. read : Fetch parsed raw data values received from tracking devices and decoded by the platform.","title":"Raw Data"},{"location":"data-warehouse-api/resources/tracker/raw_data/#api-actions","text":"API base path: /tracker/raw_data/","title":"API Actions"},{"location":"data-warehouse-api/resources/tracker/raw_data/#get_inputs","text":"Returns available metering inputs and state fields of a device. Before requesting raw data, it is crucial to comprehend the device's data capabilities and the specific names of the data input and state fields it possesses. It's important to note that this API request does not provide actual device data. Rather, it serves as a supplementary request aimed at gaining insights into the fields, which data that can be obtained subsequently.","title":"get_inputs"},{"location":"data-warehouse-api/resources/tracker/raw_data/#read","text":"Retrieves parsed raw data - values received from tracking devices and decoded by the platform. The names and values of the inputs and state fields returned by this request align with the names visible in Air Console when connecting to a device. You can find them in the right column, where the incoming data is decoded.","title":"read"},{"location":"eco-fleet-api/getting-started/","text":"Navixy Eco Fleet API \u00b6 The structure of Eco Fleet API is close to the user API, so we highly recommend reading Backend API: getting started . The main differences are request paths , authorization system and request format . Base URL \u00b6 Eco Fleet API resides in eco_fleet subsection of API URL. So you can determine URL to API calls like this: https://api.eu.navixy.com/eco_fleet for European Navixy ServerMate platform. https://api.us.navixy.com/eco_fleet for American Navixy ServerMate platform. For example, to make a sensor quality API call in European Navixy ServerMate, you should use the URL: https://api.navixy.com/eco_fleet/v1/trackers/123/sensors/321/quality Auth \u00b6 Authentication \u00b6 Authentication is handled by Backend API . Authorization \u00b6 You should pass the session hash you obtained earlier as the Authorization HTTP header with NVX auth scheme. Example: $ curl -X GET 'https://api.navixy.com/eco_fleet/v1/trackers/123/sensors/321/quality' \\ -H 'Authorization: NVX 5dd33ef0ab37b6aaf2064ecdf50c4cdc' Response format \u00b6 The responses are usually in application/json content type. Consult the API call documentation in question for details. Errors \u00b6 Errors are distinguished by HTTP status code (>= 400) and follow RFC 7807 . Example: { \"type\" : \"errors/default/bad-request\" , \"title\" : \"Bad Request\" , \"status\" : 400 , \"detail\" : \"id: must be greater than or equal to 1\" } Common error types \u00b6 errors/default/bad-request - Causes: missing or invalid parameter value. errors/default/unauthorized - Causes: missing Authorization header or credentials are insufficient or expired. Date/time formats \u00b6 According to ISO 8601 . Example: 1999-12-31T23:59:59Z .","title":"Getting Started"},{"location":"eco-fleet-api/getting-started/#navixy-eco-fleet-api","text":"The structure of Eco Fleet API is close to the user API, so we highly recommend reading Backend API: getting started . The main differences are request paths , authorization system and request format .","title":"Navixy Eco Fleet API"},{"location":"eco-fleet-api/getting-started/#base-url","text":"Eco Fleet API resides in eco_fleet subsection of API URL. So you can determine URL to API calls like this: https://api.eu.navixy.com/eco_fleet for European Navixy ServerMate platform. https://api.us.navixy.com/eco_fleet for American Navixy ServerMate platform. For example, to make a sensor quality API call in European Navixy ServerMate, you should use the URL: https://api.navixy.com/eco_fleet/v1/trackers/123/sensors/321/quality","title":"Base URL"},{"location":"eco-fleet-api/getting-started/#auth","text":"","title":"Auth"},{"location":"eco-fleet-api/getting-started/#authentication","text":"Authentication is handled by Backend API .","title":"Authentication"},{"location":"eco-fleet-api/getting-started/#authorization","text":"You should pass the session hash you obtained earlier as the Authorization HTTP header with NVX auth scheme. Example: $ curl -X GET 'https://api.navixy.com/eco_fleet/v1/trackers/123/sensors/321/quality' \\ -H 'Authorization: NVX 5dd33ef0ab37b6aaf2064ecdf50c4cdc'","title":"Authorization"},{"location":"eco-fleet-api/getting-started/#response-format","text":"The responses are usually in application/json content type. Consult the API call documentation in question for details.","title":"Response format"},{"location":"eco-fleet-api/getting-started/#errors","text":"Errors are distinguished by HTTP status code (>= 400) and follow RFC 7807 . Example: { \"type\" : \"errors/default/bad-request\" , \"title\" : \"Bad Request\" , \"status\" : 400 , \"detail\" : \"id: must be greater than or equal to 1\" }","title":"Errors"},{"location":"eco-fleet-api/getting-started/#datetime-formats","text":"According to ISO 8601 . Example: 1999-12-31T23:59:59Z .","title":"Date/time formats"},{"location":"eco-fleet-api/resources/trackers/resampling/","text":"Fuel data resampling \u00b6 Navixy Eco Fleet Lab has developed a solution for complex fuel data analysis. This method regenerates data sets which will be beneficial for variety of exercises, enabling researchers, developers, and diagnostics experts to leverage the processed data . Diagnostic process is an important procedure undertaken by numerous partners and investigators. Its primary purpose is to identify the underlying causes, which is essential for efficient fuel management by identifying any abnormalities. For example, they analyze key events - drains and refueling for fraud or look for a reason for the appearance of noise in the fuel data. When partners or integrators incorporate fuel-related data into third-party systems for further analysis and processing, including machine learning , it can be highly effective in identifying behavioral patterns and detecting exceptions. This allows for more efficient investigations and enhances overall data processing capabilities. Effective data management relies on accurate and synchronized raw data . However, inconsistencies in different data sets (i.e. position, speed, and fuel level) across various timeframes can pose challenges. To tackle the challenges posed by incomplete or inconsistent data, we utilize advanced statistical models. With our API requests, you can easily access and download processed datasets from our platform for specific time periods. This API request specifically provides fuel-related data in a convenient CSV format. Data resampling refers to the joint process of creating a uniform data structure by organizing existing values and generating new ones (for missing values) in a chronological order, while considering equal time intervals. This approach ensures data integrity and facilitates analysis. data_resampling \u00b6 Description \u00b6 The API response is presented in a convenient CSV format, incorporating columns below: Time - timestamp (depending on the timezone the tracker is located) [FUEL_SENSOR_NAME] - Fuel level (The column name is derived based on the sensor name. There could be more than 1 column) SPEED - object speed (km/h) MOVEMENT - movement status (0 - parking, 1 - moving, 2 - Idle) LNG - Longitude LAT - Latitude API path: /trackers/$tracker_id/resampling Parameters \u00b6 Standard list name description type format hash Hash of an API key is required for API calls to identify user. string \"NVX c459c3589336ebf26ff18257a8d93a45\" tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 interval Sensor readings' datetime interval which will be analyzed. Last week by default. interval 2023-08-24T08:04:36.306Z/2023-08-26T08:04:36.306Z step_size Resampling step in minutes int 1 resampling_props Array of data resampling parameters for various data types resampling_props array Additional list of resampling parameters name description type format data_type Data type. Options: FUEL, SPEED,MOVEMENT, LNG, LAT string \"SPEED\" resampling_method Resampling method. Options: FOLLOWING, PREVIOUS, MEDIAN_IN_WINDOW, AVERAGE_IN_WINDOW, AVERAGE. string \"FOLLOWING\" delta Delta time in seconds. Has different meaning for different algorithms. int null/1 fixed_value A fixed value that will be used if no data is found in the interval. You can specify null or any number. float nulll/5.5 Description of resampling_method \u00b6 FOLLOWING - In this series, the subsequent value is utilized to substitute any missing values. Consequently, neighboring missing values are all substituted with the subsequent valid value. If there are any missing values at the end of the series, they are replaced with the preceding valid value. If delta is not null than algorithm changes: if the time interval [T-\u0394, T+0] contains at least one value, otherwise fixed_value. PREVIOUS - The previous value in the series is utilized to substitute missing values. Consequently, the neighboring missing values are replaced with the earliest preceding valid value. If delta is not null than algorithm changes: if the time interval [T-0, T+\u0394] contains at least one value, otherwise fixed_value. MEDIAN_IN_WINDOW - In this algorithm, the presence of delta is imperative. The average of all the neighboring values in the series within the interval [T-\u0394, T+\u0394], fixed_value if no values. AVERAGE_IN_WINDOW- In this algorithm, the presence of delta is imperative. The median of all the neighboring values in the series within the interval [T-\u0394, T+\u0394], fixed_value if no values. AVERAGE - To replace missing values in a series, we use the average of the two neighboring values. For any missing values between valid ones, we replace them with the average of the surrounding valid values. If the series begins or ends with missing values, we substitute them with the next or previous valid value accordingly. If delta is not equal to null than algorithm changes: if the interval [T-\u0394, T+\u0394] contains at least one value, otherwise fixed_value. We recommend utilizing distinct methods for varying data types, as outlined in the table below. However, the choice of which methods to employ ultimately depends on your individual needs and expectations. Method Data type Use case Following Ordered Data that is missing at the end of a time series or sequence, i.e Fuel, Movement Previous Ordered Data that is missing at the beginning of a time series or sequence, i.e Fuel, Movement Median Evenly distributed Data that is not normally distributed, i.e. Fuel, Speed Average Normally distributed Data that is not evenly distributed, i.e. Fuel, Speed Example \u00b6 curl -X 'POST' \\ 'https://api.navixy.com/eco_fleet/v1/trackers/12345/resampling?interval=P7D/2020-12-31T00:00Z' \\ -H 'accept: text/csv' \\ -H 'Authorization: NVX 22eac1c27af4be7b9d04da2ce1af111b' \\ -H 'Content-Type: application/json' \\ -d '{ \"step_size\": 1, \"resampling_props\": [ { \"data_type\": \"FUEL\", \"resampling_method\": \"PREVIOUS\", \"delta\": 600, \"fixed_value\": null }, { \"data_type\": \"SPEED\", \"resampling_method\": \"PREVIOUS\", \"delta\": null, \"fixed_value\": null }, { \"data_type\": \"MOVEMENT\", \"resampling_method\": \"PREVIOUS\", \"delta\": null, \"fixed_value\": null }, { \"data_type\": \"LNG\", \"resampling_method\": \"PREVIOUS\", \"delta\": null, \"fixed_value\": null }, { \"data_type\": \"LAT\", \"resampling_method\": \"PREVIOUS\", \"delta\": null, \"fixed_value\": null } ] }' Response \u00b6 Time,Fuel level,SPEED,MOVEMENT,LNG,LAT 2023-08-24T08:04,132.85823,38.0,1,37.68325,55.580612 2023-08-24T08:05,132.85823,38.0,1,37.68325,55.580612 2023-08-24T08:06,131.57695,38.0,1,37.68325,55.580612 2023-08-24T08:07,128.12737,38.0,1,37.68325,55.580612 2023-08-24T08:08,130.59135,38.0,1,37.68325,55.580612 Errors \u00b6 204 - Entity not found \u2013 if there is no tracker with such ID belonging to authorized user. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions or some other reason.","title":"Resampling"},{"location":"eco-fleet-api/resources/trackers/resampling/#fuel-data-resampling","text":"Navixy Eco Fleet Lab has developed a solution for complex fuel data analysis. This method regenerates data sets which will be beneficial for variety of exercises, enabling researchers, developers, and diagnostics experts to leverage the processed data . Diagnostic process is an important procedure undertaken by numerous partners and investigators. Its primary purpose is to identify the underlying causes, which is essential for efficient fuel management by identifying any abnormalities. For example, they analyze key events - drains and refueling for fraud or look for a reason for the appearance of noise in the fuel data. When partners or integrators incorporate fuel-related data into third-party systems for further analysis and processing, including machine learning , it can be highly effective in identifying behavioral patterns and detecting exceptions. This allows for more efficient investigations and enhances overall data processing capabilities. Effective data management relies on accurate and synchronized raw data . However, inconsistencies in different data sets (i.e. position, speed, and fuel level) across various timeframes can pose challenges. To tackle the challenges posed by incomplete or inconsistent data, we utilize advanced statistical models. With our API requests, you can easily access and download processed datasets from our platform for specific time periods. This API request specifically provides fuel-related data in a convenient CSV format. Data resampling refers to the joint process of creating a uniform data structure by organizing existing values and generating new ones (for missing values) in a chronological order, while considering equal time intervals. This approach ensures data integrity and facilitates analysis.","title":"Fuel data resampling"},{"location":"eco-fleet-api/resources/trackers/resampling/#data_resampling","text":"","title":"data_resampling"},{"location":"eco-fleet-api/resources/trackers/resampling/#description","text":"The API response is presented in a convenient CSV format, incorporating columns below: Time - timestamp (depending on the timezone the tracker is located) [FUEL_SENSOR_NAME] - Fuel level (The column name is derived based on the sensor name. There could be more than 1 column) SPEED - object speed (km/h) MOVEMENT - movement status (0 - parking, 1 - moving, 2 - Idle) LNG - Longitude LAT - Latitude API path: /trackers/$tracker_id/resampling","title":"Description"},{"location":"eco-fleet-api/resources/trackers/resampling/#parameters","text":"Standard list name description type format hash Hash of an API key is required for API calls to identify user. string \"NVX c459c3589336ebf26ff18257a8d93a45\" tracker_id ID of the tracker (aka \"object_id\"). Tracker must belong to authorized user and not be blocked. int 123456 interval Sensor readings' datetime interval which will be analyzed. Last week by default. interval 2023-08-24T08:04:36.306Z/2023-08-26T08:04:36.306Z step_size Resampling step in minutes int 1 resampling_props Array of data resampling parameters for various data types resampling_props array Additional list of resampling parameters name description type format data_type Data type. Options: FUEL, SPEED,MOVEMENT, LNG, LAT string \"SPEED\" resampling_method Resampling method. Options: FOLLOWING, PREVIOUS, MEDIAN_IN_WINDOW, AVERAGE_IN_WINDOW, AVERAGE. string \"FOLLOWING\" delta Delta time in seconds. Has different meaning for different algorithms. int null/1 fixed_value A fixed value that will be used if no data is found in the interval. You can specify null or any number. float nulll/5.5","title":"Parameters"},{"location":"eco-fleet-api/resources/trackers/resampling/#example","text":"curl -X 'POST' \\ 'https://api.navixy.com/eco_fleet/v1/trackers/12345/resampling?interval=P7D/2020-12-31T00:00Z' \\ -H 'accept: text/csv' \\ -H 'Authorization: NVX 22eac1c27af4be7b9d04da2ce1af111b' \\ -H 'Content-Type: application/json' \\ -d '{ \"step_size\": 1, \"resampling_props\": [ { \"data_type\": \"FUEL\", \"resampling_method\": \"PREVIOUS\", \"delta\": 600, \"fixed_value\": null }, { \"data_type\": \"SPEED\", \"resampling_method\": \"PREVIOUS\", \"delta\": null, \"fixed_value\": null }, { \"data_type\": \"MOVEMENT\", \"resampling_method\": \"PREVIOUS\", \"delta\": null, \"fixed_value\": null }, { \"data_type\": \"LNG\", \"resampling_method\": \"PREVIOUS\", \"delta\": null, \"fixed_value\": null }, { \"data_type\": \"LAT\", \"resampling_method\": \"PREVIOUS\", \"delta\": null, \"fixed_value\": null } ] }'","title":"Example"},{"location":"eco-fleet-api/resources/trackers/resampling/#errors","text":"204 - Entity not found \u2013 if there is no tracker with such ID belonging to authorized user. 208 - Device blocked \u2013 if tracker exists but was blocked due to tariff restrictions or some other reason.","title":"Errors"},{"location":"eco-fleet-api/resources/trackers/sensors/quality/","text":"Fuel Sensor Quality Index \u00b6 Contains API calls to interact with fuel sensor quality index. Resource \u00b6 Resource path: /trackers/$tracker_id/sensors/$sensor_id/quality . GET \u00b6 Returns the fuel sensor quality index calculated from sensor readings within a specified datetime period. Parameters \u00b6 name description type tracker_id ID of the tracker which has the sensor. integer sensor_id ID of the sensor to analyze. integer interval Sensor readings' datetime interval which will be analyzed. Last week by default. interval Examples \u00b6 curl -X GET 'https://api.navixy.com/eco_fleet/v1/trackers/123/sensors/321/quality?interval=P7D/2020-12-31T00:00Z' \\ -H 'Authorization: NVX 22eac1c27af4be7b9d04da2ce1af111b' Response \u00b6 { \"smoothness\" : 8.29 } smoothness - a smoothness score of the sensor readings. Higher values indicate reduced noise in sensor readings, while lower values suggest increased noise. Types \u00b6 Name Description JSON type Restrictions Score An abstract measurement score. number >=1.0 && <=10.0 Errors \u00b6 errors/entity/not-found - Entity not found. Thrown if sensor or calibration table is missing. errors/external-api/navixy - Error accessing Navixy API. See detail field and consult Backend API documentation . errors/sensors/quality/not-enough-readings - Not enough sensor readings in given interval. Try using interval with enough vehicle usage or changing readings' sending frequency and waiting for data accumulation.","title":"Quality"},{"location":"eco-fleet-api/resources/trackers/sensors/quality/#fuel-sensor-quality-index","text":"Contains API calls to interact with fuel sensor quality index.","title":"Fuel Sensor Quality Index"},{"location":"eco-fleet-api/resources/trackers/sensors/quality/#resource","text":"Resource path: /trackers/$tracker_id/sensors/$sensor_id/quality .","title":"Resource"},{"location":"eco-fleet-api/resources/trackers/sensors/quality/#get","text":"Returns the fuel sensor quality index calculated from sensor readings within a specified datetime period.","title":"GET"},{"location":"frontend/extensions/delivery-app/","text":"App: Courier on the map \u00b6 Delivery is a special plugin which can be embedded to any other application or website and allows track user's task by external ID and bounded tracker in the real time. Usage \u00b6 https://saas.navixy.com/pro/applications/delivery/?key=GENERATED_KEY where key \u2013 is a session key generated with API call /user/session/delivery/create . Parameters \u00b6 The plugin can be easily customized with the following parameters provided as GET params: performer\\_type \u2013 You can use an employee or vehicle label as the tracker marker label. Values: employee , vehicle , tracker . performer\\_label \u2013 You can set the custom tracker marker label. external\\_id \u2013 The task external ID, specified in task creation/edit form. hide\\_task (1,0) \u2013 Hides task. In this mode you can track only the tracker(courier). display\\_fields \u2013 You can show only important information in the task info panel. Names of fields are listed through a comma. Fields: label, description, address, period. prompt\\_placeholder \u2013 The task external ID prompt placeholder e.g \"Order ID\" panel\\_align \u2013 Specifies the task info panel align. Values: tl \u2013 Top-Left corner, tr \u2013 Top-Right corner, bl \u2013 Bottom-Left corner, br \u2013 Bottom-Right corner. panel\\_scale \u2013 Specifies the task info panel size. Values: small , medium , big \u2013 medium is the default value. color \u2013 Specifies the task marker and tracker marker color. Values: FF0000 (red), FF9900 (orange), 339966 ( green), 3366FF (blue). FF9900 (orange) by default. Available colors: 000000, 993300, 333300, 003300, 003366, 000080, 333399, 333333, 800000, FF6600, 808000, 008000, 008080, 0000FF, 666699, 808080, FF0000, FF9900, 99CC00, 339966, 33CCCC, 3366FF, 800080, 969696, FF00FF, FFCC00, FFFF00, 00FF00, 00FFFF, 00CCFF, 993366, C0C0C0, FF99CC, FFCC99, FFFF99, CCFFCC, CCFFFF, 99CCFF, CC99FF, FFFFFF . Autoscaling \u00b6 Autoscaling means that the scale of the map, and the center of the area are automatically selected so that all displayed objects are visible. autoscale : 0 \u2013 do not scale 1 \u2013 scale (by default) Map scale \u00b6 The zoom parameter allows specifying map scale by default. Parameter will be ignored with switched on autoscaling. map : roadmap \u2013 Google satellite \u2013 Google satellite osm \u2013 Open Street map doublegis \u2013 2Gis osmmapnik \u2013 OSM mapnik wikimapia \u2013 Wikimapia mailru \u2013 Mail.ru yandexpublic \u2013 Yandex Public map cdcom \u2013 Progorod API for keys \u00b6 Authorisation on API \u00b6 To use the calls described further you have to be authorized in system as it is described according to the link: API authorization Creating a key \u00b6 Use the following API call to create a new key http://api.domain.com/user/session/delivery/create/?hash=USER\\_HASH answer example if the key is successfully generated: { \"success\" : true , \"value\" : \"206831ba32ec9d2a6f7b91b033a48912\" } Important Previous key (if you already have got one), will be replaced with the new one. All the links like http://ui.domain.com/pro/applications/locator/?key= will not work anymore. Retrieving a key \u00b6 To acquire the key you have created earlier, please use the method http://api.domain.com/user/session/delivery/read/?hash=USER_HASH The reply will look like as follows: { \"success\" : true , \"value\" : \"206831ba32ec9d2a6f7b91b033a48912\" }","title":"Application 'Courier on the map'"},{"location":"frontend/extensions/delivery-app/#app-courier-on-the-map","text":"Delivery is a special plugin which can be embedded to any other application or website and allows track user's task by external ID and bounded tracker in the real time.","title":"App: Courier on the map"},{"location":"frontend/extensions/delivery-app/#usage","text":"https://saas.navixy.com/pro/applications/delivery/?key=GENERATED_KEY where key \u2013 is a session key generated with API call /user/session/delivery/create .","title":"Usage"},{"location":"frontend/extensions/delivery-app/#parameters","text":"The plugin can be easily customized with the following parameters provided as GET params: performer\\_type \u2013 You can use an employee or vehicle label as the tracker marker label. Values: employee , vehicle , tracker . performer\\_label \u2013 You can set the custom tracker marker label. external\\_id \u2013 The task external ID, specified in task creation/edit form. hide\\_task (1,0) \u2013 Hides task. In this mode you can track only the tracker(courier). display\\_fields \u2013 You can show only important information in the task info panel. Names of fields are listed through a comma. Fields: label, description, address, period. prompt\\_placeholder \u2013 The task external ID prompt placeholder e.g \"Order ID\" panel\\_align \u2013 Specifies the task info panel align. Values: tl \u2013 Top-Left corner, tr \u2013 Top-Right corner, bl \u2013 Bottom-Left corner, br \u2013 Bottom-Right corner. panel\\_scale \u2013 Specifies the task info panel size. Values: small , medium , big \u2013 medium is the default value. color \u2013 Specifies the task marker and tracker marker color. Values: FF0000 (red), FF9900 (orange), 339966 ( green), 3366FF (blue). FF9900 (orange) by default. Available colors: 000000, 993300, 333300, 003300, 003366, 000080, 333399, 333333, 800000, FF6600, 808000, 008000, 008080, 0000FF, 666699, 808080, FF0000, FF9900, 99CC00, 339966, 33CCCC, 3366FF, 800080, 969696, FF00FF, FFCC00, FFFF00, 00FF00, 00FFFF, 00CCFF, 993366, C0C0C0, FF99CC, FFCC99, FFFF99, CCFFCC, CCFFFF, 99CCFF, CC99FF, FFFFFF .","title":"Parameters"},{"location":"frontend/extensions/delivery-app/#autoscaling","text":"Autoscaling means that the scale of the map, and the center of the area are automatically selected so that all displayed objects are visible. autoscale : 0 \u2013 do not scale 1 \u2013 scale (by default)","title":"Autoscaling"},{"location":"frontend/extensions/delivery-app/#map-scale","text":"The zoom parameter allows specifying map scale by default. Parameter will be ignored with switched on autoscaling. map : roadmap \u2013 Google satellite \u2013 Google satellite osm \u2013 Open Street map doublegis \u2013 2Gis osmmapnik \u2013 OSM mapnik wikimapia \u2013 Wikimapia mailru \u2013 Mail.ru yandexpublic \u2013 Yandex Public map cdcom \u2013 Progorod","title":"Map scale"},{"location":"frontend/extensions/delivery-app/#api-for-keys","text":"","title":"API for keys"},{"location":"frontend/extensions/delivery-app/#authorisation-on-api","text":"To use the calls described further you have to be authorized in system as it is described according to the link: API authorization","title":"Authorisation on API"},{"location":"frontend/extensions/delivery-app/#creating-a-key","text":"Use the following API call to create a new key http://api.domain.com/user/session/delivery/create/?hash=USER\\_HASH answer example if the key is successfully generated: { \"success\" : true , \"value\" : \"206831ba32ec9d2a6f7b91b033a48912\" } Important Previous key (if you already have got one), will be replaced with the new one. All the links like http://ui.domain.com/pro/applications/locator/?key= will not work anymore.","title":"Creating a key"},{"location":"frontend/extensions/delivery-app/#retrieving-a-key","text":"To acquire the key you have created earlier, please use the method http://api.domain.com/user/session/delivery/read/?hash=USER_HASH The reply will look like as follows: { \"success\" : true , \"value\" : \"206831ba32ec9d2a6f7b91b033a48912\" }","title":"Retrieving a key"},{"location":"frontend/extensions/login-redirect/","text":"Login redirect \u00b6 There are a number of options to user login page URL, which you can submit as GET-parameters. You may use this feature for providing the links on external resources (e.g. your website) to let your users go straight to the section they need, use some language by default, etc. Page section \u00b6 You can define the section which your users land by default with partition parameter: user \u2013 user login page (used by default) demo \u2013 access a chosen demo account register_fast \u2013 quick registration form register_full \u2013 full registration form password_remind \u2013 password reminder Language \u00b6 Use locale parameter to define which language will be used: en_EN \u2013 English es_ES \u2013 Spanish ru_RU \u2013 Russian etc. If this parameter is omitted, the language which was set by default for your service will be used. Examples \u00b6 The next code will land user on login section with Spanish language: http://<your_login_page_url>/login/?partition=demo&locale=es_ES The code below lands user on quick registration form with default language set by default: http://<your_login_page_url>/login/?partition=quick_register&locale=es_ES","title":"Login redirect"},{"location":"frontend/extensions/login-redirect/#login-redirect","text":"There are a number of options to user login page URL, which you can submit as GET-parameters. You may use this feature for providing the links on external resources (e.g. your website) to let your users go straight to the section they need, use some language by default, etc.","title":"Login redirect"},{"location":"frontend/extensions/login-redirect/#page-section","text":"You can define the section which your users land by default with partition parameter: user \u2013 user login page (used by default) demo \u2013 access a chosen demo account register_fast \u2013 quick registration form register_full \u2013 full registration form password_remind \u2013 password reminder","title":"Page section"},{"location":"frontend/extensions/login-redirect/#language","text":"Use locale parameter to define which language will be used: en_EN \u2013 English es_ES \u2013 Spanish ru_RU \u2013 Russian etc. If this parameter is omitted, the language which was set by default for your service will be used.","title":"Language"},{"location":"frontend/extensions/login-redirect/#examples","text":"The next code will land user on login section with Spanish language: http://<your_login_page_url>/login/?partition=demo&locale=es_ES The code below lands user on quick registration form with default language set by default: http://<your_login_page_url>/login/?partition=quick_register&locale=es_ES","title":"Examples"},{"location":"frontend/extensions/mobile-tracker/","text":"Plugins are ready-to-use software extensions which can be embedded into 3-rd parties software or web-projects. If you have more questions please contact our support team .","title":"Mobile tracker"},{"location":"frontend/extensions/user-applications/","text":"User apps \u00b6 You can add your own application to the user interface. It will appear as an additional tab in the \"Applications\" menu. In order for the app to work within the platform, it needs to support iframe feature. If you don't have an iframe option, the app can be added as a separate link, in which case a new browser tab will open when you click on it. Some apps have been developed by our partners and are available in Marketplace . To add them, contact the developer of the application. If your domain is using an HTTPS connection, the link to the application must also be HTTPS. Otherwise, you will encounter a mixed content error. Authorization in the application \u00b6 When you open an application through the Navixy interface, user session hash will be sent to the URL of the application by GET method. This hash can be used for authorization within the application. Cookie \u00b6 By default, the web server sends the following cookies when an external application link opens: User session hash as hash=a6aa75587e5c59c32d347da438505fc3 . Locale as locale=en . If you do not want the server to send cookies, inform technical support and this function will be disabled. How to add an application \u00b6 Cloud version \u00b6 Contact Navixy technical support and specify the following parameters: Application name. External URL link. Opening method - iframe or a new tab. Installation destination - user_id or panel_id. Cookies sending - user session hash and/or locale or nothing. Our specialists will do everything necessary, and the application will be available in the user interface. The application can be installed for all users or for a specific one. If the app will be installed to the specific user, please contact the support team every time you need to add this app to another user. If the app installed for whole panel - all new users will automatically get the app. Also, the app can be installed to whole panel instead of specific users. Standalone version \u00b6 You can find the instruction on installation of the software here .","title":"User apps"},{"location":"frontend/extensions/user-applications/#user-apps","text":"You can add your own application to the user interface. It will appear as an additional tab in the \"Applications\" menu. In order for the app to work within the platform, it needs to support iframe feature. If you don't have an iframe option, the app can be added as a separate link, in which case a new browser tab will open when you click on it. Some apps have been developed by our partners and are available in Marketplace . To add them, contact the developer of the application. If your domain is using an HTTPS connection, the link to the application must also be HTTPS. Otherwise, you will encounter a mixed content error.","title":"User apps"},{"location":"frontend/extensions/user-applications/#authorization-in-the-application","text":"When you open an application through the Navixy interface, user session hash will be sent to the URL of the application by GET method. This hash can be used for authorization within the application.","title":"Authorization in the application"},{"location":"frontend/extensions/user-applications/#cookie","text":"By default, the web server sends the following cookies when an external application link opens: User session hash as hash=a6aa75587e5c59c32d347da438505fc3 . Locale as locale=en . If you do not want the server to send cookies, inform technical support and this function will be disabled.","title":"Cookie"},{"location":"frontend/extensions/user-applications/#how-to-add-an-application","text":"","title":"How to add an application"},{"location":"frontend/extensions/user-applications/#cloud-version","text":"Contact Navixy technical support and specify the following parameters: Application name. External URL link. Opening method - iframe or a new tab. Installation destination - user_id or panel_id. Cookies sending - user session hash and/or locale or nothing. Our specialists will do everything necessary, and the application will be available in the user interface. The application can be installed for all users or for a specific one. If the app will be installed to the specific user, please contact the support team every time you need to add this app to another user. If the app installed for whole panel - all new users will automatically get the app. Also, the app can be installed to whole panel instead of specific users.","title":"Cloud version"},{"location":"frontend/extensions/user-applications/#standalone-version","text":"You can find the instruction on installation of the software here .","title":"Standalone version"},{"location":"general/contacts/","text":"Contact Us \u00b6 Need Assistance? \u00b6 If you have any questions or need support, our team is here to help. Reach out to us through any of the following methods: Phone : Call Us Email : support@navixy.com Stay Connected \u00b6 Keep up with the latest updates and connect with us on social media: GitHub : Follow our repository for the latest code and updates. LinkedIn : Connect with us professionally and stay informed about our business updates. Twitter : Follow us for real-time updates and announcements. Facebook : Join our community and engage with us. Instagram : See our latest posts and stories. YouTube : Watch our videos for tutorials, updates, and more. For further information and detailed inquiries, visit our Contact Page .","title":"Contact us"},{"location":"general/contacts/#contact-us","text":"","title":"Contact Us"},{"location":"general/contacts/#need-assistance","text":"If you have any questions or need support, our team is here to help. Reach out to us through any of the following methods: Phone : Call Us Email : support@navixy.com","title":"Need Assistance?"},{"location":"general/contacts/#stay-connected","text":"Keep up with the latest updates and connect with us on social media: GitHub : Follow our repository for the latest code and updates. LinkedIn : Connect with us professionally and stay informed about our business updates. Twitter : Follow us for real-time updates and announcements. Facebook : Join our community and engage with us. Instagram : See our latest posts and stories. YouTube : Watch our videos for tutorials, updates, and more. For further information and detailed inquiries, visit our Contact Page .","title":"Stay Connected"},{"location":"general/getting-started/","text":"Navixy Developer Documentation \u00b6 Navixy is a comprehensive GPS / Vehicle telematics platform developed by SquareGPS . This documentation provides detailed information on integrating third-party solutions with the Navixy platform, including API and technical documentation tailored for developers and partners. How to use this documentation \u00b6 The documentation is organized into sections, each addressing a specific aspect of the Navixy platform: General Introduction, Navixy API Sandbox, No-code automation, and contribution guidelines Backend API API calls for user interface functionalities like tracking, reports, and tasks Panel API API calls for admin panel functionalities such as platform config and user management Eco Fleet API API calls for efficient fuel management Data Warehouse API API calls for obtaining raw IoT data received from devices Frontend Customizing the user experience by using embedded apps Navigation \u00b6 Navigate using the top menu. Download a PDF or access our GitHub via links on the right. The left-hand menu lists files for each section\u2014click to view contents. Use the internal menu on the right for quick navigation within the file. Documentation structure \u00b6 The documentation includes three types of files: Documents, Guides, and API calls. Documents and guides are divided into semantic parts, starting with an introduction that summarizes the content. API call descriptions \u00b6 Introduction - General information and purpose of the API call. Object structure - Describes the object structure used in the calls (optional). API Actions - Base API call and associated actions, including: Action description - Purpose of the API action. Requirements - Necessary permissions (optional). Parameters table - Lists parameters for the API call with descriptions and data types. Examples - API call examples with parameters. Includes a copy button for easy use. Response - Example of a successful server response with field descriptions. Errors - Specific errors related to the API action, plus a general error list. API Limits \u00b6 To ensure system stability for all customers, the platform limits API requests to 50 requests per second per user and per IP address (for applications serving multiple users). These limits are applied based on user session hash and API keys. Navixy API Sandbox \u00b6 Navixy provides a powerful Postman collection, the Navixy API Sandbox, for working with API documentation, exploring, and testing API queries using real or demo data. This collection offers a familiar environment for many developers and simplifies the process of building customized solutions. For detailed information on using Postman with Navixy, please refer to the Postman Guide . Get involved \u00b6 Help improve the Navixy developer documentation or assist with language translations . Your contributions make the Navixy platform even better for the community.","title":"Overview"},{"location":"general/getting-started/#navixy-developer-documentation","text":"Navixy is a comprehensive GPS / Vehicle telematics platform developed by SquareGPS . This documentation provides detailed information on integrating third-party solutions with the Navixy platform, including API and technical documentation tailored for developers and partners.","title":"Navixy Developer Documentation"},{"location":"general/getting-started/#how-to-use-this-documentation","text":"The documentation is organized into sections, each addressing a specific aspect of the Navixy platform: General Introduction, Navixy API Sandbox, No-code automation, and contribution guidelines Backend API API calls for user interface functionalities like tracking, reports, and tasks Panel API API calls for admin panel functionalities such as platform config and user management Eco Fleet API API calls for efficient fuel management Data Warehouse API API calls for obtaining raw IoT data received from devices Frontend Customizing the user experience by using embedded apps","title":"How to use this documentation"},{"location":"general/getting-started/#navigation","text":"Navigate using the top menu. Download a PDF or access our GitHub via links on the right. The left-hand menu lists files for each section\u2014click to view contents. Use the internal menu on the right for quick navigation within the file.","title":"Navigation"},{"location":"general/getting-started/#documentation-structure","text":"The documentation includes three types of files: Documents, Guides, and API calls. Documents and guides are divided into semantic parts, starting with an introduction that summarizes the content.","title":"Documentation structure"},{"location":"general/getting-started/#api-call-descriptions","text":"Introduction - General information and purpose of the API call. Object structure - Describes the object structure used in the calls (optional). API Actions - Base API call and associated actions, including: Action description - Purpose of the API action. Requirements - Necessary permissions (optional). Parameters table - Lists parameters for the API call with descriptions and data types. Examples - API call examples with parameters. Includes a copy button for easy use. Response - Example of a successful server response with field descriptions. Errors - Specific errors related to the API action, plus a general error list.","title":"API call descriptions"},{"location":"general/getting-started/#api-limits","text":"To ensure system stability for all customers, the platform limits API requests to 50 requests per second per user and per IP address (for applications serving multiple users). These limits are applied based on user session hash and API keys.","title":"API Limits"},{"location":"general/getting-started/#navixy-api-sandbox","text":"Navixy provides a powerful Postman collection, the Navixy API Sandbox, for working with API documentation, exploring, and testing API queries using real or demo data. This collection offers a familiar environment for many developers and simplifies the process of building customized solutions. For detailed information on using Postman with Navixy, please refer to the Postman Guide .","title":"Navixy API Sandbox"},{"location":"general/getting-started/#get-involved","text":"Help improve the Navixy developer documentation or assist with language translations . Your contributions make the Navixy platform even better for the community.","title":"Get involved"},{"location":"general/postman/","text":"Using Postman with Navixy \u00b6 When working with API requests, developers have a wide range of tools at their disposal, from simple browser inputs to advanced software solutions. One of the preferred tools among developers is Postman, a robust platform for API development. Postman excels in various tasks, including simple request testing, API creation, and ongoing maintenance. Navixy streamlines API integration by offering ready-made Postman collections. These collections allow developers to quickly import, test, and modify API requests without manual setup, enhancing efficiency and simplifying the process of interacting with Navixy's platform. Navixy Postman Collections URL: https://www.postman.com/navixy/ Navixy API Sandbox in Postman URL: https://www.postman.com/navixyapisandbox/workspace/navixy-api-sandbox/overview For this guide, we will focus on using Postman as an API client. Getting Started with Postman \u00b6 What is Postman? \u00b6 Postman is a collaboration platform for API development, used by over 10 million developers worldwide. It simplifies the process of building, testing, and maintaining APIs, offering a user-friendly interface for sending requests and receiving responses. Installing Postman \u00b6 To get the latest version of the Postman app , visit the download page and click \u201cDownload\u201d for your platform. Follow the installation instructions specific to your operating system. Setting Up Postman \u00b6 Open Postman: After installation, open the Postman application. Create an Account: Sign up for a Postman account if you don't already have one. This will allow you to save your work and sync it across devices. Import Navixy Collections: Use the link provided above to import the Navixy Postman collections into your workspace. Your First Request \u00b6 The Postman API client simplifies sending API requests and ensures that parameters are correctly formatted. This is particularly useful for handling complex or large requests. Steps to Make Your First Request \u00b6 Select a Request Method: Each API request uses an HTTP method. The most common methods for the Navixy API are GET and POST. GET retrieves data from the API, while POST sends new data. Enter the Base Request URL with the Resource and Sub-resource: In our example, we will use user/auth and tracker/list requests. Base request URLs are: For EU server - https://api.eu.navixy.com/v2/ For US server - https://api.us.navixy.com/v2/ Click on the Params Button: Fill in the fields - Key (parameter name from documentation) and value. For the user/auth request, we have 2 keys that should be transmitted - login and password. Once you fill out the parameter name, it is automatically added to the request line. Similarly, with values and additional parameters: Press Send: You will see the reply, already split and highlighted for easier reading: In this case, we have received a hash that should be copied and used for future requests. Example: tracker/list request Managing Parameters \u00b6 If your request has multiple parameters listed, you can easily enable and disable them to prevent errors: Request History \u00b6 Postman keeps a history of your requests on the left side of the application. You can revisit and re-execute previous requests with a simple double-click, opening them in a new tab: Examples in Documentation \u00b6 The Navixy API documentation includes both the structure of requests and examples. You can copy these examples into Postman, where parameters will be automatically parsed for convenient editing: Importing cURL Examples into Postman \u00b6 You can also import cURL examples from our documentation into Postman. Copy the cURL example, open the import tab in Postman, choose Raw Text, paste the example, and save it: See Also \u00b6 How to work with Navixy API Sandbox on Postman Streamline development with Navixy API and Postman Developer-Friendly Telematics API: Navixy API Sandbox in Postman","title":"Postman"},{"location":"general/postman/#using-postman-with-navixy","text":"When working with API requests, developers have a wide range of tools at their disposal, from simple browser inputs to advanced software solutions. One of the preferred tools among developers is Postman, a robust platform for API development. Postman excels in various tasks, including simple request testing, API creation, and ongoing maintenance. Navixy streamlines API integration by offering ready-made Postman collections. These collections allow developers to quickly import, test, and modify API requests without manual setup, enhancing efficiency and simplifying the process of interacting with Navixy's platform. Navixy Postman Collections URL: https://www.postman.com/navixy/ Navixy API Sandbox in Postman URL: https://www.postman.com/navixyapisandbox/workspace/navixy-api-sandbox/overview For this guide, we will focus on using Postman as an API client.","title":"Using Postman with Navixy"},{"location":"general/postman/#getting-started-with-postman","text":"","title":"Getting Started with Postman"},{"location":"general/postman/#what-is-postman","text":"Postman is a collaboration platform for API development, used by over 10 million developers worldwide. It simplifies the process of building, testing, and maintaining APIs, offering a user-friendly interface for sending requests and receiving responses.","title":"What is Postman?"},{"location":"general/postman/#installing-postman","text":"To get the latest version of the Postman app , visit the download page and click \u201cDownload\u201d for your platform. Follow the installation instructions specific to your operating system.","title":"Installing Postman"},{"location":"general/postman/#setting-up-postman","text":"Open Postman: After installation, open the Postman application. Create an Account: Sign up for a Postman account if you don't already have one. This will allow you to save your work and sync it across devices. Import Navixy Collections: Use the link provided above to import the Navixy Postman collections into your workspace.","title":"Setting Up Postman"},{"location":"general/postman/#your-first-request","text":"The Postman API client simplifies sending API requests and ensures that parameters are correctly formatted. This is particularly useful for handling complex or large requests.","title":"Your First Request"},{"location":"general/postman/#steps-to-make-your-first-request","text":"Select a Request Method: Each API request uses an HTTP method. The most common methods for the Navixy API are GET and POST. GET retrieves data from the API, while POST sends new data. Enter the Base Request URL with the Resource and Sub-resource: In our example, we will use user/auth and tracker/list requests. Base request URLs are: For EU server - https://api.eu.navixy.com/v2/ For US server - https://api.us.navixy.com/v2/ Click on the Params Button: Fill in the fields - Key (parameter name from documentation) and value. For the user/auth request, we have 2 keys that should be transmitted - login and password. Once you fill out the parameter name, it is automatically added to the request line. Similarly, with values and additional parameters: Press Send: You will see the reply, already split and highlighted for easier reading: In this case, we have received a hash that should be copied and used for future requests. Example: tracker/list request","title":"Steps to Make Your First Request"},{"location":"general/postman/#managing-parameters","text":"If your request has multiple parameters listed, you can easily enable and disable them to prevent errors:","title":"Managing Parameters"},{"location":"general/postman/#request-history","text":"Postman keeps a history of your requests on the left side of the application. You can revisit and re-execute previous requests with a simple double-click, opening them in a new tab:","title":"Request History"},{"location":"general/postman/#examples-in-documentation","text":"The Navixy API documentation includes both the structure of requests and examples. You can copy these examples into Postman, where parameters will be automatically parsed for convenient editing:","title":"Examples in Documentation"},{"location":"general/postman/#importing-curl-examples-into-postman","text":"You can also import cURL examples from our documentation into Postman. Copy the cURL example, open the import tab in Postman, choose Raw Text, paste the example, and save it:","title":"Importing cURL Examples into Postman"},{"location":"general/postman/#see-also","text":"How to work with Navixy API Sandbox on Postman Streamline development with Navixy API and Postman Developer-Friendly Telematics API: Navixy API Sandbox in Postman","title":"See Also"},{"location":"general/zapier/","text":"Zapier Integration \u00b6 Automate repetitive tasks and enhance productivity by integrating Navixy with Zapier. Zapier is a powerful automation tool that connects different applications, enabling you to streamline workflows without any coding. By using triggers and actions, Zapier allows you to automate processes, reducing manual effort and increasing efficiency. What is Zapier? \u00b6 Zapier is a web-based service that automates actions between different apps. It follows a simple \"When this happens, do that\" logic. When an event occurs in one app (trigger), Zapier can make another app perform a specified action. This allows you to create seamless automated workflows, known as Zaps, to handle routine tasks. Benefits of using Zapier with Navixy \u00b6 By integrating Navixy with Zapier, you can: Automate responses to events from your tracking devices Streamline communication and data flow between Navixy and other platforms Save time and reduce the potential for errors in manual tasks Enhance your operational efficiency and responsiveness Example use cases include: Sending a GPRS command or activating an output on a schedule Sending a Slack message when a tracker event occurs Deactivating a tracker based on specific events Creating your first Zap \u00b6 Sign Up for Zapier First, ensure you have signed up for a Zapier account . Conceptualize Your Zap Think about what you want to automate. For instance, you might want to deactivate equipment automatically when it leaves a specific geofence. Access Navixy Triggers and Actions Open the invitation link to access Navixy triggers and actions. Click \"Accept invite & Build a Zap.\" Dashboard Overview The dashboard displays all your Zaps. You can create, update, and manage your Zaps here. Setting Up a Trigger \u00b6 Select App Search for and select the Navixy app. Configure Trigger Choose \"New Tracker Event\" as the trigger. Connect your account by providing a User Session Key or an API key. Obtain a User Session Key from Navixy Admin Panel -> Users -> User -> Get session key. For API keys, refer to authentication . Select the correct server (US for accounts starting with 1000xxxx, otherwise EU). Specify Trigger Details Tracker IDs: Find them in the admin panel or user interface. Event Types: Choose one or multiple event types from the provided list. Account's Time Zone: Specify the time zone (e.g., UTC+3 as 3). Time Interval: Set the interval for event checks in minutes (e.g., 15 minutes). Setting Up an Action \u00b6 Choose one of the following actions based on your device and use case. Set Output For devices that change one output at a time. Provide: Tracker ID Output number Output state (enable/disable) Set Outputs For devices that change multiple outputs with one command. Provide: Tracker ID Output states (e.g., true,true,false for outputs 1, 2, and 3) Send GPRS Command For sending specific commands to a device, such as switching a digital output. Provide: - Tracker ID - Command (protocol-related command for the device) Results \u00b6 Activate your Zap to start the automation. Ensure your device is online to receive commands. Switching off the engine of a moving vehicle can lead to serious accidents and is extremely dangerous. This action should only be performed under safe conditions, such as when the vehicle is stationary and secured. Navixy is not liable for any accidents, injuries, or damages resulting from the improper use of this functionality. For detailed steps and more examples, refer to the Navixy documentation .","title":"Zapier"},{"location":"general/zapier/#zapier-integration","text":"Automate repetitive tasks and enhance productivity by integrating Navixy with Zapier. Zapier is a powerful automation tool that connects different applications, enabling you to streamline workflows without any coding. By using triggers and actions, Zapier allows you to automate processes, reducing manual effort and increasing efficiency.","title":"Zapier Integration"},{"location":"general/zapier/#what-is-zapier","text":"Zapier is a web-based service that automates actions between different apps. It follows a simple \"When this happens, do that\" logic. When an event occurs in one app (trigger), Zapier can make another app perform a specified action. This allows you to create seamless automated workflows, known as Zaps, to handle routine tasks.","title":"What is Zapier?"},{"location":"general/zapier/#benefits-of-using-zapier-with-navixy","text":"By integrating Navixy with Zapier, you can: Automate responses to events from your tracking devices Streamline communication and data flow between Navixy and other platforms Save time and reduce the potential for errors in manual tasks Enhance your operational efficiency and responsiveness Example use cases include: Sending a GPRS command or activating an output on a schedule Sending a Slack message when a tracker event occurs Deactivating a tracker based on specific events","title":"Benefits of using Zapier with Navixy"},{"location":"general/zapier/#creating-your-first-zap","text":"Sign Up for Zapier First, ensure you have signed up for a Zapier account . Conceptualize Your Zap Think about what you want to automate. For instance, you might want to deactivate equipment automatically when it leaves a specific geofence. Access Navixy Triggers and Actions Open the invitation link to access Navixy triggers and actions. Click \"Accept invite & Build a Zap.\" Dashboard Overview The dashboard displays all your Zaps. You can create, update, and manage your Zaps here.","title":"Creating your first Zap"},{"location":"general/zapier/#setting-up-a-trigger","text":"Select App Search for and select the Navixy app. Configure Trigger Choose \"New Tracker Event\" as the trigger. Connect your account by providing a User Session Key or an API key. Obtain a User Session Key from Navixy Admin Panel -> Users -> User -> Get session key. For API keys, refer to authentication . Select the correct server (US for accounts starting with 1000xxxx, otherwise EU). Specify Trigger Details Tracker IDs: Find them in the admin panel or user interface. Event Types: Choose one or multiple event types from the provided list. Account's Time Zone: Specify the time zone (e.g., UTC+3 as 3). Time Interval: Set the interval for event checks in minutes (e.g., 15 minutes).","title":"Setting Up a Trigger"},{"location":"general/zapier/#setting-up-an-action","text":"Choose one of the following actions based on your device and use case. Set Output For devices that change one output at a time. Provide: Tracker ID Output number Output state (enable/disable) Set Outputs For devices that change multiple outputs with one command. Provide: Tracker ID Output states (e.g., true,true,false for outputs 1, 2, and 3) Send GPRS Command For sending specific commands to a device, such as switching a digital output. Provide: - Tracker ID - Command (protocol-related command for the device)","title":"Setting Up an Action"},{"location":"general/zapier/#results","text":"Activate your Zap to start the automation. Ensure your device is online to receive commands. Switching off the engine of a moving vehicle can lead to serious accidents and is extremely dangerous. This action should only be performed under safe conditions, such as when the vehicle is stationary and secured. Navixy is not liable for any accidents, injuries, or damages resulting from the improper use of this functionality. For detailed steps and more examples, refer to the Navixy documentation .","title":"Results"},{"location":"general/contribute/dev-docs/","text":"Contributing to Developer Documentation \u00b6 Join us in enhancing Navixy developer documentation! Your contributions are highly valued and appreciated. Whether you\u2019ve spotted an inaccuracy, found a typo, or have additional information to share, your help is appreciated. All our documentation is publicly available on GitHub , and you can get involved in several ways to make it better: Creating an issue with a detailed description of the problem. Editing a single page in a browser . Manually creating a fork and making multiple commits before creating a pull request. Installing and editing documentation locally on your PC. In each case, a GitHub account is required. If you prefer not to register on GitHub, you can contact us with any feedback or suggestions. Quick Edits in the Browser \u00b6 For simple, quick edits, you can use the built-in GitHub editor: On any documentation page, find the pencil icon in the upper right corner and click it. You will be prompted to create a fork of the repository if you haven't already. Click the green \"Create fork\" button. This will open the source code of the page in an editable format. Make your edits directly in the browser. Provide a brief description of your changes in the commit message box. Click the \"Propose changes\" button to create a new branch in your fork. Submit a pull request from your fork to the main repository. We will review your pull request and, once approved, merge it into the main branch. This method is best for minor, single-page edits. Advanced Local Editing \u00b6 For more comprehensive edits, or if you need to work on multiple pages, you can set up the documentation locally: Install Python and Git: Download and install Python 3.7.9 . Newer versions might not work correctly. Download and install the Git client . Set Up Your Development Environment: Install an Integrated Development Environment (IDE), such as IntelliJ IDEA (Community edition is sufficient). Fork the Navixy documentation repository . Clone your fork to your local machine using your IDE: File -> New -> Project from version control . Install Dependencies: Open a terminal or command prompt and navigate to your project directory. Set up a virtual environment: cd /path/to/project/on/your/pc mkdir venv python -m venv ./venv Activate the virtual environment: On Windows: C: \\p ath \\t o \\p roject \\v env \\S cripts \\a ctivate.bat On macOS/Linux: source venv/bin/activate Install MkDocs and dependencies: pip install -r requirements.txt Run the Documentation Locally: Start the local MkDocs server: mkdocs serve --dirtyreload Open your browser and navigate to http://localhost:8000 to see the documentation. Make Your Edits: Create a new branch in your local Git repository (avoid using the master branch). Make your changes and preview them locally in the browser. Commit your changes with clear commit messages in English. Submit Your Changes: Push your changes to your fork on GitHub. Open a pull request from your fork to the main repository. Ensure your pull request description is in English. After your pull request is reviewed and merged, you can delete your branch and rebase your fork to the upstream repository. Introduction to MkDocs \u00b6 Our documentation is built using MkDocs and the Material for MkDocs theme. To get started, read the MkDocs user guide for an overview of how to layout and write Markdown source files. Menu \u00b6 The menu structure is automatically generated using the awesome-pages plugin . To set the desired page order, use a .pages.yml file in the directory. Example: title : Backend API nav : - getting-started.md - how-to - resources - websocket Meta Information \u00b6 Each page should start with a meta-information section. Required fields are title and description . Example: --- title : Get involved description : Contribute to improving Navixy documentation and translations. --- Headers \u00b6 Structure your information with clear headers. Ensure consistency across pages of the same type. Example \u00b6 API resource page structure: # Resource Name Resource description. ## Object Name Object and its description. ## API Actions Path: `/path/to/resource/` . ### Method_1 Method description. #### Parameters | name | description | type | restrictions | |:-------|:-------------|:--------|:---------------------| | param1 | description. | int | `[1..100]` , not null | | param2 | description. | boolean | not null | #### Examples === \"cURL\" \\`\\`\\`shell curl -X POST 'https://api.navixy.com/v2/resource/sub_resource/action' \\ -H 'Content-Type: application/json' \\ -d '{\"param1\": \"value1\", \"param2\": \"value2\", \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' \\`\\`\\` === \"HTTP GET\" \\`\\`\\`http https://api.navixy.com/v2/resource/sub_resource/action?param1=value1&param2&hash=a6aa75587e5c59c32d347da438505fc3 \\`\\`\\` #### Response \\`\\`\\`json { \"success\": true } \\`\\`\\` #### Errors Special error codes. ### Method_2 ... If the response or structure has comments, please write these comments separately in a list format below. For actual examples, refer to user and source .","title":"Enhance developer documentation"},{"location":"general/contribute/dev-docs/#contributing-to-developer-documentation","text":"Join us in enhancing Navixy developer documentation! Your contributions are highly valued and appreciated. Whether you\u2019ve spotted an inaccuracy, found a typo, or have additional information to share, your help is appreciated. All our documentation is publicly available on GitHub , and you can get involved in several ways to make it better: Creating an issue with a detailed description of the problem. Editing a single page in a browser . Manually creating a fork and making multiple commits before creating a pull request. Installing and editing documentation locally on your PC. In each case, a GitHub account is required. If you prefer not to register on GitHub, you can contact us with any feedback or suggestions.","title":"Contributing to Developer Documentation"},{"location":"general/contribute/dev-docs/#quick-edits-in-the-browser","text":"For simple, quick edits, you can use the built-in GitHub editor: On any documentation page, find the pencil icon in the upper right corner and click it. You will be prompted to create a fork of the repository if you haven't already. Click the green \"Create fork\" button. This will open the source code of the page in an editable format. Make your edits directly in the browser. Provide a brief description of your changes in the commit message box. Click the \"Propose changes\" button to create a new branch in your fork. Submit a pull request from your fork to the main repository. We will review your pull request and, once approved, merge it into the main branch. This method is best for minor, single-page edits.","title":"Quick Edits in the Browser"},{"location":"general/contribute/dev-docs/#advanced-local-editing","text":"For more comprehensive edits, or if you need to work on multiple pages, you can set up the documentation locally: Install Python and Git: Download and install Python 3.7.9 . Newer versions might not work correctly. Download and install the Git client . Set Up Your Development Environment: Install an Integrated Development Environment (IDE), such as IntelliJ IDEA (Community edition is sufficient). Fork the Navixy documentation repository . Clone your fork to your local machine using your IDE: File -> New -> Project from version control . Install Dependencies: Open a terminal or command prompt and navigate to your project directory. Set up a virtual environment: cd /path/to/project/on/your/pc mkdir venv python -m venv ./venv Activate the virtual environment: On Windows: C: \\p ath \\t o \\p roject \\v env \\S cripts \\a ctivate.bat On macOS/Linux: source venv/bin/activate Install MkDocs and dependencies: pip install -r requirements.txt Run the Documentation Locally: Start the local MkDocs server: mkdocs serve --dirtyreload Open your browser and navigate to http://localhost:8000 to see the documentation. Make Your Edits: Create a new branch in your local Git repository (avoid using the master branch). Make your changes and preview them locally in the browser. Commit your changes with clear commit messages in English. Submit Your Changes: Push your changes to your fork on GitHub. Open a pull request from your fork to the main repository. Ensure your pull request description is in English. After your pull request is reviewed and merged, you can delete your branch and rebase your fork to the upstream repository.","title":"Advanced Local Editing"},{"location":"general/contribute/dev-docs/#introduction-to-mkdocs","text":"Our documentation is built using MkDocs and the Material for MkDocs theme. To get started, read the MkDocs user guide for an overview of how to layout and write Markdown source files.","title":"Introduction to MkDocs"},{"location":"general/contribute/dev-docs/#menu","text":"The menu structure is automatically generated using the awesome-pages plugin . To set the desired page order, use a .pages.yml file in the directory. Example: title : Backend API nav : - getting-started.md - how-to - resources - websocket","title":"Menu"},{"location":"general/contribute/dev-docs/#meta-information","text":"Each page should start with a meta-information section. Required fields are title and description . Example: --- title : Get involved description : Contribute to improving Navixy documentation and translations. ---","title":"Meta Information"},{"location":"general/contribute/dev-docs/#headers","text":"Structure your information with clear headers. Ensure consistency across pages of the same type.","title":"Headers"},{"location":"general/contribute/dev-docs/#example","text":"API resource page structure: # Resource Name Resource description. ## Object Name Object and its description. ## API Actions Path: `/path/to/resource/` . ### Method_1 Method description. #### Parameters | name | description | type | restrictions | |:-------|:-------------|:--------|:---------------------| | param1 | description. | int | `[1..100]` , not null | | param2 | description. | boolean | not null | #### Examples === \"cURL\" \\`\\`\\`shell curl -X POST 'https://api.navixy.com/v2/resource/sub_resource/action' \\ -H 'Content-Type: application/json' \\ -d '{\"param1\": \"value1\", \"param2\": \"value2\", \"hash\": \"a6aa75587e5c59c32d347da438505fc3\"}' \\`\\`\\` === \"HTTP GET\" \\`\\`\\`http https://api.navixy.com/v2/resource/sub_resource/action?param1=value1&param2&hash=a6aa75587e5c59c32d347da438505fc3 \\`\\`\\` #### Response \\`\\`\\`json { \"success\": true } \\`\\`\\` #### Errors Special error codes. ### Method_2 ... If the response or structure has comments, please write these comments separately in a list format below. For actual examples, refer to user and source .","title":"Example"},{"location":"general/contribute/translation/","text":"Translate Navixy \u00b6 Navixy is dedicated to global accessibility, offering support for a wide range of languages to cater to users worldwide. The platform is designed to be versatile, accommodating both left-to-right and right-to-left languages. We continually expand our language support through contributions from our vibrant community of translators. If the language you need isn't yet supported, we invite you to join us and help expand our multilingual capabilities. Currently Supported Languages \u00b6 Navixy currently supports dozens of languages, with more being added regularly. For the most up-to-date list of supported languages, visit our regional settings documentation . How to Become a Contributor \u00b6 We welcome and appreciate all contributions. By joining our community of translators, you help make Navixy more accessible and user-friendly for people around the world. Start translating today and become part of a global effort to enhance the Navixy platform. Step 1: Get Access to Crowdin \u00b6 To start contributing, you will need access to our Crowdin project. Crowdin is an online translation service developed specifically for team-based translation projects. Contact your Navixy representative and provide your Crowdin account details to be associated with the Navixy Crowdin project. Step 2: Choose Your Translation Method \u00b6 There are two primary methods to localize the Navixy platform: Crowdin In-context Translation (Web UI Only) Crowdin UI Translation Crowdin In-context Translation (Web UI Only) \u00b6 This method is the most convenient way to translate the Navixy Web UI. Use the following link to launch the Crowdin In-context service: <https://demo.navixy.com/?locale=ach#/login> After logging in, the standard Navixy UI will appear in a special translation mode. Click on the small icon next to each text item to open the translation dialog and make your edits. Crowdin UI Translation \u00b6 For a more comprehensive translation experience, use the Crowdin UI. This method is essential for translating backend components and mobile apps. Translations in Crowdin are organized into several directories: Common Server properties, API server properties, Tracking server properties, SMS server properties : Translation strings for backend (mainly for reports, SMS, and email notifications). Future Web UI, Legacy Web UI : Translation strings for Navixy Web UI. android-client, android-tracker, navixy-tracker-ios, navixy-viewer-ios : Translation strings for mobile apps. Each directory contains specific strings for translation, which you can edit directly in the Crowdin interface. Contributing to New or Existing Languages \u00b6 Adding a New Language \u00b6 If you want to add a new language: Obtain a Crowdin account by contacting your manager. Use either the In-context translation method or the Crowdin UI to start translating. Notify your manager once the translation is complete. The development team will then add the new language to the platform. Improving Existing Translations \u00b6 To improve existing translations, follow the same steps as above, but focus on refining and enhancing the current language packs. Your contributions will be reviewed and, once approved, will be automatically deployed to the production environment. Translation Delivery \u00b6 Deploying translations to the production environment typically takes about a week. For on-premise installations and mobile apps, this timing depends on their respective release schedules. Once your translation work is complete, notify your Navixy representative to ensure your contributions are integrated into the platform.","title":"Add languages and improve translation"},{"location":"general/contribute/translation/#translate-navixy","text":"Navixy is dedicated to global accessibility, offering support for a wide range of languages to cater to users worldwide. The platform is designed to be versatile, accommodating both left-to-right and right-to-left languages. We continually expand our language support through contributions from our vibrant community of translators. If the language you need isn't yet supported, we invite you to join us and help expand our multilingual capabilities.","title":"Translate Navixy"},{"location":"general/contribute/translation/#currently-supported-languages","text":"Navixy currently supports dozens of languages, with more being added regularly. For the most up-to-date list of supported languages, visit our regional settings documentation .","title":"Currently Supported Languages"},{"location":"general/contribute/translation/#how-to-become-a-contributor","text":"We welcome and appreciate all contributions. By joining our community of translators, you help make Navixy more accessible and user-friendly for people around the world. Start translating today and become part of a global effort to enhance the Navixy platform.","title":"How to Become a Contributor"},{"location":"general/contribute/translation/#step-1-get-access-to-crowdin","text":"To start contributing, you will need access to our Crowdin project. Crowdin is an online translation service developed specifically for team-based translation projects. Contact your Navixy representative and provide your Crowdin account details to be associated with the Navixy Crowdin project.","title":"Step 1: Get Access to Crowdin"},{"location":"general/contribute/translation/#step-2-choose-your-translation-method","text":"There are two primary methods to localize the Navixy platform: Crowdin In-context Translation (Web UI Only) Crowdin UI Translation","title":"Step 2: Choose Your Translation Method"},{"location":"general/contribute/translation/#contributing-to-new-or-existing-languages","text":"","title":"Contributing to New or Existing Languages"},{"location":"general/contribute/translation/#adding-a-new-language","text":"If you want to add a new language: Obtain a Crowdin account by contacting your manager. Use either the In-context translation method or the Crowdin UI to start translating. Notify your manager once the translation is complete. The development team will then add the new language to the platform.","title":"Adding a New Language"},{"location":"general/contribute/translation/#improving-existing-translations","text":"To improve existing translations, follow the same steps as above, but focus on refining and enhancing the current language packs. Your contributions will be reviewed and, once approved, will be automatically deployed to the production environment.","title":"Improving Existing Translations"},{"location":"general/contribute/translation/#translation-delivery","text":"Deploying translations to the production environment typically takes about a week. For on-premise installations and mobile apps, this timing depends on their respective release schedules. Once your translation work is complete, notify your Navixy representative to ensure your contributions are integrated into the platform.","title":"Translation Delivery"},{"location":"panel-api/getting-started/","text":"Navixy Panel API \u00b6 The structure of Panel API (aka Administration API) \u2013 request paths, response and error formats \u2013 is the same as for user API, so we highly recommend reading Backend API: getting started Two main differences are authorization system and request paths . Panel API base URL \u00b6 Panel API resides in panel/ subsection of API URL. So you can determine URL to API calls like this: https://api.eu.navixy.com/v2/panel/ for European Navixy ServerMate platform. https://api.us.navixy.com/v2/panel/ for American Navixy ServerMate platform. https://api.your_domain/panel/ for the self-hosted (On-Premise) installations. For example, to make account/auth API call in Navixy ServerMate, you should use the URL: https://api.navixy.com/v2/panel/account/auth Authorization \u00b6 In order to authorize, you should make a GET or POST request to /account/auth/ with login (your administration panel login) and password (its password), which returns JSON object, containing hash (hexadecimal unique string) of the newly created Panel API session, which you should use in other Panel API calls. Please note that you cannot use Panel API session hash in user API or vice versa. You must keep in mind that string type containing any symbols except ASCII codes from 32 to 127 must be URL encoded before transfer. For example, in on-premise installations, there is a default user with login admin and password admin . You can authorize with it like this (all HTTP request examples are made using curl *nix utility): POST $ curl - d 'login=admin&password=admin' \\ - X POST http :// api . domain . com / v2 / panel / account / auth / GET This method is not recommended. Just for example: $ curl http :// api . domain . com / panel / v2 / account / auth / ? login = admin & password = admin And you'll get answer like this: { \"hash\" : \"1dc2b813769d846c2c15030884948117\" , \"success\" : true , \"permissions\" : { ... } } The value returned in hash field (in this example it is 1dc2b813769d846c2c15030884948117 ) should be saved for further use. If API call completes successfully, the HTTP response code is 200 OK , and success field in returned JSON is equal to true . If there is any error, for example, wrong credentials were used, HTTP response code differs from 200, success field is false , and status field contains the description of the error. For example: { \"success\" : false , \"status\" : { \"code\" : 12 , \"description\" : \"Dealer not found\" } } The \"description\" field is just a human-readable hint, you should not check its contents programmatically as it may change in the future. For more info, please see account/auth . Using session hash \u00b6 After successful authorization, you can make other Panel API calls. You should always pass the session hash you obtained earlier as the hash parameter. This parameter is not listed in parameters list of every API call, but still required by default. For example, to list first ten users belonging to your system account, you can use the following Panel API call (the hash is from previous example): $ curl - X POST 'http://api.domain.com/v2/panel/user/list/' \\ - d 'hash=1dc2b813769d846c2c15030884948117&limit=10' Session expiration \u00b6 Each session, and its associated hash key, has a limited lifespan that defaults to 24 hours. This is a change from the previous setting of 30 days, implemented for improved security. You need to periodically obtain a new hash key. If you attempt to make a Panel API call with an expired session hash, you will receive an error: { \"success\" : false , \"status\" : { \"code\" : 4 , \"description\" : \"User not found or session ended\" } } In this case, just obtain new hash using account/auth . How to securely share panel's credentials \u00b6 To share access to the admin panel, and at the same time not to worry about data security, we recommend contacting the technical support team to create a technical panel account. Provide the email address for which the technical account will be created. You will receive a login and password for the account. The possibilities of tech account: Add new users Modify data of current users Add new trackers Clone current trackers Change owner of a tracker Change tracker data plan Analyze incoming data with the air console Technicians are not allowed: Delete users Remove trackers Add, change, delete plans Change platform settings Panel API Permissions \u00b6 Every call to panel api requires a set (possibly empty) of permissions. To determine if user is allowed to execute api call, user's permissions is compared with call's required permissions. If user does not have at least one required permission, the call is not executed and error \"Operation not permitted\" is returned. Each permission is defined as a pair of category (e.g. trackers ) and operation (e.g. read ). A set of permissions within one category is often grouped as in the following example: trackers : create, read This defines two permissions: ( trackers , create ) and ( trackers , read ). List of all possible categories and operations: accounting : generate activation_code : create, read, update base : get_dealer_info notification_settings : read, update service\\_settings : read, update tariffs : create, read, update trackers : create, read, update, delete transactions : create, read, update users : create, read, update, delete user\\_sessions : create sms : create tracker\\_bundles : read, update","title":"Getting Started"},{"location":"panel-api/getting-started/#navixy-panel-api","text":"The structure of Panel API (aka Administration API) \u2013 request paths, response and error formats \u2013 is the same as for user API, so we highly recommend reading Backend API: getting started Two main differences are authorization system and request paths .","title":"Navixy Panel API"},{"location":"panel-api/getting-started/#panel-api-base-url","text":"Panel API resides in panel/ subsection of API URL. So you can determine URL to API calls like this: https://api.eu.navixy.com/v2/panel/ for European Navixy ServerMate platform. https://api.us.navixy.com/v2/panel/ for American Navixy ServerMate platform. https://api.your_domain/panel/ for the self-hosted (On-Premise) installations. For example, to make account/auth API call in Navixy ServerMate, you should use the URL: https://api.navixy.com/v2/panel/account/auth","title":"Panel API base URL"},{"location":"panel-api/getting-started/#authorization","text":"In order to authorize, you should make a GET or POST request to /account/auth/ with login (your administration panel login) and password (its password), which returns JSON object, containing hash (hexadecimal unique string) of the newly created Panel API session, which you should use in other Panel API calls. Please note that you cannot use Panel API session hash in user API or vice versa. You must keep in mind that string type containing any symbols except ASCII codes from 32 to 127 must be URL encoded before transfer. For example, in on-premise installations, there is a default user with login admin and password admin . You can authorize with it like this (all HTTP request examples are made using curl *nix utility): POST $ curl - d 'login=admin&password=admin' \\ - X POST http :// api . domain . com / v2 / panel / account / auth / GET This method is not recommended. Just for example: $ curl http :// api . domain . com / panel / v2 / account / auth / ? login = admin & password = admin And you'll get answer like this: { \"hash\" : \"1dc2b813769d846c2c15030884948117\" , \"success\" : true , \"permissions\" : { ... } } The value returned in hash field (in this example it is 1dc2b813769d846c2c15030884948117 ) should be saved for further use. If API call completes successfully, the HTTP response code is 200 OK , and success field in returned JSON is equal to true . If there is any error, for example, wrong credentials were used, HTTP response code differs from 200, success field is false , and status field contains the description of the error. For example: { \"success\" : false , \"status\" : { \"code\" : 12 , \"description\" : \"Dealer not found\" } } The \"description\" field is just a human-readable hint, you should not check its contents programmatically as it may change in the future. For more info, please see account/auth .","title":"Authorization"},{"location":"panel-api/getting-started/#using-session-hash","text":"After successful authorization, you can make other Panel API calls. You should always pass the session hash you obtained earlier as the hash parameter. This parameter is not listed in parameters list of every API call, but still required by default. For example, to list first ten users belonging to your system account, you can use the following Panel API call (the hash is from previous example): $ curl - X POST 'http://api.domain.com/v2/panel/user/list/' \\ - d 'hash=1dc2b813769d846c2c15030884948117&limit=10'","title":"Using session hash"},{"location":"panel-api/getting-started/#session-expiration","text":"Each session, and its associated hash key, has a limited lifespan that defaults to 24 hours. This is a change from the previous setting of 30 days, implemented for improved security. You need to periodically obtain a new hash key. If you attempt to make a Panel API call with an expired session hash, you will receive an error: { \"success\" : false , \"status\" : { \"code\" : 4 , \"description\" : \"User not found or session ended\" } } In this case, just obtain new hash using account/auth .","title":"Session expiration"},{"location":"panel-api/getting-started/#how-to-securely-share-panels-credentials","text":"To share access to the admin panel, and at the same time not to worry about data security, we recommend contacting the technical support team to create a technical panel account. Provide the email address for which the technical account will be created. You will receive a login and password for the account. The possibilities of tech account: Add new users Modify data of current users Add new trackers Clone current trackers Change owner of a tracker Change tracker data plan Analyze incoming data with the air console Technicians are not allowed: Delete users Remove trackers Add, change, delete plans Change platform settings","title":"How to securely share panel's credentials"},{"location":"panel-api/getting-started/#panel-api-permissions","text":"Every call to panel api requires a set (possibly empty) of permissions. To determine if user is allowed to execute api call, user's permissions is compared with call's required permissions. If user does not have at least one required permission, the call is not executed and error \"Operation not permitted\" is returned. Each permission is defined as a pair of category (e.g. trackers ) and operation (e.g. read ). A set of permissions within one category is often grouped as in the following example: trackers : create, read This defines two permissions: ( trackers , create ) and ( trackers , read ). List of all possible categories and operations: accounting : generate activation_code : create, read, update base : get_dealer_info notification_settings : read, update service\\_settings : read, update tariffs : create, read, update trackers : create, read, update, delete transactions : create, read, update users : create, read, update, delete user\\_sessions : create sms : create tracker\\_bundles : read, update","title":"Panel API Permissions"},{"location":"panel-api/resources/account/","text":"Account \u00b6 API calls on getting the panel's hash, getting permissions and logout. API actions \u00b6 API path: panel/account . auth \u00b6 Does not require session hash and does not need any permissions. Auths dealer in a panel (planned also for dealer's \"sub-users\") and gets hash. Parameters \u00b6 name description type login A panel's login (number). string password A panel's password. string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/account/auth' \\ -H 'Content-Type: application/json' \\ -d '{\"login\": \"20410\", \"password\": \"12f@14Y$\"}' Response \u00b6 { \"hash\" : \"fa7bf873fab9333144e171372a321b06\" , \"success\" : true , \"permissions\" : { \"base\" : [ \"get_dealer_info\" ], \"service_settings\" : [ \"read\" , \"update\" ], \"notification_settings\" : [ \"read\" , \"update\" ], \"trackers\" : [ \"corrupt\" , \"create\" , \"delete\" , \"global\" , \"read\" , \"report\" , \"update\" ], \"users\" : [ \"corrupt\" , \"create\" , \"read\" , \"update\" ], \"user_sessions\" : [ \"create\" ], \"tariffs\" : [ \"create\" , \"read\" , \"update\" ], \"transactions\" : [ \"create\" , \"read\" ], \"activation_code\" : [ \"read\" , \"update\" ], \"password\" : [ \"update\" ], \"email_gateways\" : [ \"create\" , \"delete\" , \"read\" , \"send_email\" , \"update\" ], \"subpaas\" : [ \"create\" , \"delete\" , \"read\" , \"update\" ] } } hash - string. A session key. permissions - object representing permissions for the panel. See panel account permissions . Errors \u00b6 11 - Access denied - if dealer blocked. 12 - Dealer not found. get_permissions \u00b6 Returns permissions for current panel session. Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/account/get_permissions' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/account/get_permissions?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"permissions\" : { \"base\" : [ \"get_dealer_info\" ], \"service_settings\" : [ \"read\" , \"update\" ], \"notification_settings\" : [ \"read\" , \"update\" ], \"trackers\" : [ \"corrupt\" , \"create\" , \"delete\" , \"global\" , \"read\" , \"report\" , \"update\" ], \"users\" : [ \"corrupt\" , \"create\" , \"read\" , \"update\" ], \"user_sessions\" : [ \"create\" ], \"tariffs\" : [ \"create\" , \"read\" , \"update\" ], \"transactions\" : [ \"create\" , \"read\" ], \"activation_code\" : [ \"read\" , \"update\" ], \"password\" : [ \"update\" ], \"email_gateways\" : [ \"create\" , \"delete\" , \"read\" , \"send_email\" , \"update\" ], \"subpaas\" : [ \"create\" , \"delete\" , \"read\" , \"update\" ] } } Errors \u00b6 General types only. logout \u00b6 Ends the current session. Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/account/logout' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/account/logout?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true } Errors \u00b6 General types only.","title":"Account"},{"location":"panel-api/resources/account/#account","text":"API calls on getting the panel's hash, getting permissions and logout.","title":"Account"},{"location":"panel-api/resources/account/#api-actions","text":"API path: panel/account .","title":"API actions"},{"location":"panel-api/resources/account/#auth","text":"Does not require session hash and does not need any permissions. Auths dealer in a panel (planned also for dealer's \"sub-users\") and gets hash.","title":"auth"},{"location":"panel-api/resources/account/#get_permissions","text":"Returns permissions for current panel session.","title":"get_permissions"},{"location":"panel-api/resources/account/#logout","text":"Ends the current session.","title":"logout"},{"location":"panel-api/resources/equipment/","text":"Equipment \u00b6 API call to get the list of all available equipment. Equipment object \u00b6 { \"equip_id\" : 33 , \"model_name\" : \"SPT10 SB\" , \"model_code\" : \"pt10\" , \"vendor\" : \"3. NAVIXY S Series (personal)\" , \"name\" : \"NAVIXY S10\" } equip_id - int. Equipment ID. model_name - string. A model's original name. model_code - string. A model code which should be inserted to tracker bundles. vendor - string. A vendor's name. name - string. A model's name used by a vendor. API actions \u00b6 API path: panel/equipment . list \u00b6 Returns list of all equipment which can be assigned to tracker bundles. required permissions : tracker_bundles: \"read\" . Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/equipment/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/equipment/list?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"list\" : [{ \"equip_id\" : 33 , \"model_name\" : \"SPT10 SB\" , \"model_code\" : \"pt10\" , \"vendor\" : \"3. NAVIXY S Series (personal)\" , \"name\" : \"NAVIXY S10\" }] } Errors \u00b6 General types only.","title":"Equipment"},{"location":"panel-api/resources/equipment/#equipment","text":"API call to get the list of all available equipment.","title":"Equipment"},{"location":"panel-api/resources/equipment/#equipment-object","text":"{ \"equip_id\" : 33 , \"model_name\" : \"SPT10 SB\" , \"model_code\" : \"pt10\" , \"vendor\" : \"3. NAVIXY S Series (personal)\" , \"name\" : \"NAVIXY S10\" } equip_id - int. Equipment ID. model_name - string. A model's original name. model_code - string. A model code which should be inserted to tracker bundles. vendor - string. A vendor's name. name - string. A model's name used by a vendor.","title":"Equipment object"},{"location":"panel-api/resources/equipment/#api-actions","text":"API path: panel/equipment .","title":"API actions"},{"location":"panel-api/resources/equipment/#list","text":"Returns list of all equipment which can be assigned to tracker bundles. required permissions : tracker_bundles: \"read\" .","title":"list"},{"location":"panel-api/resources/gateways/","text":"Gateways \u00b6 Information about email gateway objects. Email gateway can be owned by a dealer or leased from platform owner. Email gateway object \u00b6 Own email gateway: Now supported only SMTP provider. { \"id\" : 2 , \"leasable\" : false , \"label\" : \"Paas gate\" , \"provider\" : \"smtp\" , \"params\" : { \"default_from_address\" : \"no-reply@domain.tld\" , \"mail.smtp.user\" : null , \"mail.smtp.password\" : null , \"mail.smtp.host\" : \"localhost\" , \"mail.smtp.port\" : 25 , \"mail.smtp.ssl.port\" : 465 , \"mail.smtp.ssl.trust_all_hosts\" : false , \"mail.smtp.auth\" : true , \"mail.debug\" : false , \"mail.smtp.starttls.enable\" : false , \"mail.smtp.starttls.required\" : false , \"mail.smtp.use_ssl\" : false , \"mail.smtp.timeout\" : 60000 , \"mail.smtp.connectiontimeout\" : 60000 , \"mail.transport.protocol\" : \"smtp\" } } Leasable email gateway: { \"id\" : 1 , \"label\" : \"Platform gate\" , \"default_from_address\" : \"no-reply@domain.tld\" } API actions \u00b6 API path: panel/gateways/email . list \u00b6 Gets list of available email gateways for the panel. required permissions : email_gateways: \"read\" . Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/gateways/email/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/gateways/email/list?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"bound_gateway\" : 2 , \"own\" : [{ \"id\" : 1 , \"leasable\" : false , \"label\" : \"Paas gate\" , \"provider\" : \"smtp\" , \"params\" : { \"default_from_address\" : \"no-reply@domain.tld\" , \"mail.smtp.user\" : null , \"mail.smtp.password\" : null , \"mail.smtp.host\" : \"localhost\" , \"mail.smtp.port\" : 25 , \"mail.smtp.ssl.port\" : 465 , \"mail.smtp.ssl.trust_all_hosts\" : false , \"mail.smtp.auth\" : true , \"mail.debug\" : false , \"mail.smtp.starttls.enable\" : false , \"mail.smtp.starttls.required\" : false , \"mail.smtp.use_ssl\" : false , \"mail.smtp.timeout\" : 60000 , \"mail.smtp.connectiontimeout\" : 60000 , \"mail.transport.protocol\" : \"smtp\" } }], \"leasable\" : [ { \"id\" : 2 , \"label\" : \"Default\" , \"provider\" : \"mandrill_smtp\" , \"default_from_address\" : \"no-reply@x-gpsmail.com\" } ] } Errors \u00b6 General types only.","title":"Gateways"},{"location":"panel-api/resources/gateways/#gateways","text":"Information about email gateway objects. Email gateway can be owned by a dealer or leased from platform owner.","title":"Gateways"},{"location":"panel-api/resources/gateways/#email-gateway-object","text":"Own email gateway: Now supported only SMTP provider. { \"id\" : 2 , \"leasable\" : false , \"label\" : \"Paas gate\" , \"provider\" : \"smtp\" , \"params\" : { \"default_from_address\" : \"no-reply@domain.tld\" , \"mail.smtp.user\" : null , \"mail.smtp.password\" : null , \"mail.smtp.host\" : \"localhost\" , \"mail.smtp.port\" : 25 , \"mail.smtp.ssl.port\" : 465 , \"mail.smtp.ssl.trust_all_hosts\" : false , \"mail.smtp.auth\" : true , \"mail.debug\" : false , \"mail.smtp.starttls.enable\" : false , \"mail.smtp.starttls.required\" : false , \"mail.smtp.use_ssl\" : false , \"mail.smtp.timeout\" : 60000 , \"mail.smtp.connectiontimeout\" : 60000 , \"mail.transport.protocol\" : \"smtp\" } } Leasable email gateway: { \"id\" : 1 , \"label\" : \"Platform gate\" , \"default_from_address\" : \"no-reply@domain.tld\" }","title":"Email gateway object"},{"location":"panel-api/resources/gateways/#api-actions","text":"API path: panel/gateways/email .","title":"API actions"},{"location":"panel-api/resources/gateways/#list","text":"Gets list of available email gateways for the panel. required permissions : email_gateways: \"read\" .","title":"list"},{"location":"panel-api/resources/order/","text":"Order \u00b6 API call to read the order by its ID. API actions \u00b6 API path: panel/order . read \u00b6 Reads order by specified ID. required permissions : tracker_bundles: \"read\" . Parameters \u00b6 name description type order_id Order ID. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/order/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"order_id\": 12341}' HTTP GET https://api.navixy.com/v2/panel/order/read?hash=fa7bf873fab9333144e171372a321b06&order_id=12341 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 3 , \"user_id\" : 11346 , \"seller_id\" : 1 , \"amount\" : 1 , \"sum\" : 34300.00 , \"type\" : \"equip\" , \"payer\" : \"Leonard Bernstein\" , \"recipient\" : \"Leonard Bernstein\" , \"contacts\" : \"\" , \"place\" : \"111111 Leipzig, Leipzig Tieckstrasse, 2\" , \"comment\" : \"\" , \"creation_time\" : \"2009-12-10 01:00:36\" , \"status\" : \"created\" , \"bundles\" : [ { \"id\" : 2 , \"equip_id\" : 117 , \"equip_vendor\" : \"Trackers of different manufacturers\" , \"equip_name\" : \"GPS/GSM terminal Teltonika FM1100\" , \"equip_model\" : \"FM1200\" , \"model_code\" : \"gv500\" , \"imei\" : \"355085050027285\" , \"iccid\" : \"89701010064407635201\" , \"assign_time\" : \"2014-12-15 13:42:54\" , \"order_id\" : 3 } ] } } Errors \u00b6 201 \u2013 Not found in the database - if specified order does not exist.","title":"Order"},{"location":"panel-api/resources/order/#order","text":"API call to read the order by its ID.","title":"Order"},{"location":"panel-api/resources/order/#api-actions","text":"API path: panel/order .","title":"API actions"},{"location":"panel-api/resources/order/#read","text":"Reads order by specified ID. required permissions : tracker_bundles: \"read\" .","title":"read"},{"location":"panel-api/resources/tariff/","text":"Plans \u00b6 API calls for interaction with user plans. Plan object \u00b6 { \"id\" : 12163 , \"name\" : \"Premium\" , \"group_id\" : 3 , \"active\" : true , \"type\" : \"monthly\" , \"price\" : 12.55 , \"early_change_price\" : 23.0 , \"device_limit\" : 2000 , \"has_reports\" : true , \"store_period\" : \"1y\" , \"device_type\" : \"tracker\" , \"proportional_charge\" : false , \"service_prices\" : { \"incoming_sms\" : 0.3 , \"outgoing_sms\" : 0.3 , \"service_sms\" : 0.2 , \"phone_call\" : 0.6 , \"traffic\" : 0.09 } } id - int. Plan ID. name - string. Plan name. group_id - int. Plan group number. active - boolean. true if user allowed change his current plan to this one. type - enum . Type of plan. Can be \"monthly\" or \"activeday\" (for \"tracker\" device_type only). price - double. Plan subscription price (usually per month). early_change_price - double. Price of change plan from current to another. With the last change in less than 30 days ( tariff.freeze.period config option). When not passed or null user cannot change plan frequently. device_limit - int. A maximum limit of devices per user. Not used for cameras and sockets. has_reports - boolean. If true the plan has reports. store_period - string. Data storage period, e.g. \"2h\" (2 hours), \"3d\" (3 days), \"5m\" (5 months), \"1y\" (one year). device_type - enum . Device type. Can be \"tracker\", \"camera\" or \"socket\". proportional_charge - boolean. true if monthly fee will be smaller when device was blocked during month (for \"monthly\" tariffs only). service_prices - JSON object with service prices. incoming_sms - double. Incoming sms price. outgoing_sms - double. Outgoing sms price. service_sms - double. Service sms price. phone_call - double. Phone voice notification sms price. traffic - double. Traffic price per 1 MB. API actions \u00b6 API path: panel/tariff . create \u00b6 Creates a new plan. required permissions : \"tariffs\": \"create\" . Parameters \u00b6 name description type tariff Plan object without ID field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tariff/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tariff\": {\"name\": \"Premium\", \"group_id\": 3, \"active\": true, \"type\": \"monthly\", \"price\": 12.55, \"early_change_price\": 23.0, \"device_limit\": 2000, \"has_reports\": true, \"store_period\": \"1y\", \"device_type\": \"tracker\", \"proportional_charge\": false, \"service_prices\": {\"incoming_sms\": 0.3, \"outgoing_sms\": 0.3, \"service_sms\": 0.2, \"phone_call\": 0.6, \"traffic\": 0.09}}}' Response \u00b6 { \"success\" : true , \"id\" : 123568 } id - int. An ID of the created plan. Errors \u00b6 201 \u2013 Not found in the database - if specified plan does not exist or belongs to different dealer. 214 \u2013 Requested operation or parameters are not supported by the device - when device_type does not support specified plan type . 244 \u2013 Duplicate entity label - if there's another dealer's plan with the same name . list \u00b6 Returns list of all plans belonging to dealer. If \"filter\" is used, entities will be returned only if filter string contains one of the following fields: id , name , price , device_type . required permissions : \"tariffs\": \"read\" . Parameters \u00b6 name description type device_type Optional. Filter by device type. One of \"tracker\", \"camera\" or \"socket\". enum filter Optional. Text filter. string order_by Optional. List ordering. One of: id , name , device_type , group_id , price . string ascending Optional. Default is true . If true , ordering will be ascending, descending otherwise. boolean offset Optional. Default is 0 . Starting offset, used for pagination. int limit Optional. Max number of records to return, used for pagination. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tariff/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/tariff/list?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 12163 , \"name\" : \"Premium\" , \"group_id\" : 3 , \"active\" : true , \"type\" : \"monthly\" , \"price\" : 12.55 , \"early_change_price\" : 23.0 , \"device_limit\" : 2000 , \"has_reports\" : true , \"store_period\" : \"1y\" , \"device_type\" : \"tracker\" , \"proportional_charge\" : false , \"service_prices\" : { \"incoming_sms\" : 0.3 , \"outgoing_sms\" : 0.3 , \"service_sms\" : 0.2 , \"phone_call\" : 0.6 , \"traffic\" : 0.09 } }], \"wholesale_service_prices\" : { \"incoming_sms\" : 0.27 , \"outgoing_sms\" : 0.27 , \"service_sms\" : 0.17 , \"phone_call\" : 0.55 , \"traffic\" : 0.05 }, \"count\" : 42 } list - objects array. List of plans. See plan object here . wholesale_service_prices - JSON object. Wholesale prices for all services (what dealer will pay per sms, per call, per mb). count - int. Total number of records (ignoring offset and limit). read \u00b6 Returns plan with specified ID. required permissions : \"tariffs\": \"read\" . Parameters \u00b6 name description type tariff_id Tariff ID to read. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tariff/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tariff_id\": 12163}' HTTP GET https://api.navixy.com/v2/panel/tariff/read?hash=fa7bf873fab9333144e171372a321b06&tariff_id=12163 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 12163 , \"name\" : \"Premium\" , \"group_id\" : 3 , \"active\" : true , \"type\" : \"monthly\" , \"price\" : 12.55 , \"early_change_price\" : 23.0 , \"device_limit\" : 2000 , \"has_reports\" : true , \"store_period\" : \"1y\" , \"device_type\" : \"tracker\" , \"proportional_charge\" : false , \"service_prices\" : { \"incoming_sms\" : 0.3 , \"outgoing_sms\" : 0.3 , \"service_sms\" : 0.2 , \"phone_call\" : 0.6 , \"traffic\" : 0.09 } } } value - JSON object. See plan object here . Errors \u00b6 201 \u2013 Not found in the database - if specified plan does not exist or belongs to different dealer. update \u00b6 Updates existing plan. required permissions : tariffs: \"update\" . Parameters \u00b6 name description type tariff Tariff object without device_type field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tariff/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tariff\": {\"id\": 12345, \"name\": \"Premium\", \"group_id\": 3, \"active\": true, \"type\": \"monthly\", \"price\": 12.55, \"early_change_price\": 23.0, \"device_limit\": 2000, \"has_reports\": true, \"store_period\": \"1y\", \"proportional_charge\": false, \"service_prices\": {\"incoming_sms\": 0.3, \"outgoing_sms\": 0.3, \"service_sms\": 0.2, \"phone_call\": 0.6, \"traffic\": 0.09}}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if specified plan does not exist or belongs to different dealer. 214 \u2013 Requested operation or parameters are not supported by the device when device_type does not support specified plan type . 244 \u2013 Duplicate entity label - if there's another dealer's plan with the same name . defaults object \u00b6 { \"tariff_id\" : 1234 , \"activation_bonus\" : 1.1 , \"free_days\" : 14 , \"free_days_device_limit\" : 3 } tariff_id - int. An ID of the default plan for this device type. activation_bonus - double. Activation bonus - money added to bonus balance upon device registration. free_days - int. Amount of free (without a fee) days after device registration. free_days_device_limit - int. A maximum number of activated user's devices with free period (null means no limit). defaults/read \u00b6 Returns current plan defaults for trackers and cameras. required permissions : tariffs: \"read\" . Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tariff/defaults/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/tariff/defaults/read?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"tracker\" : { \"tariff_id\" : 1234 , \"activation_bonus\" : 1.1 , \"free_days\" : 14 , \"free_days_device_limit\" : 3 }, \"camera\" : { \"tariff_id\" : 1289 , \"activation_bonus\" : 0.5 , \"free_days\" : 7 , \"free_days_device_limit\" : 3 } } Errors \u00b6 General types only. defaults/update \u00b6 Updates current plan defaults for trackers and cameras. required permissions : tariffs: \"update\" . Parameters \u00b6 name description type tracker Defaults object with ID field. JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tariff/defaults/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tracker\": {\"tariff_id\": 1234, \"activation_bonus\": 1.1, \"free_days\": 14, \"free_days_device_limit\": 3}}' Response \u00b6 { \"success\" : true } Errors \u00b6 239 \u2013 New plan doesn't exist - if plan with specified ID does not exist. 237 \u2013 Invalid plan - if new plan has incompatible device type.","title":"Plan"},{"location":"panel-api/resources/tariff/#plans","text":"API calls for interaction with user plans.","title":"Plans"},{"location":"panel-api/resources/tariff/#plan-object","text":"{ \"id\" : 12163 , \"name\" : \"Premium\" , \"group_id\" : 3 , \"active\" : true , \"type\" : \"monthly\" , \"price\" : 12.55 , \"early_change_price\" : 23.0 , \"device_limit\" : 2000 , \"has_reports\" : true , \"store_period\" : \"1y\" , \"device_type\" : \"tracker\" , \"proportional_charge\" : false , \"service_prices\" : { \"incoming_sms\" : 0.3 , \"outgoing_sms\" : 0.3 , \"service_sms\" : 0.2 , \"phone_call\" : 0.6 , \"traffic\" : 0.09 } } id - int. Plan ID. name - string. Plan name. group_id - int. Plan group number. active - boolean. true if user allowed change his current plan to this one. type - enum . Type of plan. Can be \"monthly\" or \"activeday\" (for \"tracker\" device_type only). price - double. Plan subscription price (usually per month). early_change_price - double. Price of change plan from current to another. With the last change in less than 30 days ( tariff.freeze.period config option). When not passed or null user cannot change plan frequently. device_limit - int. A maximum limit of devices per user. Not used for cameras and sockets. has_reports - boolean. If true the plan has reports. store_period - string. Data storage period, e.g. \"2h\" (2 hours), \"3d\" (3 days), \"5m\" (5 months), \"1y\" (one year). device_type - enum . Device type. Can be \"tracker\", \"camera\" or \"socket\". proportional_charge - boolean. true if monthly fee will be smaller when device was blocked during month (for \"monthly\" tariffs only). service_prices - JSON object with service prices. incoming_sms - double. Incoming sms price. outgoing_sms - double. Outgoing sms price. service_sms - double. Service sms price. phone_call - double. Phone voice notification sms price. traffic - double. Traffic price per 1 MB.","title":"Plan object"},{"location":"panel-api/resources/tariff/#api-actions","text":"API path: panel/tariff .","title":"API actions"},{"location":"panel-api/resources/tariff/#create","text":"Creates a new plan. required permissions : \"tariffs\": \"create\" .","title":"create"},{"location":"panel-api/resources/tariff/#list","text":"Returns list of all plans belonging to dealer. If \"filter\" is used, entities will be returned only if filter string contains one of the following fields: id , name , price , device_type . required permissions : \"tariffs\": \"read\" .","title":"list"},{"location":"panel-api/resources/tariff/#read","text":"Returns plan with specified ID. required permissions : \"tariffs\": \"read\" .","title":"read"},{"location":"panel-api/resources/tariff/#update","text":"Updates existing plan. required permissions : tariffs: \"update\" .","title":"update"},{"location":"panel-api/resources/tariff/#defaults-object","text":"{ \"tariff_id\" : 1234 , \"activation_bonus\" : 1.1 , \"free_days\" : 14 , \"free_days_device_limit\" : 3 } tariff_id - int. An ID of the default plan for this device type. activation_bonus - double. Activation bonus - money added to bonus balance upon device registration. free_days - int. Amount of free (without a fee) days after device registration. free_days_device_limit - int. A maximum number of activated user's devices with free period (null means no limit).","title":"defaults object"},{"location":"panel-api/resources/tariff/#defaultsread","text":"Returns current plan defaults for trackers and cameras. required permissions : tariffs: \"read\" .","title":"defaults/read"},{"location":"panel-api/resources/tariff/#defaultsupdate","text":"Updates current plan defaults for trackers and cameras. required permissions : tariffs: \"update\" .","title":"defaults/update"},{"location":"panel-api/resources/timezone/","text":"Timezone \u00b6 API call to get information about all supported timezones for the specified locale. API actions \u00b6 API path: panel/timezone . list \u00b6 Gets information about all supported timezones for the specified locale. Does not require authorization. Parameters \u00b6 name description type locale Locale code to set language of descriptions. enum Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/timezone/list' \\ -H 'Content-Type: application/json' \\ -d '{\"locale\": \"en\"}' HTTP GET https://api.navixy.com/v2/panel/timezone/list?locale=en Response \u00b6 { \"success\" : true , \"list\" : [{ \"zone_id\" : \"America/Tijuana\" , \"description\" : \"Tijuana\" , \"base_offset\" : -8.0 , \"dst_offset\" : 1 , \"country_code\" : \"MX\" , \"alt_ids\" : [ \"America/Ensenada\" , \"America/Santa_Isabel\" ] }] } zone_id - string. Timezone ID, which is used throughout the API. description - string. Localized description of the timezone. description - int. Base timezone offset in hours, e.g. 1 for London. May be negative. description - int. DST offset in hours. 0 if no DST rules for this timezone. description - string. ISO country code for the timezone. alt_ids - string array. List of string, optional, alternative timezone IDs. Errors \u00b6 General types only.","title":"Timezone"},{"location":"panel-api/resources/timezone/#timezone","text":"API call to get information about all supported timezones for the specified locale.","title":"Timezone"},{"location":"panel-api/resources/timezone/#api-actions","text":"API path: panel/timezone .","title":"API actions"},{"location":"panel-api/resources/timezone/#list","text":"Gets information about all supported timezones for the specified locale. Does not require authorization.","title":"list"},{"location":"panel-api/resources/tracker/","text":"Tracker \u00b6 API calls to interact with trackers in the admin panel. Tracker object \u00b6 { \"id\" : 111231 , \"avatar_file_name\" : \"avatar\" , \"clone\" : true , \"comment\" : \"Need to change SIM till next month\" , \"creation_date\" : \"2020-02-02\" , \"group_id\" : 0 , \"dealer_id\" : 20410 , \"deleted\" : false , \"label\" : \"Truck\" , \"user_id\" : 183654 , \"model_name\" : \"Teltonika FMB120\" , \"last_connection\" : \"2020-02-02 12:44\" , \"source\" : { \"id\" : 456751 , \"device_id\" : \"8624369656654\" , \"model\" : \"telfmb120\" , \"blocked\" : false , \"tariff_id\" : 13457 , \"creation_date\" : \"2020-02-02\" , \"tariff_end_date\" : \"2021-02-02\" , \"connection_status\" : \"idle\" , \"phone\" : \"79995693344\" , \"corrupted\" : true } } id - int. Tracker ID aka object_id. avatar_file_name - optional string. Passed only if present. clone - boolean. true if this tracker is clone. comment - string. Comment (description) related to the tracker. creation_date - date/time . Tracker or clone creation date. group_id - int. Tracker group ID. 0 if no group. dealer_id - int. An ID of a dealer to which this tracker (or clone) belongs to. deleted - boolean. True if tracker or clone has been marked as deleted. label - string. Tracker label. user_id - int. An ID of the user to which this tracker (or clone) belongs to. model_name - string. Human-readable tracker model name. last_connection - date/time . Time when this tracker last connected to the server (in UTC+0 timezone). source - source JSON object. id - int. Source ID. device_id - string. Source_imei. model - string. Tracker model name from \"models\" table. blocked - boolean. true if tracker has been blocked due to tariff end, etc. tariff_id - int. An ID of tracker's tariff from \"main_tariffs\" table. creation_date - date/time . Date when this tracker first registered in the system. tariff_end_date - date/time . Date of next tariff prolongation or null. connection_status - enum . Current connection status. phone - string. Phone of the device. Can be null or empty if device has no GSM module or uses bundled SIM which number hidden from the user. corrupted - boolean. true when tracker has been corrupted using /tracker/corrupt, and not passed when it is not corrupted. API actions \u00b6 API path: panel/tracker . active/history/list \u00b6 Provides information about trackers which were considered \"active\" by our PaaS billing system, on a month-by-month basis. required permissions : trackers: \"read\" . Parameters \u00b6 name description type from Start year and month for searching, e. g. \"2021-02\". year-month string to End year and month for searching. e. g. \"2021-03\". year-month string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/active/history/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"from\": \"2021-02\", \"to\": \"2021-03\"}' Response \u00b6 { \"success\" : true , \"list\" : [ { \"month\" : \"2021-02\" , \"amount\" : 1 , \"trackers\" : [ { \"tracker_id\" : 14 , \"user_id\" : 3 , \"label\" : \"test\" , \"device_id\" : \"123321\" } ] } ] } month - string. Year and month of stats entry. amount - int. overall number of active trackers during a month. trackers - A basic info about active trackers Errors \u00b6 211 \u2013 Requested time span is too big. bundle/assign \u00b6 Assign bundle to specified ICCID. required permissions : tracker_bundles: \"update\" . Parameters \u00b6 name description type bundle_id ID of the bundle. int iccid Must consist of printable characters and have length between 3 and 20. string Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/bundle/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"bundle_id\": 1241, \"iccid\": \"78974217758\"}' HTTP GET https://api.navixy.com/v2/panel/tracker/bundle/assign?hash=fa7bf873fab9333144e171372a321b06&bundle_id=1241&iccid=78974217758 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if bundle not found. 208 \u2013 Device blocked - if SIM card blocked. 223 \u2013 Phone number already in use - if SIM card already in use. 226 \u2013 Wrong ICCID - if SIM card not found. 247 \u2013 Entity already exists - if ICCID is already exist. 250 \u2013 Not allowed for deleted devices - if SIM card deleted. bundle/order/assign \u00b6 Assigns bundle to specified order ID. required permissions : tracker_bundles: \"update\" . Parameters \u00b6 name description type bundle_id ID of a bundle. int order_id ID of a bundle. Nullable. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/bundle/order/assign' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"bundle_id\": 1241, \"order_id\": 78974217758}' HTTP GET https://api.navixy.com/v2/panel/tracker/bundle/order/assign?hash=fa7bf873fab9333144e171372a321b06&bundle_id=1241&order_id=78974217758 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database if bundle not found. bundle/import \u00b6 Adds multiple bundles at once. required permissions : tracker_bundles: \"create\" . Parameters \u00b6 name description type imeis Array of IMEI numbers. string array equip_id ID of equipment to associate with all specified IMEIs. int factory_preset Whether this device was preconfigured on factory or not. boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/bundle/import' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"imeis\": [\"896654523569742\", \"754854\"], \"equip_id\": 13785, \"factory_preset\": false}' HTTP GET https://api.navixy.com/v2/panel/tracker/bundle/import?hash=fa7bf873fab9333144e171372a321b06&bundle_id=1241&order_id=78974217758&factory_preset=false Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if bundle not found. 247 \u2013 Entity already exists - if one of IMEIs is already exist. 204 \u2013 Entity not found - if there is no equipment with specified equip_id. bundle/list \u00b6 Gets list of all bundles. If filter is used, entities will be returned only if filter string contained within one of the following fields: id , imei , model_code , iccid , assign_time . required permissions : tracker_bundles: \"read\" . Parameters \u00b6 name description type clones_filter Optional. Possible values: exclude_clones (filter out \"cloned\" trackers from results), only_include_clones (results shall contain only \"cloned\" trackers) or not_set . enum filter Optional. Text filter string. string order_by Optional. Specify list ordering. Can be one of id , label , status , model , device_id , phone , creation_date , user_id , comment . Default order by id . enum ascending If true , ordering will be ascending, descending otherwise. Default is true . boolean offset Optional. Starting offset, used for pagination. Default is 0 . int limit Optional. Max number of records to return, used for pagination. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/bundle/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/tracker/bundle/list?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"list\" : [ <bu n dle> ], \"count\" : 42 } list - array of bundle objects. count - int. Total number of records (ignoring offset and limit). Errors \u00b6 201 \u2013 Not found in the database - if user_id or tariff_id specified but was not found. bundle/read \u00b6 Returns the bundle object with the specified imei. required permissions : tracker_bundles: \"read\" . Parameters \u00b6 name description type imei Device's IMEI. string Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/bundle/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"imei\": \"835664527777452\"}' HTTP GET https://api.navixy.com/v2/panel/tracker/bundle/read?hash=fa7bf873fab9333144e171372a321b06&imei=835664527777452 Response \u00b6 { \"success\" : true , \"value\" : <bu n dle> } Errors \u00b6 201 \u2013 Not found in the database - if bundle not found. bundle/update \u00b6 Assign specified equipment to bundle. required permissions : tracker_bundles: \"update\" . Parameters \u00b6 name description type bundle_id ID of the bundle. int equip_id Valid equipment ID. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/bundle/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"bundle_id\": 13457, \"equip_id\": 35468}' HTTP GET https://api.navixy.com/v2/panel/tracker/bundle/update?hash=fa7bf873fab9333144e171372a321b06&bundle_id=13457&equip_id=35468 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if bundle not found. 204 \u2013 Entity not found - if there is no equipment with specified equip_id . clone \u00b6 Creates a clone of the existing non-clone tracker. The method allows cloning from and to a subpaas's user account that is in the admin account hierarchy. Cloning from a user of one subpaas to another user of another subpaas in the same hierarchy is also possible. required permissions : trackers: \"create\" . Parameters \u00b6 name description type tracker_id ID of the tracker. Tracker must belong to authorized dealer. int label User-defined label for clone, e.g. \"Courier\". Must consist of printable characters and have length between 1 and 60. string user_id ID of the user who will become the owner of the clone. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/clone' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tracker_id\": 134537, \"user_id\": 354468, \"label\": \"Courier\"}' HTTP GET https://api.navixy.com/v2/panel/tracker/clone?hash=fa7bf873fab9333144e171372a321b06&tracker_id=134537&user_id=354468&label=Courier Response \u00b6 { \"success\" : true , \"id\" : 3947 } id - int. An ID of the created clone. Errors \u00b6 219 - Not allowed for clones of the device \u2013 when source tracker is clone itself. 201 - Not found in the database \u2013 when specified tracker_id not found. 246 - Invalid user ID \u2013 when user ID is same as source tracker's owner id, or it does not exist/belong to authorized dealer. 247 - Entity already exists \u2013 if destination user already has a clone of this tracker. 252 - Device already corrupted \u2013 when tracker's source corrupted. console/connect \u00b6 Returns auth token for connection to tracker command console. required permissions : trackers: \"update\" . Parameters \u00b6 name description type tracker_id ID of a tracker. Tracker must belong to authorized dealer. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/console/connect' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tracker_id\": 134537}' HTTP GET https://api.navixy.com/v2/panel/tracker/console/connect?hash=fa7bf873fab9333144e171372a321b06&tracker_id=134537 Response \u00b6 { \"success\" : true , \"key\" : \"6ad7490d4ec7f600ef10d4db41584980cd3ac230\" , \"timestamp\" : 1399957326 } key - string. A key which is used to connect to console. timestamp - int. A timestamp which is used to connect to console. Establish WS connection with a URL: wss://ws.navixy.com/console?device=<device_id>&key=<key>&timestamp=<timestamp>&dealer_id=<dealer_id> JSON objects come in the next text frames: { \"data\" : [ [ \"Time\" , \"2020-06-09 10:02:37.0\" ], [ \"Location valid\" , \"yes\" ], [ \"Latitude\" , \"-33.4595716\" ], [ \"Longitude\" , \"-70.7805233\" ], [ \"Speed\" , \"0\" ], [ \"Heading\" , \"229\" ], [ \"Moving\" , \"false\" ], [ \"Satellites\" , \"7\" ], [ \"Hardware mileage\" , \"3707.85\" ], [ \"Mileage\" , \"3853.16\" ], [ \"Digital input status\" , \"8\" ], [ \"Analog input 1\" , \"0.004\" ], [ \"Analog input 2\" , \"0.02\" ], [ \"Digital output status\" , \"3\" ], [ \"board_voltage\" , \"11.619\" ], [ \"temp_sensor\" , \"23.0\" ], [ \"GSM Level\" , \"13\" ], [ \"GSM Operator code\" , \"73002\" ], [ \"Battery level\" , \"3.827\" ] ], \"type\" : \"status\" } Errors \u00b6 230 - Not supported for this entity type \u2013 when tracker deleted or blocked. 201 - Not found in the database \u2013 when tracker with such device_id not found. 252 - Device already corrupted \u2013 when tracker's source corrupted. corrupt \u00b6 Mark tracker as deleted and corrupt its source device_id and phone . Rename tracking table. required permissions : trackers: \"corrupt\" . Parameters \u00b6 name description type tracker_id ID of a tracker. Tracker must belong to authorized dealer. int corrupt_clones Optional. Default is true . Remove clones of the tracker for other users boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/corrupt' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tracker_id\": 134537}' HTTP GET https://api.navixy.com/v2/panel/tracker/corrupt?hash=fa7bf873fab9333144e171372a321b06&tracker_id=134537 Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if tracker not found. 219 \u2013 Not allowed for clones of the device - if source tracker is clone itself. 252 \u2013 Device already corrupted. 253 \u2013 Device has clones and corrupt_clones is false. { \"success\" : false , \"status\" : { \"code\" : 253 , \"description\" : \"Device has clones\" }, \"list\" : [ 234651 ] } list - int array. Clones tracker_ids list. batch_clone \u00b6 Creates clones from the specified set of existing non-clone trackers. The following actions are allowed within the same admin account hierarchy: Cloning from and to a subpaas's user account Cloning from a user of one subpaas to another user of another subpaas Cloning in a single operation from users that belong to different subpaas accounts The maximum number of trackers to clone per operation is 1000. Labels from the original trackers are preserved. To clone trackers across the hierarchy, use the master admin panel's hash. required permissions : trackers: \"create\" . name description type tracker_ids Tracker ID list. Each of these trackers must not be a clone and must be accessible to the target user. int array user_id Target user ID that is accessible from the admin panel hierarchy. int ignore_existing Optional (default = false ). If true , allows performing a non-transactional cloning operation by creating clones if no clone conflicts are encountered within the operation. All already existing clones in the target user's account will not stop the operation, but the conflicting trackers from the tracker_ids will not be used in the cloning action and will be displayed in the response as ignored_trackers list. boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/batch_clone' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"user_id\": 998836, \"tracker_ids\": [134537, 458412, 99330], \"ignore_existing\": true}' HTTP GET https://api.navixy.com/v2/panel/tracker/batch_clone?hash=fa7bf873fab9333144e171372a321b06&user_id=998836&tracker_ids=[134537,458412]&ignore_existing=true Response \u00b6 name description type list Resulting list of created clone tracker IDs. int array success Action's execution status. boolean ignored_trackers The trackers from the request that were ignored during the batch_clone operation due to the target user tracker conflicts (clones already exist). int array Example: { \"ignored_trackers\" : [ 99330 ], \"list\" : [ 587469 , 587470 ], \"success\" : true } Errors \u00b6 If the operation is applied transactionally meaning the ignore_existing = false or is not specified: it completes only if \"success\": true is received for the whole batch, otherwise, the cloning process for all trackers is rolled back. Standard errors . 7 - Invalid parameters. Size must be between 1 and 1000 - triggered when the clone request exceeds 1000 trackers. 217 \u2013 List contains nonexistent entities - if at least one tracker from the request is not found. 247 \u2013 Entity already exists - if at least one of the trackers already has its clone in the target user. The error provides the list of trackers in the target user that caused the error. Example: { \"status\" : { \"code\" : 247 , \"description\" : \"Entity already exists\" }, \"list\" : [ 10191656 , 10191657 ], \"success\" : false } batch_delete_clones \u00b6 Deletes the specified set of trackers that are clones of other trackers. The action will be considered as completed successfully, even if some trackers could not be deleted. Then for the rest response will contain a description of the reasons why the deletion failed. required permissions : trackers: \"delete\" . name description type trackers Tracker ID list. Each of these trackers must be a clone and be accessible for current user. int array Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/batch_delete_clones' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"trackers\": [134537, 458412]}' HTTP GET https://api.navixy.com/v2/panel/tracker/batch_delete_clones?hash=fa7bf873fab9333144e171372a321b06&trackers=[134537, 458412] Response \u00b6 name description type success Action's execution status. boolean deleted_count Number of successfully deleted clones from trackers . int not_deleted_count Number of not deleted clones. int not_deleted_trackers Optional. Description of failed deletion operations. {\"id\": integer, \"error\": string} . array of objects Example: { \"success\" : true , \"deleted_count\" : 2 , \"not_deleted_count\" : 3 , \"not_deleted_trackers\" : [ { \"id\" : 2 , \"error\" : \"Not a clone\" }, { \"id\" : 3 , \"error\" : \"Entity not found\" }, { \"id\" : 4 , \"error\" : \"Already deleted\" } ] } Errors \u00b6 Standard errors . delete_clone \u00b6 Deletes a clone of the existing tracker. required permissions : trackers: \"delete\" . Parameters \u00b6 name description type tracker_id ID of a tracker. Tracker must belong to authorized dealer and must be a clone. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/delete_clone' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tracker_id\": 134537}' HTTP GET https://api.navixy.com/v2/panel/tracker/delete_clone?hash=fa7bf873fab9333144e171372a321b06&tracker_id=134537 Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if tracker not found. 249 - Operation available for clones only \u2013 if source tracker is not a clone. 203 - Delete entity associated with \u2013 if there are some rules or vehicles associated with tracker. { \"success\" : false , \"status\" : { \"code\" : 203 , \"description\" : \"Delete entity associated with\" }, \"rules\" : [ 10 ] } rules - int array. A list of associated rule IDs. or { \"success\" : false , \"status\" : { \"code\" : 203 , \"description\" : \"Delete entity associated with\" }, \"vehicles\" : [ 11 ] } vehicles - int array. A list of associated vehicle IDs. 252 - Device already corrupted \u2013 when tracker's source corrupted. list \u00b6 Returns list of all trackers belonging to dealer (with optional filtering by filter string, user_id and/or tariff_id ). If filter is used, entities will be returned only if filter string contain one of the following fields: id , label , source.id , source.device_id , source.model , source.phone , user_id . required permissions : trackers: \"read\" . Parameters \u00b6 name description type user_id Optional. ID of the user. User must belong to authorized dealer. int tariff_id Optional. ID of the tariff. Tariff must belong to authorized dealer. int filter Optional. Text filter string. string order_by Optional. List ordering. Can be one of \"id\", \"label\", \"status\", \"model\", \"device_id\", \"phone\", \"creation_date\", \"last_connection\". string ascending Optional. If true , ordering will be ascending, descending otherwise. Default is true . boolean offset Optional. Starting offset, used for pagination. Default is 0 . int limit Optional. Max number of records to return, used for pagination. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/tracker/list?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"list\" : [{ \"id\" : 111231 , \"avatar_file_name\" : \"avatar\" , \"clone\" : true , \"comment\" : \"Need to change SIM till next month\" , \"creation_date\" : \"2020-02-02\" , \"group_id\" : 0 , \"dealer_id\" : 20410 , \"deleted\" : false , \"label\" : \"Truck\" , \"user_id\" : 183654 , \"model_name\" : \"Teltonika FMB120\" , \"last_connection\" : \"2020-02-02 12:44\" , \"source\" : { \"id\" : 456751 , \"device_id\" : \"8624369656654\" , \"model\" : \"telfmb120\" , \"blocked\" : false , \"tariff_id\" : 13457 , \"creation_date\" : \"2020-02-02\" , \"tariff_end_date\" : \"2021-02-02\" , \"connection_status\" : \"idle\" , \"phone\" : \"79995693344\" , \"corrupted\" : true } }], \"count\" : 42 } list - array of objects. Tracker object described above . count - int. Total number of records ignoring offset and limit . Errors \u00b6 201 \u2013 Not found in the database - if specified user_id or tariff_id not found. move \u00b6 Moves the existing non-clone tracker to another user belonging to the same dealer. Tracker will be unbound from any rules associated with it. required permissions : trackers: \"create\", \"delete\" . Parameters \u00b6 name description type tracker_id ID of the tracker. Tracker must belong to authorized dealer. int user_id ID of the user who will become the owner of the tracker. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/move' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tracker_id\": 1245678, \"user_id\": 214034}' HTTP GET https://api.navixy.com/v2/panel/tracker/move?hash=fa7bf873fab9333144e171372a321b06&tracker_id=1245678&user_id=214034 Response \u00b6 { \"success\" : true } Errors \u00b6 219 - Not allowed for clones of the device \u2013 when source tracker is clone. 201 - Not found in the database \u2013 when tracker not found. 246 - Invalid user ID \u2013 when user_id is the same as source tracker's owner id, or it does not exist/belong to authorized dealer. 247 - Entity already exists \u2013 when destination user already has a clone of this tracker. 252 - Device already corrupted \u2013 when tracker's source corrupted. read \u00b6 Returns the tracker object with the specified ID. required permissions : trackers: \"read\" . Parameters \u00b6 name description type tracker_id ID of the tracker. Tracker must belong to authorized dealer. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tracker_id\": 1245678}' HTTP GET https://api.navixy.com/v2/panel/tracker/read?hash=fa7bf873fab9333144e171372a321b06&tracker_id=1245678 Response \u00b6 { \"success\" : true , \"value\" : { \"id\" : 111231 , \"avatar_file_name\" : \"avatar\" , \"clone\" : true , \"comment\" : \"Need to change SIM till next month\" , \"creation_date\" : \"2020-02-02\" , \"group_id\" : 0 , \"dealer_id\" : 20410 , \"deleted\" : false , \"label\" : \"Truck\" , \"user_id\" : 183654 , \"model_name\" : \"Teltonika FMB120\" , \"last_connection\" : \"2020-02-02 12:44\" , \"source\" : { \"id\" : 456751 , \"device_id\" : \"8624369656654\" , \"model\" : \"telfmb120\" , \"blocked\" : false , \"tariff_id\" : 13457 , \"creation_date\" : \"2020-02-02\" , \"tariff_end_date\" : \"2021-02-02\" , \"connection_status\" : \"idle\" , \"phone\" : \"79995693344\" , \"corrupted\" : true } } } value - JSON object. Tracker object described above . Errors \u00b6 201 - Not found in the database \u2013 when tracker not found. 252 - Device already corrupted \u2013 when tracker's source corrupted. register_retry \u00b6 Sends tracker registration commands and resets all tracking settings. Can be executed once in 120 seconds for every tracker. Device models navixymobile* , mobile_unknown* , iosnavixytracker* are not supported. required permissions : trackers: \"update\" . Parameters \u00b6 name description type tracker_id ID of the tracker. Tracker must belong to authorized dealer. int send_register_commands Indicates send or not to send activation commands to device (via SMS or GPRS channel). If parameter is not specified or equals null will be used the platform settings. Default: null . boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/register_retry' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tracker_id\": 1245678, \"send_register_commands\": true}' HTTP GET https://api.navixy.com/v2/panel/tracker/register_retry?hash=fa7bf873fab9333144e171372a321b06&tracker_id=1245678&send_register_commands=true Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 when tracker not found. 252 - Device already corrupted \u2013 if tracker corrupted. 264 - Timeout not reached \u2013 if another register retry request for this tracker done in last 120 seconds. 208 - Device blocked \u2013 when tracker exists but was blocked due to tariff restrictions or some other reason. 219 - Not allowed for clones of the device \u2013 when specified tracker is a clone. 214 - Requested operation or parameters are not supported by the device \u2013 when device does not have GSM module. 252 - Device already corrupted \u2013 when tracker's source corrupted. settings/update \u00b6 Updates tracker settings. required permissions : trackers: \"update\" . Parameters \u00b6 name description type tracker_id ID of the tracker. Tracker must belong to authorized dealer. int label User-defined label for this tracker, e.g. \"Courier\". Must consist of printable characters and have length between 1 and 60. Cannot contain < and > symbols. string deleted If true , tracker will be marked as deleted and will not be shown in user's interface. boolean comment Optional. A comment (description) related to the tracker. Up to 3000 symbols. string Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/settings/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tracker_id\": 1245678, \"label\": \"Courier\", \"deleted\": false}' HTTP GET https://api.navixy.com/v2/panel/tracker/settings/update?hash=fa7bf873fab9333144e171372a321b06&tracker_id=1245678&label=Courier&deleted=false Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 when tracker not found. 252 - Device already corrupted \u2013 when tracker's source corrupted. source/update \u00b6 Updates source settings. Can block and unblock a device. required permissions : trackers: \"update\" . Parameters \u00b6 name description type tracker_id ID of the tracker. Tracker must belong to authorized dealer. int blocked If true , tracker will be marked as blocked. boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/source/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tracker_id\": 1245678, \"blocked\": false}' HTTP GET https://api.navixy.com/v2/panel/tracker/source/update?hash=fa7bf873fab9333144e171372a321b06&tracker_id=1245678&blocked=false Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 when tracker not found. 252 - Device already corrupted \u2013 when tracker's source corrupted. tariff/change \u00b6 required permissions : [trackers: \"update\", \"transactions\": \"create\", \"tariffs\": \"read\"] . Parameters \u00b6 name description type tracker_id ID of tracker. Tracker must belong to authorized dealer. int tariff_id New plan ID. int repay Repay remainder of current plan payment. boolean charge Charge payment for new plan. For monthly and daily plans. boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/tariff/change' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"tracker_id\": 1245678, \"tariff_id\": 15843, \"repay\": false, \"charge\": true}' HTTP GET https://api.navixy.com/v2/panel/tracker/tariff/change?hash=fa7bf873fab9333144e171372a321b06&tracker_id=1245678&tariff_id=15843&repay=false&charge=true Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database. 219 \u2013 Not allowed for clones of the device. 221 - Device limit exceeded \u2013 when new tariff device limit is less than count of user's trackers. 237 \u2013 Invalid tariff - if there are no tariff with tracker.tariff_id and belongs to dealer. 238 \u2013 Changing tariff not allowed. 239 \u2013 New tariff doesn't exist. 250 \u2013 Not allowed for deleted devices. 252 - Device already corrupted \u2013 when tracker's source corrupted. Conditions of the change The current dealer can change tracker tariff from t1 to t2 , if: Tracker: is not removed. belongs to the dealer's user. is not a clone. t1.tariff_id != t2.tariff_id , i.e. it is impossible to change to the same tariff. t1.dealer_id = t2.dealer_id = dealer.effectiveDealerId , i.e. both tariffs belong to the current dealer. t2.device = tracker , i.e. only tracker tariffs are available. depending on t2.doc_type : doc_type=0 (for all) \u2013 without conditions. doc_type=1 (for physical persons) \u2013 user.face=1 (physical person). doc_type=2 (for legal entities) \u2013 user.face=2 (legal entity) or user.face=3 (SP). doc_type=3 (paas) \u2013 without conditions. t2.device_limit >= count of trackers in user's cabinet. Repayment Repayment will be carried out if the following conditions met: The \"repay\" flag set (repay). A current tariff \u2013 monthly: t1.type = monthly . Tariff \u2013 paid: tariff.price > 0. That the current tariff didn't end ( tariff_end != 1 ) The tariff expiration date defined: tariff_end_date != 0 (for monthly tariffs it has to be carried out always). The free period expired: created_date + free_period <= current date where free_period obtained from the hardcodes table or from default_model_settings. There is still at least one paid day on a tariff: reminder > 0 The rest of days on a tariff: remainder = the number of whole days before the end of the current tariff. amount to be repaid = ceil(tariff.price * remainder / amt) , where amt \u2013 the number of days in the current month, a ceil \u2013 the operation of taking the integer part. Change tariff_id = next_tariff = new tariff ID tariff_change = current date if tariff is active ( tariff_end = false ) then tariff_end = false last_charged_date = current date if new tariff is monthly and the flag \"to charge\" is not set ( charge ) then tariff_end_date = the first day of the next month from the current date else tariff_end_date = tomorrow date else ( tariff is not active: tariff_end = true ) last_charged_date = yesterday date if new tariff is monthly then if the flag \"to charge\" is set ( charge ) then tariff_end_date = current date tariff_end = true else tariff_end_date = the first day of the next month from the current date tariff_end = false if the new tariff is everyday then if the flag \"to charge\" is set ( charge ) then tariff_end_date = current date tariff_end = true else tariff_end_date = tomorrow date tariff_end = false if the new tariff is activeday then tariff_end_date = 0 tariff_end = false All dates according to UTC time. raw_command/send \u00b6 Sends the GPRS command to the device, processing it in a protocol-dependent manner beforehand. required sub-user rights: tracker_update . Parameters \u00b6 name description type device_id Fixed device ID, e.g. IMEI. string command Text or hexadecimal representation of the command. string type Optional. Default is text . Can be \"text\" or \"hex\". string reliable Optional. default is true . If false the command doesn't need to be resent when the device is disconnected or if no acknowledgment is received. boolean Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/tracker/raw_command/send' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"device_id\": \"889654248978\", \"command\": \"setparam 101:4\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 7 - Invalid parameters. 201 - Not found in the database \u2013 if there is no tracker with such device ID belonging to authorized user. 252 - Device already corrupted \u2013 if tracker's source corrupted. Example response with an error: \u00b6 { \"success\" : false , \"status\" : { \"code\" : 7 , \"description\" : \"Invalid parameters\" }, \"errors\" : [ { \"parameter\" : \"command\" , \"error\" : \"Non-hex string\" } ] }","title":"Tracker"},{"location":"panel-api/resources/tracker/#tracker","text":"API calls to interact with trackers in the admin panel.","title":"Tracker"},{"location":"panel-api/resources/tracker/#tracker-object","text":"{ \"id\" : 111231 , \"avatar_file_name\" : \"avatar\" , \"clone\" : true , \"comment\" : \"Need to change SIM till next month\" , \"creation_date\" : \"2020-02-02\" , \"group_id\" : 0 , \"dealer_id\" : 20410 , \"deleted\" : false , \"label\" : \"Truck\" , \"user_id\" : 183654 , \"model_name\" : \"Teltonika FMB120\" , \"last_connection\" : \"2020-02-02 12:44\" , \"source\" : { \"id\" : 456751 , \"device_id\" : \"8624369656654\" , \"model\" : \"telfmb120\" , \"blocked\" : false , \"tariff_id\" : 13457 , \"creation_date\" : \"2020-02-02\" , \"tariff_end_date\" : \"2021-02-02\" , \"connection_status\" : \"idle\" , \"phone\" : \"79995693344\" , \"corrupted\" : true } } id - int. Tracker ID aka object_id. avatar_file_name - optional string. Passed only if present. clone - boolean. true if this tracker is clone. comment - string. Comment (description) related to the tracker. creation_date - date/time . Tracker or clone creation date. group_id - int. Tracker group ID. 0 if no group. dealer_id - int. An ID of a dealer to which this tracker (or clone) belongs to. deleted - boolean. True if tracker or clone has been marked as deleted. label - string. Tracker label. user_id - int. An ID of the user to which this tracker (or clone) belongs to. model_name - string. Human-readable tracker model name. last_connection - date/time . Time when this tracker last connected to the server (in UTC+0 timezone). source - source JSON object. id - int. Source ID. device_id - string. Source_imei. model - string. Tracker model name from \"models\" table. blocked - boolean. true if tracker has been blocked due to tariff end, etc. tariff_id - int. An ID of tracker's tariff from \"main_tariffs\" table. creation_date - date/time . Date when this tracker first registered in the system. tariff_end_date - date/time . Date of next tariff prolongation or null. connection_status - enum . Current connection status. phone - string. Phone of the device. Can be null or empty if device has no GSM module or uses bundled SIM which number hidden from the user. corrupted - boolean. true when tracker has been corrupted using /tracker/corrupt, and not passed when it is not corrupted.","title":"Tracker object"},{"location":"panel-api/resources/tracker/#api-actions","text":"API path: panel/tracker .","title":"API actions"},{"location":"panel-api/resources/tracker/#activehistorylist","text":"Provides information about trackers which were considered \"active\" by our PaaS billing system, on a month-by-month basis. required permissions : trackers: \"read\" .","title":"active/history/list"},{"location":"panel-api/resources/tracker/#bundleassign","text":"Assign bundle to specified ICCID. required permissions : tracker_bundles: \"update\" .","title":"bundle/assign"},{"location":"panel-api/resources/tracker/#bundleorderassign","text":"Assigns bundle to specified order ID. required permissions : tracker_bundles: \"update\" .","title":"bundle/order/assign"},{"location":"panel-api/resources/tracker/#bundleimport","text":"Adds multiple bundles at once. required permissions : tracker_bundles: \"create\" .","title":"bundle/import"},{"location":"panel-api/resources/tracker/#bundlelist","text":"Gets list of all bundles. If filter is used, entities will be returned only if filter string contained within one of the following fields: id , imei , model_code , iccid , assign_time . required permissions : tracker_bundles: \"read\" .","title":"bundle/list"},{"location":"panel-api/resources/tracker/#bundleread","text":"Returns the bundle object with the specified imei. required permissions : tracker_bundles: \"read\" .","title":"bundle/read"},{"location":"panel-api/resources/tracker/#bundleupdate","text":"Assign specified equipment to bundle. required permissions : tracker_bundles: \"update\" .","title":"bundle/update"},{"location":"panel-api/resources/tracker/#clone","text":"Creates a clone of the existing non-clone tracker. The method allows cloning from and to a subpaas's user account that is in the admin account hierarchy. Cloning from a user of one subpaas to another user of another subpaas in the same hierarchy is also possible. required permissions : trackers: \"create\" .","title":"clone"},{"location":"panel-api/resources/tracker/#consoleconnect","text":"Returns auth token for connection to tracker command console. required permissions : trackers: \"update\" .","title":"console/connect"},{"location":"panel-api/resources/tracker/#corrupt","text":"Mark tracker as deleted and corrupt its source device_id and phone . Rename tracking table. required permissions : trackers: \"corrupt\" .","title":"corrupt"},{"location":"panel-api/resources/tracker/#batch_clone","text":"Creates clones from the specified set of existing non-clone trackers. The following actions are allowed within the same admin account hierarchy: Cloning from and to a subpaas's user account Cloning from a user of one subpaas to another user of another subpaas Cloning in a single operation from users that belong to different subpaas accounts The maximum number of trackers to clone per operation is 1000. Labels from the original trackers are preserved. To clone trackers across the hierarchy, use the master admin panel's hash. required permissions : trackers: \"create\" . name description type tracker_ids Tracker ID list. Each of these trackers must not be a clone and must be accessible to the target user. int array user_id Target user ID that is accessible from the admin panel hierarchy. int ignore_existing Optional (default = false ). If true , allows performing a non-transactional cloning operation by creating clones if no clone conflicts are encountered within the operation. All already existing clones in the target user's account will not stop the operation, but the conflicting trackers from the tracker_ids will not be used in the cloning action and will be displayed in the response as ignored_trackers list. boolean","title":"batch_clone"},{"location":"panel-api/resources/tracker/#batch_delete_clones","text":"Deletes the specified set of trackers that are clones of other trackers. The action will be considered as completed successfully, even if some trackers could not be deleted. Then for the rest response will contain a description of the reasons why the deletion failed. required permissions : trackers: \"delete\" . name description type trackers Tracker ID list. Each of these trackers must be a clone and be accessible for current user. int array","title":"batch_delete_clones"},{"location":"panel-api/resources/tracker/#delete_clone","text":"Deletes a clone of the existing tracker. required permissions : trackers: \"delete\" .","title":"delete_clone"},{"location":"panel-api/resources/tracker/#list","text":"Returns list of all trackers belonging to dealer (with optional filtering by filter string, user_id and/or tariff_id ). If filter is used, entities will be returned only if filter string contain one of the following fields: id , label , source.id , source.device_id , source.model , source.phone , user_id . required permissions : trackers: \"read\" .","title":"list"},{"location":"panel-api/resources/tracker/#move","text":"Moves the existing non-clone tracker to another user belonging to the same dealer. Tracker will be unbound from any rules associated with it. required permissions : trackers: \"create\", \"delete\" .","title":"move"},{"location":"panel-api/resources/tracker/#read","text":"Returns the tracker object with the specified ID. required permissions : trackers: \"read\" .","title":"read"},{"location":"panel-api/resources/tracker/#register_retry","text":"Sends tracker registration commands and resets all tracking settings. Can be executed once in 120 seconds for every tracker. Device models navixymobile* , mobile_unknown* , iosnavixytracker* are not supported. required permissions : trackers: \"update\" .","title":"register_retry"},{"location":"panel-api/resources/tracker/#settingsupdate","text":"Updates tracker settings. required permissions : trackers: \"update\" .","title":"settings/update"},{"location":"panel-api/resources/tracker/#sourceupdate","text":"Updates source settings. Can block and unblock a device. required permissions : trackers: \"update\" .","title":"source/update"},{"location":"panel-api/resources/tracker/#tariffchange","text":"required permissions : [trackers: \"update\", \"transactions\": \"create\", \"tariffs\": \"read\"] .","title":"tariff/change"},{"location":"panel-api/resources/tracker/#raw_commandsend","text":"Sends the GPRS command to the device, processing it in a protocol-dependent manner beforehand. required sub-user rights: tracker_update .","title":"raw_command/send"},{"location":"panel-api/resources/dealer/","text":"Dealer get info \u00b6 API call to get information about a Dealer. API actions \u00b6 API path: panel/dealer/ . get_info \u00b6 Gets information about dealer's plan, balance, available features, etc. required permissions : base: \"get_dealer_info\" . Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/dealer/get_info' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/dealer/get_info?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"id\" : 9000 , \"seller_id\" : 3 , \"parent_dealer_id\" : 5001 , \"contract_type\" : \"PAAS\" , \"tariff_id\" : 5 , \"tariff\" : { \"id\" : 5 , \"name\" : \"PaaS Tariff\" , \"type\" : \"monthly\" , \"currency\" : \"RUB\" , \"license_price\" : null , \"min_license_pay\" : null , \"vat\" : false , \"trial\" : false , \"premium_gis\" : true , \"service_prices\" : { \"incoming_sms\" : 2.0 , \"outgoing_sms\" : 0.95 , \"service_sms\" : 0.95 , \"phone_call\" : 15 , \"traffic\" : 1.5 }, \"store_period\" : \"P3Y\" }, \"demo_tariff\" : false , \"tracker_tariff_end_date\" : \"2015-12-31\" , \"store_period\" : \"P6M\" , \"demo_ends\" : null , \"title\" : \"Navixy Demo\" , \"block_status\" : \"NOT_BLOCKED\" , \"legal_name\" : \"Company\" , \"active_amount\" : 99 , \"active_amount_own\" : 80 , \"active_amount_subpaas\" : 19 , \"active_limit\" : 100 , \"locale\" : \"en_US\" , \"domain\" : \"demo.navixy.com\" , \"favicon\" : \"paas/5001/custom.ico\" , \"logo\" : \"paas/5001/logo.png\" , \"enable_trackers\" : true , \"enable_cameras\" : false , \"paas_activation_date\" : \"2015-03-01\" , \"license_balance\" : 0.0 , \"seller_currency\" : \"USD\" , \"features\" : [ \"branding_web\" , \"branding_mobile\" , \"navixy_label\" , \"tracking\" , \"reports\" , \"fleet\" , \"field_service\" , \"premium_gis\" ], \"default_user_time_zone\" : \"Europe/London\" } id - int. Dealer id. parent_dealer_id - int. An ID of parent Dealer. contract_type - enum . Contract type: \"PARTNER\", \"AGENT\" or \"PAAS\". tariff_id - int. PaaS plan id. tariff - PaaS plan info. license_price - nullable double. Price per license. min_license_pay - nullable double. Minimum license payment. trial - boolean. If true the plan is Trial. premium_gis - boolean. If true premium GIS enabled for the partner. store_period - string. Max data store period for users. demo_tariff - boolean. true for \"TRIAL\" PaaS tariffs. store_period - string. Max data store period for users on demo_tariff . demo_ends - string. TRIAL period end date or null. block_status - enum . Panel and PaaS users block status. One of: \"NOT_BLOCKED\", \"INITIAL_BLOCK\", \"BLOCK_LOGIN\" or \"CLIENTS_BLOCKED\". legal_name - string. Dealer legal name. active_amount - int. Amount of all active trackers (with Sub-PaaSes). active_amount_own - int. Amount of active trackers (without Sub-PaaSes). active_amount_subpaas - int. Amount of Sub-PaaSes' active trackers. active_limit - int. Active trackers limit. locale - enum . Dealer's default locale. domain - string. Dealer's domain. favicon - string. Path or URL to dealer's interface favicon or null. logo - string. Path or URL to dealer's logotype or null. paas_activation_date - string. Date of activation pay. features - string array. Set of the allowed dealer features . default_user_time_zone - string. Time zone id for new users to be created via user/upload . Also, this zone will be selected by default when creating a new user in the Navixy Admin Panel. Errors \u00b6 201 - Not found in the database.","title":"Dealaer (PaaS) actions"},{"location":"panel-api/resources/dealer/#dealer-get-info","text":"API call to get information about a Dealer.","title":"Dealer get info"},{"location":"panel-api/resources/dealer/#api-actions","text":"API path: panel/dealer/ .","title":"API actions"},{"location":"panel-api/resources/dealer/#get_info","text":"Gets information about dealer's plan, balance, available features, etc. required permissions : base: \"get_dealer_info\" .","title":"get_info"},{"location":"panel-api/resources/dealer/activation_code/","text":"Activation code \u00b6 API calls for managing activation codes used in device activation. Activation code object \u00b6 { \"tariff_id\" : 12163 , \"bonus_amount\" : 0 , \"free_days\" : 14 , \"money_amount\" : 0 , \"device_type\" : \"tracker\" , \"code\" : \"5248654776\" , \"activated\" : false , \"activation_date\" : null , \"device_id\" : 0 , \"tariff_name\" : \"Tracker demo plan\" } Here's the corrected markdown file for clarity: tariff_id - int. The ID of the plan. bonus_amount - int. The bonus amount that will be added to the user's balance when the device with this code is activated. free_days - int. The number of free days. money_amount - int. The amount of money that will be added to the user's balance. code - string. The code value. activated - boolean. Indicates whether the code is activated ( true ) or not. device_id - int. The ID of the device activated with this code. It will be 0 if the code is not activated yet. tariff_name - string. The name of the plan. API actions \u00b6 API base path: panel/dealer/activation_code . create \u00b6 Creates the specified number ( count ) of activation codes with the given tariff_id , bonus_amount , and free_days . Returns the count of created codes. required permissions : activation_code: [\"read\", \"create\"] . Parameters \u00b6 name description type count A count of codes to creation. int tariff_id An ID of new tariff (must belong to current dealer). int bonus_amount A new bonus amount. int free_days A new free period. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/dealer/activation_code/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"count\": 10, \"tariff_id\": 12457, \"bonus_amount\": 3, \"free_days\": 5}' HTTP GET https://api.navixy.com/v2/panel/dealer/activation_code/create?hash=fa7bf873fab9333144e171372a321b06&count=10&tariff_id=12457&bonus_amount=3&free_days=5 Response \u00b6 { \"success\" : true , \"count\" : 10 } count - int. Count of actually created codes. Errors \u00b6 201 - Not found in the database - when tariff with tariff_id not found for a current dealer. list \u00b6 Lists all dealer activation codes. If filter is used, entities will be returned only if filter string will contain one of the following fields: code , tariff_id , device_id , device_type . required permissions : activation_code: \"read\" . Parameters \u00b6 name description type filter Optional. Text filter string. string order_by Optional. Specify list ordering. Can be one of \"code\", \"activated\", \"tariff_id\", \"tariff_name\", \"device_type\", \"money_amount\", \"bonus_amount\", \"free_days\". string ascending Optional. If true , ordering will be ascending, descending otherwise. Default is true . boolean offset Optional. Starting offset, used for pagination. Default is 0 . int limit Optional. Max number of records to return, used for pagination. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/dealer/activation_code/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/dealer/activation_code/list?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"list\" : [{ \"tariff_id\" : 12163 , \"bonus_amount\" : 0 , \"free_days\" : 14 , \"money_amount\" : 0 , \"device_type\" : \"tracker\" , \"code\" : \"1201245293\" , \"activated\" : true , \"activation_date\" : \"2020-11-12 20:00:08\" , \"device_id\" : 464606 , \"tariff_name\" : \"Tracker demo tariff\" }], \"count\" : 1 } list - array of objects. List of activation code objects . count - int. Total number of records (ignoring offset and limit). update \u00b6 Changes tariff_id , bonus_amount and free_days for all activation codes which: * has code listed in codes parameter. * belongs to a current dealer. * not activated yet. * belongs to the same device_type as a new tariff and return count of updated codes. required permissions : activation_code: \"update\" . Parameters \u00b6 name description type codes Codes to update. string array tariff_id An ID of a new tariff. Have to belong to a current dealer. int bonus_amount A new bonus. int free_days A new free period. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/dealer/activation_code/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"codes\": [\"12315124\", \"12451576\"], \"tariff_id\": 12457, \"bonus_amount\": 3, \"free_days\": 5}' HTTP GET https://api.navixy.com/v2/panel/dealer/activation_code/update?hash=fa7bf873fab9333144e171372a321b06&codes=[\"12315124\", \"12451576\"]&tariff_id=12457&bonus_amount=3&free_days=5 Response \u00b6 { \"success\" : true , \"count\" : 5 } count - int. Count of actually updated codes. Errors \u00b6 201 - Not found in the database - when a plan with tariff_id is not found for the current dealer.","title":"Activation code"},{"location":"panel-api/resources/dealer/activation_code/#activation-code","text":"API calls for managing activation codes used in device activation.","title":"Activation code"},{"location":"panel-api/resources/dealer/activation_code/#activation-code-object","text":"{ \"tariff_id\" : 12163 , \"bonus_amount\" : 0 , \"free_days\" : 14 , \"money_amount\" : 0 , \"device_type\" : \"tracker\" , \"code\" : \"5248654776\" , \"activated\" : false , \"activation_date\" : null , \"device_id\" : 0 , \"tariff_name\" : \"Tracker demo plan\" } Here's the corrected markdown file for clarity: tariff_id - int. The ID of the plan. bonus_amount - int. The bonus amount that will be added to the user's balance when the device with this code is activated. free_days - int. The number of free days. money_amount - int. The amount of money that will be added to the user's balance. code - string. The code value. activated - boolean. Indicates whether the code is activated ( true ) or not. device_id - int. The ID of the device activated with this code. It will be 0 if the code is not activated yet. tariff_name - string. The name of the plan.","title":"Activation code object"},{"location":"panel-api/resources/dealer/activation_code/#api-actions","text":"API base path: panel/dealer/activation_code .","title":"API actions"},{"location":"panel-api/resources/dealer/activation_code/#create","text":"Creates the specified number ( count ) of activation codes with the given tariff_id , bonus_amount , and free_days . Returns the count of created codes. required permissions : activation_code: [\"read\", \"create\"] .","title":"create"},{"location":"panel-api/resources/dealer/activation_code/#list","text":"Lists all dealer activation codes. If filter is used, entities will be returned only if filter string will contain one of the following fields: code , tariff_id , device_id , device_type . required permissions : activation_code: \"read\" .","title":"list"},{"location":"panel-api/resources/dealer/activation_code/#update","text":"Changes tariff_id , bonus_amount and free_days for all activation codes which: * has code listed in codes parameter. * belongs to a current dealer. * not activated yet. * belongs to the same device_type as a new tariff and return count of updated codes. required permissions : activation_code: \"update\" .","title":"update"},{"location":"panel-api/resources/dealer/password/","text":"Password \u00b6 API call to update Dealer's password. API actions \u00b6 API base path: panel/dealer/password . update \u00b6 Changes password for the authorized Dealer. required permissions : password: \"update\" . Parameters \u00b6 name description type old_password Current dealer's password. string new_password New password for the dealer, 6 to 20 printable characters. string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/dealer/password/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"old_password\": \"qwerty\", \"new_password\": \"B1r7d@Y\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 245 - New password must be different - if old_password = new_password . 248 - Wrong password - if old_password is wrong.","title":"Password"},{"location":"panel-api/resources/dealer/password/#password","text":"API call to update Dealer's password.","title":"Password"},{"location":"panel-api/resources/dealer/password/#api-actions","text":"API base path: panel/dealer/password .","title":"API actions"},{"location":"panel-api/resources/dealer/password/#update","text":"Changes password for the authorized Dealer. required permissions : password: \"update\" .","title":"update"},{"location":"panel-api/resources/dealer/settings/image/","text":"Image \u00b6 API calls for managing the images used for branding the platform. API actions \u00b6 API path: panel/dealer/settings/image . delete \u00b6 Deletes an image of specified type . required permissions : service_settings: \"update\" . Parameters \u00b6 name description type type Image type to delete. Can be one of logo , favicon , login_wallpaper , desktop_wallpaper , document_logo . string Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/dealer/settings/image/delete' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"type\": \"logo\"}' HTTP GET https://api.navixy.com/v2/panel/dealer/settings/image/delete?hash=fa7bf873fab9333144e171372a321b06&type=logo Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database - when there are no settings for a dealer in the db. upload \u00b6 Uploads image of specified type . MUST be a POST multipart request (multipart/form-data), with one of the parts being an image file upload (with the name \"file\"). File part mime type must be one of: image/jpeg image/pjpeg image/png image/gif image/webp image/x-icon (for favicon type) required permissions : service_settings: \"update\" . Parameters \u00b6 name description type type Image type to delete. Can be one of logo , favicon , login_wallpaper , desktop_wallpaper , document_logo . string file Image file. string redirect_target Optional. A URL to redirect. string If redirect_target passed a return redirect to response=<urlencoded response json> . Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database - when there are no settings for dealer in the db. 233 - No data file - if file part not passed. 234 - Invalid data format - if passed file with unexpected mime type. 236 - Feature unavailable due to tariff restrictions - if branding feature disabled for this dealer. 254 - Cannot save file - on some file system errors.","title":"Branding settings"},{"location":"panel-api/resources/dealer/settings/image/#image","text":"API calls for managing the images used for branding the platform.","title":"Image"},{"location":"panel-api/resources/dealer/settings/image/#api-actions","text":"API path: panel/dealer/settings/image .","title":"API actions"},{"location":"panel-api/resources/dealer/settings/image/#delete","text":"Deletes an image of specified type . required permissions : service_settings: \"update\" .","title":"delete"},{"location":"panel-api/resources/dealer/settings/image/#upload","text":"Uploads image of specified type . MUST be a POST multipart request (multipart/form-data), with one of the parts being an image file upload (with the name \"file\"). File part mime type must be one of: image/jpeg image/pjpeg image/png image/gif image/webp image/x-icon (for favicon type) required permissions : service_settings: \"update\" .","title":"upload"},{"location":"panel-api/resources/dealer/settings/notification/","text":"Notification \u00b6 API calls to read and update notification settings. Notification settings object \u00b6 { \"email_from\" : \"NAVIXY <no-reply@navixy.com>\" , \"email_footer\" : \"\\n\\n---nSincerely, Navixy\" , \"email_special\" : \"no-reply@navixy.com\" , \"sms_originator\" : \"demo.navixy.com\" , \"caller_id\" : \"491761234543\" } email_from - string. Email from which notification messages will be sent. Can be email address (\" no-reply@navixy.com \") or email with a name (\"NAVIXY no-reply@navixy.com \"). email_footer - string. Footer which is added to all notification emails. Arbitrary text up to 600 characters. email_special - string. Special email address for PaaS reports. sms_originator - string. Max length is 20, must match (p{L}|d|[-'\" .,:/])* . E.g. \"demo.navixy.com\" or \"491761234567\". caller_id - string. Voice messages originator. Max length is 20, must match (p{L}|d|[-'\" .,:/])* . E.g. \"491761234543\". API actions \u00b6 API path: panel/dealer/settings/notification . read \u00b6 Gets current monitoring notification settings. required permissions : notification_settings: \"read\" . Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/dealer/settings/notification/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/dealer/settings/notification/read?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"value\" : { \"email_from\" : \"NAVIXY <no-reply@navixy.com>\" , \"email_footer\" : \"\\n\\n---nSincerely, Navixy\" , \"email_special\" : \"no-reply@navixy.com\" , \"sms_originator\" : \"demo.navixy.com\" , \"caller_id\" : \"491761234543\" } } value - Notification settings object described above. Errors \u00b6 General types only. update \u00b6 Updates notification settings for the current dealer. required permissions : notification_settings: \"update\" . Parameters \u00b6 name description type email_from Email from which notification messages will be sent. Can be email address or email with a name. string email_footer Footer which is added to all notification emails. Arbitrary text up to 600 characters. string email_special Optional. Special email address for PaaS reports. string sms_originator SMS originator. Max length is 20. string caller_id Voice messages originator. Max length is 20. string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/dealer/settings/notification/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"email_from\": \"NAVIXY <no-reply@navixy.com>\", \"email_footer\": \"\\n\\n---nSincerely, Navixy\", \"sms_originator\": \"demo.navixy.com\", \"caller_id\": \"491761234543\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 General types only.","title":"Notification settings"},{"location":"panel-api/resources/dealer/settings/notification/#notification","text":"API calls to read and update notification settings.","title":"Notification"},{"location":"panel-api/resources/dealer/settings/notification/#notification-settings-object","text":"{ \"email_from\" : \"NAVIXY <no-reply@navixy.com>\" , \"email_footer\" : \"\\n\\n---nSincerely, Navixy\" , \"email_special\" : \"no-reply@navixy.com\" , \"sms_originator\" : \"demo.navixy.com\" , \"caller_id\" : \"491761234543\" } email_from - string. Email from which notification messages will be sent. Can be email address (\" no-reply@navixy.com \") or email with a name (\"NAVIXY no-reply@navixy.com \"). email_footer - string. Footer which is added to all notification emails. Arbitrary text up to 600 characters. email_special - string. Special email address for PaaS reports. sms_originator - string. Max length is 20, must match (p{L}|d|[-'\" .,:/])* . E.g. \"demo.navixy.com\" or \"491761234567\". caller_id - string. Voice messages originator. Max length is 20, must match (p{L}|d|[-'\" .,:/])* . E.g. \"491761234543\".","title":"Notification settings object"},{"location":"panel-api/resources/dealer/settings/notification/#api-actions","text":"API path: panel/dealer/settings/notification .","title":"API actions"},{"location":"panel-api/resources/dealer/settings/notification/#read","text":"Gets current monitoring notification settings. required permissions : notification_settings: \"read\" .","title":"read"},{"location":"panel-api/resources/dealer/settings/notification/#update","text":"Updates notification settings for the current dealer. required permissions : notification_settings: \"update\" .","title":"update"},{"location":"panel-api/resources/dealer/settings/service/","text":"Service \u00b6 API calls to read and update panel's service settings. Service settings object \u00b6 { \"service_title\" : \"monitoring service\" , \"locale\" : \"en_US\" , \"demo_login\" : \"demo\" , \"demo_password\" : \"demo\" , \"maps\" : [ \"osm\" , \"wikimapia\" , \"yandexpublic\" , \"osmmapnik\" ], \"default_map\" : { \"type\" : \"osm\" , \"location\" : { \"lat\" : 33.0 , \"lng\" : 22.0 }, \"zoom\" : 2 }, \"currency\" : \"EUR\" , \"payment_link\" : \"http://payme.ru\" , \"promo_url\" : \"http://monitoring.com/about\" , \"google_client_id\" : \"io54p54ijy54\" , \"domain\" : \"track.agent.com\" , \"favicon\" : \"http://test.com/favicon.ico\" , \"app_logo\" : \"paas/5001/app_logo.png\" , \"logo\" : \"paas/5001/logo.png\" , \"document_logo\" : \"paas/5001/document_logo.png\" , \"login_wallpaper\" : \"paas/5001/login.png\" , \"desktop_wallpaper\" : \"http://test.com/test.jpg\" , \"login_footer\" : \"All rights reserved.\" , \"allow_registration\" : true , \"show_mobile_apps\" : true , \"default_user_settings\" : { \"geocoder\" : \"google\" , \"route_provider\" : \"progorod\" , \"measurement_system\" : \"metric\" , \"translit\" : false }, \"display_model_features_link\" : false , \"limited_domain\" : false , \"allowed_maps\" : [ \"osm\" , \"wikimapia\" , \"yandexpublic\" , \"osmmapnik\" ], \"color_theme\" : \"aqua\" , \"app_color_theme\" : \"blue_1\" , \"privacy_policy_link\" : \"http://privacy-policy-url\" , \"tos\" : \"Terms Of Service text\" , \"no_register_commands\" : false , \"default_user_time_zone\" : \"Europe/London\" } service_title - string. Service name. locale - enum . Default locale of the dealer. demo_login - string. If not empty, demo button will use this login to authorize. demo_password - string. If not empty, demo button will use this password to authorize. maps - enum array. Maps available in monitoring system. When a domain is platform owner's subdomain then only free maps are available. default_map - default map settings object. type - enum . Default map code. location - location object. Default location to show on the map when monitoring opens. Location object described in data types description section . zoom - int. Default zoom level to use. currency - enum . Code of the currency which can be shown in UI. payment_link - string. A link to dealer's payment system. Can be null or empty. promo_url - string. Customizable \"About company\" URL. Can be null or empty. google_client_id - string. Google Maps client ID (not supported by the interface yet). domain - string. Domain which will be used for monitoring system. favicon - string. Nullable, path or URL to dealer's interface favicon. app_logo - string. Nullable, path or URL to dealer's mobile app logotype. logo - string. Nullable, path or URL to dealer's logotype. document_logo - string. Nullable, path or URL to dealer's logotype for documents. login_wallpaper - string. Nullable, path or URL to dealer's interface login wallpaper. desktop_wallpaper - string. Nullable, path to dealer's interface wallpaper. login_footer - string. Nullable, footer which will be included in login page. allow_registration - boolean. If true allows self-registration of users. show_mobile_apps - boolean. If true when entering the service from a mobile device or tablet, users will be prompted to download the mobile application or continue using the mobile web UI. default_user_settings - default user settings object. geocoder - string. Default geocoder. route_provider - string. Default route provider. measurement_system - enum . Measurement system. date_format - Optional enum . Date representation. hour_mode - Optional enum . Time representation. translit - boolean. SMS transliteration. If true allows you to reduce the number of characters in an SMS message by replacing the characters of the national alphabet with close Latin ones. display_model_features_link - boolean. When true shows in model info link to navixy.com (UI option). limited_domain - boolean. If true , paas domain has limitations. allowed_maps - enum . List of maps available for selection in \"maps\" list. color_theme - string. 128 chars max. Color theme code or empty string (for default theme). app_color_theme - string. 128 chars max. Mobile app color theme code or empty string (for default theme). privacy_policy_link - string. A link to privacy policy. tos - string. Terms Of Service text. no_register_commands - boolean. If true then do not send commands to devices on activation. default_user_time_zone - string. Time zone id for new users to be created via user/upload . Also, this zone will be selected by default when creating a new user in the Navixy Admin Panel. API actions \u00b6 API path: panel/dealer/settings/service . read \u00b6 Gets current monitoring service settings. required permissions : service_settings: \"read\" . Parameters \u00b6 Only session hash . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/dealer/settings/service/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/dealer/settings/service/read?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"value\" : { \"service_title\" : \"monitoring service\" , \"locale\" : \"en_US\" , \"demo_login\" : \"demo\" , \"demo_password\" : \"demo\" , \"maps\" : [ \"osm\" , \"wikimapia\" , \"yandexpublic\" , \"osmmapnik\" ], \"default_map\" : { \"type\" : \"osm\" , \"location\" : { \"lat\" : 33.0 , \"lng\" : 22.0 }, \"zoom\" : 2 }, \"currency\" : \"EUR\" , \"payment_link\" : \"http://payme.ru\" , \"promo_url\" : \"http://monitoring.com/about\" , \"google_client_id\" : \"io54p54ijy54\" , \"domain\" : \"track.agent.com\" , \"favicon\" : \"http://test.com/favicon.ico\" , \"app_logo\" : \"paas/5001/app_logo.png\" , \"logo\" : \"paas/5001/logo.png\" , \"document_logo\" : \"paas/5001/document_logo.png\" , \"login_wallpaper\" : \"paas/5001/login.png\" , \"desktop_wallpaper\" : \"http://test.com/test.jpg\" , \"login_footer\" : \"All rights reserved.\" , \"allow_registration\" : true , \"show_mobile_apps\" : true , \"default_user_settings\" : { \"geocoder\" : \"google\" , \"route_provider\" : \"progorod\" , \"measurement_system\" : \"metric\" , \"translit\" : false }, \"display_model_features_link\" : false , \"limited_domain\" : false , \"allowed_maps\" : [ \"osm\" , \"wikimapia\" , \"yandexpublic\" , \"osmmapnik\" ], \"color_theme\" : \"aqua\" , \"app_color_theme\" : \"blue_1\" , \"privacy_policy_link\" : \"http://privacy-policy-url\" , \"tos\" : \"Terms Of Service text\" , \"no_register_commands\" : false , \"default_user_time_zone\" : \"America/New_York\" } } value - Service settings object described above. Errors \u00b6 General types only. update \u00b6 Updates monitoring service settings for the current dealer. Note: wallpapers, logos and favicons cannot be edited here. required permissions : service_settings: \"update\" . Parameters \u00b6 name description type service_title Service name. string demo_login If not empty, demo button will use this login to authorize. string demo_password If not empty, demo button will use this password to authorize. string maps Maps available in monitoring system. enum array default_map Default map settings object. JSON object currency Code of the currency which will be shown in UI. enum payment_link A link to dealer's payment system. Can be null or empty. string promo_url Customizable \"About company\" URL. Can be null or empty. string google_client_id Google maps client ID. string domain Domain which will be used for monitoring system. string login_footer Nullable, footer which will be included in login page. string allow_registration If true allows self-registration of users. boolean show_mobile_apps If true shows mobile apps to users who opens mobile web UI. boolean default_user_settings Default user settings object. JSON object display_model_features_link When true shows in model info link to navixy.com (UI option). boolean limited_domain If true , paas domain has limitations. boolean allowed_maps List of maps available for selection in \"maps\" list. enum color_theme 128 chars max. Color theme code or empty string (for default theme). string app_color_theme 128 chars max. Mobile app color theme code or empty string (for default theme). string privacy_policy_link A link to privacy policy. string tos Terms Of Service text. string no_register_commands If true then do not send commands to devices on activation. boolean default_user_time_zone Time zone by default for new users. string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/dealer/settings/notification/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"service_title\": \"monitoring service\", \"locale\": \"en_US\", \"demo_login\": \"demo\", \"demo_password\": \"demo\", \"maps\": [\"osm\", \"wikimapia\", \"yandexpublic\", \"osmmapnik\"], \"default_map\": {\"type\": \"osm\", \"location\": {\"lat\": 33.0, \"lng\": 22.0}, \"zoom\": 2}, \"currency\": \"EUR\", \"payment_link\": \"http://payme.ru\", \"promo_url\": \"http://monitoring.com/about\", \"google_client_id\": \"io54p54ijy54\", \"domain\": \"track.agent.com\", \"login_footer\": \"All rights reserved.\", \"allow_registration\": true, \"show_mobile_apps\": true, \"default_user_settings\": {\"geocoder\": \"google\", \"route_provider\": \"progorod\", \"measurement_system\": \"metric\", \"translit\": false}, \"display_model_features_link\": false, \"limited_domain\": false, \"allowed_maps\": [\"osm\", \"wikimapia\", \"yandexpublic\", \"osmmapnik\"], \"color_theme\": \"aqua\", \"app_color_theme\": \"blue_1\", \"privacy_policy_link\": \"http://privacy-policy-url\", \"tos\": \"Terms Of Service text\", \"no_register_commands\": false, \"default_user_time_zone\": \"Europe/London\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 247 - Entity already exists(409) - when domain already used by other dealer.","title":"Service settings"},{"location":"panel-api/resources/dealer/settings/service/#service","text":"API calls to read and update panel's service settings.","title":"Service"},{"location":"panel-api/resources/dealer/settings/service/#service-settings-object","text":"{ \"service_title\" : \"monitoring service\" , \"locale\" : \"en_US\" , \"demo_login\" : \"demo\" , \"demo_password\" : \"demo\" , \"maps\" : [ \"osm\" , \"wikimapia\" , \"yandexpublic\" , \"osmmapnik\" ], \"default_map\" : { \"type\" : \"osm\" , \"location\" : { \"lat\" : 33.0 , \"lng\" : 22.0 }, \"zoom\" : 2 }, \"currency\" : \"EUR\" , \"payment_link\" : \"http://payme.ru\" , \"promo_url\" : \"http://monitoring.com/about\" , \"google_client_id\" : \"io54p54ijy54\" , \"domain\" : \"track.agent.com\" , \"favicon\" : \"http://test.com/favicon.ico\" , \"app_logo\" : \"paas/5001/app_logo.png\" , \"logo\" : \"paas/5001/logo.png\" , \"document_logo\" : \"paas/5001/document_logo.png\" , \"login_wallpaper\" : \"paas/5001/login.png\" , \"desktop_wallpaper\" : \"http://test.com/test.jpg\" , \"login_footer\" : \"All rights reserved.\" , \"allow_registration\" : true , \"show_mobile_apps\" : true , \"default_user_settings\" : { \"geocoder\" : \"google\" , \"route_provider\" : \"progorod\" , \"measurement_system\" : \"metric\" , \"translit\" : false }, \"display_model_features_link\" : false , \"limited_domain\" : false , \"allowed_maps\" : [ \"osm\" , \"wikimapia\" , \"yandexpublic\" , \"osmmapnik\" ], \"color_theme\" : \"aqua\" , \"app_color_theme\" : \"blue_1\" , \"privacy_policy_link\" : \"http://privacy-policy-url\" , \"tos\" : \"Terms Of Service text\" , \"no_register_commands\" : false , \"default_user_time_zone\" : \"Europe/London\" } service_title - string. Service name. locale - enum . Default locale of the dealer. demo_login - string. If not empty, demo button will use this login to authorize. demo_password - string. If not empty, demo button will use this password to authorize. maps - enum array. Maps available in monitoring system. When a domain is platform owner's subdomain then only free maps are available. default_map - default map settings object. type - enum . Default map code. location - location object. Default location to show on the map when monitoring opens. Location object described in data types description section . zoom - int. Default zoom level to use. currency - enum . Code of the currency which can be shown in UI. payment_link - string. A link to dealer's payment system. Can be null or empty. promo_url - string. Customizable \"About company\" URL. Can be null or empty. google_client_id - string. Google Maps client ID (not supported by the interface yet). domain - string. Domain which will be used for monitoring system. favicon - string. Nullable, path or URL to dealer's interface favicon. app_logo - string. Nullable, path or URL to dealer's mobile app logotype. logo - string. Nullable, path or URL to dealer's logotype. document_logo - string. Nullable, path or URL to dealer's logotype for documents. login_wallpaper - string. Nullable, path or URL to dealer's interface login wallpaper. desktop_wallpaper - string. Nullable, path to dealer's interface wallpaper. login_footer - string. Nullable, footer which will be included in login page. allow_registration - boolean. If true allows self-registration of users. show_mobile_apps - boolean. If true when entering the service from a mobile device or tablet, users will be prompted to download the mobile application or continue using the mobile web UI. default_user_settings - default user settings object. geocoder - string. Default geocoder. route_provider - string. Default route provider. measurement_system - enum . Measurement system. date_format - Optional enum . Date representation. hour_mode - Optional enum . Time representation. translit - boolean. SMS transliteration. If true allows you to reduce the number of characters in an SMS message by replacing the characters of the national alphabet with close Latin ones. display_model_features_link - boolean. When true shows in model info link to navixy.com (UI option). limited_domain - boolean. If true , paas domain has limitations. allowed_maps - enum . List of maps available for selection in \"maps\" list. color_theme - string. 128 chars max. Color theme code or empty string (for default theme). app_color_theme - string. 128 chars max. Mobile app color theme code or empty string (for default theme). privacy_policy_link - string. A link to privacy policy. tos - string. Terms Of Service text. no_register_commands - boolean. If true then do not send commands to devices on activation. default_user_time_zone - string. Time zone id for new users to be created via user/upload . Also, this zone will be selected by default when creating a new user in the Navixy Admin Panel.","title":"Service settings object"},{"location":"panel-api/resources/dealer/settings/service/#api-actions","text":"API path: panel/dealer/settings/service .","title":"API actions"},{"location":"panel-api/resources/dealer/settings/service/#read","text":"Gets current monitoring service settings. required permissions : service_settings: \"read\" .","title":"read"},{"location":"panel-api/resources/dealer/settings/service/#update","text":"Updates monitoring service settings for the current dealer. Note: wallpapers, logos and favicons cannot be edited here. required permissions : service_settings: \"update\" .","title":"update"},{"location":"panel-api/resources/subpaas/","text":"Subdealer (Sub PaaS) actions \u00b6 API calls to interact with subdealers, also referred to as 'Sub PaaS'. Subdealer (Sub PaaS) object \u00b6 { \"subpaas_id\" : 18 , \"title\" : \"SubppaasTitle\" , \"jur_name\" : \"SubppaasJurName\" , \"login\" : \"subpaaslogin\" , \"creation_date\" : \"2018-11-15\" , \"block_type\" : \"NOT_BLOCKED\" , \"users_count\" : 2 , \"active_users_count\" : 1 , \"trackers_count\" : 0 , \"active_trackers_count\" : 0 , \"contact_fio\" : \"fio\" , \"contact_post\" : \"post\" } subpaas_id - int. SubPaas id. title - string. SubPaas' name. jur_name - string. Legal company name. creation_date - string. Creation date. block_type - enum . Panel and Subpaas' users block status. One of: \"NOT_BLOCKED\", \"INITIAL_BLOCK\", \"BLOCK_LOGIN\" or \"CLIENTS_BLOCKED\". users_count - int. Count of users. active_users_count - int. Count of active users. trackers_count - int. All devices of SubPaas. active_trackers_count - int. Active devices of SubPaas. contact_fio - string. Contact person. contact_post - string. Contact post (position). contact_phone - string. Contact's phone. API actions \u00b6 API base path: panel/subpaas . create \u00b6 Creates a subPaaS. After creation, its dealer_block_type will be in INITIAL_BLOCK status. Parameters \u00b6 name description type password Subpaas' password. string title Subpaas' name. string email Company email. string jur_name Legal company name. string jur_country Subpaas' country string link_monitoring Subpaas' domain name. string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/subpaas/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"password\": \"B1r7d@Y\", \"title\": \"Company\", \"email\": \"email@company.com\", \"jur_name\": \"Company\", \"jur_country\": \"Finland\", \"link_monitoring\": \"company.com\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 If the dealer is not paas. has different status than NOT_BLOCKED . his tariff doesn't allow subpaases. list \u00b6 Gets a list of all SubPaaS accounts of a Dealer. Dealer ID will be taken from the session key. Parameters \u00b6 name description type order_by Optional. Sort option. Can be \"subpaas_id\", \"title\", \"jur_name\", \"login\", \"block_type\", \"creation_date\". Default is subpaas_id . enum ascending Optional. If true ordering will be ascending, descending otherwise. Default is true . boolean limit Optional. Pagination. Maximum subpaases to return int offset Optional. Pagination. Get subpaases starting from. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/subpaas/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/subpaas/list?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"list\" : [ { \"subpaas_id\" : 18 , \"title\" : \"SubppaasTitle\" , \"jur_name\" : \"SubppaasJurName\" , \"login\" : \"subpaaslogin\" , \"creation_date\" : \"2018-11-15\" , \"block_type\" : \"NOT_BLOCKED\" , \"users_count\" : 2 , \"active_users_count\" : 1 , \"trackers_count\" : 0 , \"active_trackers_count\" : 0 } ] } list - array of objects. List of subpaas objects described above. Errors \u00b6 13 \u2013 If the dealer: is not of the PaaS type. has a status other than NOT_BLOCKED . their plan does not allow SubPaaS accounts. read \u00b6 Gets Sub PaaS account info by its id. Parameters \u00b6 name description type subpaas_id Subpaas ID. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/subpaas/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"subpaas_id\": 97834}' HTTP GET https://api.navixy.com/v2/panel/subpaas/read?hash=fa7bf873fab9333144e171372a321b06&subpaas_id=97834 Response \u00b6 { \"success\" : true , \"value\" : { \"subpaas_id\" : 18 , \"block_type\" : \"NOT_BLOCKED\" , \"title\" : \"Rus Sub-PaaS\" , \"jur_name\" : \"OOO Sub-PaaS\" , \"email\" : \"sub-dealer@email.com\" , \"jur_country\" : \"country\" , \"link_monitoring\" : \"link\" , \"contact_fio\" : \"fio\" , \"contact_post\" : \"post\" , \"contact_phone\" : \"phone\" } } value - subpaas object described above. Errors \u00b6 13 \u2013 If the dealer: is not of the PaaS type. has a status other than NOT_BLOCKED . their plan does not allow SubPaaS accounts. update \u00b6 Updates a SubPaas account with the specified ID. Parameters \u00b6 name description type subpaas_id Subpaas' ID. int password Subpaas' password. string title Subpaas' name. string email Company email. string jur_name Legal (juristic) company name. string jur_country Subpaas' country string link_monitoring Subpaas' domain name. string contact_fio Contact person. string contact_post Contact post (position). string contact_phone Contact's phone. string block_type Panel and PaaS users block status. One of: \"NOT_BLOCKED\", \"INITIAL_BLOCK\", \"BLOCK_LOGIN\" or \"CLIENTS_BLOCKED\". enum Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/subpaas/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"password\": \"B1r7d@Y\", \"title\": \"Company\", \"email\": \"email@company.com\", \"jur_name\": \"Company\", \"jur_country\": \"Finland\", \"link_monitoring\": \"company.com\", \"contact_fio\": \"fio\", \"contact_post\": \"CEO\", \"contact_phone\": \"79999902190\", \"block_type\": \"NOT_BLOCKED\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 The dealer is not PaaS. The dealer has a status other than NOT_BLOCKED . SubPaaS accounts are not permitted for the dealer. block_type is DELETED . The found SubPaaS is in DELETED status. The found SubPaaS is not in INITIAL_BLOCK status and block_type is INITIAL_BLOCK . The found SubPaaS is in INITIAL_BLOCK status and block_type is not INITIAL_BLOCK .","title":"SubPaaS actions"},{"location":"panel-api/resources/subpaas/#subdealer-sub-paas-actions","text":"API calls to interact with subdealers, also referred to as 'Sub PaaS'.","title":"Subdealer (Sub PaaS) actions"},{"location":"panel-api/resources/subpaas/#subdealer-sub-paas-object","text":"{ \"subpaas_id\" : 18 , \"title\" : \"SubppaasTitle\" , \"jur_name\" : \"SubppaasJurName\" , \"login\" : \"subpaaslogin\" , \"creation_date\" : \"2018-11-15\" , \"block_type\" : \"NOT_BLOCKED\" , \"users_count\" : 2 , \"active_users_count\" : 1 , \"trackers_count\" : 0 , \"active_trackers_count\" : 0 , \"contact_fio\" : \"fio\" , \"contact_post\" : \"post\" } subpaas_id - int. SubPaas id. title - string. SubPaas' name. jur_name - string. Legal company name. creation_date - string. Creation date. block_type - enum . Panel and Subpaas' users block status. One of: \"NOT_BLOCKED\", \"INITIAL_BLOCK\", \"BLOCK_LOGIN\" or \"CLIENTS_BLOCKED\". users_count - int. Count of users. active_users_count - int. Count of active users. trackers_count - int. All devices of SubPaas. active_trackers_count - int. Active devices of SubPaas. contact_fio - string. Contact person. contact_post - string. Contact post (position). contact_phone - string. Contact's phone.","title":"Subdealer (Sub PaaS) object"},{"location":"panel-api/resources/subpaas/#api-actions","text":"API base path: panel/subpaas .","title":"API actions"},{"location":"panel-api/resources/subpaas/#create","text":"Creates a subPaaS. After creation, its dealer_block_type will be in INITIAL_BLOCK status.","title":"create"},{"location":"panel-api/resources/subpaas/#list","text":"Gets a list of all SubPaaS accounts of a Dealer. Dealer ID will be taken from the session key.","title":"list"},{"location":"panel-api/resources/subpaas/#read","text":"Gets Sub PaaS account info by its id.","title":"read"},{"location":"panel-api/resources/subpaas/#update","text":"Updates a SubPaas account with the specified ID.","title":"update"},{"location":"panel-api/resources/subpaas/password/","text":"Change password \u00b6 API base path: panel/subpaas/password . API call to change the password of a Subdealer (SubPaaS) account. API actions \u00b6 API base path: panel/subpaas/password . change \u00b6 Changes SubPaaS password. Parameters \u00b6 name description type subpaas_id Subpaas' ID. int new_password New subpaas' password, 6 to 20 printable characters. string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/subpaas/password/change' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"subpaas_id\": 99874, \"new_password\": \"Fr1d@Y$\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 13 \u2013 The dealer is not paas. The dealer has different status than NOT_BLOCKED . The dealer's tariff does not allow subpaases. Found subpaas is in DELETED status.","title":"Password"},{"location":"panel-api/resources/subpaas/password/#change-password","text":"API base path: panel/subpaas/password . API call to change the password of a Subdealer (SubPaaS) account.","title":"Change password"},{"location":"panel-api/resources/subpaas/password/#api-actions","text":"API base path: panel/subpaas/password .","title":"API actions"},{"location":"panel-api/resources/subpaas/password/#change","text":"Changes SubPaaS password.","title":"change"},{"location":"panel-api/resources/subpaas/session/","text":"Subpaas session key \u00b6 API call to create a SubPaaS session key. API actions \u00b6 API base path: panel/subpaas/session . create \u00b6 Creates a SubPaaS session. Parameters \u00b6 name description type subpaas_id Subpaas' ID. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/subpaas/session/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"subpaas_id\": 97834}' HTTP GET https://api.navixy.com/v2/panel/subpaas/session/create?hash=fa7bf873fab9333144e171372a321b06&subpaas_id=97834 Response \u00b6 { \"success\" : true , \"hash\" : \"600d4a5400000000600d4a5400000000\" } Errors \u00b6 13 \u2013 The dealer is not PaaS type. The dealer has a status other than NOT_BLOCKED . The dealer's tariff does not allow SubPaaS accounts. The found SubPaaS is not in NOT_BLOCKED status.","title":"Session"},{"location":"panel-api/resources/subpaas/session/#subpaas-session-key","text":"API call to create a SubPaaS session key.","title":"Subpaas session key"},{"location":"panel-api/resources/subpaas/session/#api-actions","text":"API base path: panel/subpaas/session .","title":"API actions"},{"location":"panel-api/resources/subpaas/session/#create","text":"Creates a SubPaaS session.","title":"create"},{"location":"panel-api/resources/user/","text":"User \u00b6 API calls on work with users in the admin panel. User object structure \u00b6 { \"dealer_id\" : 5001 , \"activated\" : true , \"verified\" : true , \"login\" : \"user@test.com\" , \"first_name\" : \"John\" , \"middle_name\" : \"William\" , \"last_name\" : \"Smith\" , \"legal_name\" : \"E. Biasi GmbH\" , \"legal_type\" : \"legal_entity\" , \"phone\" : \"491761234567\" , \"post_country\" : \"Germany\" , \"post_index\" : \"61169\" , \"post_region\" : \"Hessen\" , \"post_city\" : \"Wiesbaden\" , \"post_street_address\" : \"Marienplatz 2\" , \"registered_country\" : \"Germany\" , \"registered_index\" : \"61169\" , \"registered_region\" : \"Hessen\" , \"registered_city\" : \"Wiesbaden\" , \"registered_street_address\" : \"Marienplatz 2\" , \"state_reg_num\" : \"12-3456789\" , \"tin\" : \"1131145180\" , \"okpo_code\" : \"93281776\" , \"iec\" : \"773101001\" , \"id\" : 38935 , \"balance\" : 10.01 , \"bonus\" : 0 , \"creation_date\" : \"2021-03-01 13:00:00\" , \"trackers_count\" : 10 , \"comment\" : \"about user\" } dealer_id - int. Dealer ID. activated - boolean. true if user activated (allowed to login). verified - boolean. true if user's email verified. login - string. User email as login. Must be valid unique email address. first_name - string. Contact person first name. middle_name - string. Contact person middle name. last_name - string. Contact person last name. legal_name - string. User legal name (for \"legal_entity\" only). legal_type - enum . Can be \"legal_entity\", \"individual\" or \"sole_trader\". phone - string. Contact phone 10-15 digits without \"+\" sign. post_country - string. Country part of user's post address. post_index - string. Index part of user's post address. post_region - string. Region part of user's post address. post_city - string. City from postal address. post_street_address - string. Street address. registered_country - string. Country part of user's registered address. registered_index - string. Index part of user's registered address. registered_region - string. Region part of user's registered address. registered_city - string. City from registered address. registered_street_address - string. User's registered address. state_reg_num - string. State registration number. E.g. EIN in the USA, OGRN in the Russia. 15 characters max. tin - string. Taxpayer identification number aka \"VATIN\". okpo_code - string, optional. All-Russian Classifier of Enterprises and Organizations, used in Russia for \"legal_entity\" or \"sole_trader\". iec - string, optional. Industrial Enterprises Classifier aka \"KPP\" (used in Russia. for \"legal_entity\" only). id - int. User id. Next fields are read-only, they should not be used in user/update and user/create . balance - double. User balance. bonus - double. User bonus balance. creation_date - date/time . Date and time when user created, in UTC. trackers_count - user trackers count. comment - comment about user (when creating and editing, the field must be separate from this object). Discount object structure \u00b6 { \"value\" : 5.5 , \"min_trackers\" : 10 , \"end_date\" : \"2021-03-01\" , \"strategy\" : \"sum_with_progressive\" } value - double. Personal discount percent, min 0 max 100. min_trackers - int. Minimum active trackers to apply discount, min 0. end_date - date/time . Discount end date, null means open date, nullable. strategy - enum . One of \"no_summing\", \"sum_with_progressive\".\\ API actions \u00b6 API path: panel/user . change_password \u00b6 Changes password of a user. required permissions : users: \"update\" . Parameters \u00b6 name description type user_id ID of a user. int password User's new password, 6 to 20 printable characters. string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/change_password' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"user_id\": 231432, \"password\": \"12@14Y$\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if specified user does not exist or belongs to different dealer. corrupt \u00b6 Marks user and its sub users and trackers as deleted and corrupt all user trackers. required permissions : users: \"corrupt\" . Parameters \u00b6 name description type user_id User id. int login Login of a user. Login parameter must match user login. string corrupt_clones Optional. Default is true . Remove clones of the user's trackers for other users boolean Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/corrupt' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"user_id\": 231432, \"login\": \"user@login.com\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if a user not found. 252 \u2013 Device already corrupted - if some of user's tracker already corrupted. 253 \u2013 Device has clones - if some of user's tracker has a clone and corrupt_clones is false. { \"success\" : false , \"status\" : { \"code\" : 253 , \"description\" : \"Device has clones\" } } create \u00b6 Creates a new user. required permissions : [users: \"corrupt\", \"global\"] . users: \"global\" - Optional. Allows creating users of users, not only owned by a current dealer (use user.dealer_id parameter for other owners). Parameters \u00b6 name description type user User object without the id , dealer_id , comment and read-only fields. JSON object time_zone User timezone. string locale User locale. string password User password, 6 to 20 printable characters. string discount Discount object . JSON object default_tariff_id Optional. ID of a default tariff plan for user's trackers int comment Comment String, max length 255, only printable characters If user.verified not passed then it set equal to user.activated . Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"user\": {\"activated\": true, \"verified\": true, \"login\": \"user@test.com\", \"first_name\": \"John\", \"middle_name\": \"William\", \"last_name\": \"Smith\", \"legal_name\": \"E. Biasi GmbH\", \"legal_type\": \"legal_entity\", \"phone\": \"491761234567\", \"post_country\": \"Germany\", \"post_index\": \"61169\", \"post_region\": \"Hessen\", \"post_city\": \"Wiesbaden\", \"post_street_address\": \"Marienplatz 2\", \"registered_country\": \"Germany\", \"registered_index\": \"61169\", \"registered_region\": \"Hessen\", \"registered_city\": \"Wiesbaden\", \"registered_street_address\": \"Marienplatz 2\", \"state_reg_num\": \"12-3456789\", \"tin\": \"1131145180\", \"okpo_code\": \"93281776\", \"iec\": \"773101001\"}, \"time_zone\": \"Europe/Moscow\", \"locale\": \"en_US\", \"password\": \"12@14Y$\", \"discount\": {\"value\": 5.5, \"min_trackers\": 10, \"end_date\": null, \"strategy\": \"sum_with_progressive\"}, \"comment\": \"about user\"}' Response \u00b6 { \"success\" : true , \"id\" : 15534 } id - int. An ID of the created user. Errors \u00b6 206 - Login already in use \u2013 if this email already registered. export \u00b6 Returns list of all users belonging to dealer as file. If filter is used (parameter filter is passed, it isn't empty and does not consist only of space characters), entities will be returned only if filter string is contained within one of the following fields: id , login , last_name , first_name , middle_name , phone , post_city , post_region , post_country , post_index , post_street_address , registered_country , registered_index , registered_region , registered_city , registered_street_address , tin , iec , legal_name . required permissions : users: \"read\" . Parameters \u00b6 name description type filter Optional. Text filter string. string order_by Optional. Specify list ordering. May be one of: id , login , last_name , balance , bonus , phone , post_city . Default is id . string ascending Optional. If true , ordering will be ascending, descending otherwise. Default is true . boolean limit Optional. Max number of records to return, used for pagination. int offset Optional. Starting offset, used for pagination. Default is 0 . int hide_inactive Optional. If true only activated users will be returned. Default is false . boolean format Optional. Format of exported list. Can be xlsx or csv . Default is xlsx . string columns Optional. A list of columns to export. Default is [\"id\", \"login\", \"first_name\", \"middle_name\", \"last_name\", \"phone\"] . string array About user object structure see above . Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/export' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/user/export?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 XLSX or CSV file download starts. Errors \u00b6 General types only. list \u00b6 Returns a list of all users belonging to dealer. If filter is used (parameter filter is passed, it is not empty and does not consist only of space characters), entities will be returned only if filter string is contained within one of the following fields: id , login , last_name , first_name , middle_name , phone , post_city , post_region , post_country , post_index , post_street_address , registered_country , registered_index , registered_region , registered_city , registered_street_address , tin , iec , legal_name . required permissions : users: \"read\" . Parameters \u00b6 name description type filter Optional. Text filter string. string order_by Optional. Specify list ordering. May be one of: id , login , last_name , balance , bonus , phone , post_city . Default is id . string ascending Optional. If true , ordering will be ascending, descending otherwise. Default is true . boolean limit Optional. Max number of records to return, used for pagination. int offset Optional. Starting offset, used for pagination. Default is 0 . int hide_inactive Optional. If true only activated users will be returned. Default is false . boolean Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\"}' HTTP GET https://api.navixy.com/v2/panel/user/list?hash=fa7bf873fab9333144e171372a321b06 Response \u00b6 { \"success\" : true , \"list\" : [{ \"dealer_id\" : 5001 , \"activated\" : true , \"verified\" : true , \"login\" : \"user@test.com\" , \"first_name\" : \"John\" , \"middle_name\" : \"William\" , \"last_name\" : \"Smith\" , \"legal_name\" : \"E. Biasi GmbH\" , \"legal_type\" : \"legal_entity\" , \"phone\" : \"491761234567\" , \"post_country\" : \"Germany\" , \"post_index\" : \"61169\" , \"post_region\" : \"Hessen\" , \"post_city\" : \"Wiesbaden\" , \"post_street_address\" : \"Marienplatz 2\" , \"registered_country\" : \"Germany\" , \"registered_index\" : \"61169\" , \"registered_region\" : \"Hessen\" , \"registered_city\" : \"Wiesbaden\" , \"registered_street_address\" : \"Marienplatz 2\" , \"state_reg_num\" : \"12-3456789\" , \"tin\" : \"1131145180\" , \"okpo_code\" : \"93281776\" , \"iec\" : \"773101001\" , \"id\" : 38935 , \"balance\" : 10.01 , \"bonus\" : 0 , \"creation_date\" : \"2021-03-01 13:00:00\" , \"trackers_count\" : 10 , \"comment\" : \"about user\" }], \"count\" : 1 } list - array of JSON objects. A list of user objects . count - int. Total number of records (ignoring offset and limit). Errors \u00b6 General types only. read \u00b6 Returns user info by its id. required permissions : users: \"read\" . Parameters \u00b6 name description type user_id An ID of a user to read. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"user_id\": 231485}' HTTP GET https://api.navixy.com/v2/panel/user/read?hash=fa7bf873fab9333144e171372a321b06&user_id=231485 Response \u00b6 { \"success\" : true , \"value\" : { \"dealer_id\" : 5001 , \"activated\" : true , \"verified\" : true , \"login\" : \"user@test.com\" , \"first_name\" : \"John\" , \"middle_name\" : \"William\" , \"last_name\" : \"Smith\" , \"legal_name\" : \"E. Biasi GmbH\" , \"legal_type\" : \"legal_entity\" , \"phone\" : \"491761234567\" , \"post_country\" : \"Germany\" , \"post_index\" : \"61169\" , \"post_region\" : \"Hessen\" , \"post_city\" : \"Wiesbaden\" , \"post_street_address\" : \"Marienplatz 2\" , \"registered_country\" : \"Germany\" , \"registered_index\" : \"61169\" , \"registered_region\" : \"Hessen\" , \"registered_city\" : \"Wiesbaden\" , \"registered_street_address\" : \"Marienplatz 2\" , \"state_reg_num\" : \"12-3456789\" , \"tin\" : \"1131145180\" , \"okpo_code\" : \"93281776\" , \"iec\" : \"773101001\" , \"id\" : 38935 , \"balance\" : 10.01 , \"bonus\" : 0 , \"creation_date\" : \"2021-03-01 13:00:00\" , \"trackers_count\" : 10 , \"comment\" : \"about user\" }, \"discount\" : { \"value\" : 5.5 , \"min_trackers\" : 10 , \"end_date\" : \"2021-03-01\" , \"strategy\" : \"sum_with_progressive\" }, \"default_tariff_id\" : 123 } value - JSON object. User object described above. discount - JSON object. Discount object described above. default_tariff_id - integer number, nullable. ID of a tariff plan which will be applied to user's trackers by default. Errors \u00b6 201 - Not found in the database \u2013 when user with specified ID not found or belongs to other dealer. update \u00b6 Updates existing user with new field values (see user object ). User must exist and must belong to authorized dealer. Changing of legal_type is not permitted, i.e. this field will not be changed. required permissions : users: \"update\" . Parameters \u00b6 name description type user User object without comment and read-only fields. JSON object discount Discount object . JSON object default_tariff_id Optional. ID of a default tariff plan for user's trackers int comment Comment String, max length 255, only printable characters If user.verified not passed then it set equal to user.activated . Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"user\": {\"dealer_id\": 5001, \"activated\": true, \"verified\": true, \"login\": \"user@test.com\", \"first_name\": \"John\", \"middle_name\": \"William\", \"last_name\": \"Smith\", \"legal_name\": \"E. Biasi GmbH\", \"legal_type\": \"legal_entity\", \"phone\": \"491761234567\", \"post_country\": \"Germany\", \"post_index\": \"61169\", \"post_region\": \"Hessen\", \"post_city\": \"Wiesbaden\", \"post_street_address\": \"Marienplatz 2\", \"registered_country\": \"Germany\", \"registered_index\": \"61169\", \"registered_region\": \"Hessen\", \"registered_city\": \"Wiesbaden\", \"registered_street_address\": \"Marienplatz 2\", \"state_reg_num\": \"12-3456789\", \"tin\": \"1131145180\", \"okpo_code\": \"93281776\", \"iec\": \"773101001\", \"id\": 38935}, \"discount\": {\"value\": 5.5, \"min_trackers\": 10, \"end_date\": null, \"strategy\": \"sum_with_progressive\"}, \"comment\": \"about user\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 - Not found in the database \u2013 if specified user does not exist or belongs to different dealer. 206 - Login already in use \u2013 if specified \"login\" is used by another user. session/create \u00b6 Creates an interface session for specified user and returns the hash for the created session. required permissions : [users: \"update\", user_sessions: [\"create\", \"global\"] . user_sessions: \"global\" - Optional. Allows sessions of users creation, not only owned by a current dealer. Parameters \u00b6 name description type user_id An ID of a user to create session. int Examples \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/session/create' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"user_id\": 231485}' HTTP GET https://api.navixy.com/v2/panel/user/session/create?hash=fa7bf873fab9333144e171372a321b06&user_id=231485 Response \u00b6 { \"success\" : true , \"hash\" : \"a2caa32267f028bd41b982980467132c\" } hash - string. Hash of the created session. Errors \u00b6 201 - Not found in the database \u2013 if specified user does not exist or belongs to different dealer. transaction/change_balance \u00b6 Changes user balance (increase or decrease) or bonus and write this change in transactions (type = payment , subtype = partner ). New balance (bonus) must be not negative. required permissions : [users: \"update\", transactions: \"create\"] . Parameters \u00b6 name description type user_id An ID of user whom balance changed. int amount Amount to change. Can be negative. double (2 digits after decimal mark) type Type of balance to change. Can be \"balance\" or \"bonus\". enum text Description of transaction. string (min length is 5 chars) Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/transaction/change_balance' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"user_id\": 231485, \"amount\": 2.05, \"type\": \"balance\", \"text\": \"additional payment\"}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database \u2013 if user not found or not owned by a current dealer. 251 \u2013 Insufficient funds (403) \u2013 if user have not enough funds to withdraw passed (negative) amount. transaction/list \u00b6 Gets list of user's billing transactions for the specified period. Same as /transaction/list from main api. required permissions : [users: \"read\", transactions: \"read\"] . Parameters \u00b6 name description type user_id An ID of user whom transactions listed. must be owned by a current dealer. int from Start date/time for searching. date/time to End date/time for searching. Must be after \"from\" date. date/time limit Optional. A maximum number of the returned transactions. int Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/transaction/list' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"fa7bf873fab9333144e171372a321b06\", \"user_id\": 231485, \"from\": \"2020-02-03 03:04:00\", \"to\": \"2021-02-03 03:04:00\"}' Response \u00b6 { \"success\" : true , \"list\" : [{ \"description\" : \"Recharge bonus balance during tracker registration\" , \"type\" : \"bonus_charge\" , \"subtype\" : \"register\" , \"timestamp\" : \"2021-01-28 08:16:40\" , \"user_id\" : 12203 , \"dealer_id\" : 5001 , \"tracker_id\" : 303126 , \"amount\" : -10.0000 , \"new_balance\" : 800.0000 , \"old_balance\" : 810.0000 , \"bonus_amount\" : 10.0000 , \"new_bonus\" : 10.0000 , \"old_bonus\" : 0.0000 }] } list - array of objects. List of transaction objects. description - string. Transaction description. type - enum . Type of transaction. subtype - enum . Subtype of transaction. timestamp - date/time . When transaction created. user_id - int. ID of a user which made a transaction. dealer_id - int. ID of a dealer. tracker_id - int. Tracker id. 0 if transaction not associated with tracker. amount - double. Amount of money in transaction, can be negative. e.g. -10.0000 means 10 money units removed from user's balance. new_balance - double. User's money balance after transaction. old_balance - double. User's money balance before transaction. bonus_amount - double. Amount of bonus used in transaction, can be negative. e.g. 10.0000 means 10 bonuses units added to user's bonus balance. new_bonus - double. User's bonus balance after transaction. old_bonus - double. User's bonus balance before transaction. Errors \u00b6 201 \u2013 Not found in the database - if user not found or not owned by a current dealer. upload \u00b6 Upload users from CSV or XLS file. MUST be a POST multipart request (multipart/form-data), with one of the parts being a CSV or XLS file upload (with the name \"file\"). CSV column separator is ; . Columns header for CSV and XLS (headers with * is required): Email address*;Password*;Status*;Legal status*;Surname*;Name*;Middle name;Phone number;Comment;Country;Region;City;Street, address;Zip code;Legal name;Tax number;IEC;Registration country;Registration region;Registration city;Registration address;Registration zip code;Discount;End date of discount;Device limit For RU locale: \u0410\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b*;\u041f\u0430\u0440\u043e\u043b\u044c*;\u0421\u0442\u0430\u0442\u0443\u0441*;\u042e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441*;\u0424\u0430\u043c\u0438\u043b\u0438\u044f*;\u0418\u043c\u044f*;\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e;\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430;\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439;\u0421\u0442\u0440\u0430\u043d\u0430;\u0420\u0435\u0433\u0438\u043e\u043d;\u0413\u043e\u0440\u043e\u0434;\u0423\u043b\u0438\u0446\u0430, \u0434\u043e\u043c, \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430;\u041f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441;\u042e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435;\u0418\u041d\u041d;\u041a\u041f\u041f;\u041e\u0413\u0420\u041d;\u041e\u041a\u041f\u041e;\u0421\u0442\u0440\u0430\u043d\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438;\u0420\u0435\u0433\u0438\u043e\u043d \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438;\u0413\u043e\u0440\u043e\u0434 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438;\u0423\u043b\u0438\u0446\u0430, \u0434\u043e\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438;\u041f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438;\u0421\u043a\u0438\u0434\u043a\u0430;\u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441\u043a\u0438\u0434\u043a\u0438;\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432 \u0434\u043b\u044f \u0441\u043a\u0438\u0434\u043a\u0438 Legal status must be one of the following numbers: 1 - individual 2 - legal entity 3 - sole trader For legal entity (2) and sole trader (3) in addition to the required * the following columns must be present and filled with data: Country;Region;City;Street, address;Zip code;Legal name;Registration region;Registration city;Registration address;Registration zip code Except Legal name for sole trader (3) it is not required. The remaining columns are optional and can be omitted. All columns can be in any order. New users will be created with the time zone specified in default_user_time_zone service setting . required permissions : [users: \"create\"] . Parameters \u00b6 name description type file A XLS or CSV file containing users data. File upload redirect_target Optional URL to redirect. If redirect_target passed return redirect to <redirect_target>?response=<urlencoded_response_json> . string Response \u00b6 { \"success\" : true , \"total\" : 1 , \"errors\" : 0 } Errors \u00b6 Most error responses include row_number - the line number in the file where the error was found. 206 \u2013 Login already in use \u2013 if this email already registered. { \"row_number\" : 2 , \"status\" : { \"code\" : 206 , \"description\" : \"Login already in use\" }, \"success\" : false } 273 \u2013 Duplicate login in source file. { \"row_number\" : 4 , \"status\" : { \"code\" : 273 , \"description\" : \"Duplicate login\" }, \"success\" : false } 274 \u2013 Empty data file. No rows to load were found in the source file. { \"status\" : { \"code\" : 274 , \"description\" : \"Empty data file\" }, \"success\" : false } 7 \u2013 Invalid parameters. Required columns not found or there has data validation errors. { \"errors\" : [ { \"error\" : \"required column not found\" , \"parameter\" : \"users_import.password\" }, { \"error\" : \"required column not found\" , \"parameter\" : \"users_import.email\" } ], \"row_number\" : 1 , \"status\" : { \"code\" : 7 , \"description\" : \"Invalid parameters\" }, \"success\" : false } { \"errors\" : [ { \"error\" : \"E-mail must be valid\" , \"parameter\" : \"user.login\" } ], \"row_number\" : 2 , \"status\" : { \"code\" : 7 , \"description\" : \"Invalid parameters\" }, \"success\" : false }","title":"User actions"},{"location":"panel-api/resources/user/#user","text":"API calls on work with users in the admin panel.","title":"User"},{"location":"panel-api/resources/user/#user-object-structure","text":"{ \"dealer_id\" : 5001 , \"activated\" : true , \"verified\" : true , \"login\" : \"user@test.com\" , \"first_name\" : \"John\" , \"middle_name\" : \"William\" , \"last_name\" : \"Smith\" , \"legal_name\" : \"E. Biasi GmbH\" , \"legal_type\" : \"legal_entity\" , \"phone\" : \"491761234567\" , \"post_country\" : \"Germany\" , \"post_index\" : \"61169\" , \"post_region\" : \"Hessen\" , \"post_city\" : \"Wiesbaden\" , \"post_street_address\" : \"Marienplatz 2\" , \"registered_country\" : \"Germany\" , \"registered_index\" : \"61169\" , \"registered_region\" : \"Hessen\" , \"registered_city\" : \"Wiesbaden\" , \"registered_street_address\" : \"Marienplatz 2\" , \"state_reg_num\" : \"12-3456789\" , \"tin\" : \"1131145180\" , \"okpo_code\" : \"93281776\" , \"iec\" : \"773101001\" , \"id\" : 38935 , \"balance\" : 10.01 , \"bonus\" : 0 , \"creation_date\" : \"2021-03-01 13:00:00\" , \"trackers_count\" : 10 , \"comment\" : \"about user\" } dealer_id - int. Dealer ID. activated - boolean. true if user activated (allowed to login). verified - boolean. true if user's email verified. login - string. User email as login. Must be valid unique email address. first_name - string. Contact person first name. middle_name - string. Contact person middle name. last_name - string. Contact person last name. legal_name - string. User legal name (for \"legal_entity\" only). legal_type - enum . Can be \"legal_entity\", \"individual\" or \"sole_trader\". phone - string. Contact phone 10-15 digits without \"+\" sign. post_country - string. Country part of user's post address. post_index - string. Index part of user's post address. post_region - string. Region part of user's post address. post_city - string. City from postal address. post_street_address - string. Street address. registered_country - string. Country part of user's registered address. registered_index - string. Index part of user's registered address. registered_region - string. Region part of user's registered address. registered_city - string. City from registered address. registered_street_address - string. User's registered address. state_reg_num - string. State registration number. E.g. EIN in the USA, OGRN in the Russia. 15 characters max. tin - string. Taxpayer identification number aka \"VATIN\". okpo_code - string, optional. All-Russian Classifier of Enterprises and Organizations, used in Russia for \"legal_entity\" or \"sole_trader\". iec - string, optional. Industrial Enterprises Classifier aka \"KPP\" (used in Russia. for \"legal_entity\" only). id - int. User id. Next fields are read-only, they should not be used in user/update and user/create . balance - double. User balance. bonus - double. User bonus balance. creation_date - date/time . Date and time when user created, in UTC. trackers_count - user trackers count. comment - comment about user (when creating and editing, the field must be separate from this object).","title":"User object structure"},{"location":"panel-api/resources/user/#discount-object-structure","text":"{ \"value\" : 5.5 , \"min_trackers\" : 10 , \"end_date\" : \"2021-03-01\" , \"strategy\" : \"sum_with_progressive\" } value - double. Personal discount percent, min 0 max 100. min_trackers - int. Minimum active trackers to apply discount, min 0. end_date - date/time . Discount end date, null means open date, nullable. strategy - enum . One of \"no_summing\", \"sum_with_progressive\".\\","title":"Discount object structure"},{"location":"panel-api/resources/user/#api-actions","text":"API path: panel/user .","title":"API actions"},{"location":"panel-api/resources/user/#change_password","text":"Changes password of a user. required permissions : users: \"update\" .","title":"change_password"},{"location":"panel-api/resources/user/#corrupt","text":"Marks user and its sub users and trackers as deleted and corrupt all user trackers. required permissions : users: \"corrupt\" .","title":"corrupt"},{"location":"panel-api/resources/user/#create","text":"Creates a new user. required permissions : [users: \"corrupt\", \"global\"] . users: \"global\" - Optional. Allows creating users of users, not only owned by a current dealer (use user.dealer_id parameter for other owners).","title":"create"},{"location":"panel-api/resources/user/#export","text":"Returns list of all users belonging to dealer as file. If filter is used (parameter filter is passed, it isn't empty and does not consist only of space characters), entities will be returned only if filter string is contained within one of the following fields: id , login , last_name , first_name , middle_name , phone , post_city , post_region , post_country , post_index , post_street_address , registered_country , registered_index , registered_region , registered_city , registered_street_address , tin , iec , legal_name . required permissions : users: \"read\" .","title":"export"},{"location":"panel-api/resources/user/#list","text":"Returns a list of all users belonging to dealer. If filter is used (parameter filter is passed, it is not empty and does not consist only of space characters), entities will be returned only if filter string is contained within one of the following fields: id , login , last_name , first_name , middle_name , phone , post_city , post_region , post_country , post_index , post_street_address , registered_country , registered_index , registered_region , registered_city , registered_street_address , tin , iec , legal_name . required permissions : users: \"read\" .","title":"list"},{"location":"panel-api/resources/user/#read","text":"Returns user info by its id. required permissions : users: \"read\" .","title":"read"},{"location":"panel-api/resources/user/#update","text":"Updates existing user with new field values (see user object ). User must exist and must belong to authorized dealer. Changing of legal_type is not permitted, i.e. this field will not be changed. required permissions : users: \"update\" .","title":"update"},{"location":"panel-api/resources/user/#sessioncreate","text":"Creates an interface session for specified user and returns the hash for the created session. required permissions : [users: \"update\", user_sessions: [\"create\", \"global\"] . user_sessions: \"global\" - Optional. Allows sessions of users creation, not only owned by a current dealer.","title":"session/create"},{"location":"panel-api/resources/user/#transactionchange_balance","text":"Changes user balance (increase or decrease) or bonus and write this change in transactions (type = payment , subtype = partner ). New balance (bonus) must be not negative. required permissions : [users: \"update\", transactions: \"create\"] .","title":"transaction/change_balance"},{"location":"panel-api/resources/user/#transactionlist","text":"Gets list of user's billing transactions for the specified period. Same as /transaction/list from main api. required permissions : [users: \"read\", transactions: \"read\"] .","title":"transaction/list"},{"location":"panel-api/resources/user/#upload","text":"Upload users from CSV or XLS file. MUST be a POST multipart request (multipart/form-data), with one of the parts being a CSV or XLS file upload (with the name \"file\"). CSV column separator is ; . Columns header for CSV and XLS (headers with * is required): Email address*;Password*;Status*;Legal status*;Surname*;Name*;Middle name;Phone number;Comment;Country;Region;City;Street, address;Zip code;Legal name;Tax number;IEC;Registration country;Registration region;Registration city;Registration address;Registration zip code;Discount;End date of discount;Device limit For RU locale: \u0410\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b*;\u041f\u0430\u0440\u043e\u043b\u044c*;\u0421\u0442\u0430\u0442\u0443\u0441*;\u042e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441*;\u0424\u0430\u043c\u0438\u043b\u0438\u044f*;\u0418\u043c\u044f*;\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e;\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430;\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439;\u0421\u0442\u0440\u0430\u043d\u0430;\u0420\u0435\u0433\u0438\u043e\u043d;\u0413\u043e\u0440\u043e\u0434;\u0423\u043b\u0438\u0446\u0430, \u0434\u043e\u043c, \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430;\u041f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441;\u042e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435;\u0418\u041d\u041d;\u041a\u041f\u041f;\u041e\u0413\u0420\u041d;\u041e\u041a\u041f\u041e;\u0421\u0442\u0440\u0430\u043d\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438;\u0420\u0435\u0433\u0438\u043e\u043d \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438;\u0413\u043e\u0440\u043e\u0434 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438;\u0423\u043b\u0438\u0446\u0430, \u0434\u043e\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438;\u041f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438;\u0421\u043a\u0438\u0434\u043a\u0430;\u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441\u043a\u0438\u0434\u043a\u0438;\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432 \u0434\u043b\u044f \u0441\u043a\u0438\u0434\u043a\u0438 Legal status must be one of the following numbers: 1 - individual 2 - legal entity 3 - sole trader For legal entity (2) and sole trader (3) in addition to the required * the following columns must be present and filled with data: Country;Region;City;Street, address;Zip code;Legal name;Registration region;Registration city;Registration address;Registration zip code Except Legal name for sole trader (3) it is not required. The remaining columns are optional and can be omitted. All columns can be in any order. New users will be created with the time zone specified in default_user_time_zone service setting . required permissions : [users: \"create\"] .","title":"upload"},{"location":"panel-api/resources/user/menu/","text":"Customizable user menu \u00b6 Menu customization allows you to customize which sections will be available to all PaaS users or some specific ones. Entity description \u00b6 For now, menu customization is only available for one application. navixy_web: \u00b6 Menu description for Navixy Web UI. { \"application\" : \"navixy_web\" , \"account_menu\" : [ { \"name\" : \"subusers\" }, { \"name\" : \"info\" }, { \"name\" : \"bills\" }, { \"name\" : \"entities\" }, { \"name\" : \"auth-journal\" }, { \"name\" : \"plugins\" }, { \"name\" : \"tags\" } ], \"main_menu\" : [ { \"name\" : \"online_main\" , \"items\" : [ { \"name\" : \"online\" }, { \"name\" : \"mix\" } ] }, { \"name\" : \"reports_main\" , \"items\" : [ { \"name\" : \"reports\" }, { \"name\" : \"schedule\" } ] }, { \"name\" : \"fleet_main\" , \"items\" : [ { \"name\" : \"fleet\" }, { \"name\" : \"fleet_app\" }, { \"name\" : \"fleetStaff\" }, { \"name\" : \"driver_journal\" }, { \"name\" : \"driver_skills\" }, { \"name\" : \"service_works\" } ] }, { \"name\" : \"tasks_main\" , \"items\" : [ { \"name\" : \"tasks\" }, { \"name\" : \"tasks_app\" }, { \"name\" : \"templates\" }, { \"name\" : \"forms\" }, { \"name\" : \"places\" }, { \"name\" : \"staff\" }, { \"name\" : \"departments\" }, { \"name\" : \"process\" }, { \"name\" : \"oldTasks\" } ] }, { \"name\" : \"applications\" } ], \"footer_menu\" : [ { \"name\" : \"registration\" }, { \"name\" : \"chat\" }, { \"name\" : \"notifications\" }, { \"name\" : \"configuration\" }, { \"name\" : \"help\" }, { \"name\" : \"chat_support\" } ] } API actions \u00b6 API base path: panel/user/menu read \u00b6 Reads the menu description specified for a particular user. Parameters \u00b6 name description type user_id ID of a user (required master user) int application Application ID, e.g. \"navixy_web\" string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/menu/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"user_id\": 231432, \"application\": \"navixy_web\"}' Response \u00b6 { \"success\" : true , \"value\" : <cus t omizable_user_me nu > } Errors \u00b6 201 \u2013 Not found in the database - if a master user not found. update \u00b6 Updates the menu description specified for a particular user. Parameters \u00b6 name description type user_id ID of a user (required master user) int value A new value of menu description JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/menu/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"user_id\": 231432, \"value\": {\"application\":\"navixy_web\",\"account_menu\":[],\"main_menu\":[],\"footer_menu\":[]}}' Response \u00b6 { \"success\" : true } Errors \u00b6 201 \u2013 Not found in the database - if a master user not found. default/read \u00b6 Reads the default menu description for all users. Parameters \u00b6 name description type application Application ID, e.g. \"navixy_web\" string Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/menu/default/read' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"application\": \"navixy_web\"}' Response \u00b6 { \"success\" : true , \"value\" : <cus t omizable_user_me nu > } default/update \u00b6 Updates the default menu description for all users. Parameters \u00b6 name description type value A new value of menu description JSON object Example \u00b6 cURL curl -X POST 'https://api.navixy.com/v2/panel/user/menu/default/update' \\ -H 'Content-Type: application/json' \\ -d '{\"hash\": \"22eac1c27af4be7b9d04da2ce1af111b\", \"value\": {\"application\":\"navixy_web\",\"account_menu\":[],\"main_menu\":[],\"footer_menu\":[]}}' Response \u00b6 { \"success\" : true }","title":"User menu"},{"location":"panel-api/resources/user/menu/#customizable-user-menu","text":"Menu customization allows you to customize which sections will be available to all PaaS users or some specific ones.","title":"Customizable user menu"},{"location":"panel-api/resources/user/menu/#entity-description","text":"For now, menu customization is only available for one application.","title":"Entity description"},{"location":"panel-api/resources/user/menu/#api-actions","text":"API base path: panel/user/menu","title":"API actions"},{"location":"panel-api/resources/user/menu/#read","text":"Reads the menu description specified for a particular user.","title":"read"},{"location":"panel-api/resources/user/menu/#update","text":"Updates the menu description specified for a particular user.","title":"update"},{"location":"panel-api/resources/user/menu/#defaultread","text":"Reads the default menu description for all users.","title":"default/read"},{"location":"panel-api/resources/user/menu/#defaultupdate","text":"Updates the default menu description for all users.","title":"default/update"}]}